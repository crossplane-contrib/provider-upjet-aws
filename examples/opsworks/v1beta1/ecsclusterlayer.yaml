apiVersion: opsworks.aws.upbound.io/v1beta1
kind: EcsClusterLayer
metadata:
  annotations:
    meta.upbound.io/example-id: opsworks/v1beta1/ecsclusterlayer
    upjet.upbound.io/manual-intervention: "Need try to use hooks to avoid manual intervention. This resource needs a service role with next policies (policies need more time to be attached to the role and we start create resources without policy attached): AWS OpsWorks Full Access, AWS ECS Full Access, OpsWorks CM servers, EC2 Full Access, AWS RDS Full Access, ElasticLoad Balancing Full Access. Also it will be created 17 security groups when create Stack resource and we cant delete it automatically."
  labels:
    testing.upbound.io/example-name: example
  name: example
spec:
  forProvider:
    ecsClusterArnSelector:
      matchLabels:
        testing.upbound.io/example-name: example
    stackIdSelector:
      matchLabels:
        testing.upbound.io/example-name: main
---
apiVersion: ecs.aws.upbound.io/v1beta1
kind: Cluster
metadata:
  annotations:
    meta.upbound.io/example-id: opsworks/v1beta1/ecsclusterlayer
    upjet.upbound.io/manual-intervention: "Need try to use hooks to avoid manual intervention. This resource needs a service role with next policies (policies need more time to be attached to the role and we start create resources without policy attached): AWS OpsWorks Full Access, AWS ECS Full Access, OpsWorks CM servers, EC2 Full Access, AWS RDS Full Access, ElasticLoad Balancing Full Access. Also it will be created 17 security groups when create Stack resource and we cant delete it automatically."
  labels:
    testing.upbound.io/example-name: example
  name: example
spec:
  forProvider:
    region: us-east-1
---
apiVersion: opsworks.aws.upbound.io/v1beta1
kind: Stack
metadata:
  annotations:
    meta.upbound.io/example-id: opsworks/v1beta1/ecsclusterlayer
    upjet.upbound.io/manual-intervention: "Need try to use hooks to avoid manual intervention. This resource needs a service role with next policies (policies need more time to be attached to the role and we start create resources without policy attached): AWS OpsWorks Full Access, AWS ECS Full Access, OpsWorks CM servers, EC2 Full Access, AWS RDS Full Access, ElasticLoad Balancing Full Access. Also it will be created 17 security groups when create Stack resource and we cant delete it automatically."
  labels:
    testing.upbound.io/example-name: main
  name: main
spec:
  forProvider:
    customJson: |
      {
       "opsworkstest": {
          "version": "1.0.0"
        }
      }
    defaultInstanceProfileArnSelector:
      matchLabels:
        testing.upbound.io/example-name: test_profile
    name: awesome-stack
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: vpclink
    defaultSubnetIdSelector:
      matchLabels:
        testing.upbound.io/example-name: subnet
    region: us-east-1
    serviceRoleArn: arn:aws:iam::153891904029:role/example-ops-role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: InstanceProfile
metadata:
  annotations:
    meta.upbound.io/example-id: opsworks/v1beta1/ecsclusterlayer
    upjet.upbound.io/manual-intervention: "Need try to use hooks to avoid manual intervention. This resource needs a service role with next policies (policies need more time to be attached to the role and we start create resources without policy attached): AWS OpsWorks Full Access, AWS ECS Full Access, OpsWorks CM servers, EC2 Full Access, AWS RDS Full Access, ElasticLoad Balancing Full Access. Also it will be created 17 security groups when create Stack resource and we cant delete it automatically."
  labels:
    testing.upbound.io/example-name: test_profile
  name: test-profile
spec:
  forProvider:
    role: example-ops-role
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: VPC
metadata:
  annotations:
    meta.upbound.io/example-id: opsworks/v1beta1/ecsclusterlayer
    upjet.upbound.io/manual-intervention: "Need try to use hooks to avoid manual intervention. This resource needs a service role with next policies (policies need more time to be attached to the role and we start create resources without policy attached): AWS OpsWorks Full Access, AWS ECS Full Access, OpsWorks CM servers, EC2 Full Access, AWS RDS Full Access, ElasticLoad Balancing Full Access. Also it will be created 17 security groups when create Stack resource and we cant delete it automatically."
  name: sample-vpc
  labels:
    testing.upbound.io/example-name: vpclink
spec:
  forProvider:
    region: us-east-1
    cidrBlock: 172.16.0.0/16
    tags:
      Name: DemoVpc
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  annotations:
    meta.upbound.io/example-id: opsworks/v1beta1/ecsclusterlayer
    upjet.upbound.io/manual-intervention: "Need try to use hooks to avoid manual intervention. This resource needs a service role with next policies (policies need more time to be attached to the role and we start create resources without policy attached): AWS OpsWorks Full Access, AWS ECS Full Access, OpsWorks CM servers, EC2 Full Access, AWS RDS Full Access, ElasticLoad Balancing Full Access. Also it will be created 17 security groups when create Stack resource and we cant delete it automatically."
  labels:
    testing.upbound.io/example-name: subnet
  name: sample-subnet1
spec:
  forProvider:
    region: us-east-1
    availabilityZone: us-east-1b
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: vpclink
    cidrBlock: 172.16.10.0/24