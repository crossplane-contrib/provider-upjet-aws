apiVersion: batch.aws.upbound.io/v1beta1
kind: ComputeEnvironment
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
    testing.upbound.io/example-name: sample
  name: sample
spec:
  forProvider:
    computeResources:
<<<<<<< HEAD
      instanceRoleSelector:
        matchLabels:
          testing.upbound.io/example-name: ecs_instance_role
      instanceType:
        - c4.large
      maxVcpus: 16
      minVcpus: 0
      placementGroupSelector:
        matchLabels:
          testing.upbound.io/example-name: sample_pg
      securityGroupSelector:
        matchLabels:
          testing.upbound.io/example-name: sample_sg
      subnetSelector:
        matchLabels:
          testing.upbound.io/example-name: sample_subnet
=======
      instanceRole: arn:aws:iam::<ACCOUNT_ID>:instance-profile/sample
        # matchLabels:
        #   testing.upbound.io/example-name: ecs_instance_role
      instanceType:
      - c4.large
      maxVcpus: 16
      minVcpus: 0
      # placementGroupSelector:
      #   matchLabels:
      #     testing.upbound.io/example-name: sample
      securityGroupIds:
      - sg-1234567890abcdef0
      subnets:
      - subnet-1234567890abcdef0
      - subnet-0987654321fedcba0
>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
      type: EC2
    region: us-west-1
    serviceRoleSelector:
      matchLabels:
        testing.upbound.io/example-name: aws_batch_service_role
    type: MANAGED
<<<<<<< HEAD
---
=======

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: iam.aws.upbound.io/v1beta1
kind: InstanceProfile
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
    testing.upbound.io/example-name: ecs_instance_role
  name: ecs-instance-role
spec:
  forProvider:
    roleSelector:
      matchLabels:
<<<<<<< HEAD
        testing.upbound.io/example-name: ecs_iam_role
---
=======
        testing.upbound.io/example-name: example

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
    testing.upbound.io/example-name: aws_batch_service_role
  name: aws-batch-service-role
spec:
<<<<<<< HEAD
  deletionPolicy: Orphan
  forProvider:
    assumeRolePolicy: |
      {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Principal": {
                      "Service": "batch.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
              }
          ]
      }
---
=======
  forProvider:
    assumeRolePolicy: ${data.aws_iam_policy_document.batch_assume_role.json}

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
<<<<<<< HEAD
    testing.upbound.io/example-name: ecs_iam_role
  name: ecs-instance-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Principal": {
                      "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
              }
          ]
      }
---
=======
    testing.upbound.io/example-name: ecs_instance_role
  name: ecs-instance-role
spec:
  forProvider:
    assumeRolePolicy: ${data.aws_iam_policy_document.ec2_assume_role.json}

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
<<<<<<< HEAD
    testing.upbound.io/example-name: aws_batch_service_role_attachment
  name: aws-batch-service-role
spec:
  forProvider:
    deletionPolicy: Orphan
    policyArnSelector:
      matchLabels:
        testing.upbound.io/example-name: aws_batch_service_policy
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: aws_batch_service_role
---
=======
    testing.upbound.io/example-name: aws_batch_service_role
  name: aws-batch-service-role
spec:
  forProvider:
    policyArnSelector:
      matchLabels:
        testing.upbound.io/example-name: example
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: aws_batch_service_role

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
<<<<<<< HEAD
    testing.upbound.io/example-name: ecs_instance_role_attachment
=======
    testing.upbound.io/example-name: ecs_instance_role
>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
  name: ecs-instance-role
spec:
  forProvider:
    policyArnSelector:
      matchLabels:
<<<<<<< HEAD
        testing.upbound.io/example-name: aws_ecs_service_policy
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: ecs_iam_role
---
=======
        testing.upbound.io/example-name: example
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: ecs_instance_role

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: ec2.aws.upbound.io/v1beta1
kind: PlacementGroup
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
<<<<<<< HEAD
    testing.upbound.io/example-name: sample_pg
=======
    testing.upbound.io/example-name: sample
>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
  name: sample
spec:
  forProvider:
    region: us-west-1
    strategy: cluster
<<<<<<< HEAD
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
    testing.upbound.io/example-name: aws_batch_service_policy
  name: batch-sample-user-policy
spec:
  deletionPolicy: Orphan
  forProvider:
    policy: |
      {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "AWSBatchPolicyStatement1",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:*",
                      "autoscaling:*",
                      "ecs:*",
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents",
                      "logs:DescribeLogGroups",
                      "iam:GetInstanceProfile",
                      "iam:GetRole"
                  ],
                  "Resource": "*"
              },
              {
                  "Sid": "AWSBatchPolicyStatement2",
                  "Effect": "Allow",
                  "Action": "ecs:TagResource",
                  "Resource": [
                      "arn:aws:ecs:*:*:task/*_Batch_*"
                  ]
              },
              {
                  "Sid": "AWSBatchPolicyStatement3",
                  "Effect": "Allow",
                  "Action": "iam:PassRole",
                  "Resource": [
                      "*"
                  ],
                  "Condition": {
                      "StringEquals": {
                          "iam:PassedToService": [
                              "ec2.amazonaws.com",
                              "ec2.amazonaws.com.cn",
                              "ecs-tasks.amazonaws.com"
                          ]
                      }
                  }
              },
              {
                  "Sid": "AWSBatchPolicyStatement4",
                  "Effect": "Allow",
                  "Action": "iam:CreateServiceLinkedRole",
                  "Resource": "*",
                  "Condition": {
                      "StringEquals": {
                          "iam:AWSServiceName": [
                              "spot.amazonaws.com",
                              "spotfleet.amazonaws.com",
                              "autoscaling.amazonaws.com",
                              "ecs.amazonaws.com"
                          ]
                      }
                  }
              },
              {
                  "Sid": "AWSBatchPolicyStatement5",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:CreateTags"
                  ],
                  "Resource": [
                      "*"
                  ],
                  "Condition": {
                      "StringEquals": {
                          "ec2:CreateAction": "RunInstances"
                      }
                  }
              }
          ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
    testing.upbound.io/example-name: aws_ecs_service_policy
  name: ecs-sample-user-policy
spec:
  forProvider:
    policy: |
      {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "EcsOperations",
                  "Effect": "Allow",
                  "Action": [
                      "ecs:*",
                      "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
              },
              {
                  "Sid": "EcrOperations",
                  "Effect": "Allow",
                  "Action": "ecr:GetAuthorizationToken",
                  "Resource": "*"
              }
          ]
      }
---
=======

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroup
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
<<<<<<< HEAD
    testing.upbound.io/example-name: sample_sg
  name: sample
spec:
  forProvider:
    region: us-west-1
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: sample
---
=======
    testing.upbound.io/example-name: sample
  name: sample
spec:
  forProvider:
    name: aws_batch_compute_environment_security_group
    region: us-west-1

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
<<<<<<< HEAD
    testing.upbound.io/example-name: sample_subnet
=======
    testing.upbound.io/example-name: sample
>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
  name: sample
spec:
  forProvider:
    cidrBlock: 10.1.1.0/24
    region: us-west-1
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: sample
<<<<<<< HEAD
---
=======

---

>>>>>>> d250edec9 (feat: add aws batch compute and job queue)
apiVersion: ec2.aws.upbound.io/v1beta1
kind: VPC
metadata:
  annotations:
    meta.upbound.io/example-id: batch/v1beta1/computeenvironment
  labels:
    testing.upbound.io/example-name: sample
  name: sample
spec:
  forProvider:
    cidrBlock: 10.1.0.0/16
    region: us-west-1
