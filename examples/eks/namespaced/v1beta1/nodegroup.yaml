# SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: eks.aws.m.upbound.io/v1beta1
kind: NodeGroup
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-eks-ng
  namespace: upbound-system
spec:
  forProvider:
    clusterNameRef:
      name: sample-eks-cluster
    nodeRoleArnRef:
      name: sample-node-role
    region: us-west-1
    scalingConfig:
      desiredSize: 1
      maxSize: 1
      minSize: 1
    subnetIdRefs:
      - name: sample-subnet1
      - name: sample-subnet2
---
apiVersion: iam.aws.m.upbound.io/v1beta1
kind: Role
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-node-role
  namespace: upbound-system
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
---
apiVersion: iam.aws.m.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-node-policy
  namespace: upbound-system
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
    roleRef:
      name: sample-node-role
---
apiVersion: iam.aws.m.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-node-policy-2
  namespace: upbound-system
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    roleRef:
      name: sample-node-role
---
apiVersion: iam.aws.m.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-node-policy-3
  namespace: upbound-system
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    roleRef:
      name: sample-node-role
---
apiVersion: eks.aws.m.upbound.io/v1beta1
kind: Cluster
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
    uptest.upbound.io/timeout: "2400"
  labels:
    testing.upbound.io/example-name: example
  name: sample-eks-cluster
  namespace: upbound-system
spec:
  forProvider:
    region: us-west-1
    roleArnRef:
      name: sample-eks-cluster
    vpcConfig:
      subnetIdRefs:
        - name: sample-subnet1
        - name: sample-subnet2
---
apiVersion: eks.aws.m.upbound.io/v1beta1
kind: ClusterAuth
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/cluster
  name: auth
  namespace: upbound-system
spec:
  forProvider:
    clusterNameSelector:
      matchLabels:
        testing.upbound.io/example-name: example
    region: us-west-1
  writeConnectionSecretToRef:
    name: cluster-conn
---
apiVersion: iam.aws.m.upbound.io/v1beta1
kind: Role
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-eks-cluster
  namespace: upbound-system
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "eks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
---
apiVersion: iam.aws.m.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-cluster-policy
  namespace: upbound-system
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    roleRef:
      name: sample-eks-cluster
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: Subnet
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-subnet1
  namespace: upbound-system
spec:
  forProvider:
    availabilityZone: us-west-1b
    cidrBlock: 172.16.10.0/24
    mapPublicIpOnLaunch: true
    region: us-west-1
    vpcIdRef:
      name: sample-vpc
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: Subnet
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-subnet2
  namespace: upbound-system
spec:
  forProvider:
    availabilityZone: us-west-1a
    cidrBlock: 172.16.11.0/24
    mapPublicIpOnLaunch: true
    region: us-west-1
    vpcIdRef:
      name: sample-vpc
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: Subnet
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: private-subnet
  namespace: upbound-system
spec:
  forProvider:
    availabilityZone: us-west-1b
    cidrBlock: 172.16.12.0/24
    region: us-west-1
    vpcIdRef:
      name: sample-vpc
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: RouteTable
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: example
  namespace: upbound-system
spec:
  forProvider:
    region: us-west-1
    tags:
      Name: example
    vpcIdRef:
      name: sample-vpc
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: VPC
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: sample-vpc
  namespace: upbound-system
spec:
  forProvider:
    cidrBlock: 172.16.0.0/16
    enableDnsHostnames: true
    region: us-west-1
    tags:
      Name: DemoVpc
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: InternetGateway
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: example
  namespace: upbound-system
spec:
  forProvider:
    region: us-west-1
    vpcIdRef:
      name: sample-vpc
---
apiVersion: ec2.aws.m.upbound.io/v1beta1
kind: DefaultRouteTable
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/nodegroup
  name: example
  namespace: upbound-system
spec:
  forProvider:
    defaultRouteTableIdRef:
      name: sample-vpc
    region: us-west-1
    route:
      - cidrBlock: 0.0.0.0/0
        gatewayIdRef:
          name: example
