apiVersion: emr.aws.upbound.io/v1beta1
kind: Cluster
metadata:
  annotations:
    meta.upbound.io/example-id: emr/v1beta1/cluster
    uptest.upbound.io/timeout: "3600"
  labels:
    testing.upbound.io/example-name: emr_cluster_example
  name: emr-cluster-example
spec:
  forProvider:
    name: emr-cluster-example
    releaseLabel: emr-4.6.0
    applications:
      - Spark
    ec2Attributes:
      subnetIdSelector:
        name: example_subnet
      emrManagedMasterSecurityGroupSelector:
        matchLabels: example_security_group
      emrManagedSlaveSecurityGroupSelector:
        matchLabels: example_security_group
      instanceProfileSelector:
        matchLabels: emr_profile_instance_profile
    masterInstanceGroup:
      instanceType: m5.xlarge
    coreInstanceGroup:
      instanceCount: 1
      instanceType: m5.xlarge
    bootstrapAction:
      name: runif
      path: s3://elasticmapreduce/bootstrap-actions/run-if
      args:
        - instance.isMaster=true
        - echo running on master node
    terminationProtection: false
    configurationsJson: |
      [
        {
          "Classification": "hadoop-env",
          "Configurations": [
            {
              "Classification": "export",
              "Properties": {
                "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
              }
            }
          ],
          "Properties": {}
        },
        {
          "Classification": "spark-env",
          "Configurations": [
            {
              "Classification": "export",
              "Properties": {
                "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
              }
            }
          ],
          "Properties": {}
        }
      ]
    serviceRoleSelector:
      name: example_service_role
    tags:
      for-use-with-amazon-emr-managed-policies: "true"
    region: us-west-1
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: VPC
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_vpc
  name: example-vpc
spec:
  forProvider:
    region: us-west-1
    cidrBlock: 10.0.0.0/16
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroup
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_security_group
  name: emr-master-security-group
spec:
  forProvider:
    description: Allow inbound traffic
    vpcIdSelector:
      matchLabels: example_vpc
    tags:
      for-use-with-amazon-emr-managed-policies: "true"
    region: us-west-1
    revokeRulesOnDelete: true
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroupIngressRule
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_ingress_rule
  name: example-ingress-rule
spec:
  forProvider:
    cidrIpv4: 10.0.0.0/16
    fromPort: 0
    ipProtocol: "-1"
    toPort: 65535
    region: us-west-1
    securityGroupIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example_security_group
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroupEgressRule
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_egress_rule
  name: example-egress-rule
spec:
  forProvider:
    cidrIpv4: 0.0.0.0/0
    ipProtocol: "-1"
    region: us-west-1
    securityGroupIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example_security_group
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_subnet
  name: example-subnet
spec:
  forProvider:
    region: us-west-1
    availabilityZone: us-west-1a
    vpcIdSelector:
      matchLabels: example_vpc
    cidrBlock: 10.0.0.0/20
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: InternetGateway
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  name: example-internet-gateway
spec:
  forProvider:
    vpcIdSelector:
      matchLabels: example_vpc
    region: us-west-1
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: RouteTable
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_rtb
  name: example_rtb
spec:
  forProvider:
    region: us-west-1
    vpcIdSelector:
      matchLabels: example_vpc
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: RouteTableAssociation
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_rta
  name: example-rta
spec:
  forProvider:
    region: us-west-1
    routeTableIdSelector:
      matchLabels: example_rtb
    subnetIdSelector:
      matchLabels: example_subnet
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_service_role
  name: example-service-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "elasticmapreduce.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_policy_attachment
  name: example-policy-attachment
spec:
  forProvider:
    policyArnSelector:
      matchLabels:
        testing.upbound.io/example-name: example_service_policy
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: example_service_role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_service_policy
  name: example-service-policy
spec:
  forProvider:
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CancelSpotInstanceRequests",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteTags",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcs",
              "ec2:DetachNetworkInterface",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:RequestSpotInstances",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RunInstances",
              "ec2:TerminateInstances",
              "ec2:DeleteVolume",
              "ec2:DescribeVolumeStatus",
              "ec2:DescribeVolumes",
              "ec2:DetachVolume",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListInstanceProfiles",
              "iam:ListRolePolicies",
              "iam:PassRole",
              "s3:CreateBucket",
              "s3:Get*",
              "s3:List*",
              "sdb:BatchPutAttributes",
              "sdb:Select",
              "sqs:CreateQueue",
              "sqs:Delete*",
              "sqs:GetQueue*",
              "sqs:PurgeQueue",
              "sqs:ReceiveMessage",
            ],
            "Resource": "*"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: InstanceProfile
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: instance_profile
  name: instance-profile
spec:
  forProvider:
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: instance_profile_role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: instance_profile_role
  name: instance-profile-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_policy_attachment2
  name: example-policy-attachment2
spec:
  forProvider:
    policyArnSelector:
      matchLabels:
        testing.upbound.io/example-name: example_instance_profile_policy
    roleSelector:
      matchLabels:
        testing.upbound.io/example-name: instance_profile_role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  annotations:
    uptest.upbound.io/disable-import: "true"
    meta.upbound.io/example-id: emr/v1beta1/cluster
  labels:
    testing.upbound.io/example-name: example_instance_profile_policy
  name: example-instance-profile-policy
spec:
  forProvider:
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:*",
              "dynamodb:*",
              "ec2:Describe*",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:ListBootstrapActions",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSteps",
              "kinesis:CreateStream",
              "kinesis:DeleteStream",
              "kinesis:DescribeStream",
              "kinesis:GetRecords",
              "kinesis:GetShardIterator",
              "kinesis:MergeShards",
              "kinesis:PutRecord",
              "kinesis:SplitShard",
              "rds:Describe*",
              "s3:*",
              "sdb:*",
              "sns:*",
              "sqs:*",
            ],
            "Resource": "*"
          }
        ]
      }
