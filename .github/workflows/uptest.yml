name: Uptest

on:
  issue_comment:
    types: [created]

env:
  # Common versions
  GO_VERSION: '1.19'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

jobs:
  get-example-list:
    runs-on: ubuntu-22.04
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/test-examples') }}
    outputs:
      provider_name: ${{ steps.get-example-list-name.outputs.provider-name }}
      example_list: ${{ steps.get-example-list-name.outputs.example-list }}
      example_hash: ${{ steps.get-example-list-name.outputs.example-hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout PR
        id: checkout-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          git submodule update --init --recursive
          OUTPUT=$(git log -1 --format='%H')
          echo "::set-output name=commit-sha::$OUTPUT"

      - name: Prepare The Example List
        env:
          COMMENT: ${{ github.event.comment.body }}
        id: get-example-list-name
        run: |
          PATHS=$(echo $COMMENT | sed 's/^.*\/test-examples="//g' | cut -d '"' -f 1 | sed 's/,/ /g')
          EXAMPLE_LIST=""
          for P in $PATHS; do EXAMPLE_LIST="${EXAMPLE_LIST},$(find $P -name *.yaml | tr '\n' ',')"; done

          sudo apt-get -y install coreutils
          EXAMPLE_HASH=$(echo ${EXAMPLE_LIST} | md5sum | cut -f1 -d" ")

          echo "Examples: ${EXAMPLE_LIST:1}"
          echo "Example Hash: ${EXAMPLE_HASH}"

          echo "::set-output name=example-list::${EXAMPLE_LIST:1}"
          echo "::set-output name=example-hash::${EXAMPLE_HASH}"

      - name: Create Pending Status Check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/${{ steps.checkout-pr.outputs.commit-sha }} \
            -f state='pending' \
            -f target_url='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -f description='Running...' \
            -f context="Uptest-${{ steps.get-example-list-name.outputs.example-hash }}"
  uptest:
    runs-on: ubuntu-22.04
    needs: get-example-list
    if: ${{ github.event.comment.author_association == 'MEMBER' && github.event.issue.pull_request && contains(github.event.comment.body, '/test-examples') }}
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout PR
        id: checkout-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr checkout ${{ github.event.issue.number }}
          git submodule update --init --recursive
          OUTPUT=$(git log -1 --format='%H')
          echo "::set-output name=commit-sha::$OUTPUT"

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-uptest-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-uptest-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Run Uptest
        id: run-uptest
        env:
          UPTEST_AWS_CREDS: ${{ secrets.UPTEST_AWS_CREDS }}
          EXAMPLE_LIST: ${{ needs.get-example-list.outputs.example_list }}
          UPTEST_EXAMPLE_VALUE_REPLACEMENTS: ${{ secrets.UPTEST_EXAMPLE_VALUE_REPLACEMENTS }}
          DUMP_DIRECTORY: "./_output/cluster-dump"
        run: make uptest

      - name: Create Successful Status Check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXAMPLE_HASH: ${{ needs.get-example-list.outputs.example_hash }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/${{ steps.checkout-pr.outputs.commit-sha }} \
            -f state='success' \
            -f target_url='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -f description='Passed' \
            -f context="Uptest-${EXAMPLE_HASH}"

      - name: Collect Cluster Dump
        if: always()
        run: |
          export DUMP_DIRECTORY=./_output/cluster-dump
          make cluster_dump

      - name: Upload Cluster Dump
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cluster-dump-${{ needs.get-example-list.outputs.provider_name }}
          path: ./_output/cluster-dump

      - name: Cleanup
        if: always()
        run: |
          kubectl delete managed --all

      - name: Create Unsuccessful Status Check
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXAMPLE_HASH: ${{ needs.get-example-list.outputs.example_hash }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/statuses/${{ steps.checkout-pr.outputs.commit-sha }} \
            -f state='failure' \
            -f target_url='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            -f description='Failed' \
            -f context="Uptest-${EXAMPLE_HASH}"