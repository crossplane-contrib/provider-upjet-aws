//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InputDataConfigObservation) DeepCopyInto(out *InputDataConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InputDataConfigObservation.
func (in *InputDataConfigObservation) DeepCopy() *InputDataConfigObservation {
	if in == nil {
		return nil
	}
	out := new(InputDataConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InputDataConfigParameters) DeepCopyInto(out *InputDataConfigParameters) {
	*out = *in
	if in.DataAccessRoleArn != nil {
		in, out := &in.DataAccessRoleArn, &out.DataAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.DataAccessRoleArnRef != nil {
		in, out := &in.DataAccessRoleArnRef, &out.DataAccessRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DataAccessRoleArnSelector != nil {
		in, out := &in.DataAccessRoleArnSelector, &out.DataAccessRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.S3URI != nil {
		in, out := &in.S3URI, &out.S3URI
		*out = new(string)
		**out = **in
	}
	if in.TuningDataS3URI != nil {
		in, out := &in.TuningDataS3URI, &out.TuningDataS3URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InputDataConfigParameters.
func (in *InputDataConfigParameters) DeepCopy() *InputDataConfigParameters {
	if in == nil {
		return nil
	}
	out := new(InputDataConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LanguageModel) DeepCopyInto(out *LanguageModel) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LanguageModel.
func (in *LanguageModel) DeepCopy() *LanguageModel {
	if in == nil {
		return nil
	}
	out := new(LanguageModel)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LanguageModel) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LanguageModelList) DeepCopyInto(out *LanguageModelList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LanguageModel, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LanguageModelList.
func (in *LanguageModelList) DeepCopy() *LanguageModelList {
	if in == nil {
		return nil
	}
	out := new(LanguageModelList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LanguageModelList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LanguageModelObservation) DeepCopyInto(out *LanguageModelObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LanguageModelObservation.
func (in *LanguageModelObservation) DeepCopy() *LanguageModelObservation {
	if in == nil {
		return nil
	}
	out := new(LanguageModelObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LanguageModelParameters) DeepCopyInto(out *LanguageModelParameters) {
	*out = *in
	if in.BaseModelName != nil {
		in, out := &in.BaseModelName, &out.BaseModelName
		*out = new(string)
		**out = **in
	}
	if in.InputDataConfig != nil {
		in, out := &in.InputDataConfig, &out.InputDataConfig
		*out = make([]InputDataConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LanguageCode != nil {
		in, out := &in.LanguageCode, &out.LanguageCode
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LanguageModelParameters.
func (in *LanguageModelParameters) DeepCopy() *LanguageModelParameters {
	if in == nil {
		return nil
	}
	out := new(LanguageModelParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LanguageModelSpec) DeepCopyInto(out *LanguageModelSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LanguageModelSpec.
func (in *LanguageModelSpec) DeepCopy() *LanguageModelSpec {
	if in == nil {
		return nil
	}
	out := new(LanguageModelSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LanguageModelStatus) DeepCopyInto(out *LanguageModelStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LanguageModelStatus.
func (in *LanguageModelStatus) DeepCopy() *LanguageModelStatus {
	if in == nil {
		return nil
	}
	out := new(LanguageModelStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Vocabulary) DeepCopyInto(out *Vocabulary) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Vocabulary.
func (in *Vocabulary) DeepCopy() *Vocabulary {
	if in == nil {
		return nil
	}
	out := new(Vocabulary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Vocabulary) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyFilter) DeepCopyInto(out *VocabularyFilter) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyFilter.
func (in *VocabularyFilter) DeepCopy() *VocabularyFilter {
	if in == nil {
		return nil
	}
	out := new(VocabularyFilter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VocabularyFilter) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyFilterList) DeepCopyInto(out *VocabularyFilterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VocabularyFilter, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyFilterList.
func (in *VocabularyFilterList) DeepCopy() *VocabularyFilterList {
	if in == nil {
		return nil
	}
	out := new(VocabularyFilterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VocabularyFilterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyFilterObservation) DeepCopyInto(out *VocabularyFilterObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.DownloadURI != nil {
		in, out := &in.DownloadURI, &out.DownloadURI
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyFilterObservation.
func (in *VocabularyFilterObservation) DeepCopy() *VocabularyFilterObservation {
	if in == nil {
		return nil
	}
	out := new(VocabularyFilterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyFilterParameters) DeepCopyInto(out *VocabularyFilterParameters) {
	*out = *in
	if in.LanguageCode != nil {
		in, out := &in.LanguageCode, &out.LanguageCode
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VocabularyFilterFileURI != nil {
		in, out := &in.VocabularyFilterFileURI, &out.VocabularyFilterFileURI
		*out = new(string)
		**out = **in
	}
	if in.Words != nil {
		in, out := &in.Words, &out.Words
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyFilterParameters.
func (in *VocabularyFilterParameters) DeepCopy() *VocabularyFilterParameters {
	if in == nil {
		return nil
	}
	out := new(VocabularyFilterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyFilterSpec) DeepCopyInto(out *VocabularyFilterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyFilterSpec.
func (in *VocabularyFilterSpec) DeepCopy() *VocabularyFilterSpec {
	if in == nil {
		return nil
	}
	out := new(VocabularyFilterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyFilterStatus) DeepCopyInto(out *VocabularyFilterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyFilterStatus.
func (in *VocabularyFilterStatus) DeepCopy() *VocabularyFilterStatus {
	if in == nil {
		return nil
	}
	out := new(VocabularyFilterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyList) DeepCopyInto(out *VocabularyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Vocabulary, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyList.
func (in *VocabularyList) DeepCopy() *VocabularyList {
	if in == nil {
		return nil
	}
	out := new(VocabularyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VocabularyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyObservation) DeepCopyInto(out *VocabularyObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.DownloadURI != nil {
		in, out := &in.DownloadURI, &out.DownloadURI
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyObservation.
func (in *VocabularyObservation) DeepCopy() *VocabularyObservation {
	if in == nil {
		return nil
	}
	out := new(VocabularyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyParameters) DeepCopyInto(out *VocabularyParameters) {
	*out = *in
	if in.LanguageCode != nil {
		in, out := &in.LanguageCode, &out.LanguageCode
		*out = new(string)
		**out = **in
	}
	if in.Phrases != nil {
		in, out := &in.Phrases, &out.Phrases
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VocabularyFileURI != nil {
		in, out := &in.VocabularyFileURI, &out.VocabularyFileURI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyParameters.
func (in *VocabularyParameters) DeepCopy() *VocabularyParameters {
	if in == nil {
		return nil
	}
	out := new(VocabularyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularySpec) DeepCopyInto(out *VocabularySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularySpec.
func (in *VocabularySpec) DeepCopy() *VocabularySpec {
	if in == nil {
		return nil
	}
	out := new(VocabularySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VocabularyStatus) DeepCopyInto(out *VocabularyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VocabularyStatus.
func (in *VocabularyStatus) DeepCopy() *VocabularyStatus {
	if in == nil {
		return nil
	}
	out := new(VocabularyStatus)
	in.DeepCopyInto(out)
	return out
}
