/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta14 "github.com/upbound/provider-aws/apis/acm/v1beta1"
	v1beta1 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta12 "github.com/upbound/provider-aws/apis/kms/v1beta1"
	v1beta11 "github.com/upbound/provider-aws/apis/lambda/v1beta1"
	v1beta13 "github.com/upbound/provider-aws/apis/pinpoint/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this IdentityProvider.
func (mg *IdentityProvider) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ResourceServer.
func (mg *ResourceServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RiskConfiguration.
func (mg *RiskConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this User.
func (mg *User) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserGroup.
func (mg *UserGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.RoleArnRef,
		Selector:     mg.Spec.ForProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.InitProvider.RoleArnRef,
		Selector:     mg.Spec.InitProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserInGroup.
func (mg *UserInGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.GroupNameRef,
		Selector:     mg.Spec.ForProvider.GroupNameSelector,
		To: reference.To{
			List:    &UserGroupList{},
			Managed: &UserGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupName")
	}
	mg.Spec.ForProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Username),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UsernameRef,
		Selector:     mg.Spec.ForProvider.UsernameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Username")
	}
	mg.Spec.ForProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsernameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.GroupNameRef,
		Selector:     mg.Spec.InitProvider.GroupNameSelector,
		To: reference.To{
			List:    &UserGroupList{},
			Managed: &UserGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupName")
	}
	mg.Spec.InitProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Username),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UsernameRef,
		Selector:     mg.Spec.InitProvider.UsernameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Username")
	}
	mg.Spec.InitProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UsernameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPool.
func (mg *UserPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].CreateAuthChallenge),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].CreateAuthChallengeRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].CreateAuthChallengeSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].CreateAuthChallenge")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].CreateAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].CreateAuthChallengeRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArnRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArnSelector,
				To: reference.To{
					List:    &v1beta11.FunctionList{},
					Managed: &v1beta11.Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArn")
			}
			mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].CustomMessage),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].CustomMessageRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].CustomMessageSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].CustomMessage")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].CustomMessage = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].CustomMessageRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArnRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArnSelector,
				To: reference.To{
					List:    &v1beta11.FunctionList{},
					Managed: &v1beta11.Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArn")
			}
			mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].DefineAuthChallenge),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].DefineAuthChallengeRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].DefineAuthChallengeSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].DefineAuthChallenge")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].DefineAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].DefineAuthChallengeRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].KMSKeyID),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].KMSKeyIDRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].KMSKeyIDSelector,
			To: reference.To{
				List:    &v1beta12.KeyList{},
				Managed: &v1beta12.Key{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].KMSKeyID")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].KMSKeyIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].PostAuthentication),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].PostAuthenticationRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].PostAuthenticationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].PostAuthentication")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].PostAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].PostAuthenticationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].PostConfirmation),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].PostConfirmationRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].PostConfirmationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].PostConfirmation")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].PostConfirmation = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].PostConfirmationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].PreAuthentication),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].PreAuthenticationRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].PreAuthenticationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].PreAuthentication")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].PreAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].PreAuthenticationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].PreSignUp),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].PreSignUpRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].PreSignUpSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].PreSignUp")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].PreSignUp = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].PreSignUpRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].PreTokenGeneration),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].PreTokenGenerationRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].PreTokenGenerationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].PreTokenGeneration")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].PreTokenGeneration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].PreTokenGenerationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].UserMigration),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].UserMigrationRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].UserMigrationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].UserMigration")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].UserMigration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].UserMigrationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig[i3].VerifyAuthChallengeResponse),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.LambdaConfig[i3].VerifyAuthChallengeResponseRef,
			Selector:     mg.Spec.ForProvider.LambdaConfig[i3].VerifyAuthChallengeResponseSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig[i3].VerifyAuthChallengeResponse")
		}
		mg.Spec.ForProvider.LambdaConfig[i3].VerifyAuthChallengeResponse = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig[i3].VerifyAuthChallengeResponseRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SMSConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SMSConfiguration[i3].SnsCallerArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.SMSConfiguration[i3].SnsCallerArnRef,
			Selector:     mg.Spec.ForProvider.SMSConfiguration[i3].SnsCallerArnSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SMSConfiguration[i3].SnsCallerArn")
		}
		mg.Spec.ForProvider.SMSConfiguration[i3].SnsCallerArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SMSConfiguration[i3].SnsCallerArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].CreateAuthChallenge),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].CreateAuthChallengeRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].CreateAuthChallengeSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].CreateAuthChallenge")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].CreateAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].CreateAuthChallengeRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArnRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArnSelector,
				To: reference.To{
					List:    &v1beta11.FunctionList{},
					Managed: &v1beta11.Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArn")
			}
			mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LambdaConfig[i3].CustomEmailSender[i4].LambdaArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].CustomMessage),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].CustomMessageRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].CustomMessageSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].CustomMessage")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].CustomMessage = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].CustomMessageRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArnRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArnSelector,
				To: reference.To{
					List:    &v1beta11.FunctionList{},
					Managed: &v1beta11.Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArn")
			}
			mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LambdaConfig[i3].CustomSMSSender[i4].LambdaArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].DefineAuthChallenge),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].DefineAuthChallengeRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].DefineAuthChallengeSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].DefineAuthChallenge")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].DefineAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].DefineAuthChallengeRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].KMSKeyID),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].KMSKeyIDRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].KMSKeyIDSelector,
			To: reference.To{
				List:    &v1beta12.KeyList{},
				Managed: &v1beta12.Key{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].KMSKeyID")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].KMSKeyIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].PostAuthentication),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].PostAuthenticationRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].PostAuthenticationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].PostAuthentication")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].PostAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].PostAuthenticationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].PostConfirmation),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].PostConfirmationRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].PostConfirmationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].PostConfirmation")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].PostConfirmation = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].PostConfirmationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].PreAuthentication),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].PreAuthenticationRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].PreAuthenticationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].PreAuthentication")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].PreAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].PreAuthenticationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].PreSignUp),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].PreSignUpRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].PreSignUpSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].PreSignUp")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].PreSignUp = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].PreSignUpRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].PreTokenGeneration),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].PreTokenGenerationRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].PreTokenGenerationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].PreTokenGeneration")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].PreTokenGeneration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].PreTokenGenerationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].UserMigration),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].UserMigrationRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].UserMigrationSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].UserMigration")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].UserMigration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].UserMigrationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LambdaConfig); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig[i3].VerifyAuthChallengeResponse),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.LambdaConfig[i3].VerifyAuthChallengeResponseRef,
			Selector:     mg.Spec.InitProvider.LambdaConfig[i3].VerifyAuthChallengeResponseSelector,
			To: reference.To{
				List:    &v1beta11.FunctionList{},
				Managed: &v1beta11.Function{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig[i3].VerifyAuthChallengeResponse")
		}
		mg.Spec.InitProvider.LambdaConfig[i3].VerifyAuthChallengeResponse = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig[i3].VerifyAuthChallengeResponseRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SMSConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SMSConfiguration[i3].SnsCallerArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.SMSConfiguration[i3].SnsCallerArnRef,
			Selector:     mg.Spec.InitProvider.SMSConfiguration[i3].SnsCallerArnSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SMSConfiguration[i3].SnsCallerArn")
		}
		mg.Spec.InitProvider.SMSConfiguration[i3].SnsCallerArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SMSConfiguration[i3].SnsCallerArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this UserPoolClient.
func (mg *UserPoolClient) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AnalyticsConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationID),
			Extract:      resource.ExtractParamPath("application_id", true),
			Reference:    mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationIDRef,
			Selector:     mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationIDSelector,
			To: reference.To{
				List:    &v1beta13.AppList{},
				Managed: &v1beta13.App{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationID")
		}
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.AnalyticsConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArnRef,
			Selector:     mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArnSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.AnalyticsConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationID),
			Extract:      resource.ExtractParamPath("application_id", true),
			Reference:    mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationIDRef,
			Selector:     mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationIDSelector,
			To: reference.To{
				List:    &v1beta13.AppList{},
				Managed: &v1beta13.App{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationID")
		}
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AnalyticsConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArnRef,
			Selector:     mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArnSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPoolDomain.
func (mg *UserPoolDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CertificateArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.CertificateArnRef,
		Selector:     mg.Spec.ForProvider.CertificateArnSelector,
		To: reference.To{
			List:    &v1beta14.CertificateList{},
			Managed: &v1beta14.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CertificateArn")
	}
	mg.Spec.ForProvider.CertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CertificateArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CertificateArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.InitProvider.CertificateArnRef,
		Selector:     mg.Spec.InitProvider.CertificateArnSelector,
		To: reference.To{
			List:    &v1beta14.CertificateList{},
			Managed: &v1beta14.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CertificateArn")
	}
	mg.Spec.InitProvider.CertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CertificateArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserPoolIDRef,
		Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPoolUICustomization.
func (mg *UserPoolUICustomization) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClientID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClientIDRef,
		Selector:     mg.Spec.ForProvider.ClientIDSelector,
		To: reference.To{
			List:    &UserPoolClientList{},
			Managed: &UserPoolClient{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClientID")
	}
	mg.Spec.ForProvider.ClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClientIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserPoolIDRef,
		Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
		To: reference.To{
			List:    &UserPoolList{},
			Managed: &UserPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}
