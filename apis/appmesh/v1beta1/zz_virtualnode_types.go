// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsCloudMapInitParameters struct {

	// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	// +mapType:granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// attribute of the dns object to hostname.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type AwsCloudMapObservation struct {

	// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	// +mapType:granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// Name of the AWS Cloud Map namespace to use.
	// Use the aws_service_discovery_http_namespace resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// attribute of the dns object to hostname.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type AwsCloudMapParameters struct {

	// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// Name of the AWS Cloud Map namespace to use.
	// Use the aws_service_discovery_http_namespace resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/servicediscovery/v1beta1.HTTPNamespace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// Reference to a HTTPNamespace in servicediscovery to populate namespaceName.
	// +kubebuilder:validation:Optional
	NamespaceNameRef *v1.Reference `json:"namespaceNameRef,omitempty" tf:"-"`

	// Selector for a HTTPNamespace in servicediscovery to populate namespaceName.
	// +kubebuilder:validation:Optional
	NamespaceNameSelector *v1.Selector `json:"namespaceNameSelector,omitempty" tf:"-"`

	// attribute of the dns object to hostname.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

type BackendDefaultsClientPolicyInitParameters struct {

	// Transport Layer Security (TLS) client policy.
	TLS []BackendDefaultsClientPolicyTLSInitParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type BackendDefaultsClientPolicyObservation struct {

	// Transport Layer Security (TLS) client policy.
	TLS []BackendDefaultsClientPolicyTLSObservation `json:"tls,omitempty" tf:"tls,omitempty"`
}

type BackendDefaultsClientPolicyParameters struct {

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []BackendDefaultsClientPolicyTLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type BackendDefaultsClientPolicyTLSCertificateInitParameters struct {

	// Local file certificate.
	File []ClientPolicyTLSCertificateFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ClientPolicyTLSCertificateSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type BackendDefaultsClientPolicyTLSCertificateObservation struct {

	// Local file certificate.
	File []ClientPolicyTLSCertificateFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ClientPolicyTLSCertificateSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type BackendDefaultsClientPolicyTLSCertificateParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []ClientPolicyTLSCertificateFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []ClientPolicyTLSCertificateSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type BackendDefaultsClientPolicyTLSInitParameters struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	Certificate []BackendDefaultsClientPolicyTLSCertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	Validation []BackendDefaultsClientPolicyTLSValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type BackendDefaultsClientPolicyTLSObservation struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	Certificate []BackendDefaultsClientPolicyTLSCertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	Validation []BackendDefaultsClientPolicyTLSValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type BackendDefaultsClientPolicyTLSParameters struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	Certificate []BackendDefaultsClientPolicyTLSCertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Optional
	Validation []BackendDefaultsClientPolicyTLSValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type BackendDefaultsClientPolicyTLSValidationInitParameters struct {

	// SANs for a TLS validation context.
	SubjectAlternativeNames []ClientPolicyTLSValidationSubjectAlternativeNamesInitParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []ClientPolicyTLSValidationTrustInitParameters `json:"trust,omitempty" tf:"trust,omitempty"`
}

type BackendDefaultsClientPolicyTLSValidationObservation struct {

	// SANs for a TLS validation context.
	SubjectAlternativeNames []ClientPolicyTLSValidationSubjectAlternativeNamesObservation `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []ClientPolicyTLSValidationTrustObservation `json:"trust,omitempty" tf:"trust,omitempty"`
}

type BackendDefaultsClientPolicyTLSValidationParameters struct {

	// SANs for a TLS validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []ClientPolicyTLSValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	Trust []ClientPolicyTLSValidationTrustParameters `json:"trust" tf:"trust,omitempty"`
}

type BackendInitParameters struct {

	// Virtual service to use as a backend for a virtual node.
	VirtualService []BackendVirtualServiceInitParameters `json:"virtualService,omitempty" tf:"virtual_service,omitempty"`
}

type BackendObservation struct {

	// Virtual service to use as a backend for a virtual node.
	VirtualService []BackendVirtualServiceObservation `json:"virtualService,omitempty" tf:"virtual_service,omitempty"`
}

type BackendParameters struct {

	// Virtual service to use as a backend for a virtual node.
	// +kubebuilder:validation:Optional
	VirtualService []BackendVirtualServiceParameters `json:"virtualService" tf:"virtual_service,omitempty"`
}

type BackendVirtualServiceInitParameters struct {

	// Client policy for the backend.
	ClientPolicy []VirtualServiceClientPolicyInitParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`

	// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
	VirtualServiceName *string `json:"virtualServiceName,omitempty" tf:"virtual_service_name,omitempty"`
}

type BackendVirtualServiceObservation struct {

	// Client policy for the backend.
	ClientPolicy []VirtualServiceClientPolicyObservation `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`

	// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
	VirtualServiceName *string `json:"virtualServiceName,omitempty" tf:"virtual_service_name,omitempty"`
}

type BackendVirtualServiceParameters struct {

	// Client policy for the backend.
	// +kubebuilder:validation:Optional
	ClientPolicy []VirtualServiceClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`

	// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	VirtualServiceName *string `json:"virtualServiceName" tf:"virtual_service_name,omitempty"`
}

type BaseEjectionDurationInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type BaseEjectionDurationObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type BaseEjectionDurationParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ClientPolicyTLSCertificateFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type ClientPolicyTLSCertificateFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type ClientPolicyTLSCertificateFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type ClientPolicyTLSCertificateInitParameters struct {

	// Local file certificate.
	File []TLSCertificateFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []TLSCertificateSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ClientPolicyTLSCertificateObservation struct {

	// Local file certificate.
	File []TLSCertificateFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []TLSCertificateSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ClientPolicyTLSCertificateParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []TLSCertificateFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []TLSCertificateSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ClientPolicyTLSCertificateSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ClientPolicyTLSCertificateSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ClientPolicyTLSCertificateSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ClientPolicyTLSInitParameters struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	Certificate []ClientPolicyTLSCertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	Validation []ClientPolicyTLSValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ClientPolicyTLSObservation struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	Certificate []ClientPolicyTLSCertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	Validation []ClientPolicyTLSValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ClientPolicyTLSParameters struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	Certificate []ClientPolicyTLSCertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Optional
	Validation []ClientPolicyTLSValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type ClientPolicyTLSValidationInitParameters struct {

	// SANs for a TLS validation context.
	SubjectAlternativeNames []TLSValidationSubjectAlternativeNamesInitParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []TLSValidationTrustInitParameters `json:"trust,omitempty" tf:"trust,omitempty"`
}

type ClientPolicyTLSValidationObservation struct {

	// SANs for a TLS validation context.
	SubjectAlternativeNames []TLSValidationSubjectAlternativeNamesObservation `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []TLSValidationTrustObservation `json:"trust,omitempty" tf:"trust,omitempty"`
}

type ClientPolicyTLSValidationParameters struct {

	// SANs for a TLS validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []TLSValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	Trust []TLSValidationTrustParameters `json:"trust" tf:"trust,omitempty"`
}

type ClientPolicyTLSValidationSubjectAlternativeNamesInitParameters struct {

	// Criteria for determining a SAN's match.
	Match []ClientPolicyTLSValidationSubjectAlternativeNamesMatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type ClientPolicyTLSValidationSubjectAlternativeNamesMatchInitParameters struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type ClientPolicyTLSValidationSubjectAlternativeNamesMatchObservation struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type ClientPolicyTLSValidationSubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	// +listType:set
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type ClientPolicyTLSValidationSubjectAlternativeNamesObservation struct {

	// Criteria for determining a SAN's match.
	Match []ClientPolicyTLSValidationSubjectAlternativeNamesMatchObservation `json:"match,omitempty" tf:"match,omitempty"`
}

type ClientPolicyTLSValidationSubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	Match []ClientPolicyTLSValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type ClientPolicyTLSValidationTrustFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type ClientPolicyTLSValidationTrustFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type ClientPolicyTLSValidationTrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type ClientPolicyTLSValidationTrustInitParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []ValidationTrustAcmInitParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []ClientPolicyTLSValidationTrustFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ClientPolicyTLSValidationTrustSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ClientPolicyTLSValidationTrustObservation struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []ValidationTrustAcmObservation `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []ClientPolicyTLSValidationTrustFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ClientPolicyTLSValidationTrustSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ClientPolicyTLSValidationTrustParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []ValidationTrustAcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []ClientPolicyTLSValidationTrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []ClientPolicyTLSValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ClientPolicyTLSValidationTrustSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ClientPolicyTLSValidationTrustSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ClientPolicyTLSValidationTrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ConnectionPoolGRPCInitParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type ConnectionPoolGRPCObservation struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type ConnectionPoolGRPCParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxRequests *float64 `json:"maxRequests" tf:"max_requests,omitempty"`
}

type ConnectionPoolHTTPInitParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type ConnectionPoolHTTPObservation struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type ConnectionPoolHTTPParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type ConnectionPoolHttp2InitParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type ConnectionPoolHttp2Observation struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type ConnectionPoolHttp2Parameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxRequests *float64 `json:"maxRequests" tf:"max_requests,omitempty"`
}

type DNSInitParameters struct {

	// DNS host name for your virtual node.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The preferred IP version that this virtual node uses. Valid values: IPv6_PREFERRED, IPv4_PREFERRED, IPv4_ONLY, IPv6_ONLY.
	IPPreference *string `json:"ipPreference,omitempty" tf:"ip_preference,omitempty"`

	// The DNS response type for the virtual node. Valid values: LOADBALANCER, ENDPOINTS.
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`
}

type DNSObservation struct {

	// DNS host name for your virtual node.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The preferred IP version that this virtual node uses. Valid values: IPv6_PREFERRED, IPv4_PREFERRED, IPv4_ONLY, IPv6_ONLY.
	IPPreference *string `json:"ipPreference,omitempty" tf:"ip_preference,omitempty"`

	// The DNS response type for the virtual node. Valid values: LOADBALANCER, ENDPOINTS.
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`
}

type DNSParameters struct {

	// DNS host name for your virtual node.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// The preferred IP version that this virtual node uses. Valid values: IPv6_PREFERRED, IPv4_PREFERRED, IPv4_ONLY, IPv6_ONLY.
	// +kubebuilder:validation:Optional
	IPPreference *string `json:"ipPreference,omitempty" tf:"ip_preference,omitempty"`

	// The DNS response type for the virtual node. Valid values: LOADBALANCER, ENDPOINTS.
	// +kubebuilder:validation:Optional
	ResponseType *string `json:"responseType,omitempty" tf:"response_type,omitempty"`
}

type FileFormatInitParameters struct {

	// The logging format for JSON.
	JSON []FormatJSONInitParameters `json:"json,omitempty" tf:"json,omitempty"`

	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type FileFormatObservation struct {

	// The logging format for JSON.
	JSON []FormatJSONObservation `json:"json,omitempty" tf:"json,omitempty"`

	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type FileFormatParameters struct {

	// The logging format for JSON.
	// +kubebuilder:validation:Optional
	JSON []FormatJSONParameters `json:"json,omitempty" tf:"json,omitempty"`

	// The logging format for text. Must be between 1 and 1000 characters in length.
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type FormatJSONInitParameters struct {

	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type FormatJSONObservation struct {

	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type FormatJSONParameters struct {

	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type GRPCIdleInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type GRPCIdleObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type GRPCIdleParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type GRPCPerRequestInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type GRPCPerRequestObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type GRPCPerRequestParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type HTTPIdleInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPIdleObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPIdleParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type HTTPPerRequestInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPPerRequestObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPPerRequestParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type Http2IdleInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type Http2IdleObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type Http2IdleParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type Http2PerRequestInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type Http2PerRequestObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type Http2PerRequestParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type IntervalInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntervalObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntervalParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ListenerConnectionPoolInitParameters struct {

	// Connection pool information for gRPC listeners.
	GRPC []ConnectionPoolGRPCInitParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	HTTP []ConnectionPoolHTTPInitParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	Http2 []ConnectionPoolHttp2InitParameters `json:"http2,omitempty" tf:"http2,omitempty"`

	// Connection pool information for TCP listeners.
	TCP []TCPInitParameters `json:"tcp,omitempty" tf:"tcp,omitempty"`
}

type ListenerConnectionPoolObservation struct {

	// Connection pool information for gRPC listeners.
	GRPC []ConnectionPoolGRPCObservation `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	HTTP []ConnectionPoolHTTPObservation `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	Http2 []ConnectionPoolHttp2Observation `json:"http2,omitempty" tf:"http2,omitempty"`

	// Connection pool information for TCP listeners.
	TCP []TCPObservation `json:"tcp,omitempty" tf:"tcp,omitempty"`
}

type ListenerConnectionPoolParameters struct {

	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	GRPC []ConnectionPoolGRPCParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	HTTP []ConnectionPoolHTTPParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	Http2 []ConnectionPoolHttp2Parameters `json:"http2,omitempty" tf:"http2,omitempty"`

	// Connection pool information for TCP listeners.
	// +kubebuilder:validation:Optional
	TCP []TCPParameters `json:"tcp,omitempty" tf:"tcp,omitempty"`
}

type ListenerHealthCheckInitParameters struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	IntervalMillis *float64 `json:"intervalMillis,omitempty" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis *float64 `json:"timeoutMillis,omitempty" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type ListenerHealthCheckObservation struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	IntervalMillis *float64 `json:"intervalMillis,omitempty" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis *float64 `json:"timeoutMillis,omitempty" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type ListenerHealthCheckParameters struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	// +kubebuilder:validation:Optional
	IntervalMillis *float64 `json:"intervalMillis" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	// +kubebuilder:validation:Optional
	TimeoutMillis *float64 `json:"timeoutMillis" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold" tf:"unhealthy_threshold,omitempty"`
}

type ListenerPortMappingInitParameters struct {

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type ListenerPortMappingObservation struct {

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type ListenerPortMappingParameters struct {

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type ListenerTLSCertificateFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type ListenerTLSCertificateFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type ListenerTLSCertificateFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type ListenerTLSCertificateInitParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []TLSCertificateAcmInitParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []ListenerTLSCertificateFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ListenerTLSCertificateSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ListenerTLSCertificateObservation struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []TLSCertificateAcmObservation `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []ListenerTLSCertificateFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ListenerTLSCertificateSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ListenerTLSCertificateParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []TLSCertificateAcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []ListenerTLSCertificateFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []ListenerTLSCertificateSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ListenerTLSCertificateSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ListenerTLSCertificateSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ListenerTLSCertificateSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ListenerTLSValidationInitParameters struct {

	// SANs for a TLS validation context.
	SubjectAlternativeNames []ListenerTLSValidationSubjectAlternativeNamesInitParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []ListenerTLSValidationTrustInitParameters `json:"trust,omitempty" tf:"trust,omitempty"`
}

type ListenerTLSValidationObservation struct {

	// SANs for a TLS validation context.
	SubjectAlternativeNames []ListenerTLSValidationSubjectAlternativeNamesObservation `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []ListenerTLSValidationTrustObservation `json:"trust,omitempty" tf:"trust,omitempty"`
}

type ListenerTLSValidationParameters struct {

	// SANs for a TLS validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []ListenerTLSValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	Trust []ListenerTLSValidationTrustParameters `json:"trust" tf:"trust,omitempty"`
}

type ListenerTLSValidationSubjectAlternativeNamesInitParameters struct {

	// Criteria for determining a SAN's match.
	Match []ListenerTLSValidationSubjectAlternativeNamesMatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type ListenerTLSValidationSubjectAlternativeNamesMatchInitParameters struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type ListenerTLSValidationSubjectAlternativeNamesMatchObservation struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type ListenerTLSValidationSubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	// +listType:set
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type ListenerTLSValidationSubjectAlternativeNamesObservation struct {

	// Criteria for determining a SAN's match.
	Match []ListenerTLSValidationSubjectAlternativeNamesMatchObservation `json:"match,omitempty" tf:"match,omitempty"`
}

type ListenerTLSValidationSubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	Match []ListenerTLSValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type ListenerTLSValidationTrustFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type ListenerTLSValidationTrustFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type ListenerTLSValidationTrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type ListenerTLSValidationTrustInitParameters struct {

	// Local file certificate.
	File []ListenerTLSValidationTrustFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ListenerTLSValidationTrustSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ListenerTLSValidationTrustObservation struct {

	// Local file certificate.
	File []ListenerTLSValidationTrustFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ListenerTLSValidationTrustSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ListenerTLSValidationTrustParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []ListenerTLSValidationTrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []ListenerTLSValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ListenerTLSValidationTrustSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ListenerTLSValidationTrustSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ListenerTLSValidationTrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ListenerTimeoutInitParameters struct {

	// Connection pool information for gRPC listeners.
	GRPC []TimeoutGRPCInitParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	HTTP []TimeoutHTTPInitParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	Http2 []TimeoutHttp2InitParameters `json:"http2,omitempty" tf:"http2,omitempty"`

	// Connection pool information for TCP listeners.
	TCP []TimeoutTCPInitParameters `json:"tcp,omitempty" tf:"tcp,omitempty"`
}

type ListenerTimeoutObservation struct {

	// Connection pool information for gRPC listeners.
	GRPC []TimeoutGRPCObservation `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	HTTP []TimeoutHTTPObservation `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	Http2 []TimeoutHttp2Observation `json:"http2,omitempty" tf:"http2,omitempty"`

	// Connection pool information for TCP listeners.
	TCP []TimeoutTCPObservation `json:"tcp,omitempty" tf:"tcp,omitempty"`
}

type ListenerTimeoutParameters struct {

	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	GRPC []TimeoutGRPCParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	HTTP []TimeoutHTTPParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	Http2 []TimeoutHttp2Parameters `json:"http2,omitempty" tf:"http2,omitempty"`

	// Connection pool information for TCP listeners.
	// +kubebuilder:validation:Optional
	TCP []TimeoutTCPParameters `json:"tcp,omitempty" tf:"tcp,omitempty"`
}

type LoggingAccessLogFileInitParameters struct {

	// The specified format for the logs.
	Format []FileFormatInitParameters `json:"format,omitempty" tf:"format,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type LoggingAccessLogFileObservation struct {

	// The specified format for the logs.
	Format []FileFormatObservation `json:"format,omitempty" tf:"format,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type LoggingAccessLogFileParameters struct {

	// The specified format for the logs.
	// +kubebuilder:validation:Optional
	Format []FileFormatParameters `json:"format,omitempty" tf:"format,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type LoggingAccessLogInitParameters struct {

	// Local file certificate.
	File []LoggingAccessLogFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`
}

type LoggingAccessLogObservation struct {

	// Local file certificate.
	File []LoggingAccessLogFileObservation `json:"file,omitempty" tf:"file,omitempty"`
}

type LoggingAccessLogParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []LoggingAccessLogFileParameters `json:"file,omitempty" tf:"file,omitempty"`
}

type OutlierDetectionInitParameters struct {

	// Base amount of time for which a host is ejected.
	BaseEjectionDuration []BaseEjectionDurationInitParameters `json:"baseEjectionDuration,omitempty" tf:"base_ejection_duration,omitempty"`

	// Time interval between ejection sweep analysis.
	Interval []IntervalInitParameters `json:"interval,omitempty" tf:"interval,omitempty"`

	// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
	// Minimum value of 0. Maximum value of 100.
	MaxEjectionPercent *float64 `json:"maxEjectionPercent,omitempty" tf:"max_ejection_percent,omitempty"`

	// Number of consecutive 5xx errors required for ejection. Minimum value of 1.
	MaxServerErrors *float64 `json:"maxServerErrors,omitempty" tf:"max_server_errors,omitempty"`
}

type OutlierDetectionObservation struct {

	// Base amount of time for which a host is ejected.
	BaseEjectionDuration []BaseEjectionDurationObservation `json:"baseEjectionDuration,omitempty" tf:"base_ejection_duration,omitempty"`

	// Time interval between ejection sweep analysis.
	Interval []IntervalObservation `json:"interval,omitempty" tf:"interval,omitempty"`

	// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
	// Minimum value of 0. Maximum value of 100.
	MaxEjectionPercent *float64 `json:"maxEjectionPercent,omitempty" tf:"max_ejection_percent,omitempty"`

	// Number of consecutive 5xx errors required for ejection. Minimum value of 1.
	MaxServerErrors *float64 `json:"maxServerErrors,omitempty" tf:"max_server_errors,omitempty"`
}

type OutlierDetectionParameters struct {

	// Base amount of time for which a host is ejected.
	// +kubebuilder:validation:Optional
	BaseEjectionDuration []BaseEjectionDurationParameters `json:"baseEjectionDuration" tf:"base_ejection_duration,omitempty"`

	// Time interval between ejection sweep analysis.
	// +kubebuilder:validation:Optional
	Interval []IntervalParameters `json:"interval" tf:"interval,omitempty"`

	// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
	// Minimum value of 0. Maximum value of 100.
	// +kubebuilder:validation:Optional
	MaxEjectionPercent *float64 `json:"maxEjectionPercent" tf:"max_ejection_percent,omitempty"`

	// Number of consecutive 5xx errors required for ejection. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxServerErrors *float64 `json:"maxServerErrors" tf:"max_server_errors,omitempty"`
}

type ServiceDiscoveryInitParameters struct {

	// Any AWS Cloud Map information for the virtual node.
	AwsCloudMap []AwsCloudMapInitParameters `json:"awsCloudMap,omitempty" tf:"aws_cloud_map,omitempty"`

	// DNS service name for the virtual node.
	DNS []DNSInitParameters `json:"dns,omitempty" tf:"dns,omitempty"`
}

type ServiceDiscoveryObservation struct {

	// Any AWS Cloud Map information for the virtual node.
	AwsCloudMap []AwsCloudMapObservation `json:"awsCloudMap,omitempty" tf:"aws_cloud_map,omitempty"`

	// DNS service name for the virtual node.
	DNS []DNSObservation `json:"dns,omitempty" tf:"dns,omitempty"`
}

type ServiceDiscoveryParameters struct {

	// Any AWS Cloud Map information for the virtual node.
	// +kubebuilder:validation:Optional
	AwsCloudMap []AwsCloudMapParameters `json:"awsCloudMap,omitempty" tf:"aws_cloud_map,omitempty"`

	// DNS service name for the virtual node.
	// +kubebuilder:validation:Optional
	DNS []DNSParameters `json:"dns,omitempty" tf:"dns,omitempty"`
}

type SpecBackendDefaultsInitParameters struct {

	// Client policy for the backend.
	ClientPolicy []BackendDefaultsClientPolicyInitParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type SpecBackendDefaultsObservation struct {

	// Client policy for the backend.
	ClientPolicy []BackendDefaultsClientPolicyObservation `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type SpecBackendDefaultsParameters struct {

	// Client policy for the backend.
	// +kubebuilder:validation:Optional
	ClientPolicy []BackendDefaultsClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type SpecListenerInitParameters struct {

	// Connection pool information for the listener.
	ConnectionPool []ListenerConnectionPoolInitParameters `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	HealthCheck []ListenerHealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Outlier detection information for the listener.
	OutlierDetection []OutlierDetectionInitParameters `json:"outlierDetection,omitempty" tf:"outlier_detection,omitempty"`

	// Port mapping information for the listener.
	PortMapping []ListenerPortMappingInitParameters `json:"portMapping,omitempty" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	TLS []SpecListenerTLSInitParameters `json:"tls,omitempty" tf:"tls,omitempty"`

	// Timeouts for different protocols.
	Timeout []ListenerTimeoutInitParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SpecListenerObservation struct {

	// Connection pool information for the listener.
	ConnectionPool []ListenerConnectionPoolObservation `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	HealthCheck []ListenerHealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Outlier detection information for the listener.
	OutlierDetection []OutlierDetectionObservation `json:"outlierDetection,omitempty" tf:"outlier_detection,omitempty"`

	// Port mapping information for the listener.
	PortMapping []ListenerPortMappingObservation `json:"portMapping,omitempty" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	TLS []SpecListenerTLSObservation `json:"tls,omitempty" tf:"tls,omitempty"`

	// Timeouts for different protocols.
	Timeout []ListenerTimeoutObservation `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SpecListenerParameters struct {

	// Connection pool information for the listener.
	// +kubebuilder:validation:Optional
	ConnectionPool []ListenerConnectionPoolParameters `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	// +kubebuilder:validation:Optional
	HealthCheck []ListenerHealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Outlier detection information for the listener.
	// +kubebuilder:validation:Optional
	OutlierDetection []OutlierDetectionParameters `json:"outlierDetection,omitempty" tf:"outlier_detection,omitempty"`

	// Port mapping information for the listener.
	// +kubebuilder:validation:Optional
	PortMapping []ListenerPortMappingParameters `json:"portMapping" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []SpecListenerTLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`

	// Timeouts for different protocols.
	// +kubebuilder:validation:Optional
	Timeout []ListenerTimeoutParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SpecListenerTLSInitParameters struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	Certificate []ListenerTLSCertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// TLS validation context.
	Validation []ListenerTLSValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type SpecListenerTLSObservation struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	Certificate []ListenerTLSCertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// TLS validation context.
	Validation []ListenerTLSValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type SpecListenerTLSParameters struct {

	// Virtual node's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	Certificate []ListenerTLSCertificateParameters `json:"certificate" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Optional
	Validation []ListenerTLSValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type SpecLoggingInitParameters struct {

	// Access log configuration for a virtual node.
	AccessLog []LoggingAccessLogInitParameters `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type SpecLoggingObservation struct {

	// Access log configuration for a virtual node.
	AccessLog []LoggingAccessLogObservation `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type SpecLoggingParameters struct {

	// Access log configuration for a virtual node.
	// +kubebuilder:validation:Optional
	AccessLog []LoggingAccessLogParameters `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type TCPIdleInitParameters struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TCPIdleObservation struct {

	// Unit of time. Valid values: ms, s.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TCPIdleParameters struct {

	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type TCPInitParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`
}

type TCPObservation struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`
}

type TCPParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections" tf:"max_connections,omitempty"`
}

type TLSCertificateAcmInitParameters struct {

	// ARN for the certificate.
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn,omitempty"`
}

type TLSCertificateAcmObservation struct {

	// ARN for the certificate.
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn,omitempty"`
}

type TLSCertificateAcmParameters struct {

	// ARN for the certificate.
	// +kubebuilder:validation:Optional
	CertificateArn *string `json:"certificateArn" tf:"certificate_arn,omitempty"`
}

type TLSCertificateFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type TLSCertificateFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type TLSCertificateFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type TLSCertificateSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TLSCertificateSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TLSCertificateSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type TLSValidationSubjectAlternativeNamesInitParameters struct {

	// Criteria for determining a SAN's match.
	Match []TLSValidationSubjectAlternativeNamesMatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type TLSValidationSubjectAlternativeNamesMatchInitParameters struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type TLSValidationSubjectAlternativeNamesMatchObservation struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type TLSValidationSubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	// +listType:set
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type TLSValidationSubjectAlternativeNamesObservation struct {

	// Criteria for determining a SAN's match.
	Match []TLSValidationSubjectAlternativeNamesMatchObservation `json:"match,omitempty" tf:"match,omitempty"`
}

type TLSValidationSubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	Match []TLSValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type TLSValidationTrustFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type TLSValidationTrustFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type TLSValidationTrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type TLSValidationTrustInitParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []TrustAcmInitParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []TLSValidationTrustFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []TLSValidationTrustSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSValidationTrustObservation struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []TrustAcmObservation `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []TLSValidationTrustFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []TLSValidationTrustSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSValidationTrustParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []TrustAcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []TLSValidationTrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []TLSValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSValidationTrustSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TLSValidationTrustSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TLSValidationTrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type TimeoutGRPCInitParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []GRPCIdleInitParameters `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	PerRequest []GRPCPerRequestInitParameters `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutGRPCObservation struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []GRPCIdleObservation `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	PerRequest []GRPCPerRequestObservation `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutGRPCParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	Idle []GRPCIdleParameters `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	// +kubebuilder:validation:Optional
	PerRequest []GRPCPerRequestParameters `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutHTTPInitParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []HTTPIdleInitParameters `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	PerRequest []HTTPPerRequestInitParameters `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutHTTPObservation struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []HTTPIdleObservation `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	PerRequest []HTTPPerRequestObservation `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutHTTPParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	Idle []HTTPIdleParameters `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	// +kubebuilder:validation:Optional
	PerRequest []HTTPPerRequestParameters `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutHttp2InitParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []Http2IdleInitParameters `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	PerRequest []Http2PerRequestInitParameters `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutHttp2Observation struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []Http2IdleObservation `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	PerRequest []Http2PerRequestObservation `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutHttp2Parameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	Idle []Http2IdleParameters `json:"idle,omitempty" tf:"idle,omitempty"`

	// Per request timeout.
	// +kubebuilder:validation:Optional
	PerRequest []Http2PerRequestParameters `json:"perRequest,omitempty" tf:"per_request,omitempty"`
}

type TimeoutTCPInitParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []TCPIdleInitParameters `json:"idle,omitempty" tf:"idle,omitempty"`
}

type TimeoutTCPObservation struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	Idle []TCPIdleObservation `json:"idle,omitempty" tf:"idle,omitempty"`
}

type TimeoutTCPParameters struct {

	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	Idle []TCPIdleParameters `json:"idle,omitempty" tf:"idle,omitempty"`
}

type TrustAcmInitParameters struct {

	// One or more ACM ARNs.
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns,omitempty" tf:"certificate_authority_arns,omitempty"`
}

type TrustAcmObservation struct {

	// One or more ACM ARNs.
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns,omitempty" tf:"certificate_authority_arns,omitempty"`
}

type TrustAcmParameters struct {

	// One or more ACM ARNs.
	// +kubebuilder:validation:Optional
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns" tf:"certificate_authority_arns,omitempty"`
}

type ValidationTrustAcmInitParameters struct {

	// One or more ACM ARNs.
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns,omitempty" tf:"certificate_authority_arns,omitempty"`
}

type ValidationTrustAcmObservation struct {

	// One or more ACM ARNs.
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns,omitempty" tf:"certificate_authority_arns,omitempty"`
}

type ValidationTrustAcmParameters struct {

	// One or more ACM ARNs.
	// +kubebuilder:validation:Optional
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns" tf:"certificate_authority_arns,omitempty"`
}

type VirtualNodeInitParameters struct {

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Virtual node specification to apply.
	Spec []VirtualNodeSpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VirtualNodeObservation struct {

	// ARN of the virtual node.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Creation date of the virtual node.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	// ID of the virtual node.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last update date of the virtual node.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	MeshName *string `json:"meshName,omitempty" tf:"mesh_name,omitempty"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource owner's AWS account ID.
	ResourceOwner *string `json:"resourceOwner,omitempty" tf:"resource_owner,omitempty"`

	// Virtual node specification to apply.
	Spec []VirtualNodeSpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type VirtualNodeParameters struct {

	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.Mesh
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	MeshName *string `json:"meshName,omitempty" tf:"mesh_name,omitempty"`

	// Reference to a Mesh in appmesh to populate meshName.
	// +kubebuilder:validation:Optional
	MeshNameRef *v1.Reference `json:"meshNameRef,omitempty" tf:"-"`

	// Selector for a Mesh in appmesh to populate meshName.
	// +kubebuilder:validation:Optional
	MeshNameSelector *v1.Selector `json:"meshNameSelector,omitempty" tf:"-"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Virtual node specification to apply.
	// +kubebuilder:validation:Optional
	Spec []VirtualNodeSpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VirtualNodeSpecInitParameters struct {

	// Backends to which the virtual node is expected to send outbound traffic.
	Backend []BackendInitParameters `json:"backend,omitempty" tf:"backend,omitempty"`

	// Defaults for backends.
	BackendDefaults []SpecBackendDefaultsInitParameters `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners from which the virtual node is expected to receive inbound traffic.
	Listener []SpecListenerInitParameters `json:"listener,omitempty" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual node.
	Logging []SpecLoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// Service discovery information for the virtual node.
	ServiceDiscovery []ServiceDiscoveryInitParameters `json:"serviceDiscovery,omitempty" tf:"service_discovery,omitempty"`
}

type VirtualNodeSpecObservation struct {

	// Backends to which the virtual node is expected to send outbound traffic.
	Backend []BackendObservation `json:"backend,omitempty" tf:"backend,omitempty"`

	// Defaults for backends.
	BackendDefaults []SpecBackendDefaultsObservation `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners from which the virtual node is expected to receive inbound traffic.
	Listener []SpecListenerObservation `json:"listener,omitempty" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual node.
	Logging []SpecLoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	// Service discovery information for the virtual node.
	ServiceDiscovery []ServiceDiscoveryObservation `json:"serviceDiscovery,omitempty" tf:"service_discovery,omitempty"`
}

type VirtualNodeSpecParameters struct {

	// Backends to which the virtual node is expected to send outbound traffic.
	// +kubebuilder:validation:Optional
	Backend []BackendParameters `json:"backend,omitempty" tf:"backend,omitempty"`

	// Defaults for backends.
	// +kubebuilder:validation:Optional
	BackendDefaults []SpecBackendDefaultsParameters `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners from which the virtual node is expected to receive inbound traffic.
	// +kubebuilder:validation:Optional
	Listener []SpecListenerParameters `json:"listener,omitempty" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual node.
	// +kubebuilder:validation:Optional
	Logging []SpecLoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// Service discovery information for the virtual node.
	// +kubebuilder:validation:Optional
	ServiceDiscovery []ServiceDiscoveryParameters `json:"serviceDiscovery,omitempty" tf:"service_discovery,omitempty"`
}

type VirtualServiceClientPolicyInitParameters struct {

	// Transport Layer Security (TLS) client policy.
	TLS []ClientPolicyTLSInitParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type VirtualServiceClientPolicyObservation struct {

	// Transport Layer Security (TLS) client policy.
	TLS []ClientPolicyTLSObservation `json:"tls,omitempty" tf:"tls,omitempty"`
}

type VirtualServiceClientPolicyParameters struct {

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []ClientPolicyTLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

// VirtualNodeSpec defines the desired state of VirtualNode
type VirtualNodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualNodeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualNodeInitParameters `json:"initProvider,omitempty"`
}

// VirtualNodeStatus defines the observed state of VirtualNode.
type VirtualNodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualNodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualNode is the Schema for the VirtualNodes API. Provides an AWS App Mesh virtual node resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VirtualNode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	Spec   VirtualNodeSpec   `json:"spec"`
	Status VirtualNodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualNodeList contains a list of VirtualNodes
type VirtualNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNode `json:"items"`
}

// Repository type metadata.
var (
	VirtualNode_Kind             = "VirtualNode"
	VirtualNode_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualNode_Kind}.String()
	VirtualNode_KindAPIVersion   = VirtualNode_Kind + "." + CRDGroupVersion.String()
	VirtualNode_GroupVersionKind = CRDGroupVersion.WithKind(VirtualNode_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualNode{}, &VirtualNodeList{})
}
