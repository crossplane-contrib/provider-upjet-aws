// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessLogFileInitParameters struct {

	// The specified format for the logs.
	Format []FormatInitParameters `json:"format,omitempty" tf:"format,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type AccessLogFileObservation struct {

	// The specified format for the logs.
	Format []FormatObservation `json:"format,omitempty" tf:"format,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type AccessLogFileParameters struct {

	// The specified format for the logs.
	// +kubebuilder:validation:Optional
	Format []FormatParameters `json:"format,omitempty" tf:"format,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type AccessLogInitParameters struct {

	// Local file certificate.
	File []AccessLogFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`
}

type AccessLogObservation struct {

	// Local file certificate.
	File []AccessLogFileObservation `json:"file,omitempty" tf:"file,omitempty"`
}

type AccessLogParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []AccessLogFileParameters `json:"file,omitempty" tf:"file,omitempty"`
}

type AcmInitParameters struct {

	// One or more ACM ARNs.
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns,omitempty" tf:"certificate_authority_arns,omitempty"`
}

type AcmObservation struct {

	// One or more ACM ARNs.
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns,omitempty" tf:"certificate_authority_arns,omitempty"`
}

type AcmParameters struct {

	// One or more ACM ARNs.
	// +kubebuilder:validation:Optional
	// +listType:set
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns" tf:"certificate_authority_arns,omitempty"`
}

type BackendDefaultsInitParameters struct {

	// Default client policy for virtual gateway backends.
	ClientPolicy []ClientPolicyInitParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type BackendDefaultsObservation struct {

	// Default client policy for virtual gateway backends.
	ClientPolicy []ClientPolicyObservation `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type BackendDefaultsParameters struct {

	// Default client policy for virtual gateway backends.
	// +kubebuilder:validation:Optional
	ClientPolicy []ClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type CertificateAcmInitParameters struct {
}

type CertificateAcmObservation struct {

	// ARN for the certificate.
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn,omitempty"`
}

type CertificateAcmParameters struct {

	// ARN for the certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta1.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn,omitempty"`

	// Reference to a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	CertificateArnRef *v1.Reference `json:"certificateArnRef,omitempty" tf:"-"`

	// Selector for a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	CertificateArnSelector *v1.Selector `json:"certificateArnSelector,omitempty" tf:"-"`
}

type CertificateFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type CertificateFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type CertificateFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type CertificateInitParameters struct {

	// Local file certificate.
	File []FileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []SdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type CertificateObservation struct {

	// Local file certificate.
	File []FileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []SdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type CertificateParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []FileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []SdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type CertificateSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type CertificateSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type CertificateSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ClientPolicyInitParameters struct {

	// Transport Layer Security (TLS) client policy.
	TLS []TLSInitParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ClientPolicyObservation struct {

	// Transport Layer Security (TLS) client policy.
	TLS []TLSObservation `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ClientPolicyParameters struct {

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []TLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ConnectionPoolInitParameters struct {

	// Connection pool information for gRPC listeners.
	GRPC []GRPCInitParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	HTTP []HTTPInitParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	Http2 []Http2InitParameters `json:"http2,omitempty" tf:"http2,omitempty"`
}

type ConnectionPoolObservation struct {

	// Connection pool information for gRPC listeners.
	GRPC []GRPCObservation `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	HTTP []HTTPObservation `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	Http2 []Http2Observation `json:"http2,omitempty" tf:"http2,omitempty"`
}

type ConnectionPoolParameters struct {

	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	GRPC []GRPCParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	HTTP []HTTPParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	Http2 []Http2Parameters `json:"http2,omitempty" tf:"http2,omitempty"`
}

type FileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type FileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`
}

type FileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type FormatInitParameters struct {

	// The logging format for JSON.
	JSON []JSONInitParameters `json:"json,omitempty" tf:"json,omitempty"`

	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type FormatObservation struct {

	// The logging format for JSON.
	JSON []JSONObservation `json:"json,omitempty" tf:"json,omitempty"`

	// The logging format for text. Must be between 1 and 1000 characters in length.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type FormatParameters struct {

	// The logging format for JSON.
	// +kubebuilder:validation:Optional
	JSON []JSONParameters `json:"json,omitempty" tf:"json,omitempty"`

	// The logging format for text. Must be between 1 and 1000 characters in length.
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type GRPCInitParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type GRPCObservation struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type GRPCParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxRequests *float64 `json:"maxRequests" tf:"max_requests,omitempty"`
}

type HTTPInitParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type HTTPObservation struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type HTTPParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type HealthCheckInitParameters struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	IntervalMillis *float64 `json:"intervalMillis,omitempty" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis *float64 `json:"timeoutMillis,omitempty" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type HealthCheckObservation struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	IntervalMillis *float64 `json:"intervalMillis,omitempty" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis *float64 `json:"timeoutMillis,omitempty" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type HealthCheckParameters struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	// +kubebuilder:validation:Optional
	IntervalMillis *float64 `json:"intervalMillis" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	// +kubebuilder:validation:Optional
	TimeoutMillis *float64 `json:"timeoutMillis" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold" tf:"unhealthy_threshold,omitempty"`
}

type Http2InitParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type Http2Observation struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`
}

type Http2Parameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxRequests *float64 `json:"maxRequests" tf:"max_requests,omitempty"`
}

type JSONInitParameters struct {

	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type JSONObservation struct {

	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type JSONParameters struct {

	// The specified key for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The specified value for the JSON. Must be between 1 and 100 characters in length.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ListenerInitParameters struct {

	// Connection pool information for the listener.
	ConnectionPool []ConnectionPoolInitParameters `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	HealthCheck []HealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Port mapping information for the listener.
	PortMapping []PortMappingInitParameters `json:"portMapping,omitempty" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	TLS []ListenerTLSInitParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ListenerObservation struct {

	// Connection pool information for the listener.
	ConnectionPool []ConnectionPoolObservation `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	HealthCheck []HealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Port mapping information for the listener.
	PortMapping []PortMappingObservation `json:"portMapping,omitempty" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	TLS []ListenerTLSObservation `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ListenerParameters struct {

	// Connection pool information for the listener.
	// +kubebuilder:validation:Optional
	ConnectionPool []ConnectionPoolParameters `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	// +kubebuilder:validation:Optional
	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Port mapping information for the listener.
	// +kubebuilder:validation:Optional
	PortMapping []PortMappingParameters `json:"portMapping" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []ListenerTLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ListenerTLSInitParameters struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	Certificate []TLSCertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// TLS validation context.
	Validation []TLSValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ListenerTLSObservation struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	Certificate []TLSCertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// TLS validation context.
	Validation []TLSValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ListenerTLSParameters struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	Certificate []TLSCertificateParameters `json:"certificate" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Optional
	Validation []TLSValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type LoggingInitParameters struct {

	// Access log configuration for a virtual gateway.
	AccessLog []AccessLogInitParameters `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type LoggingObservation struct {

	// Access log configuration for a virtual gateway.
	AccessLog []AccessLogObservation `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type LoggingParameters struct {

	// Access log configuration for a virtual gateway.
	// +kubebuilder:validation:Optional
	AccessLog []AccessLogParameters `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type PortMappingInitParameters struct {

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type PortMappingObservation struct {

	// Port used for the port mapping.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type PortMappingParameters struct {

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type SdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type SdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type SdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type SubjectAlternativeNamesInitParameters struct {

	// Criteria for determining a SAN's match.
	Match []SubjectAlternativeNamesMatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type SubjectAlternativeNamesMatchInitParameters struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type SubjectAlternativeNamesMatchObservation struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type SubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	// +listType:set
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type SubjectAlternativeNamesObservation struct {

	// Criteria for determining a SAN's match.
	Match []SubjectAlternativeNamesMatchObservation `json:"match,omitempty" tf:"match,omitempty"`
}

type SubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	Match []SubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type TLSCertificateInitParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []CertificateAcmInitParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []CertificateFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []CertificateSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSCertificateObservation struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []CertificateAcmObservation `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []CertificateFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []CertificateSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSCertificateParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []CertificateAcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []CertificateFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []CertificateSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSInitParameters struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	Certificate []CertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	Validation []ValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type TLSObservation struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	Certificate []CertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	Validation []ValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type TLSParameters struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	// +listType:set
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Optional
	Validation []ValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type TLSValidationInitParameters struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames []ValidationSubjectAlternativeNamesInitParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []ValidationTrustInitParameters `json:"trust,omitempty" tf:"trust,omitempty"`
}

type TLSValidationObservation struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames []ValidationSubjectAlternativeNamesObservation `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []ValidationTrustObservation `json:"trust,omitempty" tf:"trust,omitempty"`
}

type TLSValidationParameters struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []ValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	Trust []ValidationTrustParameters `json:"trust" tf:"trust,omitempty"`
}

type TrustFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type TrustFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type TrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type TrustInitParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []AcmInitParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []TrustFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []TrustSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TrustObservation struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	Acm []AcmObservation `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	File []TrustFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []TrustSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TrustParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []AcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []TrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []TrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TrustSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TrustSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ValidationInitParameters struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames []SubjectAlternativeNamesInitParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []TrustInitParameters `json:"trust,omitempty" tf:"trust,omitempty"`
}

type ValidationObservation struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	SubjectAlternativeNames []SubjectAlternativeNamesObservation `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	Trust []TrustObservation `json:"trust,omitempty" tf:"trust,omitempty"`
}

type ValidationParameters struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []SubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Optional
	Trust []TrustParameters `json:"trust" tf:"trust,omitempty"`
}

type ValidationSubjectAlternativeNamesInitParameters struct {

	// Criteria for determining a SAN's match.
	Match []ValidationSubjectAlternativeNamesMatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type ValidationSubjectAlternativeNamesMatchInitParameters struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type ValidationSubjectAlternativeNamesMatchObservation struct {

	// Values sent must match the specified values exactly.
	// +listType:set
	Exact []*string `json:"exact,omitempty" tf:"exact,omitempty"`
}

type ValidationSubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Optional
	// +listType:set
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type ValidationSubjectAlternativeNamesObservation struct {

	// Criteria for determining a SAN's match.
	Match []ValidationSubjectAlternativeNamesMatchObservation `json:"match,omitempty" tf:"match,omitempty"`
}

type ValidationSubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Optional
	Match []ValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type ValidationTrustFileInitParameters struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type ValidationTrustFileObservation struct {

	// Certificate chain for the certificate.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type ValidationTrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type ValidationTrustInitParameters struct {

	// Local file certificate.
	File []ValidationTrustFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ValidationTrustSdsInitParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ValidationTrustObservation struct {

	// Local file certificate.
	File []ValidationTrustFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	Sds []ValidationTrustSdsObservation `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ValidationTrustParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []ValidationTrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []ValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ValidationTrustSdsInitParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ValidationTrustSdsObservation struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type ValidationTrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type VirtualGatewayInitParameters struct {

	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName *string `json:"meshName,omitempty" tf:"mesh_name,omitempty"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Virtual gateway specification to apply.
	Spec []VirtualGatewaySpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VirtualGatewayObservation struct {

	// ARN of the virtual gateway.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Creation date of the virtual gateway.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	// ID of the virtual gateway.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last update date of the virtual gateway.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName *string `json:"meshName,omitempty" tf:"mesh_name,omitempty"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource owner's AWS account ID.
	ResourceOwner *string `json:"resourceOwner,omitempty" tf:"resource_owner,omitempty"`

	// Virtual gateway specification to apply.
	Spec []VirtualGatewaySpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type VirtualGatewayParameters struct {

	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	MeshName *string `json:"meshName,omitempty" tf:"mesh_name,omitempty"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Virtual gateway specification to apply.
	// +kubebuilder:validation:Optional
	Spec []VirtualGatewaySpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VirtualGatewaySpecInitParameters struct {

	// Defaults for backends.
	BackendDefaults []BackendDefaultsInitParameters `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	Listener []ListenerInitParameters `json:"listener,omitempty" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual gateway.
	Logging []LoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`
}

type VirtualGatewaySpecObservation struct {

	// Defaults for backends.
	BackendDefaults []BackendDefaultsObservation `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	Listener []ListenerObservation `json:"listener,omitempty" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual gateway.
	Logging []LoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`
}

type VirtualGatewaySpecParameters struct {

	// Defaults for backends.
	// +kubebuilder:validation:Optional
	BackendDefaults []BackendDefaultsParameters `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	// +kubebuilder:validation:Optional
	Listener []ListenerParameters `json:"listener" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual gateway.
	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`
}

// VirtualGatewaySpec defines the desired state of VirtualGateway
type VirtualGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualGatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualGatewayInitParameters `json:"initProvider,omitempty"`
}

// VirtualGatewayStatus defines the observed state of VirtualGateway.
type VirtualGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualGateway is the Schema for the VirtualGateways API. Provides an AWS App Mesh virtual gateway resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VirtualGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meshName) || (has(self.initProvider) && has(self.initProvider.meshName))",message="spec.forProvider.meshName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	Spec   VirtualGatewaySpec   `json:"spec"`
	Status VirtualGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualGatewayList contains a list of VirtualGateways
type VirtualGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualGateway `json:"items"`
}

// Repository type metadata.
var (
	VirtualGateway_Kind             = "VirtualGateway"
	VirtualGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualGateway_Kind}.String()
	VirtualGateway_KindAPIVersion   = VirtualGateway_Kind + "." + CRDGroupVersion.String()
	VirtualGateway_GroupVersionKind = CRDGroupVersion.WithKind(VirtualGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualGateway{}, &VirtualGatewayList{})
}
