/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessLogFileObservation struct {
}

type AccessLogFileParameters struct {

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type AccessLogObservation struct {
}

type AccessLogParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []AccessLogFileParameters `json:"file,omitempty" tf:"file,omitempty"`
}

type AcmObservation struct {
}

type AcmParameters struct {

	// One or more ACM ARNs.
	// +kubebuilder:validation:Required
	CertificateAuthorityArns []*string `json:"certificateAuthorityArns" tf:"certificate_authority_arns,omitempty"`
}

type BackendDefaultsObservation struct {
}

type BackendDefaultsParameters struct {

	// Default client policy for virtual gateway backends.
	// +kubebuilder:validation:Optional
	ClientPolicy []ClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy,omitempty"`
}

type CertificateAcmObservation struct {
}

type CertificateAcmParameters struct {

	// ARN for the certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta1.Certificate
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn,omitempty"`

	// Reference to a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	CertificateArnRef *v1.Reference `json:"certificateArnRef,omitempty" tf:"-"`

	// Selector for a Certificate in acm to populate certificateArn.
	// +kubebuilder:validation:Optional
	CertificateArnSelector *v1.Selector `json:"certificateArnSelector,omitempty" tf:"-"`
}

type CertificateFileObservation struct {
}

type CertificateFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []FileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []SdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type CertificateSdsObservation struct {
}

type CertificateSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ClientPolicyObservation struct {
}

type ClientPolicyParameters struct {

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []TLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ConnectionPoolObservation struct {
}

type ConnectionPoolParameters struct {

	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	GRPC []GRPCParameters `json:"grpc,omitempty" tf:"grpc,omitempty"`

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	HTTP []HTTPParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	Http2 []Http2Parameters `json:"http2,omitempty" tf:"http2,omitempty"`
}

type FileObservation struct {
}

type FileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type GRPCObservation struct {
}

type GRPCParameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	MaxRequests *float64 `json:"maxRequests" tf:"max_requests,omitempty"`
}

type HTTPObservation struct {
}

type HTTPParameters struct {

	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	MaxConnections *float64 `json:"maxConnections" tf:"max_connections,omitempty"`

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	MaxPendingRequests *float64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests,omitempty"`
}

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {

	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	// +kubebuilder:validation:Required
	HealthyThreshold *float64 `json:"healthyThreshold" tf:"healthy_threshold,omitempty"`

	// Time period in milliseconds between each health check execution.
	// +kubebuilder:validation:Required
	IntervalMillis *float64 `json:"intervalMillis" tf:"interval_millis,omitempty"`

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	// +kubebuilder:validation:Required
	TimeoutMillis *float64 `json:"timeoutMillis" tf:"timeout_millis,omitempty"`

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	// +kubebuilder:validation:Required
	UnhealthyThreshold *float64 `json:"unhealthyThreshold" tf:"unhealthy_threshold,omitempty"`
}

type Http2Observation struct {
}

type Http2Parameters struct {

	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	MaxRequests *float64 `json:"maxRequests" tf:"max_requests,omitempty"`
}

type ListenerObservation struct {
}

type ListenerParameters struct {

	// Connection pool information for the listener.
	// +kubebuilder:validation:Optional
	ConnectionPool []ConnectionPoolParameters `json:"connectionPool,omitempty" tf:"connection_pool,omitempty"`

	// Health check information for the listener.
	// +kubebuilder:validation:Optional
	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Port mapping information for the listener.
	// +kubebuilder:validation:Required
	PortMapping []PortMappingParameters `json:"portMapping" tf:"port_mapping,omitempty"`

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	TLS []ListenerTLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ListenerTLSObservation struct {
}

type ListenerTLSParameters struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Required
	Certificate []TLSCertificateParameters `json:"certificate" tf:"certificate,omitempty"`

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Optional
	Validation []TLSValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type LoggingObservation struct {
}

type LoggingParameters struct {

	// Access log configuration for a virtual gateway.
	// +kubebuilder:validation:Optional
	AccessLog []AccessLogParameters `json:"accessLog,omitempty" tf:"access_log,omitempty"`
}

type PortMappingObservation struct {
}

type PortMappingParameters struct {

	// Port used for the port mapping.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type SdsObservation struct {
}

type SdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type SubjectAlternativeNamesMatchObservation struct {
}

type SubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type SubjectAlternativeNamesObservation struct {
}

type SubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	Match []SubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type TLSCertificateObservation struct {
}

type TLSCertificateParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []CertificateAcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []CertificateFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []CertificateSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TLSObservation struct {
}

type TLSParameters struct {

	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// TLS validation context.
	// +kubebuilder:validation:Required
	Validation []ValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type TLSValidationObservation struct {
}

type TLSValidationParameters struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []ValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	Trust []ValidationTrustParameters `json:"trust" tf:"trust,omitempty"`
}

type TrustFileObservation struct {
}

type TrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type TrustObservation struct {
}

type TrustParameters struct {

	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	Acm []AcmParameters `json:"acm,omitempty" tf:"acm,omitempty"`

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []TrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []TrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type TrustSdsObservation struct {
}

type TrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type ValidationObservation struct {
}

type ValidationParameters struct {

	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []SubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	Trust []TrustParameters `json:"trust" tf:"trust,omitempty"`
}

type ValidationSubjectAlternativeNamesMatchObservation struct {
}

type ValidationSubjectAlternativeNamesMatchParameters struct {

	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	Exact []*string `json:"exact" tf:"exact,omitempty"`
}

type ValidationSubjectAlternativeNamesObservation struct {
}

type ValidationSubjectAlternativeNamesParameters struct {

	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	Match []ValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match,omitempty"`
}

type ValidationTrustFileObservation struct {
}

type ValidationTrustFileParameters struct {

	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain,omitempty"`
}

type ValidationTrustObservation struct {
}

type ValidationTrustParameters struct {

	// Local file certificate.
	// +kubebuilder:validation:Optional
	File []ValidationTrustFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	Sds []ValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds,omitempty"`
}

type ValidationTrustSdsObservation struct {
}

type ValidationTrustSdsParameters struct {

	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type VirtualGatewayObservation struct {

	// ARN of the virtual gateway.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Creation date of the virtual gateway.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	// ID of the virtual gateway.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last update date of the virtual gateway.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	// Resource owner's AWS account ID.
	ResourceOwner *string `json:"resourceOwner,omitempty" tf:"resource_owner,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type VirtualGatewayParameters struct {

	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	MeshName *string `json:"meshName" tf:"mesh_name,omitempty"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Virtual gateway specification to apply.
	// +kubebuilder:validation:Required
	Spec []VirtualGatewaySpecParameters `json:"spec" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VirtualGatewaySpecObservation struct {
}

type VirtualGatewaySpecParameters struct {

	// Defaults for backends.
	// +kubebuilder:validation:Optional
	BackendDefaults []BackendDefaultsParameters `json:"backendDefaults,omitempty" tf:"backend_defaults,omitempty"`

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	// +kubebuilder:validation:Required
	Listener []ListenerParameters `json:"listener" tf:"listener,omitempty"`

	// Inbound and outbound access logging information for the virtual gateway.
	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`
}

// VirtualGatewaySpec defines the desired state of VirtualGateway
type VirtualGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualGatewayParameters `json:"forProvider"`
}

// VirtualGatewayStatus defines the observed state of VirtualGateway.
type VirtualGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualGateway is the Schema for the VirtualGateways API. Provides an AWS App Mesh virtual gateway resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VirtualGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualGatewaySpec   `json:"spec"`
	Status            VirtualGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualGatewayList contains a list of VirtualGateways
type VirtualGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualGateway `json:"items"`
}

// Repository type metadata.
var (
	VirtualGateway_Kind             = "VirtualGateway"
	VirtualGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualGateway_Kind}.String()
	VirtualGateway_KindAPIVersion   = VirtualGateway_Kind + "." + CRDGroupVersion.String()
	VirtualGateway_GroupVersionKind = CRDGroupVersion.WithKind(VirtualGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualGateway{}, &VirtualGatewayList{})
}
