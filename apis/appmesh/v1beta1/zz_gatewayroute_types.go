/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionObservation struct {
}

type ActionParameters struct {

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Required
	Target []TargetParameters `json:"target" tf:"target,omitempty"`
}

type ActionRewriteObservation struct {
}

type ActionRewriteParameters struct {

	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	Hostname []RewriteHostnameParameters `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	Prefix []RewritePrefixParameters `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type ActionTargetObservation struct {
}

type ActionTargetParameters struct {

	// Virtual service gateway route target.
	// +kubebuilder:validation:Required
	VirtualService []TargetVirtualServiceParameters `json:"virtualService" tf:"virtual_service,omitempty"`
}

type ActionTargetVirtualServiceObservation struct {
}

type ActionTargetVirtualServiceParameters struct {

	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	VirtualServiceName *string `json:"virtualServiceName,omitempty" tf:"virtual_service_name,omitempty"`

	// Reference to a VirtualService in appmesh to populate virtualServiceName.
	// +kubebuilder:validation:Optional
	VirtualServiceNameRef *v1.Reference `json:"virtualServiceNameRef,omitempty" tf:"-"`

	// Selector for a VirtualService in appmesh to populate virtualServiceName.
	// +kubebuilder:validation:Optional
	VirtualServiceNameSelector *v1.Selector `json:"virtualServiceNameSelector,omitempty" tf:"-"`
}

type GRPCRouteObservation struct {
}

type GRPCRouteParameters struct {

	// Action to take if a match is determined.
	// +kubebuilder:validation:Required
	Action []ActionParameters `json:"action" tf:"action,omitempty"`

	// Criteria for determining a request match.
	// +kubebuilder:validation:Required
	Match []MatchParameters `json:"match" tf:"match,omitempty"`
}

type GatewayRouteObservation struct {

	// ARN of the gateway route.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Creation date of the gateway route.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	// ID of the gateway route.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last update date of the gateway route.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	// Resource owner's AWS account ID.
	ResourceOwner *string `json:"resourceOwner,omitempty" tf:"resource_owner,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type GatewayRouteParameters struct {

	// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	MeshName *string `json:"meshName" tf:"mesh_name,omitempty"`

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner,omitempty"`

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Gateway route specification to apply.
	// +kubebuilder:validation:Required
	Spec []SpecParameters `json:"spec" tf:"spec,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualGateway
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	VirtualGatewayName *string `json:"virtualGatewayName,omitempty" tf:"virtual_gateway_name,omitempty"`

	// Reference to a VirtualGateway in appmesh to populate virtualGatewayName.
	// +kubebuilder:validation:Optional
	VirtualGatewayNameRef *v1.Reference `json:"virtualGatewayNameRef,omitempty" tf:"-"`

	// Selector for a VirtualGateway in appmesh to populate virtualGatewayName.
	// +kubebuilder:validation:Optional
	VirtualGatewayNameSelector *v1.Selector `json:"virtualGatewayNameSelector,omitempty" tf:"-"`
}

type HTTPRouteActionObservation struct {
}

type HTTPRouteActionParameters struct {

	// Gateway route action to rewrite.
	// +kubebuilder:validation:Optional
	Rewrite []ActionRewriteParameters `json:"rewrite,omitempty" tf:"rewrite,omitempty"`

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Required
	Target []HTTPRouteActionTargetParameters `json:"target" tf:"target,omitempty"`
}

type HTTPRouteActionTargetObservation struct {
}

type HTTPRouteActionTargetParameters struct {

	// Virtual service gateway route target.
	// +kubebuilder:validation:Required
	VirtualService []ActionTargetVirtualServiceParameters `json:"virtualService" tf:"virtual_service,omitempty"`
}

type HTTPRouteMatchHostnameObservation struct {
}

type HTTPRouteMatchHostnameParameters struct {

	// Exact host name to match on.
	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Specified ending characters of the host name to match on.
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type HTTPRouteMatchObservation struct {
}

type HTTPRouteMatchParameters struct {

	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	Hostname []HTTPRouteMatchHostnameParameters `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The port number to match from the request.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type HTTPRouteObservation struct {
}

type HTTPRouteParameters struct {

	// Action to take if a match is determined.
	// +kubebuilder:validation:Required
	Action []HTTPRouteActionParameters `json:"action" tf:"action,omitempty"`

	// Criteria for determining a request match.
	// +kubebuilder:validation:Required
	Match []HTTPRouteMatchParameters `json:"match" tf:"match,omitempty"`
}

type HostnameObservation struct {
}

type HostnameParameters struct {

	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Required
	DefaultTargetHostname *string `json:"defaultTargetHostname" tf:"default_target_hostname,omitempty"`
}

type Http2RouteActionObservation struct {
}

type Http2RouteActionParameters struct {

	// Gateway route action to rewrite.
	// +kubebuilder:validation:Optional
	Rewrite []RewriteParameters `json:"rewrite,omitempty" tf:"rewrite,omitempty"`

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Required
	Target []ActionTargetParameters `json:"target" tf:"target,omitempty"`
}

type Http2RouteMatchObservation struct {
}

type Http2RouteMatchParameters struct {

	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	Hostname []MatchHostnameParameters `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The port number to match from the request.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type Http2RouteObservation struct {
}

type Http2RouteParameters struct {

	// Action to take if a match is determined.
	// +kubebuilder:validation:Required
	Action []Http2RouteActionParameters `json:"action" tf:"action,omitempty"`

	// Criteria for determining a request match.
	// +kubebuilder:validation:Required
	Match []Http2RouteMatchParameters `json:"match" tf:"match,omitempty"`
}

type MatchHostnameObservation struct {
}

type MatchHostnameParameters struct {

	// Exact host name to match on.
	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Specified ending characters of the host name to match on.
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type MatchObservation struct {
}

type MatchParameters struct {

	// The port number to match from the request.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Fully qualified domain name for the service to match from the request.
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

type PrefixObservation struct {
}

type PrefixParameters struct {

	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	DefaultPrefix *string `json:"defaultPrefix,omitempty" tf:"default_prefix,omitempty"`

	// Value used to replace the incoming route prefix when rewritten.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RewriteHostnameObservation struct {
}

type RewriteHostnameParameters struct {

	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Required
	DefaultTargetHostname *string `json:"defaultTargetHostname" tf:"default_target_hostname,omitempty"`
}

type RewriteObservation struct {
}

type RewriteParameters struct {

	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	Hostname []HostnameParameters `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	Prefix []PrefixParameters `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type RewritePrefixObservation struct {
}

type RewritePrefixParameters struct {

	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	DefaultPrefix *string `json:"defaultPrefix,omitempty" tf:"default_prefix,omitempty"`

	// Value used to replace the incoming route prefix when rewritten.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SpecObservation struct {
}

type SpecParameters struct {

	// Specification of a gRPC gateway route.
	// +kubebuilder:validation:Optional
	GRPCRoute []GRPCRouteParameters `json:"grpcRoute,omitempty" tf:"grpc_route,omitempty"`

	// Specification of an HTTP gateway route.
	// +kubebuilder:validation:Optional
	HTTPRoute []HTTPRouteParameters `json:"httpRoute,omitempty" tf:"http_route,omitempty"`

	// Specification of an HTTP/2 gateway route.
	// +kubebuilder:validation:Optional
	Http2Route []Http2RouteParameters `json:"http2Route,omitempty" tf:"http2_route,omitempty"`
}

type TargetObservation struct {
}

type TargetParameters struct {

	// Virtual service gateway route target.
	// +kubebuilder:validation:Required
	VirtualService []VirtualServiceParameters `json:"virtualService" tf:"virtual_service,omitempty"`
}

type TargetVirtualServiceObservation struct {
}

type TargetVirtualServiceParameters struct {

	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	VirtualServiceName *string `json:"virtualServiceName" tf:"virtual_service_name,omitempty"`
}

type VirtualServiceObservation struct {
}

type VirtualServiceParameters struct {

	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	VirtualServiceName *string `json:"virtualServiceName" tf:"virtual_service_name,omitempty"`
}

// GatewayRouteSpec defines the desired state of GatewayRoute
type GatewayRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayRouteParameters `json:"forProvider"`
}

// GatewayRouteStatus defines the observed state of GatewayRoute.
type GatewayRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayRoute is the Schema for the GatewayRoutes API. Provides an AWS App Mesh gateway route resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GatewayRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayRouteSpec   `json:"spec"`
	Status            GatewayRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayRouteList contains a list of GatewayRoutes
type GatewayRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayRoute `json:"items"`
}

// Repository type metadata.
var (
	GatewayRoute_Kind             = "GatewayRoute"
	GatewayRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayRoute_Kind}.String()
	GatewayRoute_KindAPIVersion   = GatewayRoute_Kind + "." + CRDGroupVersion.String()
	GatewayRoute_GroupVersionKind = CRDGroupVersion.WithKind(GatewayRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayRoute{}, &GatewayRouteList{})
}
