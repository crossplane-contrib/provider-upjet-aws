//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Certificate) DeepCopyInto(out *Certificate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Certificate.
func (in *Certificate) DeepCopy() *Certificate {
	if in == nil {
		return nil
	}
	out := new(Certificate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Certificate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateList) DeepCopyInto(out *CertificateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Certificate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateList.
func (in *CertificateList) DeepCopy() *CertificateList {
	if in == nil {
		return nil
	}
	out := new(CertificateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CertificateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateObservation) DeepCopyInto(out *CertificateObservation) {
	*out = *in
	if in.CertificateArn != nil {
		in, out := &in.CertificateArn, &out.CertificateArn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateObservation.
func (in *CertificateObservation) DeepCopy() *CertificateObservation {
	if in == nil {
		return nil
	}
	out := new(CertificateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateParameters) DeepCopyInto(out *CertificateParameters) {
	*out = *in
	if in.CertificatePemSecretRef != nil {
		in, out := &in.CertificatePemSecretRef, &out.CertificatePemSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.CertificateWalletSecretRef != nil {
		in, out := &in.CertificateWalletSecretRef, &out.CertificateWalletSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateParameters.
func (in *CertificateParameters) DeepCopy() *CertificateParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateSpec) DeepCopyInto(out *CertificateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateSpec.
func (in *CertificateSpec) DeepCopy() *CertificateSpec {
	if in == nil {
		return nil
	}
	out := new(CertificateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateStatus) DeepCopyInto(out *CertificateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateStatus.
func (in *CertificateStatus) DeepCopy() *CertificateStatus {
	if in == nil {
		return nil
	}
	out := new(CertificateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchSettingsObservation) DeepCopyInto(out *ElasticsearchSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchSettingsObservation.
func (in *ElasticsearchSettingsObservation) DeepCopy() *ElasticsearchSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchSettingsParameters) DeepCopyInto(out *ElasticsearchSettingsParameters) {
	*out = *in
	if in.EndpointURI != nil {
		in, out := &in.EndpointURI, &out.EndpointURI
		*out = new(string)
		**out = **in
	}
	if in.ErrorRetryDuration != nil {
		in, out := &in.ErrorRetryDuration, &out.ErrorRetryDuration
		*out = new(float64)
		**out = **in
	}
	if in.FullLoadErrorPercentage != nil {
		in, out := &in.FullLoadErrorPercentage, &out.FullLoadErrorPercentage
		*out = new(float64)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchSettingsParameters.
func (in *ElasticsearchSettingsParameters) DeepCopy() *ElasticsearchSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Endpoint) DeepCopyInto(out *Endpoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Endpoint.
func (in *Endpoint) DeepCopy() *Endpoint {
	if in == nil {
		return nil
	}
	out := new(Endpoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Endpoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointList) DeepCopyInto(out *EndpointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Endpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointList.
func (in *EndpointList) DeepCopy() *EndpointList {
	if in == nil {
		return nil
	}
	out := new(EndpointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EndpointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointObservation) DeepCopyInto(out *EndpointObservation) {
	*out = *in
	if in.EndpointArn != nil {
		in, out := &in.EndpointArn, &out.EndpointArn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointObservation.
func (in *EndpointObservation) DeepCopy() *EndpointObservation {
	if in == nil {
		return nil
	}
	out := new(EndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointParameters) DeepCopyInto(out *EndpointParameters) {
	*out = *in
	if in.CertificateArn != nil {
		in, out := &in.CertificateArn, &out.CertificateArn
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ElasticsearchSettings != nil {
		in, out := &in.ElasticsearchSettings, &out.ElasticsearchSettings
		*out = make([]ElasticsearchSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.EngineName != nil {
		in, out := &in.EngineName, &out.EngineName
		*out = new(string)
		**out = **in
	}
	if in.ExtraConnectionAttributes != nil {
		in, out := &in.ExtraConnectionAttributes, &out.ExtraConnectionAttributes
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArnRef != nil {
		in, out := &in.KMSKeyArnRef, &out.KMSKeyArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyArnSelector != nil {
		in, out := &in.KMSKeyArnSelector, &out.KMSKeyArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KafkaSettings != nil {
		in, out := &in.KafkaSettings, &out.KafkaSettings
		*out = make([]KafkaSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KinesisSettings != nil {
		in, out := &in.KinesisSettings, &out.KinesisSettings
		*out = make([]KinesisSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MongodbSettings != nil {
		in, out := &in.MongodbSettings, &out.MongodbSettings
		*out = make([]MongodbSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.S3Settings != nil {
		in, out := &in.S3Settings, &out.S3Settings
		*out = make([]S3SettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SSLMode != nil {
		in, out := &in.SSLMode, &out.SSLMode
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArn != nil {
		in, out := &in.SecretsManagerAccessRoleArn, &out.SecretsManagerAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArnRef != nil {
		in, out := &in.SecretsManagerAccessRoleArnRef, &out.SecretsManagerAccessRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretsManagerAccessRoleArnSelector != nil {
		in, out := &in.SecretsManagerAccessRoleArnSelector, &out.SecretsManagerAccessRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretsManagerArn != nil {
		in, out := &in.SecretsManagerArn, &out.SecretsManagerArn
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRole != nil {
		in, out := &in.ServiceAccessRole, &out.ServiceAccessRole
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointParameters.
func (in *EndpointParameters) DeepCopy() *EndpointParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointSpec) DeepCopyInto(out *EndpointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointSpec.
func (in *EndpointSpec) DeepCopy() *EndpointSpec {
	if in == nil {
		return nil
	}
	out := new(EndpointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointStatus) DeepCopyInto(out *EndpointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointStatus.
func (in *EndpointStatus) DeepCopy() *EndpointStatus {
	if in == nil {
		return nil
	}
	out := new(EndpointStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaSettingsObservation) DeepCopyInto(out *KafkaSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaSettingsObservation.
func (in *KafkaSettingsObservation) DeepCopy() *KafkaSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaSettingsParameters) DeepCopyInto(out *KafkaSettingsParameters) {
	*out = *in
	if in.Broker != nil {
		in, out := &in.Broker, &out.Broker
		*out = new(string)
		**out = **in
	}
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(float64)
		**out = **in
	}
	if in.NoHexPrefix != nil {
		in, out := &in.NoHexPrefix, &out.NoHexPrefix
		*out = new(bool)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificateArn != nil {
		in, out := &in.SSLClientCertificateArn, &out.SSLClientCertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyArn != nil {
		in, out := &in.SSLClientKeyArn, &out.SSLClientKeyArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyPasswordSecretRef != nil {
		in, out := &in.SSLClientKeyPasswordSecretRef, &out.SSLClientKeyPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaSettingsParameters.
func (in *KafkaSettingsParameters) DeepCopy() *KafkaSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KinesisSettingsObservation) DeepCopyInto(out *KinesisSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KinesisSettingsObservation.
func (in *KinesisSettingsObservation) DeepCopy() *KinesisSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(KinesisSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KinesisSettingsParameters) DeepCopyInto(out *KinesisSettingsParameters) {
	*out = *in
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.StreamArn != nil {
		in, out := &in.StreamArn, &out.StreamArn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KinesisSettingsParameters.
func (in *KinesisSettingsParameters) DeepCopy() *KinesisSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(KinesisSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbSettingsObservation) DeepCopyInto(out *MongodbSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbSettingsObservation.
func (in *MongodbSettingsObservation) DeepCopy() *MongodbSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbSettingsParameters) DeepCopyInto(out *MongodbSettingsParameters) {
	*out = *in
	if in.AuthMechanism != nil {
		in, out := &in.AuthMechanism, &out.AuthMechanism
		*out = new(string)
		**out = **in
	}
	if in.AuthSource != nil {
		in, out := &in.AuthSource, &out.AuthSource
		*out = new(string)
		**out = **in
	}
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.DocsToInvestigate != nil {
		in, out := &in.DocsToInvestigate, &out.DocsToInvestigate
		*out = new(string)
		**out = **in
	}
	if in.ExtractDocID != nil {
		in, out := &in.ExtractDocID, &out.ExtractDocID
		*out = new(string)
		**out = **in
	}
	if in.NestingLevel != nil {
		in, out := &in.NestingLevel, &out.NestingLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbSettingsParameters.
func (in *MongodbSettingsParameters) DeepCopy() *MongodbSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3SettingsObservation) DeepCopyInto(out *S3SettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3SettingsObservation.
func (in *S3SettingsObservation) DeepCopy() *S3SettingsObservation {
	if in == nil {
		return nil
	}
	out := new(S3SettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3SettingsParameters) DeepCopyInto(out *S3SettingsParameters) {
	*out = *in
	if in.AddColumnName != nil {
		in, out := &in.AddColumnName, &out.AddColumnName
		*out = new(bool)
		**out = **in
	}
	if in.BucketFolder != nil {
		in, out := &in.BucketFolder, &out.BucketFolder
		*out = new(string)
		**out = **in
	}
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.CannedACLForObjects != nil {
		in, out := &in.CannedACLForObjects, &out.CannedACLForObjects
		*out = new(string)
		**out = **in
	}
	if in.CdcInsertsAndUpdates != nil {
		in, out := &in.CdcInsertsAndUpdates, &out.CdcInsertsAndUpdates
		*out = new(bool)
		**out = **in
	}
	if in.CdcInsertsOnly != nil {
		in, out := &in.CdcInsertsOnly, &out.CdcInsertsOnly
		*out = new(bool)
		**out = **in
	}
	if in.CdcMaxBatchInterval != nil {
		in, out := &in.CdcMaxBatchInterval, &out.CdcMaxBatchInterval
		*out = new(float64)
		**out = **in
	}
	if in.CdcMinFileSize != nil {
		in, out := &in.CdcMinFileSize, &out.CdcMinFileSize
		*out = new(float64)
		**out = **in
	}
	if in.CdcPath != nil {
		in, out := &in.CdcPath, &out.CdcPath
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.CsvDelimiter != nil {
		in, out := &in.CsvDelimiter, &out.CsvDelimiter
		*out = new(string)
		**out = **in
	}
	if in.CsvNoSupValue != nil {
		in, out := &in.CsvNoSupValue, &out.CsvNoSupValue
		*out = new(string)
		**out = **in
	}
	if in.CsvNullValue != nil {
		in, out := &in.CsvNullValue, &out.CsvNullValue
		*out = new(string)
		**out = **in
	}
	if in.CsvRowDelimiter != nil {
		in, out := &in.CsvRowDelimiter, &out.CsvRowDelimiter
		*out = new(string)
		**out = **in
	}
	if in.DataFormat != nil {
		in, out := &in.DataFormat, &out.DataFormat
		*out = new(string)
		**out = **in
	}
	if in.DataPageSize != nil {
		in, out := &in.DataPageSize, &out.DataPageSize
		*out = new(float64)
		**out = **in
	}
	if in.DatePartitionDelimiter != nil {
		in, out := &in.DatePartitionDelimiter, &out.DatePartitionDelimiter
		*out = new(string)
		**out = **in
	}
	if in.DatePartitionEnabled != nil {
		in, out := &in.DatePartitionEnabled, &out.DatePartitionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DatePartitionSequence != nil {
		in, out := &in.DatePartitionSequence, &out.DatePartitionSequence
		*out = new(string)
		**out = **in
	}
	if in.DictPageSizeLimit != nil {
		in, out := &in.DictPageSizeLimit, &out.DictPageSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.EnableStatistics != nil {
		in, out := &in.EnableStatistics, &out.EnableStatistics
		*out = new(bool)
		**out = **in
	}
	if in.EncodingType != nil {
		in, out := &in.EncodingType, &out.EncodingType
		*out = new(string)
		**out = **in
	}
	if in.EncryptionMode != nil {
		in, out := &in.EncryptionMode, &out.EncryptionMode
		*out = new(string)
		**out = **in
	}
	if in.ExternalTableDefinition != nil {
		in, out := &in.ExternalTableDefinition, &out.ExternalTableDefinition
		*out = new(string)
		**out = **in
	}
	if in.IgnoreHeadersRow != nil {
		in, out := &in.IgnoreHeadersRow, &out.IgnoreHeadersRow
		*out = new(float64)
		**out = **in
	}
	if in.IncludeOpForFullLoad != nil {
		in, out := &in.IncludeOpForFullLoad, &out.IncludeOpForFullLoad
		*out = new(bool)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.ParquetTimestampInMillisecond != nil {
		in, out := &in.ParquetTimestampInMillisecond, &out.ParquetTimestampInMillisecond
		*out = new(bool)
		**out = **in
	}
	if in.ParquetVersion != nil {
		in, out := &in.ParquetVersion, &out.ParquetVersion
		*out = new(string)
		**out = **in
	}
	if in.PreserveTransactions != nil {
		in, out := &in.PreserveTransactions, &out.PreserveTransactions
		*out = new(bool)
		**out = **in
	}
	if in.Rfc4180 != nil {
		in, out := &in.Rfc4180, &out.Rfc4180
		*out = new(bool)
		**out = **in
	}
	if in.RowGroupLength != nil {
		in, out := &in.RowGroupLength, &out.RowGroupLength
		*out = new(float64)
		**out = **in
	}
	if in.ServerSideEncryptionKMSKeyID != nil {
		in, out := &in.ServerSideEncryptionKMSKeyID, &out.ServerSideEncryptionKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.TimestampColumnName != nil {
		in, out := &in.TimestampColumnName, &out.TimestampColumnName
		*out = new(string)
		**out = **in
	}
	if in.UseCsvNoSupValue != nil {
		in, out := &in.UseCsvNoSupValue, &out.UseCsvNoSupValue
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3SettingsParameters.
func (in *S3SettingsParameters) DeepCopy() *S3SettingsParameters {
	if in == nil {
		return nil
	}
	out := new(S3SettingsParameters)
	in.DeepCopyInto(out)
	return out
}
