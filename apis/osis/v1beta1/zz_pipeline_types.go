// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BufferOptionsInitParameters struct {

	// Whether persistent buffering should be enabled.
	PersistentBufferEnabled *bool `json:"persistentBufferEnabled,omitempty" tf:"persistent_buffer_enabled,omitempty"`
}

type BufferOptionsObservation struct {

	// Whether persistent buffering should be enabled.
	PersistentBufferEnabled *bool `json:"persistentBufferEnabled,omitempty" tf:"persistent_buffer_enabled,omitempty"`
}

type BufferOptionsParameters struct {

	// Whether persistent buffering should be enabled.
	// +kubebuilder:validation:Optional
	PersistentBufferEnabled *bool `json:"persistentBufferEnabled" tf:"persistent_buffer_enabled,omitempty"`
}

type CloudwatchLogDestinationInitParameters struct {

	// The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, /aws/OpenSearchService/IngestionService/my-pipeline.
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`
}

type CloudwatchLogDestinationObservation struct {

	// The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, /aws/OpenSearchService/IngestionService/my-pipeline.
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`
}

type CloudwatchLogDestinationParameters struct {

	// The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, /aws/OpenSearchService/IngestionService/my-pipeline.
	// +kubebuilder:validation:Optional
	LogGroup *string `json:"logGroup" tf:"log_group,omitempty"`
}

type EncryptionAtRestOptionsInitParameters struct {

	// The ARN of the KMS key used to encrypt data-at-rest in OpenSearch Ingestion. By default, data is encrypted using an AWS owned key.
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`
}

type EncryptionAtRestOptionsObservation struct {

	// The ARN of the KMS key used to encrypt data-at-rest in OpenSearch Ingestion. By default, data is encrypted using an AWS owned key.
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`
}

type EncryptionAtRestOptionsParameters struct {

	// The ARN of the KMS key used to encrypt data-at-rest in OpenSearch Ingestion. By default, data is encrypted using an AWS owned key.
	// +kubebuilder:validation:Optional
	KMSKeyArn *string `json:"kmsKeyArn" tf:"kms_key_arn,omitempty"`
}

type LogPublishingOptionsInitParameters struct {

	// The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See cloudwatch_log_destination below.
	CloudwatchLogDestination []CloudwatchLogDestinationInitParameters `json:"cloudwatchLogDestination,omitempty" tf:"cloudwatch_log_destination,omitempty"`

	// Whether logs should be published.
	IsLoggingEnabled *bool `json:"isLoggingEnabled,omitempty" tf:"is_logging_enabled,omitempty"`
}

type LogPublishingOptionsObservation struct {

	// The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See cloudwatch_log_destination below.
	CloudwatchLogDestination []CloudwatchLogDestinationObservation `json:"cloudwatchLogDestination,omitempty" tf:"cloudwatch_log_destination,omitempty"`

	// Whether logs should be published.
	IsLoggingEnabled *bool `json:"isLoggingEnabled,omitempty" tf:"is_logging_enabled,omitempty"`
}

type LogPublishingOptionsParameters struct {

	// The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See cloudwatch_log_destination below.
	// +kubebuilder:validation:Optional
	CloudwatchLogDestination []CloudwatchLogDestinationParameters `json:"cloudwatchLogDestination,omitempty" tf:"cloudwatch_log_destination,omitempty"`

	// Whether logs should be published.
	// +kubebuilder:validation:Optional
	IsLoggingEnabled *bool `json:"isLoggingEnabled,omitempty" tf:"is_logging_enabled,omitempty"`
}

type PipelineInitParameters struct {

	// Key-value pairs to configure persistent buffering for the pipeline. See buffer_options below.
	BufferOptions []BufferOptionsInitParameters `json:"bufferOptions,omitempty" tf:"buffer_options,omitempty"`

	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See encryption_at_rest_options below.
	EncryptionAtRestOptions []EncryptionAtRestOptionsInitParameters `json:"encryptionAtRestOptions,omitempty" tf:"encryption_at_rest_options,omitempty"`

	// Key-value pairs to configure log publishing. See log_publishing_options below.
	LogPublishingOptions []LogPublishingOptionsInitParameters `json:"logPublishingOptions,omitempty" tf:"log_publishing_options,omitempty"`

	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits *float64 `json:"maxUnits,omitempty" tf:"max_units,omitempty"`

	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits *float64 `json:"minUnits,omitempty" tf:"min_units,omitempty"`

	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody *string `json:"pipelineConfigurationBody,omitempty" tf:"pipeline_configuration_body,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See vpc_options below.
	VPCOptions []VPCOptionsInitParameters `json:"vpcOptions,omitempty" tf:"vpc_options,omitempty"`
}

type PipelineObservation struct {

	// Key-value pairs to configure persistent buffering for the pipeline. See buffer_options below.
	BufferOptions []BufferOptionsObservation `json:"bufferOptions,omitempty" tf:"buffer_options,omitempty"`

	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See encryption_at_rest_options below.
	EncryptionAtRestOptions []EncryptionAtRestOptionsObservation `json:"encryptionAtRestOptions,omitempty" tf:"encryption_at_rest_options,omitempty"`

	// Unique identifier for the pipeline.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The list of ingestion endpoints for the pipeline, which you can send data to.
	// +listType=set
	IngestEndpointUrls []*string `json:"ingestEndpointUrls,omitempty" tf:"ingest_endpoint_urls,omitempty"`

	// Key-value pairs to configure log publishing. See log_publishing_options below.
	LogPublishingOptions []LogPublishingOptionsObservation `json:"logPublishingOptions,omitempty" tf:"log_publishing_options,omitempty"`

	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	MaxUnits *float64 `json:"maxUnits,omitempty" tf:"max_units,omitempty"`

	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	MinUnits *float64 `json:"minUnits,omitempty" tf:"min_units,omitempty"`

	// Amazon Resource Name (ARN) of the pipeline.
	PipelineArn *string `json:"pipelineArn,omitempty" tf:"pipeline_arn,omitempty"`

	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	PipelineConfigurationBody *string `json:"pipelineConfigurationBody,omitempty" tf:"pipeline_configuration_body,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See vpc_options below.
	VPCOptions []VPCOptionsObservation `json:"vpcOptions,omitempty" tf:"vpc_options,omitempty"`
}

type PipelineParameters struct {

	// Key-value pairs to configure persistent buffering for the pipeline. See buffer_options below.
	// +kubebuilder:validation:Optional
	BufferOptions []BufferOptionsParameters `json:"bufferOptions,omitempty" tf:"buffer_options,omitempty"`

	// Key-value pairs to configure encryption for data that is written to a persistent buffer. See encryption_at_rest_options below.
	// +kubebuilder:validation:Optional
	EncryptionAtRestOptions []EncryptionAtRestOptionsParameters `json:"encryptionAtRestOptions,omitempty" tf:"encryption_at_rest_options,omitempty"`

	// Key-value pairs to configure log publishing. See log_publishing_options below.
	// +kubebuilder:validation:Optional
	LogPublishingOptions []LogPublishingOptionsParameters `json:"logPublishingOptions,omitempty" tf:"log_publishing_options,omitempty"`

	// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
	// +kubebuilder:validation:Optional
	MaxUnits *float64 `json:"maxUnits,omitempty" tf:"max_units,omitempty"`

	// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
	// +kubebuilder:validation:Optional
	MinUnits *float64 `json:"minUnits,omitempty" tf:"min_units,omitempty"`

	// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
	// +kubebuilder:validation:Optional
	PipelineConfigurationBody *string `json:"pipelineConfigurationBody,omitempty" tf:"pipeline_configuration_body,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See vpc_options below.
	// +kubebuilder:validation:Optional
	VPCOptions []VPCOptionsParameters `json:"vpcOptions,omitempty" tf:"vpc_options,omitempty"`
}

type VPCOptionsInitParameters struct {

	// A list of security groups associated with the VPC endpoint.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// A list of subnet IDs associated with the VPC endpoint.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type VPCOptionsObservation struct {

	// A list of security groups associated with the VPC endpoint.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// A list of subnet IDs associated with the VPC endpoint.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type VPCOptionsParameters struct {

	// A list of security groups associated with the VPC endpoint.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// A list of subnet IDs associated with the VPC endpoint.
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`
}

// PipelineSpec defines the desired state of Pipeline
type PipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipelineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PipelineInitParameters `json:"initProvider,omitempty"`
}

// PipelineStatus defines the observed state of Pipeline.
type PipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Pipeline is the Schema for the Pipelines API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Pipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxUnits) || (has(self.initProvider) && has(self.initProvider.maxUnits))",message="spec.forProvider.maxUnits is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.minUnits) || (has(self.initProvider) && has(self.initProvider.minUnits))",message="spec.forProvider.minUnits is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pipelineConfigurationBody) || (has(self.initProvider) && has(self.initProvider.pipelineConfigurationBody))",message="spec.forProvider.pipelineConfigurationBody is a required parameter"
	Spec   PipelineSpec   `json:"spec"`
	Status PipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipelineList contains a list of Pipelines
type PipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pipeline `json:"items"`
}

// Repository type metadata.
var (
	Pipeline_Kind             = "Pipeline"
	Pipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pipeline_Kind}.String()
	Pipeline_KindAPIVersion   = Pipeline_Kind + "." + CRDGroupVersion.String()
	Pipeline_GroupVersionKind = CRDGroupVersion.WithKind(Pipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&Pipeline{}, &PipelineList{})
}
