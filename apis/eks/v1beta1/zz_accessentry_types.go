// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessEntryInitParameters struct {

	// –  List of string which can optionally specify the Kubernetes groups the user would belong to when creating an access entry.
	// +listType=set
	KubernetesGroups []*string `json:"kubernetesGroups,omitempty" tf:"kubernetes_groups,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Defaults to STANDARD which provides the standard workflow. EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX types disallow users to input a username or groups, and prevent associations.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Defaults to principal ARN if user is principal else defaults to assume-role/session-name is role is used.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type AccessEntryObservation struct {

	// Amazon Resource Name (ARN) of the Access Entry.
	AccessEntryArn *string `json:"accessEntryArn,omitempty" tf:"access_entry_arn,omitempty"`

	// –  Name of the EKS Cluster.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Date and time in RFC3339 format that the EKS add-on was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// –  List of string which can optionally specify the Kubernetes groups the user would belong to when creating an access entry.
	// +listType=set
	KubernetesGroups []*string `json:"kubernetesGroups,omitempty" tf:"kubernetes_groups,omitempty"`

	// Date and time in RFC3339 format that the EKS add-on was updated.
	ModifiedAt *string `json:"modifiedAt,omitempty" tf:"modified_at,omitempty"`

	// –  The IAM Principal ARN which requires Authentication access to the EKS cluster.
	PrincipalArn *string `json:"principalArn,omitempty" tf:"principal_arn,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Key-value map of resource tags, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Defaults to STANDARD which provides the standard workflow. EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX types disallow users to input a username or groups, and prevent associations.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Defaults to principal ARN if user is principal else defaults to assume-role/session-name is role is used.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type AccessEntryParameters struct {

	// –  Name of the EKS Cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/eks/v1beta2.Cluster
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Reference to a Cluster in eks to populate clusterName.
	// +kubebuilder:validation:Optional
	ClusterNameRef *v1.Reference `json:"clusterNameRef,omitempty" tf:"-"`

	// Selector for a Cluster in eks to populate clusterName.
	// +kubebuilder:validation:Optional
	ClusterNameSelector *v1.Selector `json:"clusterNameSelector,omitempty" tf:"-"`

	// –  List of string which can optionally specify the Kubernetes groups the user would belong to when creating an access entry.
	// +kubebuilder:validation:Optional
	// +listType=set
	KubernetesGroups []*string `json:"kubernetesGroups,omitempty" tf:"kubernetes_groups,omitempty"`

	// –  The IAM Principal ARN which requires Authentication access to the EKS cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +crossplane:generate:reference:refFieldName=PrincipalArnFromRoleRef
	// +crossplane:generate:reference:selectorFieldName=PrincipalArnFromRoleSelector
	// +kubebuilder:validation:Optional
	PrincipalArn *string `json:"principalArn,omitempty" tf:"principal_arn,omitempty"`

	// Reference to a Role in iam to populate principalArn.
	// +kubebuilder:validation:Optional
	PrincipalArnFromRoleRef *v1.Reference `json:"principalArnFromRoleRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate principalArn.
	// +kubebuilder:validation:Optional
	PrincipalArnFromRoleSelector *v1.Selector `json:"principalArnFromRoleSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Defaults to STANDARD which provides the standard workflow. EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX types disallow users to input a username or groups, and prevent associations.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Defaults to principal ARN if user is principal else defaults to assume-role/session-name is role is used.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// AccessEntrySpec defines the desired state of AccessEntry
type AccessEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessEntryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccessEntryInitParameters `json:"initProvider,omitempty"`
}

// AccessEntryStatus defines the observed state of AccessEntry.
type AccessEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccessEntry is the Schema for the AccessEntrys API. Access Entry Configurations for an EKS Cluster.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AccessEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessEntrySpec   `json:"spec"`
	Status            AccessEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessEntryList contains a list of AccessEntrys
type AccessEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessEntry `json:"items"`
}

// Repository type metadata.
var (
	AccessEntry_Kind             = "AccessEntry"
	AccessEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessEntry_Kind}.String()
	AccessEntry_KindAPIVersion   = AccessEntry_Kind + "." + CRDGroupVersion.String()
	AccessEntry_GroupVersionKind = CRDGroupVersion.WithKind(AccessEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessEntry{}, &AccessEntryList{})
}
