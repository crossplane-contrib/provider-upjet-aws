/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Topic.
func (mg *Topic) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationFailureFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.ApplicationFailureFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.ApplicationFailureFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationFailureFeedbackRoleArn")
	}
	mg.Spec.ForProvider.ApplicationFailureFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationFailureFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationSuccessFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.ApplicationSuccessFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.ApplicationSuccessFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationSuccessFeedbackRoleArn")
	}
	mg.Spec.ForProvider.ApplicationSuccessFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationSuccessFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirehoseFailureFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.FirehoseFailureFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.FirehoseFailureFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirehoseFailureFeedbackRoleArn")
	}
	mg.Spec.ForProvider.FirehoseFailureFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirehoseFailureFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirehoseSuccessFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.FirehoseSuccessFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.FirehoseSuccessFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirehoseSuccessFeedbackRoleArn")
	}
	mg.Spec.ForProvider.FirehoseSuccessFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirehoseSuccessFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPFailureFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.HTTPFailureFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.HTTPFailureFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HTTPFailureFeedbackRoleArn")
	}
	mg.Spec.ForProvider.HTTPFailureFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HTTPFailureFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPSuccessFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.HTTPSuccessFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.HTTPSuccessFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HTTPSuccessFeedbackRoleArn")
	}
	mg.Spec.ForProvider.HTTPSuccessFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HTTPSuccessFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaFailureFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.LambdaFailureFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.LambdaFailureFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LambdaFailureFeedbackRoleArn")
	}
	mg.Spec.ForProvider.LambdaFailureFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LambdaFailureFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaSuccessFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.LambdaSuccessFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.LambdaSuccessFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LambdaSuccessFeedbackRoleArn")
	}
	mg.Spec.ForProvider.LambdaSuccessFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LambdaSuccessFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SqsFailureFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.SqsFailureFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.SqsFailureFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SqsFailureFeedbackRoleArn")
	}
	mg.Spec.ForProvider.SqsFailureFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SqsFailureFeedbackRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SqsSuccessFeedbackRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.SqsSuccessFeedbackRoleArnRef,
		Selector:     mg.Spec.ForProvider.SqsSuccessFeedbackRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SqsSuccessFeedbackRoleArn")
	}
	mg.Spec.ForProvider.SqsSuccessFeedbackRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SqsSuccessFeedbackRoleArnRef = rsp.ResolvedReference

	return nil
}
