//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplication) DeepCopyInto(out *PlatformApplication) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplication.
func (in *PlatformApplication) DeepCopy() *PlatformApplication {
	if in == nil {
		return nil
	}
	out := new(PlatformApplication)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PlatformApplication) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplicationInitParameters) DeepCopyInto(out *PlatformApplicationInitParameters) {
	*out = *in
	if in.ApplePlatformBundleID != nil {
		in, out := &in.ApplePlatformBundleID, &out.ApplePlatformBundleID
		*out = new(string)
		**out = **in
	}
	if in.ApplePlatformTeamID != nil {
		in, out := &in.ApplePlatformTeamID, &out.ApplePlatformTeamID
		*out = new(string)
		**out = **in
	}
	if in.EventDeliveryFailureTopicArn != nil {
		in, out := &in.EventDeliveryFailureTopicArn, &out.EventDeliveryFailureTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointCreatedTopicArn != nil {
		in, out := &in.EventEndpointCreatedTopicArn, &out.EventEndpointCreatedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointDeletedTopicArn != nil {
		in, out := &in.EventEndpointDeletedTopicArn, &out.EventEndpointDeletedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointUpdatedTopicArn != nil {
		in, out := &in.EventEndpointUpdatedTopicArn, &out.EventEndpointUpdatedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.FailureFeedbackRoleArn != nil {
		in, out := &in.FailureFeedbackRoleArn, &out.FailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FailureFeedbackRoleArnRef != nil {
		in, out := &in.FailureFeedbackRoleArnRef, &out.FailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FailureFeedbackRoleArnSelector != nil {
		in, out := &in.FailureFeedbackRoleArnSelector, &out.FailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessFeedbackRoleArn != nil {
		in, out := &in.SuccessFeedbackRoleArn, &out.SuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SuccessFeedbackRoleArnRef != nil {
		in, out := &in.SuccessFeedbackRoleArnRef, &out.SuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessFeedbackRoleArnSelector != nil {
		in, out := &in.SuccessFeedbackRoleArnSelector, &out.SuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessFeedbackSampleRate != nil {
		in, out := &in.SuccessFeedbackSampleRate, &out.SuccessFeedbackSampleRate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplicationInitParameters.
func (in *PlatformApplicationInitParameters) DeepCopy() *PlatformApplicationInitParameters {
	if in == nil {
		return nil
	}
	out := new(PlatformApplicationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplicationList) DeepCopyInto(out *PlatformApplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PlatformApplication, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplicationList.
func (in *PlatformApplicationList) DeepCopy() *PlatformApplicationList {
	if in == nil {
		return nil
	}
	out := new(PlatformApplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PlatformApplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplicationObservation) DeepCopyInto(out *PlatformApplicationObservation) {
	*out = *in
	if in.ApplePlatformBundleID != nil {
		in, out := &in.ApplePlatformBundleID, &out.ApplePlatformBundleID
		*out = new(string)
		**out = **in
	}
	if in.ApplePlatformTeamID != nil {
		in, out := &in.ApplePlatformTeamID, &out.ApplePlatformTeamID
		*out = new(string)
		**out = **in
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.EventDeliveryFailureTopicArn != nil {
		in, out := &in.EventDeliveryFailureTopicArn, &out.EventDeliveryFailureTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointCreatedTopicArn != nil {
		in, out := &in.EventEndpointCreatedTopicArn, &out.EventEndpointCreatedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointDeletedTopicArn != nil {
		in, out := &in.EventEndpointDeletedTopicArn, &out.EventEndpointDeletedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointUpdatedTopicArn != nil {
		in, out := &in.EventEndpointUpdatedTopicArn, &out.EventEndpointUpdatedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.FailureFeedbackRoleArn != nil {
		in, out := &in.FailureFeedbackRoleArn, &out.FailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.SuccessFeedbackRoleArn != nil {
		in, out := &in.SuccessFeedbackRoleArn, &out.SuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SuccessFeedbackSampleRate != nil {
		in, out := &in.SuccessFeedbackSampleRate, &out.SuccessFeedbackSampleRate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplicationObservation.
func (in *PlatformApplicationObservation) DeepCopy() *PlatformApplicationObservation {
	if in == nil {
		return nil
	}
	out := new(PlatformApplicationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplicationParameters) DeepCopyInto(out *PlatformApplicationParameters) {
	*out = *in
	if in.ApplePlatformBundleID != nil {
		in, out := &in.ApplePlatformBundleID, &out.ApplePlatformBundleID
		*out = new(string)
		**out = **in
	}
	if in.ApplePlatformTeamID != nil {
		in, out := &in.ApplePlatformTeamID, &out.ApplePlatformTeamID
		*out = new(string)
		**out = **in
	}
	if in.EventDeliveryFailureTopicArn != nil {
		in, out := &in.EventDeliveryFailureTopicArn, &out.EventDeliveryFailureTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointCreatedTopicArn != nil {
		in, out := &in.EventEndpointCreatedTopicArn, &out.EventEndpointCreatedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointDeletedTopicArn != nil {
		in, out := &in.EventEndpointDeletedTopicArn, &out.EventEndpointDeletedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.EventEndpointUpdatedTopicArn != nil {
		in, out := &in.EventEndpointUpdatedTopicArn, &out.EventEndpointUpdatedTopicArn
		*out = new(string)
		**out = **in
	}
	if in.FailureFeedbackRoleArn != nil {
		in, out := &in.FailureFeedbackRoleArn, &out.FailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FailureFeedbackRoleArnRef != nil {
		in, out := &in.FailureFeedbackRoleArnRef, &out.FailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FailureFeedbackRoleArnSelector != nil {
		in, out := &in.FailureFeedbackRoleArnSelector, &out.FailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	out.PlatformCredentialSecretRef = in.PlatformCredentialSecretRef
	if in.PlatformPrincipalSecretRef != nil {
		in, out := &in.PlatformPrincipalSecretRef, &out.PlatformPrincipalSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SuccessFeedbackRoleArn != nil {
		in, out := &in.SuccessFeedbackRoleArn, &out.SuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SuccessFeedbackRoleArnRef != nil {
		in, out := &in.SuccessFeedbackRoleArnRef, &out.SuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessFeedbackRoleArnSelector != nil {
		in, out := &in.SuccessFeedbackRoleArnSelector, &out.SuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessFeedbackSampleRate != nil {
		in, out := &in.SuccessFeedbackSampleRate, &out.SuccessFeedbackSampleRate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplicationParameters.
func (in *PlatformApplicationParameters) DeepCopy() *PlatformApplicationParameters {
	if in == nil {
		return nil
	}
	out := new(PlatformApplicationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplicationSpec) DeepCopyInto(out *PlatformApplicationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplicationSpec.
func (in *PlatformApplicationSpec) DeepCopy() *PlatformApplicationSpec {
	if in == nil {
		return nil
	}
	out := new(PlatformApplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlatformApplicationStatus) DeepCopyInto(out *PlatformApplicationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlatformApplicationStatus.
func (in *PlatformApplicationStatus) DeepCopy() *PlatformApplicationStatus {
	if in == nil {
		return nil
	}
	out := new(PlatformApplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferences) DeepCopyInto(out *SMSPreferences) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferences.
func (in *SMSPreferences) DeepCopy() *SMSPreferences {
	if in == nil {
		return nil
	}
	out := new(SMSPreferences)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SMSPreferences) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferencesInitParameters) DeepCopyInto(out *SMSPreferencesInitParameters) {
	*out = *in
	if in.DefaultSMSType != nil {
		in, out := &in.DefaultSMSType, &out.DefaultSMSType
		*out = new(string)
		**out = **in
	}
	if in.DefaultSenderID != nil {
		in, out := &in.DefaultSenderID, &out.DefaultSenderID
		*out = new(string)
		**out = **in
	}
	if in.DeliveryStatusIAMRoleArn != nil {
		in, out := &in.DeliveryStatusIAMRoleArn, &out.DeliveryStatusIAMRoleArn
		*out = new(string)
		**out = **in
	}
	if in.DeliveryStatusIAMRoleArnRef != nil {
		in, out := &in.DeliveryStatusIAMRoleArnRef, &out.DeliveryStatusIAMRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DeliveryStatusIAMRoleArnSelector != nil {
		in, out := &in.DeliveryStatusIAMRoleArnSelector, &out.DeliveryStatusIAMRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeliveryStatusSuccessSamplingRate != nil {
		in, out := &in.DeliveryStatusSuccessSamplingRate, &out.DeliveryStatusSuccessSamplingRate
		*out = new(string)
		**out = **in
	}
	if in.MonthlySpendLimit != nil {
		in, out := &in.MonthlySpendLimit, &out.MonthlySpendLimit
		*out = new(float64)
		**out = **in
	}
	if in.UsageReportS3Bucket != nil {
		in, out := &in.UsageReportS3Bucket, &out.UsageReportS3Bucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferencesInitParameters.
func (in *SMSPreferencesInitParameters) DeepCopy() *SMSPreferencesInitParameters {
	if in == nil {
		return nil
	}
	out := new(SMSPreferencesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferencesList) DeepCopyInto(out *SMSPreferencesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SMSPreferences, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferencesList.
func (in *SMSPreferencesList) DeepCopy() *SMSPreferencesList {
	if in == nil {
		return nil
	}
	out := new(SMSPreferencesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SMSPreferencesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferencesObservation) DeepCopyInto(out *SMSPreferencesObservation) {
	*out = *in
	if in.DefaultSMSType != nil {
		in, out := &in.DefaultSMSType, &out.DefaultSMSType
		*out = new(string)
		**out = **in
	}
	if in.DefaultSenderID != nil {
		in, out := &in.DefaultSenderID, &out.DefaultSenderID
		*out = new(string)
		**out = **in
	}
	if in.DeliveryStatusIAMRoleArn != nil {
		in, out := &in.DeliveryStatusIAMRoleArn, &out.DeliveryStatusIAMRoleArn
		*out = new(string)
		**out = **in
	}
	if in.DeliveryStatusSuccessSamplingRate != nil {
		in, out := &in.DeliveryStatusSuccessSamplingRate, &out.DeliveryStatusSuccessSamplingRate
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MonthlySpendLimit != nil {
		in, out := &in.MonthlySpendLimit, &out.MonthlySpendLimit
		*out = new(float64)
		**out = **in
	}
	if in.UsageReportS3Bucket != nil {
		in, out := &in.UsageReportS3Bucket, &out.UsageReportS3Bucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferencesObservation.
func (in *SMSPreferencesObservation) DeepCopy() *SMSPreferencesObservation {
	if in == nil {
		return nil
	}
	out := new(SMSPreferencesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferencesParameters) DeepCopyInto(out *SMSPreferencesParameters) {
	*out = *in
	if in.DefaultSMSType != nil {
		in, out := &in.DefaultSMSType, &out.DefaultSMSType
		*out = new(string)
		**out = **in
	}
	if in.DefaultSenderID != nil {
		in, out := &in.DefaultSenderID, &out.DefaultSenderID
		*out = new(string)
		**out = **in
	}
	if in.DeliveryStatusIAMRoleArn != nil {
		in, out := &in.DeliveryStatusIAMRoleArn, &out.DeliveryStatusIAMRoleArn
		*out = new(string)
		**out = **in
	}
	if in.DeliveryStatusIAMRoleArnRef != nil {
		in, out := &in.DeliveryStatusIAMRoleArnRef, &out.DeliveryStatusIAMRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DeliveryStatusIAMRoleArnSelector != nil {
		in, out := &in.DeliveryStatusIAMRoleArnSelector, &out.DeliveryStatusIAMRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeliveryStatusSuccessSamplingRate != nil {
		in, out := &in.DeliveryStatusSuccessSamplingRate, &out.DeliveryStatusSuccessSamplingRate
		*out = new(string)
		**out = **in
	}
	if in.MonthlySpendLimit != nil {
		in, out := &in.MonthlySpendLimit, &out.MonthlySpendLimit
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.UsageReportS3Bucket != nil {
		in, out := &in.UsageReportS3Bucket, &out.UsageReportS3Bucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferencesParameters.
func (in *SMSPreferencesParameters) DeepCopy() *SMSPreferencesParameters {
	if in == nil {
		return nil
	}
	out := new(SMSPreferencesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferencesSpec) DeepCopyInto(out *SMSPreferencesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferencesSpec.
func (in *SMSPreferencesSpec) DeepCopy() *SMSPreferencesSpec {
	if in == nil {
		return nil
	}
	out := new(SMSPreferencesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMSPreferencesStatus) DeepCopyInto(out *SMSPreferencesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMSPreferencesStatus.
func (in *SMSPreferencesStatus) DeepCopy() *SMSPreferencesStatus {
	if in == nil {
		return nil
	}
	out := new(SMSPreferencesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Topic) DeepCopyInto(out *Topic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Topic.
func (in *Topic) DeepCopy() *Topic {
	if in == nil {
		return nil
	}
	out := new(Topic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Topic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicInitParameters) DeepCopyInto(out *TopicInitParameters) {
	*out = *in
	if in.ApplicationFailureFeedbackRoleArn != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArn, &out.ApplicationFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationFailureFeedbackRoleArnRef != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArnRef, &out.ApplicationFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationFailureFeedbackRoleArnSelector != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArnSelector, &out.ApplicationFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackRoleArn != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArn, &out.ApplicationSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackRoleArnRef != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArnRef, &out.ApplicationSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArnSelector, &out.ApplicationSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackSampleRate != nil {
		in, out := &in.ApplicationSuccessFeedbackSampleRate, &out.ApplicationSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ArchivePolicy != nil {
		in, out := &in.ArchivePolicy, &out.ArchivePolicy
		*out = new(string)
		**out = **in
	}
	if in.ContentBasedDeduplication != nil {
		in, out := &in.ContentBasedDeduplication, &out.ContentBasedDeduplication
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FifoTopic != nil {
		in, out := &in.FifoTopic, &out.FifoTopic
		*out = new(bool)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArn != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArn, &out.FirehoseFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArnRef != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArnRef, &out.FirehoseFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseFailureFeedbackRoleArnSelector != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArnSelector, &out.FirehoseFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackRoleArn != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArn, &out.FirehoseSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackRoleArnRef != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArnRef, &out.FirehoseSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArnSelector, &out.FirehoseSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackSampleRate != nil {
		in, out := &in.FirehoseSuccessFeedbackSampleRate, &out.FirehoseSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArn != nil {
		in, out := &in.HTTPFailureFeedbackRoleArn, &out.HTTPFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArnRef != nil {
		in, out := &in.HTTPFailureFeedbackRoleArnRef, &out.HTTPFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPFailureFeedbackRoleArnSelector != nil {
		in, out := &in.HTTPFailureFeedbackRoleArnSelector, &out.HTTPFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackRoleArn != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArn, &out.HTTPSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackRoleArnRef != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArnRef, &out.HTTPSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArnSelector, &out.HTTPSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackSampleRate != nil {
		in, out := &in.HTTPSuccessFeedbackSampleRate, &out.HTTPSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.KMSMasterKeyID != nil {
		in, out := &in.KMSMasterKeyID, &out.KMSMasterKeyID
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArn != nil {
		in, out := &in.LambdaFailureFeedbackRoleArn, &out.LambdaFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArnRef != nil {
		in, out := &in.LambdaFailureFeedbackRoleArnRef, &out.LambdaFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaFailureFeedbackRoleArnSelector != nil {
		in, out := &in.LambdaFailureFeedbackRoleArnSelector, &out.LambdaFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackRoleArn != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArn, &out.LambdaSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackRoleArnRef != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArnRef, &out.LambdaSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArnSelector, &out.LambdaSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackSampleRate != nil {
		in, out := &in.LambdaSuccessFeedbackSampleRate, &out.LambdaSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.SignatureVersion != nil {
		in, out := &in.SignatureVersion, &out.SignatureVersion
		*out = new(float64)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArn != nil {
		in, out := &in.SqsFailureFeedbackRoleArn, &out.SqsFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArnRef != nil {
		in, out := &in.SqsFailureFeedbackRoleArnRef, &out.SqsFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsFailureFeedbackRoleArnSelector != nil {
		in, out := &in.SqsFailureFeedbackRoleArnSelector, &out.SqsFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackRoleArn != nil {
		in, out := &in.SqsSuccessFeedbackRoleArn, &out.SqsSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackRoleArnRef != nil {
		in, out := &in.SqsSuccessFeedbackRoleArnRef, &out.SqsSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.SqsSuccessFeedbackRoleArnSelector, &out.SqsSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackSampleRate != nil {
		in, out := &in.SqsSuccessFeedbackSampleRate, &out.SqsSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TracingConfig != nil {
		in, out := &in.TracingConfig, &out.TracingConfig
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicInitParameters.
func (in *TopicInitParameters) DeepCopy() *TopicInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicList) DeepCopyInto(out *TopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Topic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicList.
func (in *TopicList) DeepCopy() *TopicList {
	if in == nil {
		return nil
	}
	out := new(TopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicObservation) DeepCopyInto(out *TopicObservation) {
	*out = *in
	if in.ApplicationFailureFeedbackRoleArn != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArn, &out.ApplicationFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackRoleArn != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArn, &out.ApplicationSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackSampleRate != nil {
		in, out := &in.ApplicationSuccessFeedbackSampleRate, &out.ApplicationSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ArchivePolicy != nil {
		in, out := &in.ArchivePolicy, &out.ArchivePolicy
		*out = new(string)
		**out = **in
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.BeginningArchiveTime != nil {
		in, out := &in.BeginningArchiveTime, &out.BeginningArchiveTime
		*out = new(string)
		**out = **in
	}
	if in.ContentBasedDeduplication != nil {
		in, out := &in.ContentBasedDeduplication, &out.ContentBasedDeduplication
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FifoTopic != nil {
		in, out := &in.FifoTopic, &out.FifoTopic
		*out = new(bool)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArn != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArn, &out.FirehoseFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackRoleArn != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArn, &out.FirehoseSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackSampleRate != nil {
		in, out := &in.FirehoseSuccessFeedbackSampleRate, &out.FirehoseSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArn != nil {
		in, out := &in.HTTPFailureFeedbackRoleArn, &out.HTTPFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackRoleArn != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArn, &out.HTTPSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackSampleRate != nil {
		in, out := &in.HTTPSuccessFeedbackSampleRate, &out.HTTPSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSMasterKeyID != nil {
		in, out := &in.KMSMasterKeyID, &out.KMSMasterKeyID
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArn != nil {
		in, out := &in.LambdaFailureFeedbackRoleArn, &out.LambdaFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackRoleArn != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArn, &out.LambdaSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackSampleRate != nil {
		in, out := &in.LambdaSuccessFeedbackSampleRate, &out.LambdaSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.SignatureVersion != nil {
		in, out := &in.SignatureVersion, &out.SignatureVersion
		*out = new(float64)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArn != nil {
		in, out := &in.SqsFailureFeedbackRoleArn, &out.SqsFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackRoleArn != nil {
		in, out := &in.SqsSuccessFeedbackRoleArn, &out.SqsSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackSampleRate != nil {
		in, out := &in.SqsSuccessFeedbackSampleRate, &out.SqsSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TracingConfig != nil {
		in, out := &in.TracingConfig, &out.TracingConfig
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicObservation.
func (in *TopicObservation) DeepCopy() *TopicObservation {
	if in == nil {
		return nil
	}
	out := new(TopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicParameters) DeepCopyInto(out *TopicParameters) {
	*out = *in
	if in.ApplicationFailureFeedbackRoleArn != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArn, &out.ApplicationFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationFailureFeedbackRoleArnRef != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArnRef, &out.ApplicationFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationFailureFeedbackRoleArnSelector != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArnSelector, &out.ApplicationFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackRoleArn != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArn, &out.ApplicationSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackRoleArnRef != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArnRef, &out.ApplicationSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArnSelector, &out.ApplicationSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackSampleRate != nil {
		in, out := &in.ApplicationSuccessFeedbackSampleRate, &out.ApplicationSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ArchivePolicy != nil {
		in, out := &in.ArchivePolicy, &out.ArchivePolicy
		*out = new(string)
		**out = **in
	}
	if in.ContentBasedDeduplication != nil {
		in, out := &in.ContentBasedDeduplication, &out.ContentBasedDeduplication
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FifoTopic != nil {
		in, out := &in.FifoTopic, &out.FifoTopic
		*out = new(bool)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArn != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArn, &out.FirehoseFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArnRef != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArnRef, &out.FirehoseFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseFailureFeedbackRoleArnSelector != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArnSelector, &out.FirehoseFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackRoleArn != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArn, &out.FirehoseSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackRoleArnRef != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArnRef, &out.FirehoseSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArnSelector, &out.FirehoseSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackSampleRate != nil {
		in, out := &in.FirehoseSuccessFeedbackSampleRate, &out.FirehoseSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArn != nil {
		in, out := &in.HTTPFailureFeedbackRoleArn, &out.HTTPFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArnRef != nil {
		in, out := &in.HTTPFailureFeedbackRoleArnRef, &out.HTTPFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPFailureFeedbackRoleArnSelector != nil {
		in, out := &in.HTTPFailureFeedbackRoleArnSelector, &out.HTTPFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackRoleArn != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArn, &out.HTTPSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackRoleArnRef != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArnRef, &out.HTTPSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArnSelector, &out.HTTPSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackSampleRate != nil {
		in, out := &in.HTTPSuccessFeedbackSampleRate, &out.HTTPSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.KMSMasterKeyID != nil {
		in, out := &in.KMSMasterKeyID, &out.KMSMasterKeyID
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArn != nil {
		in, out := &in.LambdaFailureFeedbackRoleArn, &out.LambdaFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArnRef != nil {
		in, out := &in.LambdaFailureFeedbackRoleArnRef, &out.LambdaFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaFailureFeedbackRoleArnSelector != nil {
		in, out := &in.LambdaFailureFeedbackRoleArnSelector, &out.LambdaFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackRoleArn != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArn, &out.LambdaSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackRoleArnRef != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArnRef, &out.LambdaSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArnSelector, &out.LambdaSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackSampleRate != nil {
		in, out := &in.LambdaSuccessFeedbackSampleRate, &out.LambdaSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SignatureVersion != nil {
		in, out := &in.SignatureVersion, &out.SignatureVersion
		*out = new(float64)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArn != nil {
		in, out := &in.SqsFailureFeedbackRoleArn, &out.SqsFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArnRef != nil {
		in, out := &in.SqsFailureFeedbackRoleArnRef, &out.SqsFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsFailureFeedbackRoleArnSelector != nil {
		in, out := &in.SqsFailureFeedbackRoleArnSelector, &out.SqsFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackRoleArn != nil {
		in, out := &in.SqsSuccessFeedbackRoleArn, &out.SqsSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackRoleArnRef != nil {
		in, out := &in.SqsSuccessFeedbackRoleArnRef, &out.SqsSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.SqsSuccessFeedbackRoleArnSelector, &out.SqsSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackSampleRate != nil {
		in, out := &in.SqsSuccessFeedbackSampleRate, &out.SqsSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TracingConfig != nil {
		in, out := &in.TracingConfig, &out.TracingConfig
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicParameters.
func (in *TopicParameters) DeepCopy() *TopicParameters {
	if in == nil {
		return nil
	}
	out := new(TopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicy) DeepCopyInto(out *TopicPolicy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicy.
func (in *TopicPolicy) DeepCopy() *TopicPolicy {
	if in == nil {
		return nil
	}
	out := new(TopicPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicyInitParameters) DeepCopyInto(out *TopicPolicyInitParameters) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ArnRef != nil {
		in, out := &in.ArnRef, &out.ArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ArnSelector != nil {
		in, out := &in.ArnSelector, &out.ArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicyInitParameters.
func (in *TopicPolicyInitParameters) DeepCopy() *TopicPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicyList) DeepCopyInto(out *TopicPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TopicPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicyList.
func (in *TopicPolicyList) DeepCopy() *TopicPolicyList {
	if in == nil {
		return nil
	}
	out := new(TopicPolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicyObservation) DeepCopyInto(out *TopicPolicyObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicyObservation.
func (in *TopicPolicyObservation) DeepCopy() *TopicPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(TopicPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicyParameters) DeepCopyInto(out *TopicPolicyParameters) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ArnRef != nil {
		in, out := &in.ArnRef, &out.ArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ArnSelector != nil {
		in, out := &in.ArnSelector, &out.ArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicyParameters.
func (in *TopicPolicyParameters) DeepCopy() *TopicPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(TopicPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicySpec) DeepCopyInto(out *TopicPolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicySpec.
func (in *TopicPolicySpec) DeepCopy() *TopicPolicySpec {
	if in == nil {
		return nil
	}
	out := new(TopicPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicPolicyStatus) DeepCopyInto(out *TopicPolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicPolicyStatus.
func (in *TopicPolicyStatus) DeepCopy() *TopicPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(TopicPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSpec) DeepCopyInto(out *TopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSpec.
func (in *TopicSpec) DeepCopy() *TopicSpec {
	if in == nil {
		return nil
	}
	out := new(TopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicStatus) DeepCopyInto(out *TopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicStatus.
func (in *TopicStatus) DeepCopy() *TopicStatus {
	if in == nil {
		return nil
	}
	out := new(TopicStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscription) DeepCopyInto(out *TopicSubscription) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscription.
func (in *TopicSubscription) DeepCopy() *TopicSubscription {
	if in == nil {
		return nil
	}
	out := new(TopicSubscription)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicSubscription) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscriptionInitParameters) DeepCopyInto(out *TopicSubscriptionInitParameters) {
	*out = *in
	if in.ConfirmationTimeoutInMinutes != nil {
		in, out := &in.ConfirmationTimeoutInMinutes, &out.ConfirmationTimeoutInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.EndpointAutoConfirms != nil {
		in, out := &in.EndpointAutoConfirms, &out.EndpointAutoConfirms
		*out = new(bool)
		**out = **in
	}
	if in.EndpointRef != nil {
		in, out := &in.EndpointRef, &out.EndpointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EndpointSelector != nil {
		in, out := &in.EndpointSelector, &out.EndpointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FilterPolicy != nil {
		in, out := &in.FilterPolicy, &out.FilterPolicy
		*out = new(string)
		**out = **in
	}
	if in.FilterPolicyScope != nil {
		in, out := &in.FilterPolicyScope, &out.FilterPolicyScope
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.RawMessageDelivery != nil {
		in, out := &in.RawMessageDelivery, &out.RawMessageDelivery
		*out = new(bool)
		**out = **in
	}
	if in.RedrivePolicy != nil {
		in, out := &in.RedrivePolicy, &out.RedrivePolicy
		*out = new(string)
		**out = **in
	}
	if in.ReplayPolicy != nil {
		in, out := &in.ReplayPolicy, &out.ReplayPolicy
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionRoleArn != nil {
		in, out := &in.SubscriptionRoleArn, &out.SubscriptionRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionRoleArnRef != nil {
		in, out := &in.SubscriptionRoleArnRef, &out.SubscriptionRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubscriptionRoleArnSelector != nil {
		in, out := &in.SubscriptionRoleArnSelector, &out.SubscriptionRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TopicArn != nil {
		in, out := &in.TopicArn, &out.TopicArn
		*out = new(string)
		**out = **in
	}
	if in.TopicArnRef != nil {
		in, out := &in.TopicArnRef, &out.TopicArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.TopicArnSelector != nil {
		in, out := &in.TopicArnSelector, &out.TopicArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscriptionInitParameters.
func (in *TopicSubscriptionInitParameters) DeepCopy() *TopicSubscriptionInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicSubscriptionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscriptionList) DeepCopyInto(out *TopicSubscriptionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TopicSubscription, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscriptionList.
func (in *TopicSubscriptionList) DeepCopy() *TopicSubscriptionList {
	if in == nil {
		return nil
	}
	out := new(TopicSubscriptionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicSubscriptionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscriptionObservation) DeepCopyInto(out *TopicSubscriptionObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ConfirmationTimeoutInMinutes != nil {
		in, out := &in.ConfirmationTimeoutInMinutes, &out.ConfirmationTimeoutInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.ConfirmationWasAuthenticated != nil {
		in, out := &in.ConfirmationWasAuthenticated, &out.ConfirmationWasAuthenticated
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.EndpointAutoConfirms != nil {
		in, out := &in.EndpointAutoConfirms, &out.EndpointAutoConfirms
		*out = new(bool)
		**out = **in
	}
	if in.FilterPolicy != nil {
		in, out := &in.FilterPolicy, &out.FilterPolicy
		*out = new(string)
		**out = **in
	}
	if in.FilterPolicyScope != nil {
		in, out := &in.FilterPolicyScope, &out.FilterPolicyScope
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.OwnerID != nil {
		in, out := &in.OwnerID, &out.OwnerID
		*out = new(string)
		**out = **in
	}
	if in.PendingConfirmation != nil {
		in, out := &in.PendingConfirmation, &out.PendingConfirmation
		*out = new(bool)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.RawMessageDelivery != nil {
		in, out := &in.RawMessageDelivery, &out.RawMessageDelivery
		*out = new(bool)
		**out = **in
	}
	if in.RedrivePolicy != nil {
		in, out := &in.RedrivePolicy, &out.RedrivePolicy
		*out = new(string)
		**out = **in
	}
	if in.ReplayPolicy != nil {
		in, out := &in.ReplayPolicy, &out.ReplayPolicy
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionRoleArn != nil {
		in, out := &in.SubscriptionRoleArn, &out.SubscriptionRoleArn
		*out = new(string)
		**out = **in
	}
	if in.TopicArn != nil {
		in, out := &in.TopicArn, &out.TopicArn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscriptionObservation.
func (in *TopicSubscriptionObservation) DeepCopy() *TopicSubscriptionObservation {
	if in == nil {
		return nil
	}
	out := new(TopicSubscriptionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscriptionParameters) DeepCopyInto(out *TopicSubscriptionParameters) {
	*out = *in
	if in.ConfirmationTimeoutInMinutes != nil {
		in, out := &in.ConfirmationTimeoutInMinutes, &out.ConfirmationTimeoutInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.EndpointAutoConfirms != nil {
		in, out := &in.EndpointAutoConfirms, &out.EndpointAutoConfirms
		*out = new(bool)
		**out = **in
	}
	if in.EndpointRef != nil {
		in, out := &in.EndpointRef, &out.EndpointRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.EndpointSelector != nil {
		in, out := &in.EndpointSelector, &out.EndpointSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FilterPolicy != nil {
		in, out := &in.FilterPolicy, &out.FilterPolicy
		*out = new(string)
		**out = **in
	}
	if in.FilterPolicyScope != nil {
		in, out := &in.FilterPolicyScope, &out.FilterPolicyScope
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.RawMessageDelivery != nil {
		in, out := &in.RawMessageDelivery, &out.RawMessageDelivery
		*out = new(bool)
		**out = **in
	}
	if in.RedrivePolicy != nil {
		in, out := &in.RedrivePolicy, &out.RedrivePolicy
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ReplayPolicy != nil {
		in, out := &in.ReplayPolicy, &out.ReplayPolicy
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionRoleArn != nil {
		in, out := &in.SubscriptionRoleArn, &out.SubscriptionRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionRoleArnRef != nil {
		in, out := &in.SubscriptionRoleArnRef, &out.SubscriptionRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubscriptionRoleArnSelector != nil {
		in, out := &in.SubscriptionRoleArnSelector, &out.SubscriptionRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TopicArn != nil {
		in, out := &in.TopicArn, &out.TopicArn
		*out = new(string)
		**out = **in
	}
	if in.TopicArnRef != nil {
		in, out := &in.TopicArnRef, &out.TopicArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.TopicArnSelector != nil {
		in, out := &in.TopicArnSelector, &out.TopicArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscriptionParameters.
func (in *TopicSubscriptionParameters) DeepCopy() *TopicSubscriptionParameters {
	if in == nil {
		return nil
	}
	out := new(TopicSubscriptionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscriptionSpec) DeepCopyInto(out *TopicSubscriptionSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscriptionSpec.
func (in *TopicSubscriptionSpec) DeepCopy() *TopicSubscriptionSpec {
	if in == nil {
		return nil
	}
	out := new(TopicSubscriptionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSubscriptionStatus) DeepCopyInto(out *TopicSubscriptionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSubscriptionStatus.
func (in *TopicSubscriptionStatus) DeepCopy() *TopicSubscriptionStatus {
	if in == nil {
		return nil
	}
	out := new(TopicSubscriptionStatus)
	in.DeepCopyInto(out)
	return out
}
