//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Topic) DeepCopyInto(out *Topic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Topic.
func (in *Topic) DeepCopy() *Topic {
	if in == nil {
		return nil
	}
	out := new(Topic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Topic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicInitParameters) DeepCopyInto(out *TopicInitParameters) {
	*out = *in
	if in.ApplicationSuccessFeedbackSampleRate != nil {
		in, out := &in.ApplicationSuccessFeedbackSampleRate, &out.ApplicationSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ContentBasedDeduplication != nil {
		in, out := &in.ContentBasedDeduplication, &out.ContentBasedDeduplication
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FifoTopic != nil {
		in, out := &in.FifoTopic, &out.FifoTopic
		*out = new(bool)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackSampleRate != nil {
		in, out := &in.FirehoseSuccessFeedbackSampleRate, &out.FirehoseSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.HTTPSuccessFeedbackSampleRate != nil {
		in, out := &in.HTTPSuccessFeedbackSampleRate, &out.HTTPSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.KMSMasterKeyID != nil {
		in, out := &in.KMSMasterKeyID, &out.KMSMasterKeyID
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackSampleRate != nil {
		in, out := &in.LambdaSuccessFeedbackSampleRate, &out.LambdaSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.SignatureVersion != nil {
		in, out := &in.SignatureVersion, &out.SignatureVersion
		*out = new(float64)
		**out = **in
	}
	if in.SqsSuccessFeedbackSampleRate != nil {
		in, out := &in.SqsSuccessFeedbackSampleRate, &out.SqsSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TracingConfig != nil {
		in, out := &in.TracingConfig, &out.TracingConfig
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicInitParameters.
func (in *TopicInitParameters) DeepCopy() *TopicInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicList) DeepCopyInto(out *TopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Topic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicList.
func (in *TopicList) DeepCopy() *TopicList {
	if in == nil {
		return nil
	}
	out := new(TopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicObservation) DeepCopyInto(out *TopicObservation) {
	*out = *in
	if in.ApplicationFailureFeedbackRoleArn != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArn, &out.ApplicationFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackRoleArn != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArn, &out.ApplicationSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackSampleRate != nil {
		in, out := &in.ApplicationSuccessFeedbackSampleRate, &out.ApplicationSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ContentBasedDeduplication != nil {
		in, out := &in.ContentBasedDeduplication, &out.ContentBasedDeduplication
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FifoTopic != nil {
		in, out := &in.FifoTopic, &out.FifoTopic
		*out = new(bool)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArn != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArn, &out.FirehoseFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackRoleArn != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArn, &out.FirehoseSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackSampleRate != nil {
		in, out := &in.FirehoseSuccessFeedbackSampleRate, &out.FirehoseSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArn != nil {
		in, out := &in.HTTPFailureFeedbackRoleArn, &out.HTTPFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackRoleArn != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArn, &out.HTTPSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackSampleRate != nil {
		in, out := &in.HTTPSuccessFeedbackSampleRate, &out.HTTPSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSMasterKeyID != nil {
		in, out := &in.KMSMasterKeyID, &out.KMSMasterKeyID
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArn != nil {
		in, out := &in.LambdaFailureFeedbackRoleArn, &out.LambdaFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackRoleArn != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArn, &out.LambdaSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackSampleRate != nil {
		in, out := &in.LambdaSuccessFeedbackSampleRate, &out.LambdaSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.SignatureVersion != nil {
		in, out := &in.SignatureVersion, &out.SignatureVersion
		*out = new(float64)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArn != nil {
		in, out := &in.SqsFailureFeedbackRoleArn, &out.SqsFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackRoleArn != nil {
		in, out := &in.SqsSuccessFeedbackRoleArn, &out.SqsSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackSampleRate != nil {
		in, out := &in.SqsSuccessFeedbackSampleRate, &out.SqsSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TracingConfig != nil {
		in, out := &in.TracingConfig, &out.TracingConfig
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicObservation.
func (in *TopicObservation) DeepCopy() *TopicObservation {
	if in == nil {
		return nil
	}
	out := new(TopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicParameters) DeepCopyInto(out *TopicParameters) {
	*out = *in
	if in.ApplicationFailureFeedbackRoleArn != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArn, &out.ApplicationFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationFailureFeedbackRoleArnRef != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArnRef, &out.ApplicationFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationFailureFeedbackRoleArnSelector != nil {
		in, out := &in.ApplicationFailureFeedbackRoleArnSelector, &out.ApplicationFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackRoleArn != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArn, &out.ApplicationSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ApplicationSuccessFeedbackRoleArnRef != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArnRef, &out.ApplicationSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.ApplicationSuccessFeedbackRoleArnSelector, &out.ApplicationSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ApplicationSuccessFeedbackSampleRate != nil {
		in, out := &in.ApplicationSuccessFeedbackSampleRate, &out.ApplicationSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.ContentBasedDeduplication != nil {
		in, out := &in.ContentBasedDeduplication, &out.ContentBasedDeduplication
		*out = new(bool)
		**out = **in
	}
	if in.DeliveryPolicy != nil {
		in, out := &in.DeliveryPolicy, &out.DeliveryPolicy
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FifoTopic != nil {
		in, out := &in.FifoTopic, &out.FifoTopic
		*out = new(bool)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArn != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArn, &out.FirehoseFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseFailureFeedbackRoleArnRef != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArnRef, &out.FirehoseFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseFailureFeedbackRoleArnSelector != nil {
		in, out := &in.FirehoseFailureFeedbackRoleArnSelector, &out.FirehoseFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackRoleArn != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArn, &out.FirehoseSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.FirehoseSuccessFeedbackRoleArnRef != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArnRef, &out.FirehoseSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.FirehoseSuccessFeedbackRoleArnSelector, &out.FirehoseSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FirehoseSuccessFeedbackSampleRate != nil {
		in, out := &in.FirehoseSuccessFeedbackSampleRate, &out.FirehoseSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArn != nil {
		in, out := &in.HTTPFailureFeedbackRoleArn, &out.HTTPFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPFailureFeedbackRoleArnRef != nil {
		in, out := &in.HTTPFailureFeedbackRoleArnRef, &out.HTTPFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPFailureFeedbackRoleArnSelector != nil {
		in, out := &in.HTTPFailureFeedbackRoleArnSelector, &out.HTTPFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackRoleArn != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArn, &out.HTTPSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.HTTPSuccessFeedbackRoleArnRef != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArnRef, &out.HTTPSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.HTTPSuccessFeedbackRoleArnSelector, &out.HTTPSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTPSuccessFeedbackSampleRate != nil {
		in, out := &in.HTTPSuccessFeedbackSampleRate, &out.HTTPSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.KMSMasterKeyID != nil {
		in, out := &in.KMSMasterKeyID, &out.KMSMasterKeyID
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArn != nil {
		in, out := &in.LambdaFailureFeedbackRoleArn, &out.LambdaFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaFailureFeedbackRoleArnRef != nil {
		in, out := &in.LambdaFailureFeedbackRoleArnRef, &out.LambdaFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaFailureFeedbackRoleArnSelector != nil {
		in, out := &in.LambdaFailureFeedbackRoleArnSelector, &out.LambdaFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackRoleArn != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArn, &out.LambdaSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.LambdaSuccessFeedbackRoleArnRef != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArnRef, &out.LambdaSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.LambdaSuccessFeedbackRoleArnSelector, &out.LambdaSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaSuccessFeedbackSampleRate != nil {
		in, out := &in.LambdaSuccessFeedbackSampleRate, &out.LambdaSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SignatureVersion != nil {
		in, out := &in.SignatureVersion, &out.SignatureVersion
		*out = new(float64)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArn != nil {
		in, out := &in.SqsFailureFeedbackRoleArn, &out.SqsFailureFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsFailureFeedbackRoleArnRef != nil {
		in, out := &in.SqsFailureFeedbackRoleArnRef, &out.SqsFailureFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsFailureFeedbackRoleArnSelector != nil {
		in, out := &in.SqsFailureFeedbackRoleArnSelector, &out.SqsFailureFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackRoleArn != nil {
		in, out := &in.SqsSuccessFeedbackRoleArn, &out.SqsSuccessFeedbackRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SqsSuccessFeedbackRoleArnRef != nil {
		in, out := &in.SqsSuccessFeedbackRoleArnRef, &out.SqsSuccessFeedbackRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackRoleArnSelector != nil {
		in, out := &in.SqsSuccessFeedbackRoleArnSelector, &out.SqsSuccessFeedbackRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SqsSuccessFeedbackSampleRate != nil {
		in, out := &in.SqsSuccessFeedbackSampleRate, &out.SqsSuccessFeedbackSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TracingConfig != nil {
		in, out := &in.TracingConfig, &out.TracingConfig
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicParameters.
func (in *TopicParameters) DeepCopy() *TopicParameters {
	if in == nil {
		return nil
	}
	out := new(TopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicSpec) DeepCopyInto(out *TopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicSpec.
func (in *TopicSpec) DeepCopy() *TopicSpec {
	if in == nil {
		return nil
	}
	out := new(TopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicStatus) DeepCopyInto(out *TopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicStatus.
func (in *TopicStatus) DeepCopy() *TopicStatus {
	if in == nil {
		return nil
	}
	out := new(TopicStatus)
	in.DeepCopyInto(out)
	return out
}
