// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *DeliveryStream) ResolveReferences( // ResolveReferences of this DeliveryStream.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("elasticsearch.aws.upbound.io", "v1beta1", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].DomainArnRef,
				Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration[i3].DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].DomainArn")
		}
		mg.Spec.ForProvider.ElasticsearchConfiguration[i3].DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ElasticsearchConfiguration[i3].DomainArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.ElasticsearchConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ElasticsearchConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArn")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs,
					Selector:      mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs,
					Selector:      mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIds")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExtendedS3Configuration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration[i3].BucketArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.ExtendedS3Configuration[i3].BucketArnRef,
				Selector:     mg.Spec.ForProvider.ExtendedS3Configuration[i3].BucketArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration[i3].BucketArn")
		}
		mg.Spec.ForProvider.ExtendedS3Configuration[i3].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExtendedS3Configuration[i3].BucketArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExtendedS3Configuration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArn),
						Extract:      resource.ExtractParamPath("arn", true),
						Reference:    mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArnRef,
						Selector:     mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArn")
				}
				mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArnRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExtendedS3Configuration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta1", "CatalogTable", "CatalogTableList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableNameRef,
						Selector:     mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableName")
				}
				mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableNameRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExtendedS3Configuration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration[i3].RoleArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.ExtendedS3Configuration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.ExtendedS3Configuration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration[i3].RoleArn")
		}
		mg.Spec.ForProvider.ExtendedS3Configuration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExtendedS3Configuration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.HTTPEndpointConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.HTTPEndpointConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.HTTPEndpointConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogDatabase", "CatalogDatabaseList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseNameRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseName")
			}
			mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableNameRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableName")
			}
			mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IcebergConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.IcebergConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.IcebergConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.IcebergConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.IcebergConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("opensearch.aws.upbound.io", "v1beta1", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration[i3].DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.OpensearchConfiguration[i3].DomainArnRef,
				Selector:     mg.Spec.ForProvider.OpensearchConfiguration[i3].DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].DomainArn")
		}
		mg.Spec.ForProvider.OpensearchConfiguration[i3].DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchConfiguration[i3].DomainArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.OpensearchConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.OpensearchConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.OpensearchConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArn")
			}
			mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs,
					Selector:      mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds")
			}
			mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs,
					Selector:      mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIds")
			}
			mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchserverlessConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("opensearchserverless.aws.upbound.io", "v1beta1", "Collection", "CollectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].CollectionEndpoint),
				Extract:      resource.ExtractParamPath("collection_endpoint", true),
				Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].CollectionEndpointRef,
				Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].CollectionEndpointSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].CollectionEndpoint")
		}
		mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].CollectionEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].CollectionEndpointRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchserverlessConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchserverlessConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.OpensearchserverlessConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RedshiftConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.RedshiftConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.RedshiftConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.RedshiftConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RedshiftConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArn),
					Extract:      common.ARNExtractor(),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SnowflakeConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnowflakeConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.SnowflakeConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.SnowflakeConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SnowflakeConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.SnowflakeConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SnowflakeConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SnowflakeConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SnowflakeConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SplunkConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SplunkConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("elasticsearch.aws.upbound.io", "v1beta1", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].DomainArnRef,
				Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration[i3].DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].DomainArn")
		}
		mg.Spec.InitProvider.ElasticsearchConfiguration[i3].DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ElasticsearchConfiguration[i3].DomainArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.ElasticsearchConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ElasticsearchConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArn")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs,
					Selector:      mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ElasticsearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs,
					Selector:      mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIds")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.ElasticsearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ExtendedS3Configuration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration[i3].BucketArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.InitProvider.ExtendedS3Configuration[i3].BucketArnRef,
				Selector:     mg.Spec.InitProvider.ExtendedS3Configuration[i3].BucketArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration[i3].BucketArn")
		}
		mg.Spec.InitProvider.ExtendedS3Configuration[i3].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ExtendedS3Configuration[i3].BucketArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ExtendedS3Configuration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArn),
						Extract:      resource.ExtractParamPath("arn", true),
						Reference:    mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArnRef,
						Selector:     mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArn")
				}
				mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].RoleArnRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ExtendedS3Configuration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta1", "CatalogTable", "CatalogTableList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableNameRef,
						Selector:     mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableName")
				}
				mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ExtendedS3Configuration[i3].DataFormatConversionConfiguration[i4].SchemaConfiguration[i5].TableNameRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ExtendedS3Configuration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration[i3].RoleArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.InitProvider.ExtendedS3Configuration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.ExtendedS3Configuration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration[i3].RoleArn")
		}
		mg.Spec.InitProvider.ExtendedS3Configuration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ExtendedS3Configuration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.HTTPEndpointConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.HTTPEndpointConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.HTTPEndpointConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.HTTPEndpointConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogDatabase", "CatalogDatabaseList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseNameRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseName")
			}
			mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].DatabaseNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableNameRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableName")
			}
			mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration[i3].DestinationTableConfiguration[i4].TableNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.IcebergConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.IcebergConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.IcebergConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.IcebergConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.IcebergConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.IcebergConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("opensearch.aws.upbound.io", "v1beta1", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration[i3].DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.OpensearchConfiguration[i3].DomainArnRef,
				Selector:     mg.Spec.InitProvider.OpensearchConfiguration[i3].DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].DomainArn")
		}
		mg.Spec.InitProvider.OpensearchConfiguration[i3].DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchConfiguration[i3].DomainArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.OpensearchConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.OpensearchConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.OpensearchConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArn")
			}
			mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs,
					Selector:      mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds")
			}
			mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs,
					Selector:      mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIds")
			}
			mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.OpensearchConfiguration[i3].VPCConfig[i4].SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchserverlessConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("opensearchserverless.aws.upbound.io", "v1beta1", "Collection", "CollectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].CollectionEndpoint),
				Extract:      resource.ExtractParamPath("collection_endpoint", true),
				Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].CollectionEndpointRef,
				Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].CollectionEndpointSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].CollectionEndpoint")
		}
		mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].CollectionEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].CollectionEndpointRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchserverlessConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchserverlessConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OpensearchserverlessConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchserverlessConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RedshiftConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.RedshiftConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.RedshiftConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.RedshiftConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.RedshiftConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArn),
					Extract:      common.ARNExtractor(),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3BackupConfiguration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RedshiftConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SnowflakeConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnowflakeConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.SnowflakeConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.SnowflakeConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SnowflakeConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.SnowflakeConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SnowflakeConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SnowflakeConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SnowflakeConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SnowflakeConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SplunkConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArnRef,
					Selector:     mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArn")
			}
			mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].BucketArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SplunkConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArnRef,
					Selector:     mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArn")
			}
			mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SplunkConfiguration[i3].S3Configuration[i4].RoleArnRef = rsp.ResolvedReference

		}
	}

	return nil
}
