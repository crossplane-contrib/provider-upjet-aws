// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *DeliveryStream) ResolveReferences( // ResolveReferences of this DeliveryStream.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("elasticsearch.aws.upbound.io", "v1beta2", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration.DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration.DomainArnRef,
				Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration.DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.DomainArn")
		}
		mg.Spec.ForProvider.ElasticsearchConfiguration.DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ElasticsearchConfiguration.DomainArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.ElasticsearchConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ElasticsearchConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ElasticsearchConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.RoleArnRef,
					Selector:     mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.RoleArn")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIdsRefs,
					Selector:      mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIds")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SubnetIdsRefs,
					Selector:      mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SubnetIds")
			}
			mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.ElasticsearchConfiguration.VPCConfig.SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.ExtendedS3Configuration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration.BucketArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.ExtendedS3Configuration.BucketArnRef,
				Selector:     mg.Spec.ForProvider.ExtendedS3Configuration.BucketArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration.BucketArn")
		}
		mg.Spec.ForProvider.ExtendedS3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExtendedS3Configuration.BucketArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ExtendedS3Configuration != nil {
		if mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration != nil {
			if mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration != nil {
				{
					m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArn),
						Extract:      resource.ExtractParamPath("arn", true),
						Reference:    mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArnRef,
						Selector:     mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArn")
				}
				mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArnRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.ExtendedS3Configuration != nil {
		if mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration != nil {
			if mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration != nil {
				{
					m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableNameRef,
						Selector:     mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableName")
				}
				mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableNameRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.ExtendedS3Configuration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExtendedS3Configuration.RoleArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.ExtendedS3Configuration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.ExtendedS3Configuration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExtendedS3Configuration.RoleArn")
		}
		mg.Spec.ForProvider.ExtendedS3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExtendedS3Configuration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.HTTPEndpointConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPEndpointConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.HTTPEndpointConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.HTTPEndpointConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.HTTPEndpointConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.HTTPEndpointConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.HTTPEndpointConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.HTTPEndpointConfiguration != nil {
		if mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.HTTPEndpointConfiguration != nil {
		if mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.HTTPEndpointConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.IcebergConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogDatabase", "CatalogDatabaseList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseNameRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseName")
			}
			mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseNameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.IcebergConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableNameRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableName")
			}
			mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableNameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.IcebergConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.IcebergConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.IcebergConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.IcebergConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.IcebergConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.IcebergConfiguration != nil {
		if mg.Spec.ForProvider.IcebergConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.IcebergConfiguration != nil {
		if mg.Spec.ForProvider.IcebergConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.IcebergConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("opensearch.aws.upbound.io", "v1beta2", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration.DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.OpensearchConfiguration.DomainArnRef,
				Selector:     mg.Spec.ForProvider.OpensearchConfiguration.DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.DomainArn")
		}
		mg.Spec.ForProvider.OpensearchConfiguration.DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchConfiguration.DomainArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.OpensearchConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.OpensearchConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.OpensearchConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.RoleArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.RoleArn")
			}
			mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIdsRefs,
					Selector:      mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIds")
			}
			mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.OpensearchConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SubnetIdsRefs,
					Selector:      mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SubnetIds")
			}
			mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.OpensearchConfiguration.VPCConfig.SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.OpensearchserverlessConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("opensearchserverless.aws.upbound.io", "v1beta1", "Collection", "CollectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration.CollectionEndpoint),
				Extract:      resource.ExtractParamPath("collection_endpoint", true),
				Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration.CollectionEndpointRef,
				Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration.CollectionEndpointSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration.CollectionEndpoint")
		}
		mg.Spec.ForProvider.OpensearchserverlessConfiguration.CollectionEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchserverlessConfiguration.CollectionEndpointRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.OpensearchserverlessConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.OpensearchserverlessConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OpensearchserverlessConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.OpensearchserverlessConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.OpensearchserverlessConfiguration != nil {
		if mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.RedshiftConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.RedshiftConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.RedshiftConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.RedshiftConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RedshiftConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.RedshiftConfiguration != nil {
		if mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArn),
					Extract:      common.ARNExtractor(),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.RedshiftConfiguration != nil {
		if mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.RedshiftConfiguration != nil {
		if mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.RedshiftConfiguration != nil {
		if mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RedshiftConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.SnowflakeConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnowflakeConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.SnowflakeConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.SnowflakeConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SnowflakeConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.SnowflakeConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SnowflakeConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.SnowflakeConfiguration != nil {
		if mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.SnowflakeConfiguration != nil {
		if mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SnowflakeConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.SplunkConfiguration != nil {
		if mg.Spec.ForProvider.SplunkConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.SplunkConfiguration != nil {
		if mg.Spec.ForProvider.SplunkConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SplunkConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("elasticsearch.aws.upbound.io", "v1beta2", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration.DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration.DomainArnRef,
				Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration.DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.DomainArn")
		}
		mg.Spec.InitProvider.ElasticsearchConfiguration.DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ElasticsearchConfiguration.DomainArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.ElasticsearchConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ElasticsearchConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ElasticsearchConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.RoleArnRef,
					Selector:     mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.RoleArn")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIdsRefs,
					Selector:      mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIds")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.ElasticsearchConfiguration != nil {
		if mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SubnetIdsRefs,
					Selector:      mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SubnetIds")
			}
			mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.ElasticsearchConfiguration.VPCConfig.SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.ExtendedS3Configuration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration.BucketArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.InitProvider.ExtendedS3Configuration.BucketArnRef,
				Selector:     mg.Spec.InitProvider.ExtendedS3Configuration.BucketArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration.BucketArn")
		}
		mg.Spec.InitProvider.ExtendedS3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ExtendedS3Configuration.BucketArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ExtendedS3Configuration != nil {
		if mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration != nil {
			if mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration != nil {
				{
					m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArn),
						Extract:      resource.ExtractParamPath("arn", true),
						Reference:    mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArnRef,
						Selector:     mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArn")
				}
				mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.RoleArnRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.ExtendedS3Configuration != nil {
		if mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration != nil {
			if mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration != nil {
				{
					m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableNameRef,
						Selector:     mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableName")
				}
				mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ExtendedS3Configuration.DataFormatConversionConfiguration.SchemaConfiguration.TableNameRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.ExtendedS3Configuration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExtendedS3Configuration.RoleArn),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.InitProvider.ExtendedS3Configuration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.ExtendedS3Configuration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ExtendedS3Configuration.RoleArn")
		}
		mg.Spec.InitProvider.ExtendedS3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ExtendedS3Configuration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.HTTPEndpointConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HTTPEndpointConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.HTTPEndpointConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.HTTPEndpointConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.HTTPEndpointConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.HTTPEndpointConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.HTTPEndpointConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.HTTPEndpointConfiguration != nil {
		if mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.HTTPEndpointConfiguration != nil {
		if mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.HTTPEndpointConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.IcebergConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogDatabase", "CatalogDatabaseList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseNameRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseName")
			}
			mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].DatabaseNameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.IcebergConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableName),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableNameRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableName")
			}
			mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration.DestinationTableConfiguration[i4].TableNameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.IcebergConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.IcebergConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.IcebergConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.IcebergConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.IcebergConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.IcebergConfiguration != nil {
		if mg.Spec.InitProvider.IcebergConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.IcebergConfiguration != nil {
		if mg.Spec.InitProvider.IcebergConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.IcebergConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("opensearch.aws.upbound.io", "v1beta2", "Domain", "DomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration.DomainArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.OpensearchConfiguration.DomainArnRef,
				Selector:     mg.Spec.InitProvider.OpensearchConfiguration.DomainArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.DomainArn")
		}
		mg.Spec.InitProvider.OpensearchConfiguration.DomainArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchConfiguration.DomainArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.OpensearchConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.OpensearchConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.OpensearchConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.RoleArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.RoleArn")
			}
			mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIdsRefs,
					Selector:      mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIds")
			}
			mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.OpensearchConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SubnetIdsRefs,
					Selector:      mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SubnetIds")
			}
			mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.OpensearchConfiguration.VPCConfig.SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.OpensearchserverlessConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("opensearchserverless.aws.upbound.io", "v1beta1", "Collection", "CollectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration.CollectionEndpoint),
				Extract:      resource.ExtractParamPath("collection_endpoint", true),
				Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration.CollectionEndpointRef,
				Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration.CollectionEndpointSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration.CollectionEndpoint")
		}
		mg.Spec.InitProvider.OpensearchserverlessConfiguration.CollectionEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchserverlessConfiguration.CollectionEndpointRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.OpensearchserverlessConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.OpensearchserverlessConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.OpensearchserverlessConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.OpensearchserverlessConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.OpensearchserverlessConfiguration != nil {
		if mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.OpensearchserverlessConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.RedshiftConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.RedshiftConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.RedshiftConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.RedshiftConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.RedshiftConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.RedshiftConfiguration != nil {
		if mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArn),
					Extract:      common.ARNExtractor(),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.RedshiftConfiguration != nil {
		if mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration.S3BackupConfiguration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.RedshiftConfiguration != nil {
		if mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.RedshiftConfiguration != nil {
		if mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RedshiftConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.SnowflakeConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnowflakeConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.SnowflakeConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.SnowflakeConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SnowflakeConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.SnowflakeConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SnowflakeConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.SnowflakeConfiguration != nil {
		if mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.SnowflakeConfiguration != nil {
		if mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SnowflakeConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.SplunkConfiguration != nil {
		if mg.Spec.InitProvider.SplunkConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.BucketArnRef,
					Selector:     mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.BucketArn")
			}
			mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.SplunkConfiguration != nil {
		if mg.Spec.InitProvider.SplunkConfiguration.S3Configuration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.RoleArnRef,
					Selector:     mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.RoleArn")
			}
			mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SplunkConfiguration.S3Configuration.RoleArnRef = rsp.ResolvedReference

		}
	}

	return nil
}
