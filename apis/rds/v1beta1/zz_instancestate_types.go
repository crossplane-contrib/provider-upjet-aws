// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceStateInitParameters struct {

	// DB Instance Identifier
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/rds/v1beta3.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("identifier",false)
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// Reference to a Instance in rds to populate identifier.
	// +kubebuilder:validation:Optional
	IdentifierRef *v1.Reference `json:"identifierRef,omitempty" tf:"-"`

	// Selector for a Instance in rds to populate identifier.
	// +kubebuilder:validation:Optional
	IdentifierSelector *v1.Selector `json:"identifierSelector,omitempty" tf:"-"`

	// Configured state of the DB Instance. Valid values are available and stopped.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type InstanceStateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// DB Instance Identifier
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Configured state of the DB Instance. Valid values are available and stopped.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type InstanceStateParameters struct {

	// DB Instance Identifier
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/rds/v1beta3.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("identifier",false)
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// Reference to a Instance in rds to populate identifier.
	// +kubebuilder:validation:Optional
	IdentifierRef *v1.Reference `json:"identifierRef,omitempty" tf:"-"`

	// Selector for a Instance in rds to populate identifier.
	// +kubebuilder:validation:Optional
	IdentifierSelector *v1.Selector `json:"identifierSelector,omitempty" tf:"-"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Configured state of the DB Instance. Valid values are available and stopped.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// InstanceStateSpec defines the desired state of InstanceState
type InstanceStateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceStateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceStateInitParameters `json:"initProvider,omitempty"`
}

// InstanceStateStatus defines the observed state of InstanceState.
type InstanceStateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceStateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceState is the Schema for the InstanceStates API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type InstanceState struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.state) || (has(self.initProvider) && has(self.initProvider.state))",message="spec.forProvider.state is a required parameter"
	Spec   InstanceStateSpec   `json:"spec"`
	Status InstanceStateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceStateList contains a list of InstanceStates
type InstanceStateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceState `json:"items"`
}

// Repository type metadata.
var (
	InstanceState_Kind             = "InstanceState"
	InstanceState_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceState_Kind}.String()
	InstanceState_KindAPIVersion   = InstanceState_Kind + "." + CRDGroupVersion.String()
	InstanceState_GroupVersionKind = CRDGroupVersion.WithKind(InstanceState_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceState{}, &InstanceStateList{})
}
