//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BlueGreenUpdateInitParameters) DeepCopyInto(out *BlueGreenUpdateInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlueGreenUpdateInitParameters.
func (in *BlueGreenUpdateInitParameters) DeepCopy() *BlueGreenUpdateInitParameters {
	if in == nil {
		return nil
	}
	out := new(BlueGreenUpdateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BlueGreenUpdateObservation) DeepCopyInto(out *BlueGreenUpdateObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlueGreenUpdateObservation.
func (in *BlueGreenUpdateObservation) DeepCopy() *BlueGreenUpdateObservation {
	if in == nil {
		return nil
	}
	out := new(BlueGreenUpdateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BlueGreenUpdateParameters) DeepCopyInto(out *BlueGreenUpdateParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlueGreenUpdateParameters.
func (in *BlueGreenUpdateParameters) DeepCopy() *BlueGreenUpdateParameters {
	if in == nil {
		return nil
	}
	out := new(BlueGreenUpdateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Instance) DeepCopyInto(out *Instance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Instance.
func (in *Instance) DeepCopy() *Instance {
	if in == nil {
		return nil
	}
	out := new(Instance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Instance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceInitParameters) DeepCopyInto(out *InstanceInitParameters) {
	*out = *in
	if in.AllocatedStorage != nil {
		in, out := &in.AllocatedStorage, &out.AllocatedStorage
		*out = new(float64)
		**out = **in
	}
	if in.AllowMajorVersionUpgrade != nil {
		in, out := &in.AllowMajorVersionUpgrade, &out.AllowMajorVersionUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.ApplyImmediately != nil {
		in, out := &in.ApplyImmediately, &out.ApplyImmediately
		*out = new(bool)
		**out = **in
	}
	if in.AutoMinorVersionUpgrade != nil {
		in, out := &in.AutoMinorVersionUpgrade, &out.AutoMinorVersionUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriod != nil {
		in, out := &in.BackupRetentionPeriod, &out.BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.BackupTarget != nil {
		in, out := &in.BackupTarget, &out.BackupTarget
		*out = new(string)
		**out = **in
	}
	if in.BackupWindow != nil {
		in, out := &in.BackupWindow, &out.BackupWindow
		*out = new(string)
		**out = **in
	}
	if in.BlueGreenUpdate != nil {
		in, out := &in.BlueGreenUpdate, &out.BlueGreenUpdate
		*out = make([]BlueGreenUpdateInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CACertIdentifier != nil {
		in, out := &in.CACertIdentifier, &out.CACertIdentifier
		*out = new(string)
		**out = **in
	}
	if in.CharacterSetName != nil {
		in, out := &in.CharacterSetName, &out.CharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToSnapshot != nil {
		in, out := &in.CopyTagsToSnapshot, &out.CopyTagsToSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.CustomIAMInstanceProfile != nil {
		in, out := &in.CustomIAMInstanceProfile, &out.CustomIAMInstanceProfile
		*out = new(string)
		**out = **in
	}
	if in.CustomerOwnedIPEnabled != nil {
		in, out := &in.CustomerOwnedIPEnabled, &out.CustomerOwnedIPEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DBSubnetGroupName != nil {
		in, out := &in.DBSubnetGroupName, &out.DBSubnetGroupName
		*out = new(string)
		**out = **in
	}
	if in.DBSubnetGroupNameRef != nil {
		in, out := &in.DBSubnetGroupNameRef, &out.DBSubnetGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBSubnetGroupNameSelector != nil {
		in, out := &in.DBSubnetGroupNameSelector, &out.DBSubnetGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeleteAutomatedBackups != nil {
		in, out := &in.DeleteAutomatedBackups, &out.DeleteAutomatedBackups
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DomainAuthSecretArn != nil {
		in, out := &in.DomainAuthSecretArn, &out.DomainAuthSecretArn
		*out = new(string)
		**out = **in
	}
	if in.DomainDNSIps != nil {
		in, out := &in.DomainDNSIps, &out.DomainDNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainFqdn != nil {
		in, out := &in.DomainFqdn, &out.DomainFqdn
		*out = new(string)
		**out = **in
	}
	if in.DomainIAMRoleName != nil {
		in, out := &in.DomainIAMRoleName, &out.DomainIAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.EnabledCloudwatchLogsExports != nil {
		in, out := &in.EnabledCloudwatchLogsExports, &out.EnabledCloudwatchLogsExports
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.FinalSnapshotIdentifier != nil {
		in, out := &in.FinalSnapshotIdentifier, &out.FinalSnapshotIdentifier
		*out = new(string)
		**out = **in
	}
	if in.IAMDatabaseAuthenticationEnabled != nil {
		in, out := &in.IAMDatabaseAuthenticationEnabled, &out.IAMDatabaseAuthenticationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Identifier != nil {
		in, out := &in.Identifier, &out.Identifier
		*out = new(string)
		**out = **in
	}
	if in.IdentifierPrefix != nil {
		in, out := &in.IdentifierPrefix, &out.IdentifierPrefix
		*out = new(string)
		**out = **in
	}
	if in.InstanceClass != nil {
		in, out := &in.InstanceClass, &out.InstanceClass
		*out = new(string)
		**out = **in
	}
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyIDRef != nil {
		in, out := &in.KMSKeyIDRef, &out.KMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyIDSelector != nil {
		in, out := &in.KMSKeyIDSelector, &out.KMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LicenseModel != nil {
		in, out := &in.LicenseModel, &out.LicenseModel
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = new(string)
		**out = **in
	}
	if in.ManageMasterUserPassword != nil {
		in, out := &in.ManageMasterUserPassword, &out.ManageMasterUserPassword
		*out = new(bool)
		**out = **in
	}
	if in.MasterUserSecretKMSKeyID != nil {
		in, out := &in.MasterUserSecretKMSKeyID, &out.MasterUserSecretKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MasterUserSecretKMSKeyIDRef != nil {
		in, out := &in.MasterUserSecretKMSKeyIDRef, &out.MasterUserSecretKMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.MasterUserSecretKMSKeyIDSelector != nil {
		in, out := &in.MasterUserSecretKMSKeyIDSelector, &out.MasterUserSecretKMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxAllocatedStorage != nil {
		in, out := &in.MaxAllocatedStorage, &out.MaxAllocatedStorage
		*out = new(float64)
		**out = **in
	}
	if in.MonitoringInterval != nil {
		in, out := &in.MonitoringInterval, &out.MonitoringInterval
		*out = new(float64)
		**out = **in
	}
	if in.MonitoringRoleArn != nil {
		in, out := &in.MonitoringRoleArn, &out.MonitoringRoleArn
		*out = new(string)
		**out = **in
	}
	if in.MonitoringRoleArnRef != nil {
		in, out := &in.MonitoringRoleArnRef, &out.MonitoringRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.MonitoringRoleArnSelector != nil {
		in, out := &in.MonitoringRoleArnSelector, &out.MonitoringRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.NcharCharacterSetName != nil {
		in, out := &in.NcharCharacterSetName, &out.NcharCharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.OptionGroupName != nil {
		in, out := &in.OptionGroupName, &out.OptionGroupName
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupName != nil {
		in, out := &in.ParameterGroupName, &out.ParameterGroupName
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupNameRef != nil {
		in, out := &in.ParameterGroupNameRef, &out.ParameterGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ParameterGroupNameSelector != nil {
		in, out := &in.ParameterGroupNameSelector, &out.ParameterGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PerformanceInsightsEnabled != nil {
		in, out := &in.PerformanceInsightsEnabled, &out.PerformanceInsightsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PerformanceInsightsKMSKeyID != nil {
		in, out := &in.PerformanceInsightsKMSKeyID, &out.PerformanceInsightsKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.PerformanceInsightsRetentionPeriod != nil {
		in, out := &in.PerformanceInsightsRetentionPeriod, &out.PerformanceInsightsRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PubliclyAccessible != nil {
		in, out := &in.PubliclyAccessible, &out.PubliclyAccessible
		*out = new(bool)
		**out = **in
	}
	if in.ReplicaMode != nil {
		in, out := &in.ReplicaMode, &out.ReplicaMode
		*out = new(string)
		**out = **in
	}
	if in.ReplicateSourceDB != nil {
		in, out := &in.ReplicateSourceDB, &out.ReplicateSourceDB
		*out = new(string)
		**out = **in
	}
	if in.ReplicateSourceDBRef != nil {
		in, out := &in.ReplicateSourceDBRef, &out.ReplicateSourceDBRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ReplicateSourceDBSelector != nil {
		in, out := &in.ReplicateSourceDBSelector, &out.ReplicateSourceDBSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RestoreToPointInTime != nil {
		in, out := &in.RestoreToPointInTime, &out.RestoreToPointInTime
		*out = make([]RestoreToPointInTimeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.S3Import != nil {
		in, out := &in.S3Import, &out.S3Import
		*out = make([]S3ImportInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SkipFinalSnapshot != nil {
		in, out := &in.SkipFinalSnapshot, &out.SkipFinalSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotIdentifier != nil {
		in, out := &in.SnapshotIdentifier, &out.SnapshotIdentifier
		*out = new(string)
		**out = **in
	}
	if in.StorageEncrypted != nil {
		in, out := &in.StorageEncrypted, &out.StorageEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.StorageThroughput != nil {
		in, out := &in.StorageThroughput, &out.StorageThroughput
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VPCSecurityGroupIDRefs != nil {
		in, out := &in.VPCSecurityGroupIDRefs, &out.VPCSecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VPCSecurityGroupIDSelector != nil {
		in, out := &in.VPCSecurityGroupIDSelector, &out.VPCSecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCSecurityGroupIds != nil {
		in, out := &in.VPCSecurityGroupIds, &out.VPCSecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceInitParameters.
func (in *InstanceInitParameters) DeepCopy() *InstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceList) DeepCopyInto(out *InstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Instance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceList.
func (in *InstanceList) DeepCopy() *InstanceList {
	if in == nil {
		return nil
	}
	out := new(InstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceObservation) DeepCopyInto(out *InstanceObservation) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.AllocatedStorage != nil {
		in, out := &in.AllocatedStorage, &out.AllocatedStorage
		*out = new(float64)
		**out = **in
	}
	if in.AllowMajorVersionUpgrade != nil {
		in, out := &in.AllowMajorVersionUpgrade, &out.AllowMajorVersionUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.ApplyImmediately != nil {
		in, out := &in.ApplyImmediately, &out.ApplyImmediately
		*out = new(bool)
		**out = **in
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.AutoMinorVersionUpgrade != nil {
		in, out := &in.AutoMinorVersionUpgrade, &out.AutoMinorVersionUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriod != nil {
		in, out := &in.BackupRetentionPeriod, &out.BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.BackupTarget != nil {
		in, out := &in.BackupTarget, &out.BackupTarget
		*out = new(string)
		**out = **in
	}
	if in.BackupWindow != nil {
		in, out := &in.BackupWindow, &out.BackupWindow
		*out = new(string)
		**out = **in
	}
	if in.BlueGreenUpdate != nil {
		in, out := &in.BlueGreenUpdate, &out.BlueGreenUpdate
		*out = make([]BlueGreenUpdateObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CACertIdentifier != nil {
		in, out := &in.CACertIdentifier, &out.CACertIdentifier
		*out = new(string)
		**out = **in
	}
	if in.CharacterSetName != nil {
		in, out := &in.CharacterSetName, &out.CharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToSnapshot != nil {
		in, out := &in.CopyTagsToSnapshot, &out.CopyTagsToSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.CustomIAMInstanceProfile != nil {
		in, out := &in.CustomIAMInstanceProfile, &out.CustomIAMInstanceProfile
		*out = new(string)
		**out = **in
	}
	if in.CustomerOwnedIPEnabled != nil {
		in, out := &in.CustomerOwnedIPEnabled, &out.CustomerOwnedIPEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DBSubnetGroupName != nil {
		in, out := &in.DBSubnetGroupName, &out.DBSubnetGroupName
		*out = new(string)
		**out = **in
	}
	if in.DeleteAutomatedBackups != nil {
		in, out := &in.DeleteAutomatedBackups, &out.DeleteAutomatedBackups
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DomainAuthSecretArn != nil {
		in, out := &in.DomainAuthSecretArn, &out.DomainAuthSecretArn
		*out = new(string)
		**out = **in
	}
	if in.DomainDNSIps != nil {
		in, out := &in.DomainDNSIps, &out.DomainDNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainFqdn != nil {
		in, out := &in.DomainFqdn, &out.DomainFqdn
		*out = new(string)
		**out = **in
	}
	if in.DomainIAMRoleName != nil {
		in, out := &in.DomainIAMRoleName, &out.DomainIAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.EnabledCloudwatchLogsExports != nil {
		in, out := &in.EnabledCloudwatchLogsExports, &out.EnabledCloudwatchLogsExports
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.EngineVersionActual != nil {
		in, out := &in.EngineVersionActual, &out.EngineVersionActual
		*out = new(string)
		**out = **in
	}
	if in.FinalSnapshotIdentifier != nil {
		in, out := &in.FinalSnapshotIdentifier, &out.FinalSnapshotIdentifier
		*out = new(string)
		**out = **in
	}
	if in.HostedZoneID != nil {
		in, out := &in.HostedZoneID, &out.HostedZoneID
		*out = new(string)
		**out = **in
	}
	if in.IAMDatabaseAuthenticationEnabled != nil {
		in, out := &in.IAMDatabaseAuthenticationEnabled, &out.IAMDatabaseAuthenticationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Identifier != nil {
		in, out := &in.Identifier, &out.Identifier
		*out = new(string)
		**out = **in
	}
	if in.IdentifierPrefix != nil {
		in, out := &in.IdentifierPrefix, &out.IdentifierPrefix
		*out = new(string)
		**out = **in
	}
	if in.InstanceClass != nil {
		in, out := &in.InstanceClass, &out.InstanceClass
		*out = new(string)
		**out = **in
	}
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.LatestRestorableTime != nil {
		in, out := &in.LatestRestorableTime, &out.LatestRestorableTime
		*out = new(string)
		**out = **in
	}
	if in.LicenseModel != nil {
		in, out := &in.LicenseModel, &out.LicenseModel
		*out = new(string)
		**out = **in
	}
	if in.ListenerEndpoint != nil {
		in, out := &in.ListenerEndpoint, &out.ListenerEndpoint
		*out = make([]ListenerEndpointObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = new(string)
		**out = **in
	}
	if in.ManageMasterUserPassword != nil {
		in, out := &in.ManageMasterUserPassword, &out.ManageMasterUserPassword
		*out = new(bool)
		**out = **in
	}
	if in.MasterUserSecret != nil {
		in, out := &in.MasterUserSecret, &out.MasterUserSecret
		*out = make([]MasterUserSecretObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterUserSecretKMSKeyID != nil {
		in, out := &in.MasterUserSecretKMSKeyID, &out.MasterUserSecretKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MaxAllocatedStorage != nil {
		in, out := &in.MaxAllocatedStorage, &out.MaxAllocatedStorage
		*out = new(float64)
		**out = **in
	}
	if in.MonitoringInterval != nil {
		in, out := &in.MonitoringInterval, &out.MonitoringInterval
		*out = new(float64)
		**out = **in
	}
	if in.MonitoringRoleArn != nil {
		in, out := &in.MonitoringRoleArn, &out.MonitoringRoleArn
		*out = new(string)
		**out = **in
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.NcharCharacterSetName != nil {
		in, out := &in.NcharCharacterSetName, &out.NcharCharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.OptionGroupName != nil {
		in, out := &in.OptionGroupName, &out.OptionGroupName
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupName != nil {
		in, out := &in.ParameterGroupName, &out.ParameterGroupName
		*out = new(string)
		**out = **in
	}
	if in.PerformanceInsightsEnabled != nil {
		in, out := &in.PerformanceInsightsEnabled, &out.PerformanceInsightsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PerformanceInsightsKMSKeyID != nil {
		in, out := &in.PerformanceInsightsKMSKeyID, &out.PerformanceInsightsKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.PerformanceInsightsRetentionPeriod != nil {
		in, out := &in.PerformanceInsightsRetentionPeriod, &out.PerformanceInsightsRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PubliclyAccessible != nil {
		in, out := &in.PubliclyAccessible, &out.PubliclyAccessible
		*out = new(bool)
		**out = **in
	}
	if in.ReplicaMode != nil {
		in, out := &in.ReplicaMode, &out.ReplicaMode
		*out = new(string)
		**out = **in
	}
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ReplicateSourceDB != nil {
		in, out := &in.ReplicateSourceDB, &out.ReplicateSourceDB
		*out = new(string)
		**out = **in
	}
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
	if in.RestoreToPointInTime != nil {
		in, out := &in.RestoreToPointInTime, &out.RestoreToPointInTime
		*out = make([]RestoreToPointInTimeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.S3Import != nil {
		in, out := &in.S3Import, &out.S3Import
		*out = make([]S3ImportObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SkipFinalSnapshot != nil {
		in, out := &in.SkipFinalSnapshot, &out.SkipFinalSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotIdentifier != nil {
		in, out := &in.SnapshotIdentifier, &out.SnapshotIdentifier
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StorageEncrypted != nil {
		in, out := &in.StorageEncrypted, &out.StorageEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.StorageThroughput != nil {
		in, out := &in.StorageThroughput, &out.StorageThroughput
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VPCSecurityGroupIds != nil {
		in, out := &in.VPCSecurityGroupIds, &out.VPCSecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceObservation.
func (in *InstanceObservation) DeepCopy() *InstanceObservation {
	if in == nil {
		return nil
	}
	out := new(InstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceParameters) DeepCopyInto(out *InstanceParameters) {
	*out = *in
	if in.AllocatedStorage != nil {
		in, out := &in.AllocatedStorage, &out.AllocatedStorage
		*out = new(float64)
		**out = **in
	}
	if in.AllowMajorVersionUpgrade != nil {
		in, out := &in.AllowMajorVersionUpgrade, &out.AllowMajorVersionUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.ApplyImmediately != nil {
		in, out := &in.ApplyImmediately, &out.ApplyImmediately
		*out = new(bool)
		**out = **in
	}
	if in.AutoGeneratePassword != nil {
		in, out := &in.AutoGeneratePassword, &out.AutoGeneratePassword
		*out = new(bool)
		**out = **in
	}
	if in.AutoMinorVersionUpgrade != nil {
		in, out := &in.AutoMinorVersionUpgrade, &out.AutoMinorVersionUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriod != nil {
		in, out := &in.BackupRetentionPeriod, &out.BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.BackupTarget != nil {
		in, out := &in.BackupTarget, &out.BackupTarget
		*out = new(string)
		**out = **in
	}
	if in.BackupWindow != nil {
		in, out := &in.BackupWindow, &out.BackupWindow
		*out = new(string)
		**out = **in
	}
	if in.BlueGreenUpdate != nil {
		in, out := &in.BlueGreenUpdate, &out.BlueGreenUpdate
		*out = make([]BlueGreenUpdateParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CACertIdentifier != nil {
		in, out := &in.CACertIdentifier, &out.CACertIdentifier
		*out = new(string)
		**out = **in
	}
	if in.CharacterSetName != nil {
		in, out := &in.CharacterSetName, &out.CharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToSnapshot != nil {
		in, out := &in.CopyTagsToSnapshot, &out.CopyTagsToSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.CustomIAMInstanceProfile != nil {
		in, out := &in.CustomIAMInstanceProfile, &out.CustomIAMInstanceProfile
		*out = new(string)
		**out = **in
	}
	if in.CustomerOwnedIPEnabled != nil {
		in, out := &in.CustomerOwnedIPEnabled, &out.CustomerOwnedIPEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DBSubnetGroupName != nil {
		in, out := &in.DBSubnetGroupName, &out.DBSubnetGroupName
		*out = new(string)
		**out = **in
	}
	if in.DBSubnetGroupNameRef != nil {
		in, out := &in.DBSubnetGroupNameRef, &out.DBSubnetGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBSubnetGroupNameSelector != nil {
		in, out := &in.DBSubnetGroupNameSelector, &out.DBSubnetGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeleteAutomatedBackups != nil {
		in, out := &in.DeleteAutomatedBackups, &out.DeleteAutomatedBackups
		*out = new(bool)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DomainAuthSecretArn != nil {
		in, out := &in.DomainAuthSecretArn, &out.DomainAuthSecretArn
		*out = new(string)
		**out = **in
	}
	if in.DomainDNSIps != nil {
		in, out := &in.DomainDNSIps, &out.DomainDNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainFqdn != nil {
		in, out := &in.DomainFqdn, &out.DomainFqdn
		*out = new(string)
		**out = **in
	}
	if in.DomainIAMRoleName != nil {
		in, out := &in.DomainIAMRoleName, &out.DomainIAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.EnabledCloudwatchLogsExports != nil {
		in, out := &in.EnabledCloudwatchLogsExports, &out.EnabledCloudwatchLogsExports
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Engine != nil {
		in, out := &in.Engine, &out.Engine
		*out = new(string)
		**out = **in
	}
	if in.EngineVersion != nil {
		in, out := &in.EngineVersion, &out.EngineVersion
		*out = new(string)
		**out = **in
	}
	if in.FinalSnapshotIdentifier != nil {
		in, out := &in.FinalSnapshotIdentifier, &out.FinalSnapshotIdentifier
		*out = new(string)
		**out = **in
	}
	if in.IAMDatabaseAuthenticationEnabled != nil {
		in, out := &in.IAMDatabaseAuthenticationEnabled, &out.IAMDatabaseAuthenticationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Identifier != nil {
		in, out := &in.Identifier, &out.Identifier
		*out = new(string)
		**out = **in
	}
	if in.IdentifierPrefix != nil {
		in, out := &in.IdentifierPrefix, &out.IdentifierPrefix
		*out = new(string)
		**out = **in
	}
	if in.InstanceClass != nil {
		in, out := &in.InstanceClass, &out.InstanceClass
		*out = new(string)
		**out = **in
	}
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyIDRef != nil {
		in, out := &in.KMSKeyIDRef, &out.KMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyIDSelector != nil {
		in, out := &in.KMSKeyIDSelector, &out.KMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LicenseModel != nil {
		in, out := &in.LicenseModel, &out.LicenseModel
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = new(string)
		**out = **in
	}
	if in.ManageMasterUserPassword != nil {
		in, out := &in.ManageMasterUserPassword, &out.ManageMasterUserPassword
		*out = new(bool)
		**out = **in
	}
	if in.MasterUserSecretKMSKeyID != nil {
		in, out := &in.MasterUserSecretKMSKeyID, &out.MasterUserSecretKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MasterUserSecretKMSKeyIDRef != nil {
		in, out := &in.MasterUserSecretKMSKeyIDRef, &out.MasterUserSecretKMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.MasterUserSecretKMSKeyIDSelector != nil {
		in, out := &in.MasterUserSecretKMSKeyIDSelector, &out.MasterUserSecretKMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxAllocatedStorage != nil {
		in, out := &in.MaxAllocatedStorage, &out.MaxAllocatedStorage
		*out = new(float64)
		**out = **in
	}
	if in.MonitoringInterval != nil {
		in, out := &in.MonitoringInterval, &out.MonitoringInterval
		*out = new(float64)
		**out = **in
	}
	if in.MonitoringRoleArn != nil {
		in, out := &in.MonitoringRoleArn, &out.MonitoringRoleArn
		*out = new(string)
		**out = **in
	}
	if in.MonitoringRoleArnRef != nil {
		in, out := &in.MonitoringRoleArnRef, &out.MonitoringRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.MonitoringRoleArnSelector != nil {
		in, out := &in.MonitoringRoleArnSelector, &out.MonitoringRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.MultiAz != nil {
		in, out := &in.MultiAz, &out.MultiAz
		*out = new(bool)
		**out = **in
	}
	if in.NcharCharacterSetName != nil {
		in, out := &in.NcharCharacterSetName, &out.NcharCharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.OptionGroupName != nil {
		in, out := &in.OptionGroupName, &out.OptionGroupName
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupName != nil {
		in, out := &in.ParameterGroupName, &out.ParameterGroupName
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupNameRef != nil {
		in, out := &in.ParameterGroupNameRef, &out.ParameterGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ParameterGroupNameSelector != nil {
		in, out := &in.ParameterGroupNameSelector, &out.ParameterGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PerformanceInsightsEnabled != nil {
		in, out := &in.PerformanceInsightsEnabled, &out.PerformanceInsightsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PerformanceInsightsKMSKeyID != nil {
		in, out := &in.PerformanceInsightsKMSKeyID, &out.PerformanceInsightsKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.PerformanceInsightsRetentionPeriod != nil {
		in, out := &in.PerformanceInsightsRetentionPeriod, &out.PerformanceInsightsRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PubliclyAccessible != nil {
		in, out := &in.PubliclyAccessible, &out.PubliclyAccessible
		*out = new(bool)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ReplicaMode != nil {
		in, out := &in.ReplicaMode, &out.ReplicaMode
		*out = new(string)
		**out = **in
	}
	if in.ReplicateSourceDB != nil {
		in, out := &in.ReplicateSourceDB, &out.ReplicateSourceDB
		*out = new(string)
		**out = **in
	}
	if in.ReplicateSourceDBRef != nil {
		in, out := &in.ReplicateSourceDBRef, &out.ReplicateSourceDBRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ReplicateSourceDBSelector != nil {
		in, out := &in.ReplicateSourceDBSelector, &out.ReplicateSourceDBSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RestoreToPointInTime != nil {
		in, out := &in.RestoreToPointInTime, &out.RestoreToPointInTime
		*out = make([]RestoreToPointInTimeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.S3Import != nil {
		in, out := &in.S3Import, &out.S3Import
		*out = make([]S3ImportParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SkipFinalSnapshot != nil {
		in, out := &in.SkipFinalSnapshot, &out.SkipFinalSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotIdentifier != nil {
		in, out := &in.SnapshotIdentifier, &out.SnapshotIdentifier
		*out = new(string)
		**out = **in
	}
	if in.StorageEncrypted != nil {
		in, out := &in.StorageEncrypted, &out.StorageEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.StorageThroughput != nil {
		in, out := &in.StorageThroughput, &out.StorageThroughput
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VPCSecurityGroupIDRefs != nil {
		in, out := &in.VPCSecurityGroupIDRefs, &out.VPCSecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VPCSecurityGroupIDSelector != nil {
		in, out := &in.VPCSecurityGroupIDSelector, &out.VPCSecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCSecurityGroupIds != nil {
		in, out := &in.VPCSecurityGroupIds, &out.VPCSecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceParameters.
func (in *InstanceParameters) DeepCopy() *InstanceParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceSpec) DeepCopyInto(out *InstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceSpec.
func (in *InstanceSpec) DeepCopy() *InstanceSpec {
	if in == nil {
		return nil
	}
	out := new(InstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceStatus) DeepCopyInto(out *InstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceStatus.
func (in *InstanceStatus) DeepCopy() *InstanceStatus {
	if in == nil {
		return nil
	}
	out := new(InstanceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListenerEndpointInitParameters) DeepCopyInto(out *ListenerEndpointInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListenerEndpointInitParameters.
func (in *ListenerEndpointInitParameters) DeepCopy() *ListenerEndpointInitParameters {
	if in == nil {
		return nil
	}
	out := new(ListenerEndpointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListenerEndpointObservation) DeepCopyInto(out *ListenerEndpointObservation) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.HostedZoneID != nil {
		in, out := &in.HostedZoneID, &out.HostedZoneID
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListenerEndpointObservation.
func (in *ListenerEndpointObservation) DeepCopy() *ListenerEndpointObservation {
	if in == nil {
		return nil
	}
	out := new(ListenerEndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListenerEndpointParameters) DeepCopyInto(out *ListenerEndpointParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListenerEndpointParameters.
func (in *ListenerEndpointParameters) DeepCopy() *ListenerEndpointParameters {
	if in == nil {
		return nil
	}
	out := new(ListenerEndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterUserSecretInitParameters) DeepCopyInto(out *MasterUserSecretInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterUserSecretInitParameters.
func (in *MasterUserSecretInitParameters) DeepCopy() *MasterUserSecretInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterUserSecretInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterUserSecretObservation) DeepCopyInto(out *MasterUserSecretObservation) {
	*out = *in
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.SecretArn != nil {
		in, out := &in.SecretArn, &out.SecretArn
		*out = new(string)
		**out = **in
	}
	if in.SecretStatus != nil {
		in, out := &in.SecretStatus, &out.SecretStatus
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterUserSecretObservation.
func (in *MasterUserSecretObservation) DeepCopy() *MasterUserSecretObservation {
	if in == nil {
		return nil
	}
	out := new(MasterUserSecretObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterUserSecretParameters) DeepCopyInto(out *MasterUserSecretParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterUserSecretParameters.
func (in *MasterUserSecretParameters) DeepCopy() *MasterUserSecretParameters {
	if in == nil {
		return nil
	}
	out := new(MasterUserSecretParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreToPointInTimeInitParameters) DeepCopyInto(out *RestoreToPointInTimeInitParameters) {
	*out = *in
	if in.RestoreTime != nil {
		in, out := &in.RestoreTime, &out.RestoreTime
		*out = new(string)
		**out = **in
	}
	if in.SourceDBInstanceAutomatedBackupsArn != nil {
		in, out := &in.SourceDBInstanceAutomatedBackupsArn, &out.SourceDBInstanceAutomatedBackupsArn
		*out = new(string)
		**out = **in
	}
	if in.SourceDBInstanceIdentifier != nil {
		in, out := &in.SourceDBInstanceIdentifier, &out.SourceDBInstanceIdentifier
		*out = new(string)
		**out = **in
	}
	if in.SourceDbiResourceID != nil {
		in, out := &in.SourceDbiResourceID, &out.SourceDbiResourceID
		*out = new(string)
		**out = **in
	}
	if in.UseLatestRestorableTime != nil {
		in, out := &in.UseLatestRestorableTime, &out.UseLatestRestorableTime
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreToPointInTimeInitParameters.
func (in *RestoreToPointInTimeInitParameters) DeepCopy() *RestoreToPointInTimeInitParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreToPointInTimeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreToPointInTimeObservation) DeepCopyInto(out *RestoreToPointInTimeObservation) {
	*out = *in
	if in.RestoreTime != nil {
		in, out := &in.RestoreTime, &out.RestoreTime
		*out = new(string)
		**out = **in
	}
	if in.SourceDBInstanceAutomatedBackupsArn != nil {
		in, out := &in.SourceDBInstanceAutomatedBackupsArn, &out.SourceDBInstanceAutomatedBackupsArn
		*out = new(string)
		**out = **in
	}
	if in.SourceDBInstanceIdentifier != nil {
		in, out := &in.SourceDBInstanceIdentifier, &out.SourceDBInstanceIdentifier
		*out = new(string)
		**out = **in
	}
	if in.SourceDbiResourceID != nil {
		in, out := &in.SourceDbiResourceID, &out.SourceDbiResourceID
		*out = new(string)
		**out = **in
	}
	if in.UseLatestRestorableTime != nil {
		in, out := &in.UseLatestRestorableTime, &out.UseLatestRestorableTime
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreToPointInTimeObservation.
func (in *RestoreToPointInTimeObservation) DeepCopy() *RestoreToPointInTimeObservation {
	if in == nil {
		return nil
	}
	out := new(RestoreToPointInTimeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreToPointInTimeParameters) DeepCopyInto(out *RestoreToPointInTimeParameters) {
	*out = *in
	if in.RestoreTime != nil {
		in, out := &in.RestoreTime, &out.RestoreTime
		*out = new(string)
		**out = **in
	}
	if in.SourceDBInstanceAutomatedBackupsArn != nil {
		in, out := &in.SourceDBInstanceAutomatedBackupsArn, &out.SourceDBInstanceAutomatedBackupsArn
		*out = new(string)
		**out = **in
	}
	if in.SourceDBInstanceIdentifier != nil {
		in, out := &in.SourceDBInstanceIdentifier, &out.SourceDBInstanceIdentifier
		*out = new(string)
		**out = **in
	}
	if in.SourceDbiResourceID != nil {
		in, out := &in.SourceDbiResourceID, &out.SourceDbiResourceID
		*out = new(string)
		**out = **in
	}
	if in.UseLatestRestorableTime != nil {
		in, out := &in.UseLatestRestorableTime, &out.UseLatestRestorableTime
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreToPointInTimeParameters.
func (in *RestoreToPointInTimeParameters) DeepCopy() *RestoreToPointInTimeParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreToPointInTimeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3ImportInitParameters) DeepCopyInto(out *S3ImportInitParameters) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.BucketPrefix != nil {
		in, out := &in.BucketPrefix, &out.BucketPrefix
		*out = new(string)
		**out = **in
	}
	if in.IngestionRole != nil {
		in, out := &in.IngestionRole, &out.IngestionRole
		*out = new(string)
		**out = **in
	}
	if in.SourceEngine != nil {
		in, out := &in.SourceEngine, &out.SourceEngine
		*out = new(string)
		**out = **in
	}
	if in.SourceEngineVersion != nil {
		in, out := &in.SourceEngineVersion, &out.SourceEngineVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3ImportInitParameters.
func (in *S3ImportInitParameters) DeepCopy() *S3ImportInitParameters {
	if in == nil {
		return nil
	}
	out := new(S3ImportInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3ImportObservation) DeepCopyInto(out *S3ImportObservation) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.BucketPrefix != nil {
		in, out := &in.BucketPrefix, &out.BucketPrefix
		*out = new(string)
		**out = **in
	}
	if in.IngestionRole != nil {
		in, out := &in.IngestionRole, &out.IngestionRole
		*out = new(string)
		**out = **in
	}
	if in.SourceEngine != nil {
		in, out := &in.SourceEngine, &out.SourceEngine
		*out = new(string)
		**out = **in
	}
	if in.SourceEngineVersion != nil {
		in, out := &in.SourceEngineVersion, &out.SourceEngineVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3ImportObservation.
func (in *S3ImportObservation) DeepCopy() *S3ImportObservation {
	if in == nil {
		return nil
	}
	out := new(S3ImportObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3ImportParameters) DeepCopyInto(out *S3ImportParameters) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.BucketPrefix != nil {
		in, out := &in.BucketPrefix, &out.BucketPrefix
		*out = new(string)
		**out = **in
	}
	if in.IngestionRole != nil {
		in, out := &in.IngestionRole, &out.IngestionRole
		*out = new(string)
		**out = **in
	}
	if in.SourceEngine != nil {
		in, out := &in.SourceEngine, &out.SourceEngine
		*out = new(string)
		**out = **in
	}
	if in.SourceEngineVersion != nil {
		in, out := &in.SourceEngineVersion, &out.SourceEngineVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3ImportParameters.
func (in *S3ImportParameters) DeepCopy() *S3ImportParameters {
	if in == nil {
		return nil
	}
	out := new(S3ImportParameters)
	in.DeepCopyInto(out)
	return out
}
