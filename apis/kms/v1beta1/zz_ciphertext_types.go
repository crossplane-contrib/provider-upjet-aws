/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CiphertextObservation struct {

	// Base64 encoded ciphertext
	CiphertextBlob *string `json:"ciphertextBlob,omitempty" tf:"ciphertext_blob,omitempty"`

	// An optional mapping that makes up the encryption context.
	Context map[string]*string `json:"context,omitempty" tf:"context,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Globally unique key ID for the customer master key.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`
}

type CiphertextParameters struct {

	// An optional mapping that makes up the encryption context.
	// +kubebuilder:validation:Optional
	Context map[string]*string `json:"context,omitempty" tf:"context,omitempty"`

	// Globally unique key ID for the customer master key.
	// +crossplane:generate:reference:type=Key
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Reference to a Key to populate keyId.
	// +kubebuilder:validation:Optional
	KeyIDRef *v1.Reference `json:"keyIdRef,omitempty" tf:"-"`

	// Selector for a Key to populate keyId.
	// +kubebuilder:validation:Optional
	KeyIDSelector *v1.Selector `json:"keyIdSelector,omitempty" tf:"-"`

	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	// +kubebuilder:validation:Optional
	PlaintextSecretRef v1.SecretKeySelector `json:"plaintextSecretRef" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// CiphertextSpec defines the desired state of Ciphertext
type CiphertextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CiphertextParameters `json:"forProvider"`
}

// CiphertextStatus defines the observed state of Ciphertext.
type CiphertextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CiphertextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ciphertext is the Schema for the Ciphertexts API. Provides ciphertext encrypted using a KMS key
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Ciphertext struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plaintextSecretRef)",message="plaintextSecretRef is a required parameter"
	Spec   CiphertextSpec   `json:"spec"`
	Status CiphertextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CiphertextList contains a list of Ciphertexts
type CiphertextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ciphertext `json:"items"`
}

// Repository type metadata.
var (
	Ciphertext_Kind             = "Ciphertext"
	Ciphertext_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ciphertext_Kind}.String()
	Ciphertext_KindAPIVersion   = Ciphertext_Kind + "." + CRDGroupVersion.String()
	Ciphertext_GroupVersionKind = CRDGroupVersion.WithKind(Ciphertext_Kind)
)

func init() {
	SchemeBuilder.Register(&Ciphertext{}, &CiphertextList{})
}
