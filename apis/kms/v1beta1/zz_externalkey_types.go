// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExternalKeyInitParameters struct {

	// Specifies whether to disable the policy lockout check performed when creating or updating the key's policy. Setting this value to true increases the risk that the key becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide. Defaults to false.
	BypassPolicyLockoutSafetyCheck *bool `json:"bypassPolicyLockoutSafetyCheck,omitempty" tf:"bypass_policy_lockout_safety_check,omitempty"`

	// Duration in days after which the key is deleted after destruction of the resource. Must be between 7 and 30 days. Defaults to 30.
	DeletionWindowInDays *float64 `json:"deletionWindowInDays,omitempty" tf:"deletion_window_in_days,omitempty"`

	// Description of the key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the key is enabled. Keys pending import can only be false. Imported keys default to true unless expired.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Indicates whether the KMS key is a multi-Region (true) or regional (false) key. Defaults to false.
	MultiRegion *bool `json:"multiRegion,omitempty" tf:"multi_region,omitempty"`

	// A key policy JSON document. If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. If not specified, key material does not expire. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`
}

type ExternalKeyObservation struct {

	// The Amazon Resource Name (ARN) of the key.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Specifies whether to disable the policy lockout check performed when creating or updating the key's policy. Setting this value to true increases the risk that the key becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide. Defaults to false.
	BypassPolicyLockoutSafetyCheck *bool `json:"bypassPolicyLockoutSafetyCheck,omitempty" tf:"bypass_policy_lockout_safety_check,omitempty"`

	// Duration in days after which the key is deleted after destruction of the resource. Must be between 7 and 30 days. Defaults to 30.
	DeletionWindowInDays *float64 `json:"deletionWindowInDays,omitempty" tf:"deletion_window_in_days,omitempty"`

	// Description of the key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the key is enabled. Keys pending import can only be false. Imported keys default to true unless expired.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether the key material expires. Empty when pending key material import, otherwise KEY_MATERIAL_EXPIRES or KEY_MATERIAL_DOES_NOT_EXPIRE.
	ExpirationModel *string `json:"expirationModel,omitempty" tf:"expiration_model,omitempty"`

	// The unique identifier for the key.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The state of the CMK.
	KeyState *string `json:"keyState,omitempty" tf:"key_state,omitempty"`

	// The cryptographic operations for which you can use the CMK.
	KeyUsage *string `json:"keyUsage,omitempty" tf:"key_usage,omitempty"`

	// Indicates whether the KMS key is a multi-Region (true) or regional (false) key. Defaults to false.
	MultiRegion *bool `json:"multiRegion,omitempty" tf:"multi_region,omitempty"`

	// A key policy JSON document. If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. If not specified, key material does not expire. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`
}

type ExternalKeyParameters struct {

	// Specifies whether to disable the policy lockout check performed when creating or updating the key's policy. Setting this value to true increases the risk that the key becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section in the AWS Key Management Service Developer Guide. Defaults to false.
	// +kubebuilder:validation:Optional
	BypassPolicyLockoutSafetyCheck *bool `json:"bypassPolicyLockoutSafetyCheck,omitempty" tf:"bypass_policy_lockout_safety_check,omitempty"`

	// Duration in days after which the key is deleted after destruction of the resource. Must be between 7 and 30 days. Defaults to 30.
	// +kubebuilder:validation:Optional
	DeletionWindowInDays *float64 `json:"deletionWindowInDays,omitempty" tf:"deletion_window_in_days,omitempty"`

	// Description of the key.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the key is enabled. Keys pending import can only be false. Imported keys default to true unless expired.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Base64 encoded 256-bit symmetric encryption key material to import. The CMK is permanently associated with this key material. The same key material can be reimported, but you cannot import different key material.
	// +kubebuilder:validation:Optional
	KeyMaterialBase64SecretRef *v1.SecretKeySelector `json:"keyMaterialBase64SecretRef,omitempty" tf:"-"`

	// Indicates whether the KMS key is a multi-Region (true) or regional (false) key. Defaults to false.
	// +kubebuilder:validation:Optional
	MultiRegion *bool `json:"multiRegion,omitempty" tf:"multi_region,omitempty"`

	// A key policy JSON document. If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. If not specified, key material does not expire. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
	// +kubebuilder:validation:Optional
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`
}

// ExternalKeySpec defines the desired state of ExternalKey
type ExternalKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExternalKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExternalKeyInitParameters `json:"initProvider,omitempty"`
}

// ExternalKeyStatus defines the observed state of ExternalKey.
type ExternalKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExternalKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalKey is the Schema for the ExternalKeys API. Manages a single-Region or multi-Region primary KMS key that uses external key material.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ExternalKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExternalKeySpec   `json:"spec"`
	Status            ExternalKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalKeyList contains a list of ExternalKeys
type ExternalKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExternalKey `json:"items"`
}

// Repository type metadata.
var (
	ExternalKey_Kind             = "ExternalKey"
	ExternalKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExternalKey_Kind}.String()
	ExternalKey_KindAPIVersion   = ExternalKey_Kind + "." + CRDGroupVersion.String()
	ExternalKey_GroupVersionKind = CRDGroupVersion.WithKind(ExternalKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ExternalKey{}, &ExternalKeyList{})
}
