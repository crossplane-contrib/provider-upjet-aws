// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevicePoolInitParameters struct {

	// The device pool's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The number of devices that Device Farm can add to your device pool.
	MaxDevices *float64 `json:"maxDevices,omitempty" tf:"max_devices,omitempty"`

	// The name of the Device Pool
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The device pool's rules. See Rule.
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DevicePoolObservation struct {

	// The Amazon Resource Name of this Device Pool
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The device pool's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of devices that Device Farm can add to your device pool.
	MaxDevices *float64 `json:"maxDevices,omitempty" tf:"max_devices,omitempty"`

	// The name of the Device Pool
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ARN of the project for the device pool.
	ProjectArn *string `json:"projectArn,omitempty" tf:"project_arn,omitempty"`

	// The device pool's rules. See Rule.
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DevicePoolParameters struct {

	// The device pool's description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The number of devices that Device Farm can add to your device pool.
	// +kubebuilder:validation:Optional
	MaxDevices *float64 `json:"maxDevices,omitempty" tf:"max_devices,omitempty"`

	// The name of the Device Pool
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ARN of the project for the device pool.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/devicefarm/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	ProjectArn *string `json:"projectArn,omitempty" tf:"project_arn,omitempty"`

	// Reference to a Project in devicefarm to populate projectArn.
	// +kubebuilder:validation:Optional
	ProjectArnRef *v1.Reference `json:"projectArnRef,omitempty" tf:"-"`

	// Selector for a Project in devicefarm to populate projectArn.
	// +kubebuilder:validation:Optional
	ProjectArnSelector *v1.Selector `json:"projectArnSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The device pool's rules. See Rule.
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type RuleInitParameters struct {

	// The rule's stringified attribute. Valid values are: APPIUM_VERSION, ARN, AVAILABILITY, FLEET_TYPE, FORM_FACTOR, INSTANCE_ARN, INSTANCE_LABELS, MANUFACTURER, MODEL, OS_VERSION, PLATFORM, REMOTE_ACCESS_ENABLED, REMOTE_DEBUG_ENABLED.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute. Valid values are: EQUALS, NOT_IN, IN, GREATER_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, CONTAINS.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The rule's value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RuleObservation struct {

	// The rule's stringified attribute. Valid values are: APPIUM_VERSION, ARN, AVAILABILITY, FLEET_TYPE, FORM_FACTOR, INSTANCE_ARN, INSTANCE_LABELS, MANUFACTURER, MODEL, OS_VERSION, PLATFORM, REMOTE_ACCESS_ENABLED, REMOTE_DEBUG_ENABLED.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute. Valid values are: EQUALS, NOT_IN, IN, GREATER_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, CONTAINS.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The rule's value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RuleParameters struct {

	// The rule's stringified attribute. Valid values are: APPIUM_VERSION, ARN, AVAILABILITY, FLEET_TYPE, FORM_FACTOR, INSTANCE_ARN, INSTANCE_LABELS, MANUFACTURER, MODEL, OS_VERSION, PLATFORM, REMOTE_ACCESS_ENABLED, REMOTE_DEBUG_ENABLED.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute. Valid values are: EQUALS, NOT_IN, IN, GREATER_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, CONTAINS.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The rule's value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// DevicePoolSpec defines the desired state of DevicePool
type DevicePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevicePoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DevicePoolInitParameters `json:"initProvider,omitempty"`
}

// DevicePoolStatus defines the observed state of DevicePool.
type DevicePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevicePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePool is the Schema for the DevicePools API. Provides a Devicefarm device_pool
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DevicePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	Spec   DevicePoolSpec   `json:"spec"`
	Status DevicePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePoolList contains a list of DevicePools
type DevicePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevicePool `json:"items"`
}

// Repository type metadata.
var (
	DevicePool_Kind             = "DevicePool"
	DevicePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DevicePool_Kind}.String()
	DevicePool_KindAPIVersion   = DevicePool_Kind + "." + CRDGroupVersion.String()
	DevicePool_GroupVersionKind = CRDGroupVersion.WithKind(DevicePool_Kind)
)

func init() {
	SchemeBuilder.Register(&DevicePool{}, &DevicePoolList{})
}
