/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VaultLockConfigurationObservation struct {

	// The ARN of the vault.
	BackupVaultArn *string `json:"backupVaultArn,omitempty" tf:"backup_vault_arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VaultLockConfigurationParameters struct {

	// Name of the backup vault to add a lock configuration for.
	// +crossplane:generate:reference:type=Vault
	// +kubebuilder:validation:Optional
	BackupVaultName *string `json:"backupVaultName,omitempty" tf:"backup_vault_name,omitempty"`

	// Reference to a Vault to populate backupVaultName.
	// +kubebuilder:validation:Optional
	BackupVaultNameRef *v1.Reference `json:"backupVaultNameRef,omitempty" tf:"-"`

	// Selector for a Vault to populate backupVaultName.
	// +kubebuilder:validation:Optional
	BackupVaultNameSelector *v1.Selector `json:"backupVaultNameSelector,omitempty" tf:"-"`

	// The number of days before the lock date. If omitted creates a vault lock in governance mode, otherwise it will create a vault lock in compliance mode.
	// +kubebuilder:validation:Optional
	ChangeableForDays *float64 `json:"changeableForDays,omitempty" tf:"changeable_for_days,omitempty"`

	// The maximum retention period that the vault retains its recovery points.
	// +kubebuilder:validation:Optional
	MaxRetentionDays *float64 `json:"maxRetentionDays,omitempty" tf:"max_retention_days,omitempty"`

	// The minimum retention period that the vault retains its recovery points.
	// +kubebuilder:validation:Optional
	MinRetentionDays *float64 `json:"minRetentionDays,omitempty" tf:"min_retention_days,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// VaultLockConfigurationSpec defines the desired state of VaultLockConfiguration
type VaultLockConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VaultLockConfigurationParameters `json:"forProvider"`
}

// VaultLockConfigurationStatus defines the observed state of VaultLockConfiguration.
type VaultLockConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VaultLockConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VaultLockConfiguration is the Schema for the VaultLockConfigurations API. Provides an AWS Backup vault lock configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VaultLockConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VaultLockConfigurationSpec   `json:"spec"`
	Status            VaultLockConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultLockConfigurationList contains a list of VaultLockConfigurations
type VaultLockConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VaultLockConfiguration `json:"items"`
}

// Repository type metadata.
var (
	VaultLockConfiguration_Kind             = "VaultLockConfiguration"
	VaultLockConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VaultLockConfiguration_Kind}.String()
	VaultLockConfiguration_KindAPIVersion   = VaultLockConfiguration_Kind + "." + CRDGroupVersion.String()
	VaultLockConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(VaultLockConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&VaultLockConfiguration{}, &VaultLockConfigurationList{})
}
