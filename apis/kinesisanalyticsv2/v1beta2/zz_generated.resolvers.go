// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Application) ResolveReferences( // ResolveReferences of this Application.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration != nil {
			if mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent != nil {
				if mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation != nil {
					{
						m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArn),
							Extract:      common.ARNExtractor(),
							Reference:    mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArnRef,
							Selector:     mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArn")
					}
					mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration != nil {
			if mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent != nil {
				if mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation != nil {
					{
						m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Object", "ObjectList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKey),
							Extract:      resource.ExtractParamPath("key", false),
							Reference:    mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKeyRef,
							Selector:     mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKeySelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKey")
					}
					mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKey = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKeyRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input != nil {
				if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput != nil {
					{
						m, l, err = apisresolver.GetManagedResource("kinesis.aws.upbound.io", "v1beta2", "Stream", "StreamList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArn),
							Extract:      common.TerraformID(),
							Reference:    mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArnRef,
							Selector:     mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArn")
					}
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output); i5++ {
				if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput != nil {
					{
						m, l, err = apisresolver.GetManagedResource("firehose.aws.upbound.io", "v1beta2", "DeliveryStream", "DeliveryStreamList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArn),
							Extract:      resource.ExtractParamPath("arn", false),
							Reference:    mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArnRef,
							Selector:     mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArn")
					}
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output); i5++ {
				if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput != nil {
					{
						m, l, err = apisresolver.GetManagedResource("lambda.aws.upbound.io", "v1beta2", "Function", "FunctionList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArnRef,
							Selector:     mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArn")
					}
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource != nil {
				if mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource != nil {
					{
						m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArnRef,
							Selector:     mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArn")
					}
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIdsRefs,
					Selector:      mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIds")
			}
			mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.ApplicationConfiguration != nil {
		if mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SubnetIdsRefs,
					Selector:      mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SubnetIds")
			}
			mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.ApplicationConfiguration.VPCConfiguration.SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.CloudwatchLoggingOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.upbound.io", "v1beta1", "Stream", "StreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArnRef,
				Selector:     mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArn")
		}
		mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceExecutionRole),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.ServiceExecutionRoleRef,
			Selector:     mg.Spec.ForProvider.ServiceExecutionRoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceExecutionRole")
	}
	mg.Spec.ForProvider.ServiceExecutionRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceExecutionRoleRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration != nil {
			if mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent != nil {
				if mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation != nil {
					{
						m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArn),
							Extract:      common.ARNExtractor(),
							Reference:    mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArnRef,
							Selector:     mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArn")
					}
					mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.BucketArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration != nil {
			if mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent != nil {
				if mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation != nil {
					{
						m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Object", "ObjectList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKey),
							Extract:      resource.ExtractParamPath("key", false),
							Reference:    mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKeyRef,
							Selector:     mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKeySelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKey")
					}
					mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKey = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.ApplicationConfiguration.ApplicationCodeConfiguration.CodeContent.S3ContentLocation.FileKeyRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input != nil {
				if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput != nil {
					{
						m, l, err = apisresolver.GetManagedResource("kinesis.aws.upbound.io", "v1beta2", "Stream", "StreamList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArn),
							Extract:      common.TerraformID(),
							Reference:    mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArnRef,
							Selector:     mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArn")
					}
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Input.KinesisStreamsInput.ResourceArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output); i5++ {
				if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput != nil {
					{
						m, l, err = apisresolver.GetManagedResource("firehose.aws.upbound.io", "v1beta2", "DeliveryStream", "DeliveryStreamList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArn),
							Extract:      resource.ExtractParamPath("arn", false),
							Reference:    mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArnRef,
							Selector:     mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArn")
					}
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].KinesisFirehoseOutput.ResourceArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output); i5++ {
				if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput != nil {
					{
						m, l, err = apisresolver.GetManagedResource("lambda.aws.upbound.io", "v1beta2", "Function", "FunctionList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArnRef,
							Selector:     mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArn")
					}
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.Output[i5].LambdaOutput.ResourceArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration != nil {
			if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource != nil {
				if mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource != nil {
					{
						m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArnRef,
							Selector:     mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArn")
					}
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.ApplicationConfiguration.SQLApplicationConfiguration.ReferenceDataSource.S3ReferenceDataSource.BucketArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIdsRefs,
					Selector:      mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIds")
			}
			mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SecurityGroupIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.ApplicationConfiguration != nil {
		if mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration != nil {
			{
				m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SubnetIds),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SubnetIdsRefs,
					Selector:      mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SubnetIdsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SubnetIds")
			}
			mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.ApplicationConfiguration.VPCConfiguration.SubnetIdsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.CloudwatchLoggingOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.upbound.io", "v1beta1", "Stream", "StreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArnRef,
				Selector:     mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArn")
		}
		mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceExecutionRole),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.ServiceExecutionRoleRef,
			Selector:     mg.Spec.InitProvider.ServiceExecutionRoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceExecutionRole")
	}
	mg.Spec.InitProvider.ServiceExecutionRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceExecutionRoleRef = rsp.ResolvedReference

	return nil
}
