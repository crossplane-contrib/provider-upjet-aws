/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/apigateway/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RuleGroup.
func (mg *RuleGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rule[i3].Statement); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement); i7++ {
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].Arn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].ArnRef,
							Selector:     mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].ArnSelector,
							To: reference.To{
								List:    &IPSetList{},
								Managed: &IPSet{},
							},
						})
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].Arn")
						}
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].Arn = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].ArnRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rule[i3].Statement); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement); i7++ {
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].Arn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].ArnRef,
							Selector:     mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].ArnSelector,
							To: reference.To{
								List:    &RegexPatternSetList{},
								Managed: &RegexPatternSet{},
							},
						})
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].Arn")
						}
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].Arn = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].ArnRef = rsp.ResolvedReference

					}
				}
			}
		}
	}

	return nil
}

// ResolveReferences of this WebACL.
func (mg *WebACL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rule[i3].Statement); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement[i5].Arn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement[i5].ArnRef,
					Selector:     mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement[i5].ArnSelector,
					To: reference.To{
						List:    &RuleGroupList{},
						Managed: &RuleGroup{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement[i5].Arn")
				}
				mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement[i5].Arn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Rule[i3].Statement[i4].RuleGroupReferenceStatement[i5].ArnRef = rsp.ResolvedReference

			}
		}
	}

	return nil
}

// ResolveReferences of this WebACLAssociation.
func (mg *WebACLAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.ResourceArnRef,
		Selector:     mg.Spec.ForProvider.ResourceArnSelector,
		To: reference.To{
			List:    &v1beta1.StageList{},
			Managed: &v1beta1.Stage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceArn")
	}
	mg.Spec.ForProvider.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WebACLArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.WebACLArnRef,
		Selector:     mg.Spec.ForProvider.WebACLArnSelector,
		To: reference.To{
			List:    &WebACLList{},
			Managed: &WebACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WebACLArn")
	}
	mg.Spec.ForProvider.WebACLArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WebACLArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WebACLLoggingConfiguration.
func (mg *WebACLLoggingConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.ResourceArnRef,
		Selector:     mg.Spec.ForProvider.ResourceArnSelector,
		To: reference.To{
			List:    &WebACLList{},
			Managed: &WebACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceArn")
	}
	mg.Spec.ForProvider.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceArnRef = rsp.ResolvedReference

	return nil
}
