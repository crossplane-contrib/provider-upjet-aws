// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizerInitParameters struct {

	// The ARN of the authorizer's Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta2.Function
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	AuthorizerFunctionArn *string `json:"authorizerFunctionArn,omitempty" tf:"authorizer_function_arn,omitempty"`

	// Reference to a Function in lambda to populate authorizerFunctionArn.
	// +kubebuilder:validation:Optional
	AuthorizerFunctionArnRef *v1.Reference `json:"authorizerFunctionArnRef,omitempty" tf:"-"`

	// Selector for a Function in lambda to populate authorizerFunctionArn.
	// +kubebuilder:validation:Optional
	AuthorizerFunctionArnSelector *v1.Selector `json:"authorizerFunctionArnSelector,omitempty" tf:"-"`

	// Specifies whether the HTTP caching is enabled or not. Default: false.
	EnableCachingForHTTP *bool `json:"enableCachingForHttp,omitempty" tf:"enable_caching_for_http,omitempty"`

	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: false.
	SigningDisabled *bool `json:"signingDisabled,omitempty" tf:"signing_disabled,omitempty"`

	// The status of Authorizer request at creation. Valid values: ACTIVE, INACTIVE. Default: ACTIVE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName *string `json:"tokenKeyName,omitempty" tf:"token_key_name,omitempty"`

	TokenSigningPublicKeys map[string]*string `json:"tokenSigningPublicKeysSecretRef,omitempty" tf:"-"`
}

type AuthorizerObservation struct {

	// The ARN of the authorizer.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn *string `json:"authorizerFunctionArn,omitempty" tf:"authorizer_function_arn,omitempty"`

	// Specifies whether the HTTP caching is enabled or not. Default: false.
	EnableCachingForHTTP *bool `json:"enableCachingForHttp,omitempty" tf:"enable_caching_for_http,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: false.
	SigningDisabled *bool `json:"signingDisabled,omitempty" tf:"signing_disabled,omitempty"`

	// The status of Authorizer request at creation. Valid values: ACTIVE, INACTIVE. Default: ACTIVE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName *string `json:"tokenKeyName,omitempty" tf:"token_key_name,omitempty"`
}

type AuthorizerParameters struct {

	// The ARN of the authorizer's Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta2.Function
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	AuthorizerFunctionArn *string `json:"authorizerFunctionArn,omitempty" tf:"authorizer_function_arn,omitempty"`

	// Reference to a Function in lambda to populate authorizerFunctionArn.
	// +kubebuilder:validation:Optional
	AuthorizerFunctionArnRef *v1.Reference `json:"authorizerFunctionArnRef,omitempty" tf:"-"`

	// Selector for a Function in lambda to populate authorizerFunctionArn.
	// +kubebuilder:validation:Optional
	AuthorizerFunctionArnSelector *v1.Selector `json:"authorizerFunctionArnSelector,omitempty" tf:"-"`

	// Specifies whether the HTTP caching is enabled or not. Default: false.
	// +kubebuilder:validation:Optional
	EnableCachingForHTTP *bool `json:"enableCachingForHttp,omitempty" tf:"enable_caching_for_http,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: false.
	// +kubebuilder:validation:Optional
	SigningDisabled *bool `json:"signingDisabled,omitempty" tf:"signing_disabled,omitempty"`

	// The status of Authorizer request at creation. Valid values: ACTIVE, INACTIVE. Default: ACTIVE.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	// +kubebuilder:validation:Optional
	TokenKeyName *string `json:"tokenKeyName,omitempty" tf:"token_key_name,omitempty"`

	// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
	// +kubebuilder:validation:Optional
	TokenSigningPublicKeysSecretRef *v1.SecretReference `json:"tokenSigningPublicKeysSecretRef,omitempty" tf:"-"`
}

// AuthorizerSpec defines the desired state of Authorizer
type AuthorizerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthorizerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthorizerInitParameters `json:"initProvider,omitempty"`
}

// AuthorizerStatus defines the observed state of Authorizer.
type AuthorizerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthorizerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Authorizer is the Schema for the Authorizers API. Creates and manages an AWS IoT Authorizer.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Authorizer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthorizerSpec   `json:"spec"`
	Status            AuthorizerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthorizerList contains a list of Authorizers
type AuthorizerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Authorizer `json:"items"`
}

// Repository type metadata.
var (
	Authorizer_Kind             = "Authorizer"
	Authorizer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Authorizer_Kind}.String()
	Authorizer_KindAPIVersion   = Authorizer_Kind + "." + CRDGroupVersion.String()
	Authorizer_GroupVersionKind = CRDGroupVersion.WithKind(Authorizer_Kind)
)

func init() {
	SchemeBuilder.Register(&Authorizer{}, &AuthorizerList{})
}
