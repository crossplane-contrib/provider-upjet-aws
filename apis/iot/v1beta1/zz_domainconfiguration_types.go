// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizerConfigInitParameters struct {

	// A Boolean that specifies whether the domain configuration's authorization service can be overridden.
	AllowAuthorizerOverride *bool `json:"allowAuthorizerOverride,omitempty" tf:"allow_authorizer_override,omitempty"`

	// The name of the authorization service for a domain configuration.
	DefaultAuthorizerName *string `json:"defaultAuthorizerName,omitempty" tf:"default_authorizer_name,omitempty"`
}

type AuthorizerConfigObservation struct {

	// A Boolean that specifies whether the domain configuration's authorization service can be overridden.
	AllowAuthorizerOverride *bool `json:"allowAuthorizerOverride,omitempty" tf:"allow_authorizer_override,omitempty"`

	// The name of the authorization service for a domain configuration.
	DefaultAuthorizerName *string `json:"defaultAuthorizerName,omitempty" tf:"default_authorizer_name,omitempty"`
}

type AuthorizerConfigParameters struct {

	// A Boolean that specifies whether the domain configuration's authorization service can be overridden.
	// +kubebuilder:validation:Optional
	AllowAuthorizerOverride *bool `json:"allowAuthorizerOverride,omitempty" tf:"allow_authorizer_override,omitempty"`

	// The name of the authorization service for a domain configuration.
	// +kubebuilder:validation:Optional
	DefaultAuthorizerName *string `json:"defaultAuthorizerName,omitempty" tf:"default_authorizer_name,omitempty"`
}

type DomainConfigurationInitParameters struct {

	// An object that specifies the authorization service for a domain. See the authorizer_config Block below for details.
	AuthorizerConfig *AuthorizerConfigInitParameters `json:"authorizerConfig,omitempty" tf:"authorizer_config,omitempty"`

	// Fully-qualified domain name.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom domain_name, the cert must include it.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta2.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +listType=set
	ServerCertificateArns []*string `json:"serverCertificateArns,omitempty" tf:"server_certificate_arns,omitempty"`

	// References to Certificate in acm to populate serverCertificateArns.
	// +kubebuilder:validation:Optional
	ServerCertificateArnsRefs []v1.Reference `json:"serverCertificateArnsRefs,omitempty" tf:"-"`

	// Selector for a list of Certificate in acm to populate serverCertificateArns.
	// +kubebuilder:validation:Optional
	ServerCertificateArnsSelector *v1.Selector `json:"serverCertificateArnsSelector,omitempty" tf:"-"`

	// The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the DATA service type.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// The status to which the domain configuration should be set. Valid values are ENABLED and DISABLED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// An object that specifies the TLS configuration for a domain. See the tls_config Block below for details.
	TLSConfig *TLSConfigInitParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
	ValidationCertificateArn *string `json:"validationCertificateArn,omitempty" tf:"validation_certificate_arn,omitempty"`
}

type DomainConfigurationObservation struct {

	// The ARN of the domain configuration.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// An object that specifies the authorization service for a domain. See the authorizer_config Block below for details.
	AuthorizerConfig *AuthorizerConfigObservation `json:"authorizerConfig,omitempty" tf:"authorizer_config,omitempty"`

	// Fully-qualified domain name.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// The type of the domain.
	DomainType *string `json:"domainType,omitempty" tf:"domain_type,omitempty"`

	// The name of the created domain configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom domain_name, the cert must include it.
	// +listType=set
	ServerCertificateArns []*string `json:"serverCertificateArns,omitempty" tf:"server_certificate_arns,omitempty"`

	// The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the DATA service type.
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// The status to which the domain configuration should be set. Valid values are ENABLED and DISABLED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// An object that specifies the TLS configuration for a domain. See the tls_config Block below for details.
	TLSConfig *TLSConfigObservation `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
	ValidationCertificateArn *string `json:"validationCertificateArn,omitempty" tf:"validation_certificate_arn,omitempty"`
}

type DomainConfigurationParameters struct {

	// An object that specifies the authorization service for a domain. See the authorizer_config Block below for details.
	// +kubebuilder:validation:Optional
	AuthorizerConfig *AuthorizerConfigParameters `json:"authorizerConfig,omitempty" tf:"authorizer_config,omitempty"`

	// Fully-qualified domain name.
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom domain_name, the cert must include it.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta2.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	// +listType=set
	ServerCertificateArns []*string `json:"serverCertificateArns,omitempty" tf:"server_certificate_arns,omitempty"`

	// References to Certificate in acm to populate serverCertificateArns.
	// +kubebuilder:validation:Optional
	ServerCertificateArnsRefs []v1.Reference `json:"serverCertificateArnsRefs,omitempty" tf:"-"`

	// Selector for a list of Certificate in acm to populate serverCertificateArns.
	// +kubebuilder:validation:Optional
	ServerCertificateArnsSelector *v1.Selector `json:"serverCertificateArnsSelector,omitempty" tf:"-"`

	// The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the DATA service type.
	// +kubebuilder:validation:Optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// The status to which the domain configuration should be set. Valid values are ENABLED and DISABLED.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// An object that specifies the TLS configuration for a domain. See the tls_config Block below for details.
	// +kubebuilder:validation:Optional
	TLSConfig *TLSConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
	// +kubebuilder:validation:Optional
	ValidationCertificateArn *string `json:"validationCertificateArn,omitempty" tf:"validation_certificate_arn,omitempty"`
}

type TLSConfigInitParameters struct {

	// The security policy for a domain configuration.
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy,omitempty"`
}

type TLSConfigObservation struct {

	// The security policy for a domain configuration.
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy,omitempty"`
}

type TLSConfigParameters struct {

	// The security policy for a domain configuration.
	// +kubebuilder:validation:Optional
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy,omitempty"`
}

// DomainConfigurationSpec defines the desired state of DomainConfiguration
type DomainConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainConfigurationInitParameters `json:"initProvider,omitempty"`
}

// DomainConfigurationStatus defines the observed state of DomainConfiguration.
type DomainConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DomainConfiguration is the Schema for the DomainConfigurations API. Creates and manages an AWS IoT domain configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DomainConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainConfigurationSpec   `json:"spec"`
	Status            DomainConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainConfigurationList contains a list of DomainConfigurations
type DomainConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainConfiguration `json:"items"`
}

// Repository type metadata.
var (
	DomainConfiguration_Kind             = "DomainConfiguration"
	DomainConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainConfiguration_Kind}.String()
	DomainConfiguration_KindAPIVersion   = DomainConfiguration_Kind + "." + CRDGroupVersion.String()
	DomainConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(DomainConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainConfiguration{}, &DomainConfigurationList{})
}
