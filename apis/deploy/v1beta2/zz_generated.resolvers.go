// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *DeploymentGroup) ResolveReferences( // ResolveReferences of this DeploymentGroup.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("deploy.aws.upbound.io", "v1beta1", "App", "AppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.AppNameRef,
			Selector:     mg.Spec.ForProvider.AppNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppName")
	}
	mg.Spec.ForProvider.AppName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppNameRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.EcsService != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ecs.aws.upbound.io", "v1beta2", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EcsService.ClusterName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EcsService.ClusterNameRef,
				Selector:     mg.Spec.ForProvider.EcsService.ClusterNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EcsService.ClusterName")
		}
		mg.Spec.ForProvider.EcsService.ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EcsService.ClusterNameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EcsService != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ecs.aws.upbound.io", "v1beta2", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EcsService.ServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EcsService.ServiceNameRef,
				Selector:     mg.Spec.ForProvider.EcsService.ServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EcsService.ServiceName")
		}
		mg.Spec.ForProvider.EcsService.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EcsService.ServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LoadBalancerInfo != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("elb.aws.upbound.io", "v1beta2", "ELB", "ELBList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo[i4].Name),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo[i4].NameRef,
					Selector:     mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo[i4].NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo[i4].Name")
			}
			mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LoadBalancerInfo.ELBInfo[i4].NameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.LoadBalancerInfo != nil {
		if mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo != nil {
			if mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute != nil {
				{
					m, l, err = apisresolver.GetManagedResource("elbv2.aws.upbound.io", "v1beta2", "LBListener", "LBListenerList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArns),
						Extract:       resource.ExtractParamPath("arn", true),
						References:    mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArnsRefs,
						Selector:      mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArnsSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArns")
				}
				mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArns = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArnsRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.ForProvider.LoadBalancerInfo != nil {
		if mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("elbv2.aws.upbound.io", "v1beta2", "LBTargetGroup", "LBTargetGroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].Name),
						Extract:      resource.ExtractParamPath("name", false),
						Reference:    mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].NameRef,
						Selector:     mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].NameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].Name")
				}
				mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].Name = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].NameRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.ServiceRoleArnRef,
			Selector:     mg.Spec.ForProvider.ServiceRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRoleArn")
	}
	mg.Spec.ForProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.TriggerConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("sns.aws.upbound.io", "v1beta1", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArnRef,
				Selector:     mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArn")
		}
		mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EcsService != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ecs.aws.upbound.io", "v1beta2", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EcsService.ClusterName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EcsService.ClusterNameRef,
				Selector:     mg.Spec.InitProvider.EcsService.ClusterNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EcsService.ClusterName")
		}
		mg.Spec.InitProvider.EcsService.ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EcsService.ClusterNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EcsService != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ecs.aws.upbound.io", "v1beta2", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EcsService.ServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EcsService.ServiceNameRef,
				Selector:     mg.Spec.InitProvider.EcsService.ServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EcsService.ServiceName")
		}
		mg.Spec.InitProvider.EcsService.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EcsService.ServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LoadBalancerInfo != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("elb.aws.upbound.io", "v1beta2", "ELB", "ELBList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo[i4].Name),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo[i4].NameRef,
					Selector:     mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo[i4].NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo[i4].Name")
			}
			mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LoadBalancerInfo.ELBInfo[i4].NameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.LoadBalancerInfo != nil {
		if mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo != nil {
			if mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute != nil {
				{
					m, l, err = apisresolver.GetManagedResource("elbv2.aws.upbound.io", "v1beta2", "LBListener", "LBListenerList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArns),
						Extract:       resource.ExtractParamPath("arn", true),
						References:    mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArnsRefs,
						Selector:      mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArnsSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArns")
				}
				mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArns = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.ProdTrafficRoute.ListenerArnsRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.InitProvider.LoadBalancerInfo != nil {
		if mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("elbv2.aws.upbound.io", "v1beta2", "LBTargetGroup", "LBTargetGroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].Name),
						Extract:      resource.ExtractParamPath("name", false),
						Reference:    mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].NameRef,
						Selector:     mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].NameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].Name")
				}
				mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].Name = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LoadBalancerInfo.TargetGroupPairInfo.TargetGroup[i5].NameRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.ServiceRoleArnRef,
			Selector:     mg.Spec.InitProvider.ServiceRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceRoleArn")
	}
	mg.Spec.InitProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRoleArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.TriggerConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("sns.aws.upbound.io", "v1beta1", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArnRef,
				Selector:     mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArn")
		}
		mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArnRef = rsp.ResolvedReference

	}

	return nil
}
