// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmConfigurationInitParameters struct {

	// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
	// +listType:set
	Alarms []*string `json:"alarms,omitempty" tf:"alarms,omitempty"`

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
	IgnorePollAlarmFailure *bool `json:"ignorePollAlarmFailure,omitempty" tf:"ignore_poll_alarm_failure,omitempty"`
}

type AlarmConfigurationObservation struct {

	// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
	// +listType:set
	Alarms []*string `json:"alarms,omitempty" tf:"alarms,omitempty"`

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
	IgnorePollAlarmFailure *bool `json:"ignorePollAlarmFailure,omitempty" tf:"ignore_poll_alarm_failure,omitempty"`
}

type AlarmConfigurationParameters struct {

	// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
	// +kubebuilder:validation:Optional
	// +listType:set
	Alarms []*string `json:"alarms,omitempty" tf:"alarms,omitempty"`

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
	// +kubebuilder:validation:Optional
	IgnorePollAlarmFailure *bool `json:"ignorePollAlarmFailure,omitempty" tf:"ignore_poll_alarm_failure,omitempty"`
}

type AutoRollbackConfigurationInitParameters struct {

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE and DEPLOYMENT_STOP_ON_ALARM.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`
}

type AutoRollbackConfigurationObservation struct {

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE and DEPLOYMENT_STOP_ON_ALARM.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`
}

type AutoRollbackConfigurationParameters struct {

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE and DEPLOYMENT_STOP_ON_ALARM.
	// +kubebuilder:validation:Optional
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`
}

type BlueGreenDeploymentConfigInitParameters struct {

	// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
	DeploymentReadyOption []DeploymentReadyOptionInitParameters `json:"deploymentReadyOption,omitempty" tf:"deployment_ready_option,omitempty"`

	// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
	GreenFleetProvisioningOption []GreenFleetProvisioningOptionInitParameters `json:"greenFleetProvisioningOption,omitempty" tf:"green_fleet_provisioning_option,omitempty"`

	// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
	TerminateBlueInstancesOnDeploymentSuccess []TerminateBlueInstancesOnDeploymentSuccessInitParameters `json:"terminateBlueInstancesOnDeploymentSuccess,omitempty" tf:"terminate_blue_instances_on_deployment_success,omitempty"`
}

type BlueGreenDeploymentConfigObservation struct {

	// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
	DeploymentReadyOption []DeploymentReadyOptionObservation `json:"deploymentReadyOption,omitempty" tf:"deployment_ready_option,omitempty"`

	// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
	GreenFleetProvisioningOption []GreenFleetProvisioningOptionObservation `json:"greenFleetProvisioningOption,omitempty" tf:"green_fleet_provisioning_option,omitempty"`

	// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
	TerminateBlueInstancesOnDeploymentSuccess []TerminateBlueInstancesOnDeploymentSuccessObservation `json:"terminateBlueInstancesOnDeploymentSuccess,omitempty" tf:"terminate_blue_instances_on_deployment_success,omitempty"`
}

type BlueGreenDeploymentConfigParameters struct {

	// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	DeploymentReadyOption []DeploymentReadyOptionParameters `json:"deploymentReadyOption,omitempty" tf:"deployment_ready_option,omitempty"`

	// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	GreenFleetProvisioningOption []GreenFleetProvisioningOptionParameters `json:"greenFleetProvisioningOption,omitempty" tf:"green_fleet_provisioning_option,omitempty"`

	// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	TerminateBlueInstancesOnDeploymentSuccess []TerminateBlueInstancesOnDeploymentSuccessParameters `json:"terminateBlueInstancesOnDeploymentSuccess,omitempty" tf:"terminate_blue_instances_on_deployment_success,omitempty"`
}

type DeploymentGroupInitParameters struct {

	// Configuration block of alarms associated with the deployment group (documented below).
	AlarmConfiguration []AlarmConfigurationInitParameters `json:"alarmConfiguration,omitempty" tf:"alarm_configuration,omitempty"`

	// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
	AutoRollbackConfiguration []AutoRollbackConfigurationInitParameters `json:"autoRollbackConfiguration,omitempty" tf:"auto_rollback_configuration,omitempty"`

	// Autoscaling groups associated with the deployment group.
	// +listType:set
	AutoscalingGroups []*string `json:"autoscalingGroups,omitempty" tf:"autoscaling_groups,omitempty"`

	// Configuration block of the blue/green deployment options for a deployment group (documented below).
	BlueGreenDeploymentConfig []BlueGreenDeploymentConfigInitParameters `json:"blueGreenDeploymentConfig,omitempty" tf:"blue_green_deployment_config,omitempty"`

	// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
	DeploymentConfigName *string `json:"deploymentConfigName,omitempty" tf:"deployment_config_name,omitempty"`

	// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
	DeploymentStyle []DeploymentStyleInitParameters `json:"deploymentStyle,omitempty" tf:"deployment_style,omitempty"`

	// Tag filters associated with the deployment group. See the AWS docs for details.
	EC2TagFilter []EC2TagFilterInitParameters `json:"ec2TagFilter,omitempty" tf:"ec2_tag_filter,omitempty"`

	// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
	EC2TagSet []EC2TagSetInitParameters `json:"ec2TagSet,omitempty" tf:"ec2_tag_set,omitempty"`

	// Configuration block(s) of the ECS services for a deployment group (documented below).
	EcsService []EcsServiceInitParameters `json:"ecsService,omitempty" tf:"ecs_service,omitempty"`

	// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
	LoadBalancerInfo []LoadBalancerInfoInitParameters `json:"loadBalancerInfo,omitempty" tf:"load_balancer_info,omitempty"`

	// On premise tag filters associated with the group. See the AWS docs for details.
	OnPremisesInstanceTagFilter []OnPremisesInstanceTagFilterInitParameters `json:"onPremisesInstanceTagFilter,omitempty" tf:"on_premises_instance_tag_filter,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Configuration block(s) of the triggers for the deployment group (documented below).
	TriggerConfiguration []TriggerConfigurationInitParameters `json:"triggerConfiguration,omitempty" tf:"trigger_configuration,omitempty"`
}

type DeploymentGroupObservation struct {

	// Configuration block of alarms associated with the deployment group (documented below).
	AlarmConfiguration []AlarmConfigurationObservation `json:"alarmConfiguration,omitempty" tf:"alarm_configuration,omitempty"`

	// The name of the application.
	AppName *string `json:"appName,omitempty" tf:"app_name,omitempty"`

	// The ARN of the CodeDeploy deployment group.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
	AutoRollbackConfiguration []AutoRollbackConfigurationObservation `json:"autoRollbackConfiguration,omitempty" tf:"auto_rollback_configuration,omitempty"`

	// Autoscaling groups associated with the deployment group.
	// +listType:set
	AutoscalingGroups []*string `json:"autoscalingGroups,omitempty" tf:"autoscaling_groups,omitempty"`

	// Configuration block of the blue/green deployment options for a deployment group (documented below).
	BlueGreenDeploymentConfig []BlueGreenDeploymentConfigObservation `json:"blueGreenDeploymentConfig,omitempty" tf:"blue_green_deployment_config,omitempty"`

	// The destination platform type for the deployment.
	ComputePlatform *string `json:"computePlatform,omitempty" tf:"compute_platform,omitempty"`

	// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
	DeploymentConfigName *string `json:"deploymentConfigName,omitempty" tf:"deployment_config_name,omitempty"`

	// The ID of the CodeDeploy deployment group.
	DeploymentGroupID *string `json:"deploymentGroupId,omitempty" tf:"deployment_group_id,omitempty"`

	// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
	DeploymentStyle []DeploymentStyleObservation `json:"deploymentStyle,omitempty" tf:"deployment_style,omitempty"`

	// Tag filters associated with the deployment group. See the AWS docs for details.
	EC2TagFilter []EC2TagFilterObservation `json:"ec2TagFilter,omitempty" tf:"ec2_tag_filter,omitempty"`

	// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
	EC2TagSet []EC2TagSetObservation `json:"ec2TagSet,omitempty" tf:"ec2_tag_set,omitempty"`

	// Configuration block(s) of the ECS services for a deployment group (documented below).
	EcsService []EcsServiceObservation `json:"ecsService,omitempty" tf:"ecs_service,omitempty"`

	// Application name and deployment group name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
	LoadBalancerInfo []LoadBalancerInfoObservation `json:"loadBalancerInfo,omitempty" tf:"load_balancer_info,omitempty"`

	// On premise tag filters associated with the group. See the AWS docs for details.
	OnPremisesInstanceTagFilter []OnPremisesInstanceTagFilterObservation `json:"onPremisesInstanceTagFilter,omitempty" tf:"on_premises_instance_tag_filter,omitempty"`

	// The service role ARN that allows deployments.
	ServiceRoleArn *string `json:"serviceRoleArn,omitempty" tf:"service_role_arn,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Configuration block(s) of the triggers for the deployment group (documented below).
	TriggerConfiguration []TriggerConfigurationObservation `json:"triggerConfiguration,omitempty" tf:"trigger_configuration,omitempty"`
}

type DeploymentGroupParameters struct {

	// Configuration block of alarms associated with the deployment group (documented below).
	// +kubebuilder:validation:Optional
	AlarmConfiguration []AlarmConfigurationParameters `json:"alarmConfiguration,omitempty" tf:"alarm_configuration,omitempty"`

	// The name of the application.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/deploy/v1beta1.App
	// +kubebuilder:validation:Optional
	AppName *string `json:"appName,omitempty" tf:"app_name,omitempty"`

	// Reference to a App in deploy to populate appName.
	// +kubebuilder:validation:Optional
	AppNameRef *v1.Reference `json:"appNameRef,omitempty" tf:"-"`

	// Selector for a App in deploy to populate appName.
	// +kubebuilder:validation:Optional
	AppNameSelector *v1.Selector `json:"appNameSelector,omitempty" tf:"-"`

	// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
	// +kubebuilder:validation:Optional
	AutoRollbackConfiguration []AutoRollbackConfigurationParameters `json:"autoRollbackConfiguration,omitempty" tf:"auto_rollback_configuration,omitempty"`

	// Autoscaling groups associated with the deployment group.
	// +kubebuilder:validation:Optional
	// +listType:set
	AutoscalingGroups []*string `json:"autoscalingGroups,omitempty" tf:"autoscaling_groups,omitempty"`

	// Configuration block of the blue/green deployment options for a deployment group (documented below).
	// +kubebuilder:validation:Optional
	BlueGreenDeploymentConfig []BlueGreenDeploymentConfigParameters `json:"blueGreenDeploymentConfig,omitempty" tf:"blue_green_deployment_config,omitempty"`

	// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
	// +kubebuilder:validation:Optional
	DeploymentConfigName *string `json:"deploymentConfigName,omitempty" tf:"deployment_config_name,omitempty"`

	// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
	// +kubebuilder:validation:Optional
	DeploymentStyle []DeploymentStyleParameters `json:"deploymentStyle,omitempty" tf:"deployment_style,omitempty"`

	// Tag filters associated with the deployment group. See the AWS docs for details.
	// +kubebuilder:validation:Optional
	EC2TagFilter []EC2TagFilterParameters `json:"ec2TagFilter,omitempty" tf:"ec2_tag_filter,omitempty"`

	// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
	// +kubebuilder:validation:Optional
	EC2TagSet []EC2TagSetParameters `json:"ec2TagSet,omitempty" tf:"ec2_tag_set,omitempty"`

	// Configuration block(s) of the ECS services for a deployment group (documented below).
	// +kubebuilder:validation:Optional
	EcsService []EcsServiceParameters `json:"ecsService,omitempty" tf:"ecs_service,omitempty"`

	// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	LoadBalancerInfo []LoadBalancerInfoParameters `json:"loadBalancerInfo,omitempty" tf:"load_balancer_info,omitempty"`

	// On premise tag filters associated with the group. See the AWS docs for details.
	// +kubebuilder:validation:Optional
	OnPremisesInstanceTagFilter []OnPremisesInstanceTagFilterParameters `json:"onPremisesInstanceTagFilter,omitempty" tf:"on_premises_instance_tag_filter,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The service role ARN that allows deployments.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	ServiceRoleArn *string `json:"serviceRoleArn,omitempty" tf:"service_role_arn,omitempty"`

	// Reference to a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	ServiceRoleArnRef *v1.Reference `json:"serviceRoleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate serviceRoleArn.
	// +kubebuilder:validation:Optional
	ServiceRoleArnSelector *v1.Selector `json:"serviceRoleArnSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Configuration block(s) of the triggers for the deployment group (documented below).
	// +kubebuilder:validation:Optional
	TriggerConfiguration []TriggerConfigurationParameters `json:"triggerConfiguration,omitempty" tf:"trigger_configuration,omitempty"`
}

type DeploymentReadyOptionInitParameters struct {

	// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
	ActionOnTimeout *string `json:"actionOnTimeout,omitempty" tf:"action_on_timeout,omitempty"`

	// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
	WaitTimeInMinutes *float64 `json:"waitTimeInMinutes,omitempty" tf:"wait_time_in_minutes,omitempty"`
}

type DeploymentReadyOptionObservation struct {

	// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
	ActionOnTimeout *string `json:"actionOnTimeout,omitempty" tf:"action_on_timeout,omitempty"`

	// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
	WaitTimeInMinutes *float64 `json:"waitTimeInMinutes,omitempty" tf:"wait_time_in_minutes,omitempty"`
}

type DeploymentReadyOptionParameters struct {

	// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
	// +kubebuilder:validation:Optional
	ActionOnTimeout *string `json:"actionOnTimeout,omitempty" tf:"action_on_timeout,omitempty"`

	// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
	// +kubebuilder:validation:Optional
	WaitTimeInMinutes *float64 `json:"waitTimeInMinutes,omitempty" tf:"wait_time_in_minutes,omitempty"`
}

type DeploymentStyleInitParameters struct {

	// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
	DeploymentOption *string `json:"deploymentOption,omitempty" tf:"deployment_option,omitempty"`

	// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
	DeploymentType *string `json:"deploymentType,omitempty" tf:"deployment_type,omitempty"`
}

type DeploymentStyleObservation struct {

	// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
	DeploymentOption *string `json:"deploymentOption,omitempty" tf:"deployment_option,omitempty"`

	// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
	DeploymentType *string `json:"deploymentType,omitempty" tf:"deployment_type,omitempty"`
}

type DeploymentStyleParameters struct {

	// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
	// +kubebuilder:validation:Optional
	DeploymentOption *string `json:"deploymentOption,omitempty" tf:"deployment_option,omitempty"`

	// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
	// +kubebuilder:validation:Optional
	DeploymentType *string `json:"deploymentType,omitempty" tf:"deployment_type,omitempty"`
}

type EC2TagFilterInitParameters struct {

	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EC2TagFilterObservation struct {

	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EC2TagFilterParameters struct {

	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EC2TagSetEC2TagFilterInitParameters struct {

	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EC2TagSetEC2TagFilterObservation struct {

	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EC2TagSetEC2TagFilterParameters struct {

	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EC2TagSetInitParameters struct {

	// Tag filters associated with the deployment group. See the AWS docs for details.
	EC2TagFilter []EC2TagSetEC2TagFilterInitParameters `json:"ec2TagFilter,omitempty" tf:"ec2_tag_filter,omitempty"`
}

type EC2TagSetObservation struct {

	// Tag filters associated with the deployment group. See the AWS docs for details.
	EC2TagFilter []EC2TagSetEC2TagFilterObservation `json:"ec2TagFilter,omitempty" tf:"ec2_tag_filter,omitempty"`
}

type EC2TagSetParameters struct {

	// Tag filters associated with the deployment group. See the AWS docs for details.
	// +kubebuilder:validation:Optional
	EC2TagFilter []EC2TagSetEC2TagFilterParameters `json:"ec2TagFilter,omitempty" tf:"ec2_tag_filter,omitempty"`
}

type ELBInfoInitParameters struct {
}

type ELBInfoObservation struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ELBInfoParameters struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a ELB in elb to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a ELB in elb to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`
}

type EcsServiceInitParameters struct {
}

type EcsServiceObservation struct {

	// The name of the ECS cluster.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// The name of the ECS service.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type EcsServiceParameters struct {

	// The name of the ECS cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.Cluster
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Reference to a Cluster in ecs to populate clusterName.
	// +kubebuilder:validation:Optional
	ClusterNameRef *v1.Reference `json:"clusterNameRef,omitempty" tf:"-"`

	// Selector for a Cluster in ecs to populate clusterName.
	// +kubebuilder:validation:Optional
	ClusterNameSelector *v1.Selector `json:"clusterNameSelector,omitempty" tf:"-"`

	// The name of the ECS service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.Service
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Reference to a Service in ecs to populate serviceName.
	// +kubebuilder:validation:Optional
	ServiceNameRef *v1.Reference `json:"serviceNameRef,omitempty" tf:"-"`

	// Selector for a Service in ecs to populate serviceName.
	// +kubebuilder:validation:Optional
	ServiceNameSelector *v1.Selector `json:"serviceNameSelector,omitempty" tf:"-"`
}

type GreenFleetProvisioningOptionInitParameters struct {

	// The method used to add instances to a replacement environment.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type GreenFleetProvisioningOptionObservation struct {

	// The method used to add instances to a replacement environment.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type GreenFleetProvisioningOptionParameters struct {

	// The method used to add instances to a replacement environment.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type LoadBalancerInfoInitParameters struct {

	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
	ELBInfo []ELBInfoInitParameters `json:"elbInfo,omitempty" tf:"elb_info,omitempty"`

	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
	TargetGroupInfo []TargetGroupInfoInitParameters `json:"targetGroupInfo,omitempty" tf:"target_group_info,omitempty"`

	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
	TargetGroupPairInfo []TargetGroupPairInfoInitParameters `json:"targetGroupPairInfo,omitempty" tf:"target_group_pair_info,omitempty"`
}

type LoadBalancerInfoObservation struct {

	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
	ELBInfo []ELBInfoObservation `json:"elbInfo,omitempty" tf:"elb_info,omitempty"`

	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
	TargetGroupInfo []TargetGroupInfoObservation `json:"targetGroupInfo,omitempty" tf:"target_group_info,omitempty"`

	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
	TargetGroupPairInfo []TargetGroupPairInfoObservation `json:"targetGroupPairInfo,omitempty" tf:"target_group_pair_info,omitempty"`
}

type LoadBalancerInfoParameters struct {

	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
	// +kubebuilder:validation:Optional
	ELBInfo []ELBInfoParameters `json:"elbInfo,omitempty" tf:"elb_info,omitempty"`

	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
	// +kubebuilder:validation:Optional
	TargetGroupInfo []TargetGroupInfoParameters `json:"targetGroupInfo,omitempty" tf:"target_group_info,omitempty"`

	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
	// +kubebuilder:validation:Optional
	TargetGroupPairInfo []TargetGroupPairInfoParameters `json:"targetGroupPairInfo,omitempty" tf:"target_group_pair_info,omitempty"`
}

type OnPremisesInstanceTagFilterInitParameters struct {

	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OnPremisesInstanceTagFilterObservation struct {

	// The key of the tag filter.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OnPremisesInstanceTagFilterParameters struct {

	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProdTrafficRouteInitParameters struct {

	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +listType:set
	ListenerArns []*string `json:"listenerArns,omitempty" tf:"listener_arns,omitempty"`
}

type ProdTrafficRouteObservation struct {

	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +listType:set
	ListenerArns []*string `json:"listenerArns,omitempty" tf:"listener_arns,omitempty"`
}

type ProdTrafficRouteParameters struct {

	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +kubebuilder:validation:Optional
	// +listType:set
	ListenerArns []*string `json:"listenerArns" tf:"listener_arns,omitempty"`
}

type TargetGroupInfoInitParameters struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetGroupInfoObservation struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetGroupInfoParameters struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetGroupInitParameters struct {
}

type TargetGroupObservation struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetGroupPairInfoInitParameters struct {

	// Configuration block for the production traffic route (documented below).
	ProdTrafficRoute []ProdTrafficRouteInitParameters `json:"prodTrafficRoute,omitempty" tf:"prod_traffic_route,omitempty"`

	// Configuration blocks for a target group within a target group pair (documented below).
	TargetGroup []TargetGroupInitParameters `json:"targetGroup,omitempty" tf:"target_group,omitempty"`

	// Configuration block for the test traffic route (documented below).
	TestTrafficRoute []TestTrafficRouteInitParameters `json:"testTrafficRoute,omitempty" tf:"test_traffic_route,omitempty"`
}

type TargetGroupPairInfoObservation struct {

	// Configuration block for the production traffic route (documented below).
	ProdTrafficRoute []ProdTrafficRouteObservation `json:"prodTrafficRoute,omitempty" tf:"prod_traffic_route,omitempty"`

	// Configuration blocks for a target group within a target group pair (documented below).
	TargetGroup []TargetGroupObservation `json:"targetGroup,omitempty" tf:"target_group,omitempty"`

	// Configuration block for the test traffic route (documented below).
	TestTrafficRoute []TestTrafficRouteObservation `json:"testTrafficRoute,omitempty" tf:"test_traffic_route,omitempty"`
}

type TargetGroupPairInfoParameters struct {

	// Configuration block for the production traffic route (documented below).
	// +kubebuilder:validation:Optional
	ProdTrafficRoute []ProdTrafficRouteParameters `json:"prodTrafficRoute" tf:"prod_traffic_route,omitempty"`

	// Configuration blocks for a target group within a target group pair (documented below).
	// +kubebuilder:validation:Optional
	TargetGroup []TargetGroupParameters `json:"targetGroup" tf:"target_group,omitempty"`

	// Configuration block for the test traffic route (documented below).
	// +kubebuilder:validation:Optional
	TestTrafficRoute []TestTrafficRouteParameters `json:"testTrafficRoute,omitempty" tf:"test_traffic_route,omitempty"`
}

type TargetGroupParameters struct {

	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elbv2/v1beta1.LBTargetGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a LBTargetGroup in elbv2 to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a LBTargetGroup in elbv2 to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`
}

type TerminateBlueInstancesOnDeploymentSuccessInitParameters struct {

	// The method used to add instances to a replacement environment.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
	TerminationWaitTimeInMinutes *float64 `json:"terminationWaitTimeInMinutes,omitempty" tf:"termination_wait_time_in_minutes,omitempty"`
}

type TerminateBlueInstancesOnDeploymentSuccessObservation struct {

	// The method used to add instances to a replacement environment.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
	TerminationWaitTimeInMinutes *float64 `json:"terminationWaitTimeInMinutes,omitempty" tf:"termination_wait_time_in_minutes,omitempty"`
}

type TerminateBlueInstancesOnDeploymentSuccessParameters struct {

	// The method used to add instances to a replacement environment.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
	// +kubebuilder:validation:Optional
	TerminationWaitTimeInMinutes *float64 `json:"terminationWaitTimeInMinutes,omitempty" tf:"termination_wait_time_in_minutes,omitempty"`
}

type TestTrafficRouteInitParameters struct {

	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +listType:set
	ListenerArns []*string `json:"listenerArns,omitempty" tf:"listener_arns,omitempty"`
}

type TestTrafficRouteObservation struct {

	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +listType:set
	ListenerArns []*string `json:"listenerArns,omitempty" tf:"listener_arns,omitempty"`
}

type TestTrafficRouteParameters struct {

	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +kubebuilder:validation:Optional
	// +listType:set
	ListenerArns []*string `json:"listenerArns" tf:"listener_arns,omitempty"`
}

type TriggerConfigurationInitParameters struct {

	// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
	// +listType:set
	TriggerEvents []*string `json:"triggerEvents,omitempty" tf:"trigger_events,omitempty"`

	// The name of the notification trigger.
	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name,omitempty"`
}

type TriggerConfigurationObservation struct {

	// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
	// +listType:set
	TriggerEvents []*string `json:"triggerEvents,omitempty" tf:"trigger_events,omitempty"`

	// The name of the notification trigger.
	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name,omitempty"`

	// The ARN of the SNS topic through which notifications are sent.
	TriggerTargetArn *string `json:"triggerTargetArn,omitempty" tf:"trigger_target_arn,omitempty"`
}

type TriggerConfigurationParameters struct {

	// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
	// +kubebuilder:validation:Optional
	// +listType:set
	TriggerEvents []*string `json:"triggerEvents" tf:"trigger_events,omitempty"`

	// The name of the notification trigger.
	// +kubebuilder:validation:Optional
	TriggerName *string `json:"triggerName" tf:"trigger_name,omitempty"`

	// The ARN of the SNS topic through which notifications are sent.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	TriggerTargetArn *string `json:"triggerTargetArn,omitempty" tf:"trigger_target_arn,omitempty"`

	// Reference to a Topic in sns to populate triggerTargetArn.
	// +kubebuilder:validation:Optional
	TriggerTargetArnRef *v1.Reference `json:"triggerTargetArnRef,omitempty" tf:"-"`

	// Selector for a Topic in sns to populate triggerTargetArn.
	// +kubebuilder:validation:Optional
	TriggerTargetArnSelector *v1.Selector `json:"triggerTargetArnSelector,omitempty" tf:"-"`
}

// DeploymentGroupSpec defines the desired state of DeploymentGroup
type DeploymentGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeploymentGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeploymentGroupInitParameters `json:"initProvider,omitempty"`
}

// DeploymentGroupStatus defines the observed state of DeploymentGroup.
type DeploymentGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeploymentGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentGroup is the Schema for the DeploymentGroups API. Provides a CodeDeploy deployment group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DeploymentGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeploymentGroupSpec   `json:"spec"`
	Status            DeploymentGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentGroupList contains a list of DeploymentGroups
type DeploymentGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeploymentGroup `json:"items"`
}

// Repository type metadata.
var (
	DeploymentGroup_Kind             = "DeploymentGroup"
	DeploymentGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeploymentGroup_Kind}.String()
	DeploymentGroup_KindAPIVersion   = DeploymentGroup_Kind + "." + CRDGroupVersion.String()
	DeploymentGroup_GroupVersionKind = CRDGroupVersion.WithKind(DeploymentGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&DeploymentGroup{}, &DeploymentGroupList{})
}
