/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/ecs/v1beta1"
	v1beta11 "github.com/upbound/provider-aws/apis/elb/v1beta1"
	v1beta12 "github.com/upbound/provider-aws/apis/elbv2/v1beta1"
	v1beta13 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta14 "github.com/upbound/provider-aws/apis/sns/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DeploymentGroup.
func (mg *DeploymentGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AppNameRef,
		Selector:     mg.Spec.ForProvider.AppNameSelector,
		To: reference.To{
			List:    &AppList{},
			Managed: &App{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppName")
	}
	mg.Spec.ForProvider.AppName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.EcsService); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EcsService[i3].ClusterName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EcsService[i3].ClusterNameRef,
			Selector:     mg.Spec.ForProvider.EcsService[i3].ClusterNameSelector,
			To: reference.To{
				List:    &v1beta1.ClusterList{},
				Managed: &v1beta1.Cluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EcsService[i3].ClusterName")
		}
		mg.Spec.ForProvider.EcsService[i3].ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EcsService[i3].ClusterNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.EcsService); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EcsService[i3].ServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EcsService[i3].ServiceNameRef,
			Selector:     mg.Spec.ForProvider.EcsService[i3].ServiceNameSelector,
			To: reference.To{
				List:    &v1beta1.ServiceList{},
				Managed: &v1beta1.Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EcsService[i3].ServiceName")
		}
		mg.Spec.ForProvider.EcsService[i3].ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EcsService[i3].ServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LoadBalancerInfo); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo[i4].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo[i4].NameRef,
				Selector:     mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo[i4].NameSelector,
				To: reference.To{
					List:    &v1beta11.ELBList{},
					Managed: &v1beta11.ELB{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo[i4].Name")
			}
			mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LoadBalancerInfo[i3].ELBInfo[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LoadBalancerInfo); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].Name),
					Extract:      resource.ExtractParamPath("name", false),
					Reference:    mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].NameRef,
					Selector:     mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].NameSelector,
					To: reference.To{
						List:    &v1beta12.LBTargetGroupList{},
						Managed: &v1beta12.LBTargetGroup{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].Name")
				}
				mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].Name = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].NameRef = rsp.ResolvedReference

			}
		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.ServiceRoleArnRef,
		Selector:     mg.Spec.ForProvider.ServiceRoleArnSelector,
		To: reference.To{
			List:    &v1beta13.RoleList{},
			Managed: &v1beta13.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRoleArn")
	}
	mg.Spec.ForProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.TriggerConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArnRef,
			Selector:     mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArnSelector,
			To: reference.To{
				List:    &v1beta14.TopicList{},
				Managed: &v1beta14.Topic{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArn")
		}
		mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.TriggerConfiguration[i3].TriggerTargetArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.EcsService); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EcsService[i3].ClusterName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EcsService[i3].ClusterNameRef,
			Selector:     mg.Spec.InitProvider.EcsService[i3].ClusterNameSelector,
			To: reference.To{
				List:    &v1beta1.ClusterList{},
				Managed: &v1beta1.Cluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EcsService[i3].ClusterName")
		}
		mg.Spec.InitProvider.EcsService[i3].ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EcsService[i3].ClusterNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.EcsService); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EcsService[i3].ServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EcsService[i3].ServiceNameRef,
			Selector:     mg.Spec.InitProvider.EcsService[i3].ServiceNameSelector,
			To: reference.To{
				List:    &v1beta1.ServiceList{},
				Managed: &v1beta1.Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EcsService[i3].ServiceName")
		}
		mg.Spec.InitProvider.EcsService[i3].ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EcsService[i3].ServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LoadBalancerInfo); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo[i4].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo[i4].NameRef,
				Selector:     mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo[i4].NameSelector,
				To: reference.To{
					List:    &v1beta11.ELBList{},
					Managed: &v1beta11.ELB{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo[i4].Name")
			}
			mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LoadBalancerInfo[i3].ELBInfo[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LoadBalancerInfo); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].Name),
					Extract:      resource.ExtractParamPath("name", false),
					Reference:    mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].NameRef,
					Selector:     mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].NameSelector,
					To: reference.To{
						List:    &v1beta12.LBTargetGroupList{},
						Managed: &v1beta12.LBTargetGroup{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].Name")
				}
				mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].Name = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LoadBalancerInfo[i3].TargetGroupPairInfo[i4].TargetGroup[i5].NameRef = rsp.ResolvedReference

			}
		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.InitProvider.ServiceRoleArnRef,
		Selector:     mg.Spec.InitProvider.ServiceRoleArnSelector,
		To: reference.To{
			List:    &v1beta13.RoleList{},
			Managed: &v1beta13.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceRoleArn")
	}
	mg.Spec.InitProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRoleArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.TriggerConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArnRef,
			Selector:     mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArnSelector,
			To: reference.To{
				List:    &v1beta14.TopicList{},
				Managed: &v1beta14.Topic{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArn")
		}
		mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.TriggerConfiguration[i3].TriggerTargetArnRef = rsp.ResolvedReference

	}

	return nil
}
