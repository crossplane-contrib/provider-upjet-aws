// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CopyStepDetailsDestinationFileLocationEFSFileLocationInitParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CopyStepDetailsDestinationFileLocationEFSFileLocationObservation struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CopyStepDetailsDestinationFileLocationEFSFileLocationParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CopyStepDetailsDestinationFileLocationInitParameters struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []CopyStepDetailsDestinationFileLocationEFSFileLocationInitParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []CopyStepDetailsDestinationFileLocationS3FileLocationInitParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type CopyStepDetailsDestinationFileLocationObservation struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []CopyStepDetailsDestinationFileLocationEFSFileLocationObservation `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []CopyStepDetailsDestinationFileLocationS3FileLocationObservation `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type CopyStepDetailsDestinationFileLocationParameters struct {

	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	EFSFileLocation []CopyStepDetailsDestinationFileLocationEFSFileLocationParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	S3FileLocation []CopyStepDetailsDestinationFileLocationS3FileLocationParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type CopyStepDetailsDestinationFileLocationS3FileLocationInitParameters struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type CopyStepDetailsDestinationFileLocationS3FileLocationObservation struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type CopyStepDetailsDestinationFileLocationS3FileLocationParameters struct {

	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type CopyStepDetailsInitParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []DestinationFileLocationInitParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type CopyStepDetailsObservation struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []DestinationFileLocationObservation `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type CopyStepDetailsParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	DestinationFileLocation []DestinationFileLocationParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type CustomStepDetailsInitParameters struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// The ARN for the lambda function that is being called.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Timeout, in seconds, for the step.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type CustomStepDetailsObservation struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// The ARN for the lambda function that is being called.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Timeout, in seconds, for the step.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type CustomStepDetailsParameters struct {

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// The ARN for the lambda function that is being called.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Timeout, in seconds, for the step.
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationEFSFileLocationInitParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationEFSFileLocationObservation struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationEFSFileLocationParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationInitParameters struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []DestinationFileLocationEFSFileLocationInitParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []DestinationFileLocationS3FileLocationInitParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationObservation struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []DestinationFileLocationEFSFileLocationObservation `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []DestinationFileLocationS3FileLocationObservation `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationParameters struct {

	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	EFSFileLocation []DestinationFileLocationEFSFileLocationParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	S3FileLocation []DestinationFileLocationS3FileLocationParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationS3FileLocationInitParameters struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationS3FileLocationObservation struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DecryptStepDetailsDestinationFileLocationS3FileLocationParameters struct {

	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DecryptStepDetailsInitParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []DecryptStepDetailsDestinationFileLocationInitParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DecryptStepDetailsObservation struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []DecryptStepDetailsDestinationFileLocationObservation `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DecryptStepDetailsParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	DestinationFileLocation []DecryptStepDetailsDestinationFileLocationParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DeleteStepDetailsInitParameters struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type DeleteStepDetailsObservation struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type DeleteStepDetailsParameters struct {

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type DestinationFileLocationEFSFileLocationInitParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DestinationFileLocationEFSFileLocationObservation struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DestinationFileLocationEFSFileLocationParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DestinationFileLocationInitParameters struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []EFSFileLocationInitParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []S3FileLocationInitParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type DestinationFileLocationObservation struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []EFSFileLocationObservation `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []S3FileLocationObservation `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type DestinationFileLocationParameters struct {

	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	EFSFileLocation []EFSFileLocationParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	S3FileLocation []S3FileLocationParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type DestinationFileLocationS3FileLocationInitParameters struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DestinationFileLocationS3FileLocationObservation struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DestinationFileLocationS3FileLocationParameters struct {

	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type EFSFileLocationInitParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type EFSFileLocationObservation struct {

	// The ID of the file system, assigned by Amazon EFS.
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type EFSFileLocationParameters struct {

	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	FileSystemID *string `json:"fileSystemId,omitempty" tf:"file_system_id,omitempty"`

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type OnExceptionStepsInitParameters struct {

	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails []CopyStepDetailsInitParameters `json:"copyStepDetails,omitempty" tf:"copy_step_details,omitempty"`

	// Details for a step that invokes a lambda function.
	CustomStepDetails []CustomStepDetailsInitParameters `json:"customStepDetails,omitempty" tf:"custom_step_details,omitempty"`

	// Details for a step that decrypts the file.
	DecryptStepDetails []DecryptStepDetailsInitParameters `json:"decryptStepDetails,omitempty" tf:"decrypt_step_details,omitempty"`

	// Details for a step that deletes the file.
	DeleteStepDetails []DeleteStepDetailsInitParameters `json:"deleteStepDetails,omitempty" tf:"delete_step_details,omitempty"`

	// Details for a step that creates one or more tags.
	TagStepDetails []TagStepDetailsInitParameters `json:"tagStepDetails,omitempty" tf:"tag_step_details,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OnExceptionStepsObservation struct {

	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails []CopyStepDetailsObservation `json:"copyStepDetails,omitempty" tf:"copy_step_details,omitempty"`

	// Details for a step that invokes a lambda function.
	CustomStepDetails []CustomStepDetailsObservation `json:"customStepDetails,omitempty" tf:"custom_step_details,omitempty"`

	// Details for a step that decrypts the file.
	DecryptStepDetails []DecryptStepDetailsObservation `json:"decryptStepDetails,omitempty" tf:"decrypt_step_details,omitempty"`

	// Details for a step that deletes the file.
	DeleteStepDetails []DeleteStepDetailsObservation `json:"deleteStepDetails,omitempty" tf:"delete_step_details,omitempty"`

	// Details for a step that creates one or more tags.
	TagStepDetails []TagStepDetailsObservation `json:"tagStepDetails,omitempty" tf:"tag_step_details,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OnExceptionStepsParameters struct {

	// Details for a step that performs a file copy. See Copy Step Details below.
	// +kubebuilder:validation:Optional
	CopyStepDetails []CopyStepDetailsParameters `json:"copyStepDetails,omitempty" tf:"copy_step_details,omitempty"`

	// Details for a step that invokes a lambda function.
	// +kubebuilder:validation:Optional
	CustomStepDetails []CustomStepDetailsParameters `json:"customStepDetails,omitempty" tf:"custom_step_details,omitempty"`

	// Details for a step that decrypts the file.
	// +kubebuilder:validation:Optional
	DecryptStepDetails []DecryptStepDetailsParameters `json:"decryptStepDetails,omitempty" tf:"decrypt_step_details,omitempty"`

	// Details for a step that deletes the file.
	// +kubebuilder:validation:Optional
	DeleteStepDetails []DeleteStepDetailsParameters `json:"deleteStepDetails,omitempty" tf:"delete_step_details,omitempty"`

	// Details for a step that creates one or more tags.
	// +kubebuilder:validation:Optional
	TagStepDetails []TagStepDetailsParameters `json:"tagStepDetails,omitempty" tf:"tag_step_details,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type S3FileLocationInitParameters struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type S3FileLocationObservation struct {

	// Specifies the S3 bucket for the customer input file.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type S3FileLocationParameters struct {

	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type StepsCopyStepDetailsInitParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []CopyStepDetailsDestinationFileLocationInitParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type StepsCopyStepDetailsObservation struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []CopyStepDetailsDestinationFileLocationObservation `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type StepsCopyStepDetailsParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	DestinationFileLocation []CopyStepDetailsDestinationFileLocationParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type StepsCustomStepDetailsInitParameters struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Timeout, in seconds, for the step.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type StepsCustomStepDetailsObservation struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// The ARN for the lambda function that is being called.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Timeout, in seconds, for the step.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type StepsCustomStepDetailsParameters struct {

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// The ARN for the lambda function that is being called.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Reference to a Function in lambda to populate target.
	// +kubebuilder:validation:Optional
	TargetRef *v1.Reference `json:"targetRef,omitempty" tf:"-"`

	// Selector for a Function in lambda to populate target.
	// +kubebuilder:validation:Optional
	TargetSelector *v1.Selector `json:"targetSelector,omitempty" tf:"-"`

	// Timeout, in seconds, for the step.
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type StepsDecryptStepDetailsDestinationFileLocationInitParameters struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []DecryptStepDetailsDestinationFileLocationEFSFileLocationInitParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []DecryptStepDetailsDestinationFileLocationS3FileLocationInitParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type StepsDecryptStepDetailsDestinationFileLocationObservation struct {

	// Specifies the details for the EFS file being copied.
	EFSFileLocation []DecryptStepDetailsDestinationFileLocationEFSFileLocationObservation `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	S3FileLocation []DecryptStepDetailsDestinationFileLocationS3FileLocationObservation `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type StepsDecryptStepDetailsDestinationFileLocationParameters struct {

	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	EFSFileLocation []DecryptStepDetailsDestinationFileLocationEFSFileLocationParameters `json:"efsFileLocation,omitempty" tf:"efs_file_location,omitempty"`

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	S3FileLocation []DecryptStepDetailsDestinationFileLocationS3FileLocationParameters `json:"s3FileLocation,omitempty" tf:"s3_file_location,omitempty"`
}

type StepsDecryptStepDetailsInitParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []StepsDecryptStepDetailsDestinationFileLocationInitParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StepsDecryptStepDetailsObservation struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	DestinationFileLocation []StepsDecryptStepDetailsDestinationFileLocationObservation `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StepsDecryptStepDetailsParameters struct {

	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	DestinationFileLocation []StepsDecryptStepDetailsDestinationFileLocationParameters `json:"destinationFileLocation,omitempty" tf:"destination_file_location,omitempty"`

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	OverwriteExisting *string `json:"overwriteExisting,omitempty" tf:"overwrite_existing,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type StepsDeleteStepDetailsInitParameters struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type StepsDeleteStepDetailsObservation struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type StepsDeleteStepDetailsParameters struct {

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`
}

type StepsInitParameters struct {

	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails []StepsCopyStepDetailsInitParameters `json:"copyStepDetails,omitempty" tf:"copy_step_details,omitempty"`

	// Details for a step that invokes a lambda function.
	CustomStepDetails []StepsCustomStepDetailsInitParameters `json:"customStepDetails,omitempty" tf:"custom_step_details,omitempty"`

	// Details for a step that decrypts the file.
	DecryptStepDetails []StepsDecryptStepDetailsInitParameters `json:"decryptStepDetails,omitempty" tf:"decrypt_step_details,omitempty"`

	// Details for a step that deletes the file.
	DeleteStepDetails []StepsDeleteStepDetailsInitParameters `json:"deleteStepDetails,omitempty" tf:"delete_step_details,omitempty"`

	// Details for a step that creates one or more tags.
	TagStepDetails []StepsTagStepDetailsInitParameters `json:"tagStepDetails,omitempty" tf:"tag_step_details,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StepsObservation struct {

	// Details for a step that performs a file copy. See Copy Step Details below.
	CopyStepDetails []StepsCopyStepDetailsObservation `json:"copyStepDetails,omitempty" tf:"copy_step_details,omitempty"`

	// Details for a step that invokes a lambda function.
	CustomStepDetails []StepsCustomStepDetailsObservation `json:"customStepDetails,omitempty" tf:"custom_step_details,omitempty"`

	// Details for a step that decrypts the file.
	DecryptStepDetails []StepsDecryptStepDetailsObservation `json:"decryptStepDetails,omitempty" tf:"decrypt_step_details,omitempty"`

	// Details for a step that deletes the file.
	DeleteStepDetails []StepsDeleteStepDetailsObservation `json:"deleteStepDetails,omitempty" tf:"delete_step_details,omitempty"`

	// Details for a step that creates one or more tags.
	TagStepDetails []StepsTagStepDetailsObservation `json:"tagStepDetails,omitempty" tf:"tag_step_details,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StepsParameters struct {

	// Details for a step that performs a file copy. See Copy Step Details below.
	// +kubebuilder:validation:Optional
	CopyStepDetails []StepsCopyStepDetailsParameters `json:"copyStepDetails,omitempty" tf:"copy_step_details,omitempty"`

	// Details for a step that invokes a lambda function.
	// +kubebuilder:validation:Optional
	CustomStepDetails []StepsCustomStepDetailsParameters `json:"customStepDetails,omitempty" tf:"custom_step_details,omitempty"`

	// Details for a step that decrypts the file.
	// +kubebuilder:validation:Optional
	DecryptStepDetails []StepsDecryptStepDetailsParameters `json:"decryptStepDetails,omitempty" tf:"decrypt_step_details,omitempty"`

	// Details for a step that deletes the file.
	// +kubebuilder:validation:Optional
	DeleteStepDetails []StepsDeleteStepDetailsParameters `json:"deleteStepDetails,omitempty" tf:"delete_step_details,omitempty"`

	// Details for a step that creates one or more tags.
	// +kubebuilder:validation:Optional
	TagStepDetails []StepsTagStepDetailsParameters `json:"tagStepDetails,omitempty" tf:"tag_step_details,omitempty"`

	// One of the following step types are supported. COPY, CUSTOM, DECRYPT, DELETE, and TAG.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type StepsTagStepDetailsInitParameters struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Key-value map of resource tags.
	Tags []TagStepDetailsTagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type StepsTagStepDetailsObservation struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Key-value map of resource tags.
	Tags []TagStepDetailsTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type StepsTagStepDetailsParameters struct {

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags []TagStepDetailsTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagStepDetailsInitParameters struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Key-value map of resource tags.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagStepDetailsObservation struct {

	// The name of the step, used as an identifier.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Key-value map of resource tags.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagStepDetailsParameters struct {

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	SourceFileLocation *string `json:"sourceFileLocation,omitempty" tf:"source_file_location,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagStepDetailsTagsInitParameters struct {

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value that corresponds to the key.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagStepDetailsTagsObservation struct {

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value that corresponds to the key.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagStepDetailsTagsParameters struct {

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The value that corresponds to the key.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TagsInitParameters struct {

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value that corresponds to the key.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The value that corresponds to the key.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The value that corresponds to the key.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type WorkflowInitParameters struct {

	// A textual description for the workflow.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps []OnExceptionStepsInitParameters `json:"onExceptionSteps,omitempty" tf:"on_exception_steps,omitempty"`

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps []StepsInitParameters `json:"steps,omitempty" tf:"steps,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type WorkflowObservation struct {

	// The Workflow ARN.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// A textual description for the workflow.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Workflow id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	OnExceptionSteps []OnExceptionStepsObservation `json:"onExceptionSteps,omitempty" tf:"on_exception_steps,omitempty"`

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	Steps []StepsObservation `json:"steps,omitempty" tf:"steps,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type WorkflowParameters struct {

	// A textual description for the workflow.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	// +kubebuilder:validation:Optional
	OnExceptionSteps []OnExceptionStepsParameters `json:"onExceptionSteps,omitempty" tf:"on_exception_steps,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	// +kubebuilder:validation:Optional
	Steps []StepsParameters `json:"steps,omitempty" tf:"steps,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// WorkflowSpec defines the desired state of Workflow
type WorkflowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkflowParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkflowInitParameters `json:"initProvider,omitempty"`
}

// WorkflowStatus defines the observed state of Workflow.
type WorkflowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Workflow is the Schema for the Workflows API. Provides a AWS Transfer Workflow resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Workflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.steps) || (has(self.initProvider) && has(self.initProvider.steps))",message="spec.forProvider.steps is a required parameter"
	Spec   WorkflowSpec   `json:"spec"`
	Status WorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkflowList contains a list of Workflows
type WorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workflow `json:"items"`
}

// Repository type metadata.
var (
	Workflow_Kind             = "Workflow"
	Workflow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Workflow_Kind}.String()
	Workflow_KindAPIVersion   = Workflow_Kind + "." + CRDGroupVersion.String()
	Workflow_GroupVersionKind = CRDGroupVersion.WithKind(Workflow_Kind)
)

func init() {
	SchemeBuilder.Register(&Workflow{}, &WorkflowList{})
}
