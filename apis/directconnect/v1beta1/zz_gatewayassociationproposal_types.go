// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayAssociationProposalInitParameters struct {

	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	// +listType:set
	AllowedPrefixes []*string `json:"allowedPrefixes,omitempty" tf:"allowed_prefixes,omitempty"`
}

type GatewayAssociationProposalObservation struct {

	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	// +listType:set
	AllowedPrefixes []*string `json:"allowedPrefixes,omitempty" tf:"allowed_prefixes,omitempty"`

	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayID *string `json:"associatedGatewayId,omitempty" tf:"associated_gateway_id,omitempty"`

	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayOwnerAccountID *string `json:"associatedGatewayOwnerAccountId,omitempty" tf:"associated_gateway_owner_account_id,omitempty"`

	// The type of the associated gateway, transitGateway or virtualPrivateGateway.
	AssociatedGatewayType *string `json:"associatedGatewayType,omitempty" tf:"associated_gateway_type,omitempty"`

	// Direct Connect Gateway identifier.
	DxGatewayID *string `json:"dxGatewayId,omitempty" tf:"dx_gateway_id,omitempty"`

	// AWS Account identifier of the Direct Connect Gateway's owner.
	DxGatewayOwnerAccountID *string `json:"dxGatewayOwnerAccountId,omitempty" tf:"dx_gateway_owner_account_id,omitempty"`

	// Direct Connect Gateway Association Proposal identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayAssociationProposalParameters struct {

	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	// +kubebuilder:validation:Optional
	// +listType:set
	AllowedPrefixes []*string `json:"allowedPrefixes,omitempty" tf:"allowed_prefixes,omitempty"`

	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPNGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	AssociatedGatewayID *string `json:"associatedGatewayId,omitempty" tf:"associated_gateway_id,omitempty"`

	// Reference to a VPNGateway in ec2 to populate associatedGatewayId.
	// +kubebuilder:validation:Optional
	AssociatedGatewayIDRef *v1.Reference `json:"associatedGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNGateway in ec2 to populate associatedGatewayId.
	// +kubebuilder:validation:Optional
	AssociatedGatewayIDSelector *v1.Selector `json:"associatedGatewayIdSelector,omitempty" tf:"-"`

	// Direct Connect Gateway identifier.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DxGatewayID *string `json:"dxGatewayId,omitempty" tf:"dx_gateway_id,omitempty"`

	// Reference to a Gateway in directconnect to populate dxGatewayId.
	// +kubebuilder:validation:Optional
	DxGatewayIDRef *v1.Reference `json:"dxGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in directconnect to populate dxGatewayId.
	// +kubebuilder:validation:Optional
	DxGatewayIDSelector *v1.Selector `json:"dxGatewayIdSelector,omitempty" tf:"-"`

	// AWS Account identifier of the Direct Connect Gateway's owner.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("owner_account_id",true)
	// +kubebuilder:validation:Optional
	DxGatewayOwnerAccountID *string `json:"dxGatewayOwnerAccountId,omitempty" tf:"dx_gateway_owner_account_id,omitempty"`

	// Reference to a Gateway in directconnect to populate dxGatewayOwnerAccountId.
	// +kubebuilder:validation:Optional
	DxGatewayOwnerAccountIDRef *v1.Reference `json:"dxGatewayOwnerAccountIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in directconnect to populate dxGatewayOwnerAccountId.
	// +kubebuilder:validation:Optional
	DxGatewayOwnerAccountIDSelector *v1.Selector `json:"dxGatewayOwnerAccountIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// GatewayAssociationProposalSpec defines the desired state of GatewayAssociationProposal
type GatewayAssociationProposalSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayAssociationProposalParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GatewayAssociationProposalInitParameters `json:"initProvider,omitempty"`
}

// GatewayAssociationProposalStatus defines the observed state of GatewayAssociationProposal.
type GatewayAssociationProposalStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayAssociationProposalObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAssociationProposal is the Schema for the GatewayAssociationProposals API. Manages a Direct Connect Gateway Association Proposal.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GatewayAssociationProposal struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayAssociationProposalSpec   `json:"spec"`
	Status            GatewayAssociationProposalStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAssociationProposalList contains a list of GatewayAssociationProposals
type GatewayAssociationProposalList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayAssociationProposal `json:"items"`
}

// Repository type metadata.
var (
	GatewayAssociationProposal_Kind             = "GatewayAssociationProposal"
	GatewayAssociationProposal_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayAssociationProposal_Kind}.String()
	GatewayAssociationProposal_KindAPIVersion   = GatewayAssociationProposal_Kind + "." + CRDGroupVersion.String()
	GatewayAssociationProposal_GroupVersionKind = CRDGroupVersion.WithKind(GatewayAssociationProposal_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayAssociationProposal{}, &GatewayAssociationProposalList{})
}
