/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/ec2/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this BGPPeer.
func (mg *BGPPeer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualInterfaceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VirtualInterfaceIDRef,
		Selector:     mg.Spec.ForProvider.VirtualInterfaceIDSelector,
		To: reference.To{
			List:    &PrivateVirtualInterfaceList{},
			Managed: &PrivateVirtualInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualInterfaceID")
	}
	mg.Spec.ForProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualInterfaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ConnectionAssociation.
func (mg *ConnectionAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ConnectionIDRef,
		Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LagID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.LagIDRef,
		Selector:     mg.Spec.ForProvider.LagIDSelector,
		To: reference.To{
			List:    &LagList{},
			Managed: &Lag{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LagID")
	}
	mg.Spec.ForProvider.LagID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LagIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayAssociation.
func (mg *GatewayAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssociatedGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AssociatedGatewayIDRef,
		Selector:     mg.Spec.ForProvider.AssociatedGatewayIDSelector,
		To: reference.To{
			List:    &v1beta1.VPNGatewayList{},
			Managed: &v1beta1.VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssociatedGatewayID")
	}
	mg.Spec.ForProvider.AssociatedGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssociatedGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
		Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayAssociationProposal.
func (mg *GatewayAssociationProposal) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssociatedGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AssociatedGatewayIDRef,
		Selector:     mg.Spec.ForProvider.AssociatedGatewayIDSelector,
		To: reference.To{
			List:    &v1beta1.VPNGatewayList{},
			Managed: &v1beta1.VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssociatedGatewayID")
	}
	mg.Spec.ForProvider.AssociatedGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssociatedGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
		Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayOwnerAccountID),
		Extract:      resource.ExtractParamPath("owner_account_id", true),
		Reference:    mg.Spec.ForProvider.DxGatewayOwnerAccountIDRef,
		Selector:     mg.Spec.ForProvider.DxGatewayOwnerAccountIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayOwnerAccountID")
	}
	mg.Spec.ForProvider.DxGatewayOwnerAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayOwnerAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateVirtualInterface.
func (mg *PrivateVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConnectionIDRef,
		Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
		Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
		To: reference.To{
			List:    &v1beta1.VPNGatewayList{},
			Managed: &v1beta1.VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicVirtualInterface.
func (mg *PublicVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConnectionIDRef,
		Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitVirtualInterface.
func (mg *TransitVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ConnectionIDRef,
		Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
		Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference

	return nil
}
