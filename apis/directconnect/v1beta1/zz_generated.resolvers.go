/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this BGPPeer.
	apisresolver "github.com/upbound/provider-aws/internal/apis"
)

func (mg *BGPPeer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "PrivateVirtualInterface", "PrivateVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualInterfaceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.ForProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualInterfaceID")
	}
	mg.Spec.ForProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualInterfaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "PrivateVirtualInterface", "PrivateVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualInterfaceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.InitProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualInterfaceID")
	}
	mg.Spec.InitProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualInterfaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ConnectionAssociation.
func (mg *ConnectionAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Lag", "LagList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LagID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.LagIDRef,
			Selector:     mg.Spec.ForProvider.LagIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LagID")
	}
	mg.Spec.ForProvider.LagID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LagIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Lag", "LagList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LagID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.LagIDRef,
			Selector:     mg.Spec.InitProvider.LagIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LagID")
	}
	mg.Spec.InitProvider.LagID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LagIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayAssociation.
func (mg *GatewayAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssociatedGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AssociatedGatewayIDRef,
			Selector:     mg.Spec.ForProvider.AssociatedGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssociatedGatewayID")
	}
	mg.Spec.ForProvider.AssociatedGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssociatedGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
			Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AssociatedGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.AssociatedGatewayIDRef,
			Selector:     mg.Spec.InitProvider.AssociatedGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AssociatedGatewayID")
	}
	mg.Spec.InitProvider.AssociatedGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AssociatedGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DxGatewayIDRef,
			Selector:     mg.Spec.InitProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DxGatewayID")
	}
	mg.Spec.InitProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DxGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayAssociationProposal.
func (mg *GatewayAssociationProposal) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssociatedGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AssociatedGatewayIDRef,
			Selector:     mg.Spec.ForProvider.AssociatedGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssociatedGatewayID")
	}
	mg.Spec.ForProvider.AssociatedGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssociatedGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
			Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayOwnerAccountID),
			Extract:      resource.ExtractParamPath("owner_account_id", true),
			Reference:    mg.Spec.ForProvider.DxGatewayOwnerAccountIDRef,
			Selector:     mg.Spec.ForProvider.DxGatewayOwnerAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayOwnerAccountID")
	}
	mg.Spec.ForProvider.DxGatewayOwnerAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayOwnerAccountIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AssociatedGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.AssociatedGatewayIDRef,
			Selector:     mg.Spec.InitProvider.AssociatedGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AssociatedGatewayID")
	}
	mg.Spec.InitProvider.AssociatedGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AssociatedGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DxGatewayIDRef,
			Selector:     mg.Spec.InitProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DxGatewayID")
	}
	mg.Spec.InitProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DxGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DxGatewayOwnerAccountID),
			Extract:      resource.ExtractParamPath("owner_account_id", true),
			Reference:    mg.Spec.InitProvider.DxGatewayOwnerAccountIDRef,
			Selector:     mg.Spec.InitProvider.DxGatewayOwnerAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DxGatewayOwnerAccountID")
	}
	mg.Spec.InitProvider.DxGatewayOwnerAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DxGatewayOwnerAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HostedPrivateVirtualInterface.
func (mg *HostedPrivateVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HostedPrivateVirtualInterfaceAccepter.
func (mg *HostedPrivateVirtualInterfaceAccepter) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
			Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "HostedPrivateVirtualInterface", "HostedPrivateVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.ForProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualInterfaceID")
	}
	mg.Spec.ForProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualInterfaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPNGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.VPNGatewayIDRef,
			Selector:     mg.Spec.InitProvider.VPNGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPNGatewayID")
	}
	mg.Spec.InitProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPNGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "HostedPrivateVirtualInterface", "HostedPrivateVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.InitProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualInterfaceID")
	}
	mg.Spec.InitProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualInterfaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HostedPublicVirtualInterface.
func (mg *HostedPublicVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HostedPublicVirtualInterfaceAccepter.
func (mg *HostedPublicVirtualInterfaceAccepter) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "HostedPublicVirtualInterface", "HostedPublicVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.ForProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualInterfaceID")
	}
	mg.Spec.ForProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualInterfaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "HostedPublicVirtualInterface", "HostedPublicVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.InitProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualInterfaceID")
	}
	mg.Spec.InitProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualInterfaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HostedTransitVirtualInterface.
func (mg *HostedTransitVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HostedTransitVirtualInterfaceAccepter.
func (mg *HostedTransitVirtualInterfaceAccepter) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
			Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "HostedTransitVirtualInterface", "HostedTransitVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.ForProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualInterfaceID")
	}
	mg.Spec.ForProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualInterfaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DxGatewayIDRef,
			Selector:     mg.Spec.InitProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DxGatewayID")
	}
	mg.Spec.InitProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DxGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "HostedTransitVirtualInterface", "HostedTransitVirtualInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VirtualInterfaceIDRef,
			Selector:     mg.Spec.InitProvider.VirtualInterfaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualInterfaceID")
	}
	mg.Spec.InitProvider.VirtualInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualInterfaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateVirtualInterface.
func (mg *PrivateVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
			Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPNGatewayID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VPNGatewayIDRef,
			Selector:     mg.Spec.InitProvider.VPNGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPNGatewayID")
	}
	mg.Spec.InitProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPNGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicVirtualInterface.
func (mg *PublicVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitVirtualInterface.
func (mg *TransitVirtualInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ConnectionIDRef,
			Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DxGatewayIDRef,
			Selector:     mg.Spec.ForProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DxGatewayID")
	}
	mg.Spec.ForProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DxGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ConnectionIDRef,
			Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("directconnect.aws.upbound.io", "v1beta1", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DxGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DxGatewayIDRef,
			Selector:     mg.Spec.InitProvider.DxGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DxGatewayID")
	}
	mg.Spec.InitProvider.DxGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DxGatewayIDRef = rsp.ResolvedReference

	return nil
}
