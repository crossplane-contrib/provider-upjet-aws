/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this App.
	apisresolver "github.com/upbound/provider-aws/internal/apis"
)

func (mg *App) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DomainIDRef,
			Selector:     mg.Spec.ForProvider.DomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainID")
	}
	mg.Spec.ForProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "UserProfile", "UserProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserProfileName),
			Extract:      resource.ExtractParamPath("user_profile_name", false),
			Reference:    mg.Spec.ForProvider.UserProfileNameRef,
			Selector:     mg.Spec.ForProvider.UserProfileNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserProfileName")
	}
	mg.Spec.ForProvider.UserProfileName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserProfileNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DomainIDRef,
			Selector:     mg.Spec.InitProvider.DomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainID")
	}
	mg.Spec.InitProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "UserProfile", "UserProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserProfileName),
			Extract:      resource.ExtractParamPath("user_profile_name", false),
			Reference:    mg.Spec.InitProvider.UserProfileNameRef,
			Selector:     mg.Spec.InitProvider.UserProfileNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserProfileName")
	}
	mg.Spec.InitProvider.UserProfileName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserProfileNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CodeRepository.
func (mg *CodeRepository) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.GitConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("secretsmanager.aws.upbound.io", "v1beta1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitConfig[i3].SecretArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.GitConfig[i3].SecretArnRef,
				Selector:     mg.Spec.ForProvider.GitConfig[i3].SecretArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.GitConfig[i3].SecretArn")
		}
		mg.Spec.ForProvider.GitConfig[i3].SecretArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.GitConfig[i3].SecretArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.GitConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("secretsmanager.aws.upbound.io", "v1beta1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GitConfig[i3].SecretArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.GitConfig[i3].SecretArnRef,
				Selector:     mg.Spec.InitProvider.GitConfig[i3].SecretArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.GitConfig[i3].SecretArn")
		}
		mg.Spec.InitProvider.GitConfig[i3].SecretArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.GitConfig[i3].SecretArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Device.
func (mg *Device) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "DeviceFleet", "DeviceFleetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeviceFleetName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DeviceFleetNameRef,
			Selector:     mg.Spec.ForProvider.DeviceFleetNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeviceFleetName")
	}
	mg.Spec.ForProvider.DeviceFleetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeviceFleetNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "DeviceFleet", "DeviceFleetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DeviceFleetName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DeviceFleetNameRef,
			Selector:     mg.Spec.InitProvider.DeviceFleetNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DeviceFleetName")
	}
	mg.Spec.InitProvider.DeviceFleetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DeviceFleetNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DeviceFleet.
func (mg *DeviceFleet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Domain.
func (mg *Domain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultUserSettings); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultUserSettings[i3].ExecutionRole),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.DefaultUserSettings[i3].ExecutionRoleRef,
				Selector:     mg.Spec.ForProvider.DefaultUserSettings[i3].ExecutionRoleSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DefaultUserSettings[i3].ExecutionRole")
		}
		mg.Spec.ForProvider.DefaultUserSettings[i3].ExecutionRole = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.DefaultUserSettings[i3].ExecutionRoleRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultUserSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "AppImageConfig", "AppImageConfigList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigNameRef,
						Selector:     mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigName")
				}
				mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigNameRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultUserSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "ImageVersion", "ImageVersionList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageName),
						Extract:      resource.ExtractParamPath("image_name", false),
						Reference:    mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageNameRef,
						Selector:     mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageName")
				}
				mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageNameRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
			Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SubnetIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.SubnetIDRefs,
			Selector:      mg.Spec.ForProvider.SubnetIDSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetIds")
	}
	mg.Spec.ForProvider.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SubnetIDRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPC", "VPCList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VPCIDRef,
			Selector:     mg.Spec.ForProvider.VPCIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.DefaultUserSettings); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultUserSettings[i3].ExecutionRole),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.DefaultUserSettings[i3].ExecutionRoleRef,
				Selector:     mg.Spec.InitProvider.DefaultUserSettings[i3].ExecutionRoleSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.DefaultUserSettings[i3].ExecutionRole")
		}
		mg.Spec.InitProvider.DefaultUserSettings[i3].ExecutionRole = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.DefaultUserSettings[i3].ExecutionRoleRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DefaultUserSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "AppImageConfig", "AppImageConfigList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigNameRef,
						Selector:     mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigName")
				}
				mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].AppImageConfigNameRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DefaultUserSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "ImageVersion", "ImageVersionList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageName),
						Extract:      resource.ExtractParamPath("image_name", false),
						Reference:    mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageNameRef,
						Selector:     mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageName")
				}
				mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.DefaultUserSettings[i3].KernelGatewayAppSettings[i4].CustomImage[i5].ImageNameRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KMSKeyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.KMSKeyIDRef,
			Selector:     mg.Spec.InitProvider.KMSKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KMSKeyID")
	}
	mg.Spec.InitProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KMSKeyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SubnetIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.SubnetIDRefs,
			Selector:      mg.Spec.InitProvider.SubnetIDSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetIds")
	}
	mg.Spec.InitProvider.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SubnetIDRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPC", "VPCList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VPCIDRef,
			Selector:     mg.Spec.InitProvider.VPCIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Endpoint.
func (mg *Endpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "EndpointConfiguration", "EndpointConfigurationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EndpointConfigName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EndpointConfigNameRef,
			Selector:     mg.Spec.ForProvider.EndpointConfigNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EndpointConfigName")
	}
	mg.Spec.ForProvider.EndpointConfigName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EndpointConfigNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "EndpointConfiguration", "EndpointConfigurationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EndpointConfigName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EndpointConfigNameRef,
			Selector:     mg.Spec.InitProvider.EndpointConfigNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EndpointConfigName")
	}
	mg.Spec.InitProvider.EndpointConfigName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EndpointConfigNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EndpointConfiguration.
func (mg *EndpointConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyArn),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KMSKeyArnRef,
			Selector:     mg.Spec.ForProvider.KMSKeyArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyArn")
	}
	mg.Spec.ForProvider.KMSKeyArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ProductionVariants); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Model", "ModelList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProductionVariants[i3].ModelName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ProductionVariants[i3].ModelNameRef,
				Selector:     mg.Spec.ForProvider.ProductionVariants[i3].ModelNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ProductionVariants[i3].ModelName")
		}
		mg.Spec.ForProvider.ProductionVariants[i3].ModelName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ProductionVariants[i3].ModelNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KMSKeyArn),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.KMSKeyArnRef,
			Selector:     mg.Spec.InitProvider.KMSKeyArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KMSKeyArn")
	}
	mg.Spec.InitProvider.KMSKeyArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KMSKeyArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ProductionVariants); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Model", "ModelList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProductionVariants[i3].ModelName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ProductionVariants[i3].ModelNameRef,
				Selector:     mg.Spec.InitProvider.ProductionVariants[i3].ModelNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ProductionVariants[i3].ModelName")
		}
		mg.Spec.InitProvider.ProductionVariants[i3].ModelName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ProductionVariants[i3].ModelNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this FeatureGroup.
func (mg *FeatureGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Image.
func (mg *Image) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ImageVersion.
func (mg *ImageVersion) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Image", "ImageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ImageName),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ImageNameRef,
			Selector:     mg.Spec.ForProvider.ImageNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ImageName")
	}
	mg.Spec.ForProvider.ImageName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ImageNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Image", "ImageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ImageName),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ImageNameRef,
			Selector:     mg.Spec.InitProvider.ImageNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ImageName")
	}
	mg.Spec.InitProvider.ImageName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ImageNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Model.
func (mg *Model) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExecutionRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.ExecutionRoleArnRef,
			Selector:     mg.Spec.ForProvider.ExecutionRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ExecutionRoleArn")
	}
	mg.Spec.ForProvider.ExecutionRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ExecutionRoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExecutionRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.ExecutionRoleArnRef,
			Selector:     mg.Spec.InitProvider.ExecutionRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ExecutionRoleArn")
	}
	mg.Spec.InitProvider.ExecutionRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ExecutionRoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ModelPackageGroupPolicy.
func (mg *ModelPackageGroupPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "ModelPackageGroup", "ModelPackageGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ModelPackageGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ModelPackageGroupNameRef,
			Selector:     mg.Spec.ForProvider.ModelPackageGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ModelPackageGroupName")
	}
	mg.Spec.ForProvider.ModelPackageGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ModelPackageGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "ModelPackageGroup", "ModelPackageGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ModelPackageGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ModelPackageGroupNameRef,
			Selector:     mg.Spec.InitProvider.ModelPackageGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ModelPackageGroupName")
	}
	mg.Spec.InitProvider.ModelPackageGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ModelPackageGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NotebookInstance.
func (mg *NotebookInstance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "CodeRepository", "CodeRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultCodeRepository),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DefaultCodeRepositoryRef,
			Selector:     mg.Spec.ForProvider.DefaultCodeRepositorySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultCodeRepository")
	}
	mg.Spec.ForProvider.DefaultCodeRepository = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultCodeRepositoryRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
			Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.SubnetIDRef,
			Selector:     mg.Spec.ForProvider.SubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "CodeRepository", "CodeRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultCodeRepository),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DefaultCodeRepositoryRef,
			Selector:     mg.Spec.InitProvider.DefaultCodeRepositorySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultCodeRepository")
	}
	mg.Spec.InitProvider.DefaultCodeRepository = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultCodeRepositoryRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KMSKeyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.KMSKeyIDRef,
			Selector:     mg.Spec.InitProvider.KMSKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KMSKeyID")
	}
	mg.Spec.InitProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KMSKeyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.SubnetIDRef,
			Selector:     mg.Spec.InitProvider.SubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Space.
func (mg *Space) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DomainIDRef,
			Selector:     mg.Spec.ForProvider.DomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainID")
	}
	mg.Spec.ForProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DomainIDRef,
			Selector:     mg.Spec.InitProvider.DomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainID")
	}
	mg.Spec.InitProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserProfile.
func (mg *UserProfile) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DomainIDRef,
			Selector:     mg.Spec.ForProvider.DomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainID")
	}
	mg.Spec.ForProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DomainIDRef,
			Selector:     mg.Spec.InitProvider.DomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainID")
	}
	mg.Spec.InitProvider.DomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Workforce.
func (mg *Workforce) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CognitoConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolClient", "UserPoolClientList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CognitoConfig[i3].ClientID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.CognitoConfig[i3].ClientIDRef,
				Selector:     mg.Spec.ForProvider.CognitoConfig[i3].ClientIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CognitoConfig[i3].ClientID")
		}
		mg.Spec.ForProvider.CognitoConfig[i3].ClientID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CognitoConfig[i3].ClientIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CognitoConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolDomain", "UserPoolDomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CognitoConfig[i3].UserPool),
				Extract:      resource.ExtractParamPath("user_pool_id", false),
				Reference:    mg.Spec.ForProvider.CognitoConfig[i3].UserPoolRef,
				Selector:     mg.Spec.ForProvider.CognitoConfig[i3].UserPoolSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CognitoConfig[i3].UserPool")
		}
		mg.Spec.ForProvider.CognitoConfig[i3].UserPool = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CognitoConfig[i3].UserPoolRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CognitoConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolClient", "UserPoolClientList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CognitoConfig[i3].ClientID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.CognitoConfig[i3].ClientIDRef,
				Selector:     mg.Spec.InitProvider.CognitoConfig[i3].ClientIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CognitoConfig[i3].ClientID")
		}
		mg.Spec.InitProvider.CognitoConfig[i3].ClientID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CognitoConfig[i3].ClientIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CognitoConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolDomain", "UserPoolDomainList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CognitoConfig[i3].UserPool),
				Extract:      resource.ExtractParamPath("user_pool_id", false),
				Reference:    mg.Spec.InitProvider.CognitoConfig[i3].UserPoolRef,
				Selector:     mg.Spec.InitProvider.CognitoConfig[i3].UserPoolSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CognitoConfig[i3].UserPool")
		}
		mg.Spec.InitProvider.CognitoConfig[i3].UserPool = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CognitoConfig[i3].UserPoolRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Workteam.
func (mg *Workteam) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.MemberDefinition); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolClient", "UserPoolClientList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientIDRef,
					Selector:     mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientID")
			}
			mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.MemberDefinition); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserGroup", "UserGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroup),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroupRef,
					Selector:     mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroupSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroup")
			}
			mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroup = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroupRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.MemberDefinition); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolDomain", "UserPoolDomainList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPool),
					Extract:      resource.ExtractParamPath("user_pool_id", false),
					Reference:    mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPoolRef,
					Selector:     mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPoolSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPool")
			}
			mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPool = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPoolRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Workforce", "WorkforceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WorkforceName),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WorkforceNameRef,
			Selector:     mg.Spec.ForProvider.WorkforceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkforceName")
	}
	mg.Spec.ForProvider.WorkforceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkforceNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.MemberDefinition); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolClient", "UserPoolClientList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientIDRef,
					Selector:     mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientID")
			}
			mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].ClientIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.MemberDefinition); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserGroup", "UserGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroup),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroupRef,
					Selector:     mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroupSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroup")
			}
			mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroup = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserGroupRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.MemberDefinition); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta1", "UserPoolDomain", "UserPoolDomainList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPool),
					Extract:      resource.ExtractParamPath("user_pool_id", false),
					Reference:    mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPoolRef,
					Selector:     mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPoolSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPool")
			}
			mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPool = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.MemberDefinition[i3].CognitoMemberDefinition[i4].UserPoolRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("sagemaker.aws.upbound.io", "v1beta1", "Workforce", "WorkforceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WorkforceName),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.WorkforceNameRef,
			Selector:     mg.Spec.InitProvider.WorkforceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkforceName")
	}
	mg.Spec.InitProvider.WorkforceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkforceNameRef = rsp.ResolvedReference

	return nil
}
