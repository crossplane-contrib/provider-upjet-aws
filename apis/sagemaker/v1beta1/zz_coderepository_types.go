// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CodeRepositoryInitParameters struct {

	// Specifies details about the repository. see Git Config details below.
	GitConfig []GitConfigInitParameters `json:"gitConfig,omitempty" tf:"git_config,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CodeRepositoryObservation struct {

	// The Amazon Resource Name (ARN) assigned by AWS to this Code Repository.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Specifies details about the repository. see Git Config details below.
	GitConfig []GitConfigObservation `json:"gitConfig,omitempty" tf:"git_config,omitempty"`

	// The name of the Code Repository.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type CodeRepositoryParameters struct {

	// Specifies details about the repository. see Git Config details below.
	// +kubebuilder:validation:Optional
	GitConfig []GitConfigParameters `json:"gitConfig,omitempty" tf:"git_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type GitConfigInitParameters struct {

	// The default branch for the Git repository.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// The URL where the Git repository is located.
	RepositoryURL *string `json:"repositoryUrl,omitempty" tf:"repository_url,omitempty"`
}

type GitConfigObservation struct {

	// The default branch for the Git repository.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// The URL where the Git repository is located.
	RepositoryURL *string `json:"repositoryUrl,omitempty" tf:"repository_url,omitempty"`

	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn,omitempty"`
}

type GitConfigParameters struct {

	// The default branch for the Git repository.
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// The URL where the Git repository is located.
	// +kubebuilder:validation:Optional
	RepositoryURL *string `json:"repositoryUrl" tf:"repository_url,omitempty"`

	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/secretsmanager/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn,omitempty"`

	// Reference to a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	SecretArnRef *v1.Reference `json:"secretArnRef,omitempty" tf:"-"`

	// Selector for a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	SecretArnSelector *v1.Selector `json:"secretArnSelector,omitempty" tf:"-"`
}

// CodeRepositorySpec defines the desired state of CodeRepository
type CodeRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CodeRepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CodeRepositoryInitParameters `json:"initProvider,omitempty"`
}

// CodeRepositoryStatus defines the observed state of CodeRepository.
type CodeRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CodeRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CodeRepository is the Schema for the CodeRepositorys API. Provides a SageMaker Code Repository resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CodeRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gitConfig) || (has(self.initProvider) && has(self.initProvider.gitConfig))",message="spec.forProvider.gitConfig is a required parameter"
	Spec   CodeRepositorySpec   `json:"spec"`
	Status CodeRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodeRepositoryList contains a list of CodeRepositorys
type CodeRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodeRepository `json:"items"`
}

// Repository type metadata.
var (
	CodeRepository_Kind             = "CodeRepository"
	CodeRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CodeRepository_Kind}.String()
	CodeRepository_KindAPIVersion   = CodeRepository_Kind + "." + CRDGroupVersion.String()
	CodeRepository_GroupVersionKind = CRDGroupVersion.WithKind(CodeRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&CodeRepository{}, &CodeRepositoryList{})
}
