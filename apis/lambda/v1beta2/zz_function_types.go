// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeadLetterConfigInitParameters struct {

	// ARN of an SNS topic or SQS queue to notify when an invocation fails.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	TargetArn *string `json:"targetArn,omitempty" tf:"target_arn,omitempty"`

	// Reference to a Queue in sqs to populate targetArn.
	// +kubebuilder:validation:Optional
	TargetArnRef *v1.Reference `json:"targetArnRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate targetArn.
	// +kubebuilder:validation:Optional
	TargetArnSelector *v1.Selector `json:"targetArnSelector,omitempty" tf:"-"`
}

type DeadLetterConfigObservation struct {

	// ARN of an SNS topic or SQS queue to notify when an invocation fails.
	TargetArn *string `json:"targetArn,omitempty" tf:"target_arn,omitempty"`
}

type DeadLetterConfigParameters struct {

	// ARN of an SNS topic or SQS queue to notify when an invocation fails.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	TargetArn *string `json:"targetArn,omitempty" tf:"target_arn,omitempty"`

	// Reference to a Queue in sqs to populate targetArn.
	// +kubebuilder:validation:Optional
	TargetArnRef *v1.Reference `json:"targetArnRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate targetArn.
	// +kubebuilder:validation:Optional
	TargetArnSelector *v1.Selector `json:"targetArnSelector,omitempty" tf:"-"`
}

type EnvironmentInitParameters struct {

	// Map of environment variables available to your Lambda function during execution.
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type EnvironmentObservation struct {

	// Map of environment variables available to your Lambda function during execution.
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type EnvironmentParameters struct {

	// Map of environment variables available to your Lambda function during execution.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

type EphemeralStorageInitParameters struct {

	// Amount of ephemeral storage (/tmp) in MB. Valid between 512 MB and 10,240 MB (10 GB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type EphemeralStorageObservation struct {

	// Amount of ephemeral storage (/tmp) in MB. Valid between 512 MB and 10,240 MB (10 GB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type EphemeralStorageParameters struct {

	// Amount of ephemeral storage (/tmp) in MB. Valid between 512 MB and 10,240 MB (10 GB).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type FileSystemConfigInitParameters struct {

	// ARN of the Amazon EFS Access Point.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/efs/v1beta2.AccessPoint
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Reference to a AccessPoint in efs to populate arn.
	// +kubebuilder:validation:Optional
	ArnRef *v1.Reference `json:"arnRef,omitempty" tf:"-"`

	// Selector for a AccessPoint in efs to populate arn.
	// +kubebuilder:validation:Optional
	ArnSelector *v1.Selector `json:"arnSelector,omitempty" tf:"-"`

	// Path where the function can access the file system. Must start with /mnt/.
	LocalMountPath *string `json:"localMountPath,omitempty" tf:"local_mount_path,omitempty"`
}

type FileSystemConfigObservation struct {

	// ARN of the Amazon EFS Access Point.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Path where the function can access the file system. Must start with /mnt/.
	LocalMountPath *string `json:"localMountPath,omitempty" tf:"local_mount_path,omitempty"`
}

type FileSystemConfigParameters struct {

	// ARN of the Amazon EFS Access Point.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/efs/v1beta2.AccessPoint
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Reference to a AccessPoint in efs to populate arn.
	// +kubebuilder:validation:Optional
	ArnRef *v1.Reference `json:"arnRef,omitempty" tf:"-"`

	// Selector for a AccessPoint in efs to populate arn.
	// +kubebuilder:validation:Optional
	ArnSelector *v1.Selector `json:"arnSelector,omitempty" tf:"-"`

	// Path where the function can access the file system. Must start with /mnt/.
	// +kubebuilder:validation:Optional
	LocalMountPath *string `json:"localMountPath" tf:"local_mount_path,omitempty"`
}

type FunctionInitParameters struct {

	// Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stays the same.
	Architectures []*string `json:"architectures,omitempty" tf:"architectures,omitempty"`

	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn *string `json:"codeSigningConfigArn,omitempty" tf:"code_signing_config_arn,omitempty"`

	// Configuration block for dead letter queue. See below.
	DeadLetterConfig *DeadLetterConfigInitParameters `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// Description of what your Lambda Function does.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block for environment variables. See below.
	Environment *EnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// Amount of ephemeral storage (/tmp) to allocate for the Lambda Function. See below.
	EphemeralStorage *EphemeralStorageInitParameters `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// Configuration block for EFS file system. See below.
	FileSystemConfig *FileSystemConfigInitParameters `json:"fileSystemConfig,omitempty" tf:"file_system_config,omitempty"`

	// Function entry point in your code. Required if package_type is Zip.
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	// Container image configuration values. See below.
	ImageConfig *ImageConfigInitParameters `json:"imageConfig,omitempty" tf:"image_config,omitempty"`

	// ECR image URI containing the function's deployment package. Conflicts with filename and s3_bucket. One of filename, image_uri, or s3_bucket must be specified.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`

	// Reference to a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	KMSKeyArnRef *v1.Reference `json:"kmsKeyArnRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	KMSKeyArnSelector *v1.Selector `json:"kmsKeyArnSelector,omitempty" tf:"-"`

	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.LayerVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	Layers []*string `json:"layers,omitempty" tf:"layers,omitempty"`

	// References to LayerVersion in lambda to populate layers.
	// +kubebuilder:validation:Optional
	LayersRefs []v1.Reference `json:"layersRefs,omitempty" tf:"-"`

	// Selector for a list of LayerVersion in lambda to populate layers.
	// +kubebuilder:validation:Optional
	LayersSelector *v1.Selector `json:"layersSelector,omitempty" tf:"-"`

	// Configuration block for advanced logging settings. See below.
	LoggingConfig *LoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize *float64 `json:"memorySize,omitempty" tf:"memory_size,omitempty"`

	// Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// Whether to publish creation/change as new Lambda Function Version. Defaults to false.
	Publish *bool `json:"publish,omitempty" tf:"publish,omitempty"`

	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is false.
	ReplaceSecurityGroupsOnDestroy *bool `json:"replaceSecurityGroupsOnDestroy,omitempty" tf:"replace_security_groups_on_destroy,omitempty"`

	// References to SecurityGroup in ec2 to populate replacementSecurityGroupIds.
	// +kubebuilder:validation:Optional
	ReplacementSecurityGroupIDRefs []v1.Reference `json:"replacementSecurityGroupIdRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in ec2 to populate replacementSecurityGroupIds.
	// +kubebuilder:validation:Optional
	ReplacementSecurityGroupIDSelector *v1.Selector `json:"replacementSecurityGroupIdSelector,omitempty" tf:"-"`

	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if replace_security_groups_on_destroy is true.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=ReplacementSecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=ReplacementSecurityGroupIDSelector
	// +listType=set
	ReplacementSecurityGroupIds []*string `json:"replacementSecurityGroupIds,omitempty" tf:"replacement_security_group_ids,omitempty"`

	// Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.
	ReservedConcurrentExecutions *float64 `json:"reservedConcurrentExecutions,omitempty" tf:"reserved_concurrent_executions,omitempty"`

	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Reference to a Role in iam to populate role.
	// +kubebuilder:validation:Optional
	RoleRef *v1.Reference `json:"roleRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate role.
	// +kubebuilder:validation:Optional
	RoleSelector *v1.Selector `json:"roleSelector,omitempty" tf:"-"`

	// Identifier of the function's runtime. Required if package_type is Zip. See Runtimes for valid values.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// S3 bucket location containing the function's deployment package. Conflicts with filename and image_uri. One of filename, image_uri, or s3_bucket must be specified.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta2.Bucket
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	// Reference to a Bucket in s3 to populate s3Bucket.
	// +kubebuilder:validation:Optional
	S3BucketRef *v1.Reference `json:"s3BucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate s3Bucket.
	// +kubebuilder:validation:Optional
	S3BucketSelector *v1.Selector `json:"s3BucketSelector,omitempty" tf:"-"`

	// S3 key of an object containing the function's deployment package. Required if s3_bucket is set.
	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`

	// Object version containing the function's deployment package. Conflicts with filename and image_uri.
	S3ObjectVersion *string `json:"s3ObjectVersion,omitempty" tf:"s3_object_version,omitempty"`

	// Whether to retain the old version of a previously deployed Lambda Layer. Default is false.
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// Configuration block for snap start settings. See below.
	SnapStart *SnapStartInitParameters `json:"snapStart,omitempty" tf:"snap_start,omitempty"`

	// Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.
	SourceCodeHash *string `json:"sourceCodeHash,omitempty" tf:"source_code_hash,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Configuration block for X-Ray tracing. See below.
	TracingConfig *TracingConfigInitParameters `json:"tracingConfig,omitempty" tf:"tracing_config,omitempty"`

	// Configuration block for VPC. See below.
	VPCConfig *VPCConfigInitParameters `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`
}

type FunctionObservation struct {

	// Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stays the same.
	Architectures []*string `json:"architectures,omitempty" tf:"architectures,omitempty"`

	// ARN identifying your Lambda Function.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Base64-encoded representation of raw SHA-256 sum of the zip file.
	CodeSha256 *string `json:"codeSha256,omitempty" tf:"code_sha256,omitempty"`

	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn *string `json:"codeSigningConfigArn,omitempty" tf:"code_signing_config_arn,omitempty"`

	// Configuration block for dead letter queue. See below.
	DeadLetterConfig *DeadLetterConfigObservation `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// Description of what your Lambda Function does.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block for environment variables. See below.
	Environment *EnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// Amount of ephemeral storage (/tmp) to allocate for the Lambda Function. See below.
	EphemeralStorage *EphemeralStorageObservation `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// Configuration block for EFS file system. See below.
	FileSystemConfig *FileSystemConfigObservation `json:"fileSystemConfig,omitempty" tf:"file_system_config,omitempty"`

	// Function entry point in your code. Required if package_type is Zip.
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Container image configuration values. See below.
	ImageConfig *ImageConfigObservation `json:"imageConfig,omitempty" tf:"image_config,omitempty"`

	// ECR image URI containing the function's deployment package. Conflicts with filename and s3_bucket. One of filename, image_uri, or s3_bucket must be specified.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
	InvokeArn *string `json:"invokeArn,omitempty" tf:"invoke_arn,omitempty"`

	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`

	// Date this resource was last modified.
	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers []*string `json:"layers,omitempty" tf:"layers,omitempty"`

	// Configuration block for advanced logging settings. See below.
	LoggingConfig *LoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize *float64 `json:"memorySize,omitempty" tf:"memory_size,omitempty"`

	// Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// Whether to publish creation/change as new Lambda Function Version. Defaults to false.
	Publish *bool `json:"publish,omitempty" tf:"publish,omitempty"`

	// ARN identifying your Lambda Function Version (if versioning is enabled via publish = true).
	QualifiedArn *string `json:"qualifiedArn,omitempty" tf:"qualified_arn,omitempty"`

	// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
	QualifiedInvokeArn *string `json:"qualifiedInvokeArn,omitempty" tf:"qualified_invoke_arn,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is false.
	ReplaceSecurityGroupsOnDestroy *bool `json:"replaceSecurityGroupsOnDestroy,omitempty" tf:"replace_security_groups_on_destroy,omitempty"`

	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if replace_security_groups_on_destroy is true.
	// +listType=set
	ReplacementSecurityGroupIds []*string `json:"replacementSecurityGroupIds,omitempty" tf:"replacement_security_group_ids,omitempty"`

	// Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.
	ReservedConcurrentExecutions *float64 `json:"reservedConcurrentExecutions,omitempty" tf:"reserved_concurrent_executions,omitempty"`

	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Identifier of the function's runtime. Required if package_type is Zip. See Runtimes for valid values.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// S3 bucket location containing the function's deployment package. Conflicts with filename and image_uri. One of filename, image_uri, or s3_bucket must be specified.
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	// S3 key of an object containing the function's deployment package. Required if s3_bucket is set.
	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`

	// Object version containing the function's deployment package. Conflicts with filename and image_uri.
	S3ObjectVersion *string `json:"s3ObjectVersion,omitempty" tf:"s3_object_version,omitempty"`

	// ARN of the signing job.
	SigningJobArn *string `json:"signingJobArn,omitempty" tf:"signing_job_arn,omitempty"`

	// ARN of the signing profile version.
	SigningProfileVersionArn *string `json:"signingProfileVersionArn,omitempty" tf:"signing_profile_version_arn,omitempty"`

	// Whether to retain the old version of a previously deployed Lambda Layer. Default is false.
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// Configuration block for snap start settings. See below.
	SnapStart *SnapStartObservation `json:"snapStart,omitempty" tf:"snap_start,omitempty"`

	// Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.
	SourceCodeHash *string `json:"sourceCodeHash,omitempty" tf:"source_code_hash,omitempty"`

	// Size in bytes of the function .zip file.
	SourceCodeSize *float64 `json:"sourceCodeSize,omitempty" tf:"source_code_size,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Configuration block for X-Ray tracing. See below.
	TracingConfig *TracingConfigObservation `json:"tracingConfig,omitempty" tf:"tracing_config,omitempty"`

	// Configuration block for VPC. See below.
	VPCConfig *VPCConfigObservation `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`

	// Latest published version of your Lambda Function.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type FunctionParameters struct {

	// Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stays the same.
	// +kubebuilder:validation:Optional
	Architectures []*string `json:"architectures,omitempty" tf:"architectures,omitempty"`

	// ARN of a code-signing configuration to enable code signing for this function.
	// +kubebuilder:validation:Optional
	CodeSigningConfigArn *string `json:"codeSigningConfigArn,omitempty" tf:"code_signing_config_arn,omitempty"`

	// Configuration block for dead letter queue. See below.
	// +kubebuilder:validation:Optional
	DeadLetterConfig *DeadLetterConfigParameters `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// Description of what your Lambda Function does.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block for environment variables. See below.
	// +kubebuilder:validation:Optional
	Environment *EnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// Amount of ephemeral storage (/tmp) to allocate for the Lambda Function. See below.
	// +kubebuilder:validation:Optional
	EphemeralStorage *EphemeralStorageParameters `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// Configuration block for EFS file system. See below.
	// +kubebuilder:validation:Optional
	FileSystemConfig *FileSystemConfigParameters `json:"fileSystemConfig,omitempty" tf:"file_system_config,omitempty"`

	// Function entry point in your code. Required if package_type is Zip.
	// +kubebuilder:validation:Optional
	Handler *string `json:"handler,omitempty" tf:"handler,omitempty"`

	// Container image configuration values. See below.
	// +kubebuilder:validation:Optional
	ImageConfig *ImageConfigParameters `json:"imageConfig,omitempty" tf:"image_config,omitempty"`

	// ECR image URI containing the function's deployment package. Conflicts with filename and s3_bucket. One of filename, image_uri, or s3_bucket must be specified.
	// +kubebuilder:validation:Optional
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`

	// Reference to a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	KMSKeyArnRef *v1.Reference `json:"kmsKeyArnRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsKeyArn.
	// +kubebuilder:validation:Optional
	KMSKeyArnSelector *v1.Selector `json:"kmsKeyArnSelector,omitempty" tf:"-"`

	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.LayerVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	Layers []*string `json:"layers,omitempty" tf:"layers,omitempty"`

	// References to LayerVersion in lambda to populate layers.
	// +kubebuilder:validation:Optional
	LayersRefs []v1.Reference `json:"layersRefs,omitempty" tf:"-"`

	// Selector for a list of LayerVersion in lambda to populate layers.
	// +kubebuilder:validation:Optional
	LayersSelector *v1.Selector `json:"layersSelector,omitempty" tf:"-"`

	// Configuration block for advanced logging settings. See below.
	// +kubebuilder:validation:Optional
	LoggingConfig *LoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	// +kubebuilder:validation:Optional
	MemorySize *float64 `json:"memorySize,omitempty" tf:"memory_size,omitempty"`

	// Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
	// +kubebuilder:validation:Optional
	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// Whether to publish creation/change as new Lambda Function Version. Defaults to false.
	// +kubebuilder:validation:Optional
	Publish *bool `json:"publish,omitempty" tf:"publish,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is false.
	// +kubebuilder:validation:Optional
	ReplaceSecurityGroupsOnDestroy *bool `json:"replaceSecurityGroupsOnDestroy,omitempty" tf:"replace_security_groups_on_destroy,omitempty"`

	// References to SecurityGroup in ec2 to populate replacementSecurityGroupIds.
	// +kubebuilder:validation:Optional
	ReplacementSecurityGroupIDRefs []v1.Reference `json:"replacementSecurityGroupIdRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in ec2 to populate replacementSecurityGroupIds.
	// +kubebuilder:validation:Optional
	ReplacementSecurityGroupIDSelector *v1.Selector `json:"replacementSecurityGroupIdSelector,omitempty" tf:"-"`

	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if replace_security_groups_on_destroy is true.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=ReplacementSecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=ReplacementSecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	// +listType=set
	ReplacementSecurityGroupIds []*string `json:"replacementSecurityGroupIds,omitempty" tf:"replacement_security_group_ids,omitempty"`

	// Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.
	// +kubebuilder:validation:Optional
	ReservedConcurrentExecutions *float64 `json:"reservedConcurrentExecutions,omitempty" tf:"reserved_concurrent_executions,omitempty"`

	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Reference to a Role in iam to populate role.
	// +kubebuilder:validation:Optional
	RoleRef *v1.Reference `json:"roleRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate role.
	// +kubebuilder:validation:Optional
	RoleSelector *v1.Selector `json:"roleSelector,omitempty" tf:"-"`

	// Identifier of the function's runtime. Required if package_type is Zip. See Runtimes for valid values.
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// S3 bucket location containing the function's deployment package. Conflicts with filename and image_uri. One of filename, image_uri, or s3_bucket must be specified.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta2.Bucket
	// +kubebuilder:validation:Optional
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	// Reference to a Bucket in s3 to populate s3Bucket.
	// +kubebuilder:validation:Optional
	S3BucketRef *v1.Reference `json:"s3BucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate s3Bucket.
	// +kubebuilder:validation:Optional
	S3BucketSelector *v1.Selector `json:"s3BucketSelector,omitempty" tf:"-"`

	// S3 key of an object containing the function's deployment package. Required if s3_bucket is set.
	// +kubebuilder:validation:Optional
	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`

	// Object version containing the function's deployment package. Conflicts with filename and image_uri.
	// +kubebuilder:validation:Optional
	S3ObjectVersion *string `json:"s3ObjectVersion,omitempty" tf:"s3_object_version,omitempty"`

	// Whether to retain the old version of a previously deployed Lambda Layer. Default is false.
	// +kubebuilder:validation:Optional
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// Configuration block for snap start settings. See below.
	// +kubebuilder:validation:Optional
	SnapStart *SnapStartParameters `json:"snapStart,omitempty" tf:"snap_start,omitempty"`

	// Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.
	// +kubebuilder:validation:Optional
	SourceCodeHash *string `json:"sourceCodeHash,omitempty" tf:"source_code_hash,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Configuration block for X-Ray tracing. See below.
	// +kubebuilder:validation:Optional
	TracingConfig *TracingConfigParameters `json:"tracingConfig,omitempty" tf:"tracing_config,omitempty"`

	// Configuration block for VPC. See below.
	// +kubebuilder:validation:Optional
	VPCConfig *VPCConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`
}

type ImageConfigInitParameters struct {

	// Parameters to pass to the container image.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// Entry point to your application.
	EntryPoint []*string `json:"entryPoint,omitempty" tf:"entry_point,omitempty"`

	// Working directory for the container image.
	WorkingDirectory *string `json:"workingDirectory,omitempty" tf:"working_directory,omitempty"`
}

type ImageConfigObservation struct {

	// Parameters to pass to the container image.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// Entry point to your application.
	EntryPoint []*string `json:"entryPoint,omitempty" tf:"entry_point,omitempty"`

	// Working directory for the container image.
	WorkingDirectory *string `json:"workingDirectory,omitempty" tf:"working_directory,omitempty"`
}

type ImageConfigParameters struct {

	// Parameters to pass to the container image.
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// Entry point to your application.
	// +kubebuilder:validation:Optional
	EntryPoint []*string `json:"entryPoint,omitempty" tf:"entry_point,omitempty"`

	// Working directory for the container image.
	// +kubebuilder:validation:Optional
	WorkingDirectory *string `json:"workingDirectory,omitempty" tf:"working_directory,omitempty"`
}

type LoggingConfigInitParameters struct {

	// Detail level of application logs. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL.
	ApplicationLogLevel *string `json:"applicationLogLevel,omitempty" tf:"application_log_level,omitempty"`

	// Log format. Valid values: Text, JSON.
	LogFormat *string `json:"logFormat,omitempty" tf:"log_format,omitempty"`

	// CloudWatch log group where logs are sent.
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`

	// Detail level of Lambda platform logs. Valid values: DEBUG, INFO, WARN.
	SystemLogLevel *string `json:"systemLogLevel,omitempty" tf:"system_log_level,omitempty"`
}

type LoggingConfigObservation struct {

	// Detail level of application logs. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL.
	ApplicationLogLevel *string `json:"applicationLogLevel,omitempty" tf:"application_log_level,omitempty"`

	// Log format. Valid values: Text, JSON.
	LogFormat *string `json:"logFormat,omitempty" tf:"log_format,omitempty"`

	// CloudWatch log group where logs are sent.
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`

	// Detail level of Lambda platform logs. Valid values: DEBUG, INFO, WARN.
	SystemLogLevel *string `json:"systemLogLevel,omitempty" tf:"system_log_level,omitempty"`
}

type LoggingConfigParameters struct {

	// Detail level of application logs. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL.
	// +kubebuilder:validation:Optional
	ApplicationLogLevel *string `json:"applicationLogLevel,omitempty" tf:"application_log_level,omitempty"`

	// Log format. Valid values: Text, JSON.
	// +kubebuilder:validation:Optional
	LogFormat *string `json:"logFormat" tf:"log_format,omitempty"`

	// CloudWatch log group where logs are sent.
	// +kubebuilder:validation:Optional
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`

	// Detail level of Lambda platform logs. Valid values: DEBUG, INFO, WARN.
	// +kubebuilder:validation:Optional
	SystemLogLevel *string `json:"systemLogLevel,omitempty" tf:"system_log_level,omitempty"`
}

type SnapStartInitParameters struct {

	// When to apply snap start optimization. Valid value: PublishedVersions.
	ApplyOn *string `json:"applyOn,omitempty" tf:"apply_on,omitempty"`
}

type SnapStartObservation struct {

	// When to apply snap start optimization. Valid value: PublishedVersions.
	ApplyOn *string `json:"applyOn,omitempty" tf:"apply_on,omitempty"`

	// Optimization status of the snap start configuration. Valid values are On and Off.
	OptimizationStatus *string `json:"optimizationStatus,omitempty" tf:"optimization_status,omitempty"`
}

type SnapStartParameters struct {

	// When to apply snap start optimization. Valid value: PublishedVersions.
	// +kubebuilder:validation:Optional
	ApplyOn *string `json:"applyOn" tf:"apply_on,omitempty"`
}

type TracingConfigInitParameters struct {

	// X-Ray tracing mode. Valid values: Active, PassThrough.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type TracingConfigObservation struct {

	// X-Ray tracing mode. Valid values: Active, PassThrough.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type TracingConfigParameters struct {

	// X-Ray tracing mode. Valid values: Active, PassThrough.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`
}

type VPCConfigInitParameters struct {

	// Whether to allow outbound IPv6 traffic on VPC functions connected to dual-stack subnets. Default: false.
	IPv6AllowedForDualStack *bool `json:"ipv6AllowedForDualStack,omitempty" tf:"ipv6_allowed_for_dual_stack,omitempty"`

	// References to SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRefs []v1.Reference `json:"securityGroupIdRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// List of security group IDs associated with the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIDRefs []v1.Reference `json:"subnetIdRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// List of subnet IDs associated with the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type VPCConfigObservation struct {

	// Whether to allow outbound IPv6 traffic on VPC functions connected to dual-stack subnets. Default: false.
	IPv6AllowedForDualStack *bool `json:"ipv6AllowedForDualStack,omitempty" tf:"ipv6_allowed_for_dual_stack,omitempty"`

	// List of security group IDs associated with the Lambda function.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// List of subnet IDs associated with the Lambda function.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// ID of the VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type VPCConfigParameters struct {

	// Whether to allow outbound IPv6 traffic on VPC functions connected to dual-stack subnets. Default: false.
	// +kubebuilder:validation:Optional
	IPv6AllowedForDualStack *bool `json:"ipv6AllowedForDualStack,omitempty" tf:"ipv6_allowed_for_dual_stack,omitempty"`

	// References to SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRefs []v1.Reference `json:"securityGroupIdRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// List of security group IDs associated with the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIDRefs []v1.Reference `json:"subnetIdRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// List of subnet IDs associated with the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

// FunctionSpec defines the desired state of Function
type FunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FunctionInitParameters `json:"initProvider,omitempty"`
}

// FunctionStatus defines the observed state of Function.
type FunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// Function is the Schema for the Functions API. Manages an AWS Lambda Function.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Function struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionSpec   `json:"spec"`
	Status            FunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionList contains a list of Functions
type FunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Function `json:"items"`
}

// Repository type metadata.
var (
	Function_Kind             = "Function"
	Function_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Function_Kind}.String()
	Function_KindAPIVersion   = Function_Kind + "." + CRDGroupVersion.String()
	Function_GroupVersionKind = CRDGroupVersion.WithKind(Function_Kind)
)

func init() {
	SchemeBuilder.Register(&Function{}, &FunctionList{})
}
