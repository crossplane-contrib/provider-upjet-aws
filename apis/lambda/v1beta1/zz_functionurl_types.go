// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CorsInitParameters struct {

	// Whether to allow cookies or other credentials in requests to the function URL. The default is false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// The HTTP headers that origins can include in requests to the function URL. For example: ["date", "keep-alive", "x-custom-header"].
	// +listType=set
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// The HTTP methods that are allowed when calling the function URL. For example: ["GET", "POST", "DELETE"], or the wildcard character (["*"]).
	// +listType=set
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character ("*")), separated by a comma. For example: ["https://www.example.com", "http://localhost:60905"].
	// +listType=set
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// The HTTP headers in your function response that you want to expose to origins that call the function URL.
	// +listType=set
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to 0, which means that the browser doesn't cache results. The maximum value is 86400.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type CorsObservation struct {

	// Whether to allow cookies or other credentials in requests to the function URL. The default is false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// The HTTP headers that origins can include in requests to the function URL. For example: ["date", "keep-alive", "x-custom-header"].
	// +listType=set
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// The HTTP methods that are allowed when calling the function URL. For example: ["GET", "POST", "DELETE"], or the wildcard character (["*"]).
	// +listType=set
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character ("*")), separated by a comma. For example: ["https://www.example.com", "http://localhost:60905"].
	// +listType=set
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// The HTTP headers in your function response that you want to expose to origins that call the function URL.
	// +listType=set
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to 0, which means that the browser doesn't cache results. The maximum value is 86400.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type CorsParameters struct {

	// Whether to allow cookies or other credentials in requests to the function URL. The default is false.
	// +kubebuilder:validation:Optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// The HTTP headers that origins can include in requests to the function URL. For example: ["date", "keep-alive", "x-custom-header"].
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// The HTTP methods that are allowed when calling the function URL. For example: ["GET", "POST", "DELETE"], or the wildcard character (["*"]).
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character ("*")), separated by a comma. For example: ["https://www.example.com", "http://localhost:60905"].
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// The HTTP headers in your function response that you want to expose to origins that call the function URL.
	// +kubebuilder:validation:Optional
	// +listType=set
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to 0, which means that the browser doesn't cache results. The maximum value is 86400.
	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type FunctionURLInitParameters struct {

	// The type of authentication that the function URL uses. Set to "AWS_IAM" to restrict access to authenticated IAM users only. Set to "NONE" to bypass IAM authentication and create a public endpoint. See the AWS documentation for more details.
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type,omitempty"`

	// The cross-origin resource sharing (CORS) settings for the function URL. Documented below.
	Cors []CorsInitParameters `json:"cors,omitempty" tf:"cors,omitempty"`

	// The name (or ARN) of the Lambda function.
	// +crossplane:generate:reference:type=Function
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// Determines how the Lambda function responds to an invocation. Valid values are BUFFERED (default) and RESPONSE_STREAM. See more in Configuring a Lambda function to stream responses.
	InvokeMode *string `json:"invokeMode,omitempty" tf:"invoke_mode,omitempty"`

	// The alias name or "$LATEST".
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`
}

type FunctionURLObservation struct {

	// The type of authentication that the function URL uses. Set to "AWS_IAM" to restrict access to authenticated IAM users only. Set to "NONE" to bypass IAM authentication and create a public endpoint. See the AWS documentation for more details.
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type,omitempty"`

	// The cross-origin resource sharing (CORS) settings for the function URL. Documented below.
	Cors []CorsObservation `json:"cors,omitempty" tf:"cors,omitempty"`

	// The Amazon Resource Name (ARN) of the function.
	FunctionArn *string `json:"functionArn,omitempty" tf:"function_arn,omitempty"`

	// The name (or ARN) of the Lambda function.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// The HTTP URL endpoint for the function in the format https://<url_id>.lambda-url.<region>.on.aws/.
	FunctionURL *string `json:"functionUrl,omitempty" tf:"function_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines how the Lambda function responds to an invocation. Valid values are BUFFERED (default) and RESPONSE_STREAM. See more in Configuring a Lambda function to stream responses.
	InvokeMode *string `json:"invokeMode,omitempty" tf:"invoke_mode,omitempty"`

	// The alias name or "$LATEST".
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// A generated ID for the endpoint.
	URLID *string `json:"urlId,omitempty" tf:"url_id,omitempty"`
}

type FunctionURLParameters struct {

	// The type of authentication that the function URL uses. Set to "AWS_IAM" to restrict access to authenticated IAM users only. Set to "NONE" to bypass IAM authentication and create a public endpoint. See the AWS documentation for more details.
	// +kubebuilder:validation:Optional
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type,omitempty"`

	// The cross-origin resource sharing (CORS) settings for the function URL. Documented below.
	// +kubebuilder:validation:Optional
	Cors []CorsParameters `json:"cors,omitempty" tf:"cors,omitempty"`

	// The name (or ARN) of the Lambda function.
	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// Determines how the Lambda function responds to an invocation. Valid values are BUFFERED (default) and RESPONSE_STREAM. See more in Configuring a Lambda function to stream responses.
	// +kubebuilder:validation:Optional
	InvokeMode *string `json:"invokeMode,omitempty" tf:"invoke_mode,omitempty"`

	// The alias name or "$LATEST".
	// +kubebuilder:validation:Optional
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// FunctionURLSpec defines the desired state of FunctionURL
type FunctionURLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionURLParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FunctionURLInitParameters `json:"initProvider,omitempty"`
}

// FunctionURLStatus defines the observed state of FunctionURL.
type FunctionURLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionURLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FunctionURL is the Schema for the FunctionURLs API. Provides a Lambda function URL resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type FunctionURL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizationType) || (has(self.initProvider) && has(self.initProvider.authorizationType))",message="spec.forProvider.authorizationType is a required parameter"
	Spec   FunctionURLSpec   `json:"spec"`
	Status FunctionURLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionURLList contains a list of FunctionURLs
type FunctionURLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FunctionURL `json:"items"`
}

// Repository type metadata.
var (
	FunctionURL_Kind             = "FunctionURL"
	FunctionURL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FunctionURL_Kind}.String()
	FunctionURL_KindAPIVersion   = FunctionURL_Kind + "." + CRDGroupVersion.String()
	FunctionURL_GroupVersionKind = CRDGroupVersion.WithKind(FunctionURL_Kind)
)

func init() {
	SchemeBuilder.Register(&FunctionURL{}, &FunctionURLList{})
}
