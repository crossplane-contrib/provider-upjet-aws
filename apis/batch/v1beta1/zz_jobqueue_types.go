// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeEnvironmentOrderInitParameters struct {

	// The Amazon Resource Name (ARN) of the compute environment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/batch/v1beta1.ComputeEnvironment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	ComputeEnvironment *string `json:"computeEnvironment,omitempty" tf:"compute_environment,omitempty"`

	// Reference to a ComputeEnvironment in batch to populate computeEnvironment.
	// +kubebuilder:validation:Optional
	ComputeEnvironmentRef *v1.Reference `json:"computeEnvironmentRef,omitempty" tf:"-"`

	// Selector for a ComputeEnvironment in batch to populate computeEnvironment.
	// +kubebuilder:validation:Optional
	ComputeEnvironmentSelector *v1.Selector `json:"computeEnvironmentSelector,omitempty" tf:"-"`

	// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type ComputeEnvironmentOrderObservation struct {

	// The Amazon Resource Name (ARN) of the compute environment.
	ComputeEnvironment *string `json:"computeEnvironment,omitempty" tf:"compute_environment,omitempty"`

	// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type ComputeEnvironmentOrderParameters struct {

	// The Amazon Resource Name (ARN) of the compute environment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/batch/v1beta1.ComputeEnvironment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	ComputeEnvironment *string `json:"computeEnvironment,omitempty" tf:"compute_environment,omitempty"`

	// Reference to a ComputeEnvironment in batch to populate computeEnvironment.
	// +kubebuilder:validation:Optional
	ComputeEnvironmentRef *v1.Reference `json:"computeEnvironmentRef,omitempty" tf:"-"`

	// Selector for a ComputeEnvironment in batch to populate computeEnvironment.
	// +kubebuilder:validation:Optional
	ComputeEnvironmentSelector *v1.Selector `json:"computeEnvironmentSelector,omitempty" tf:"-"`

	// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order" tf:"order,omitempty"`
}

type JobQueueInitParameters struct {

	// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
	ComputeEnvironmentOrder []ComputeEnvironmentOrderInitParameters `json:"computeEnvironmentOrder,omitempty" tf:"compute_environment_order,omitempty"`

	// (Deprecated)  This parameter is deprecated, please use compute_environment_order instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter compute_environments will always be used over compute_environment_order. Please adjust your HCL accordingly.
	ComputeEnvironments []*string `json:"computeEnvironments,omitempty" tf:"compute_environments,omitempty"`

	// The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
	JobStateTimeLimitAction []JobStateTimeLimitActionInitParameters `json:"jobStateTimeLimitAction,omitempty" tf:"job_state_time_limit_action,omitempty"`

	// The priority of the job queue. Job queues with a higher priority
	// are evaluated first when associated with the same compute environment.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/batch/v1beta2.SchedulingPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	SchedulingPolicyArn *string `json:"schedulingPolicyArn,omitempty" tf:"scheduling_policy_arn,omitempty"`

	// Reference to a SchedulingPolicy in batch to populate schedulingPolicyArn.
	// +kubebuilder:validation:Optional
	SchedulingPolicyArnRef *v1.Reference `json:"schedulingPolicyArnRef,omitempty" tf:"-"`

	// Selector for a SchedulingPolicy in batch to populate schedulingPolicyArn.
	// +kubebuilder:validation:Optional
	SchedulingPolicyArnSelector *v1.Selector `json:"schedulingPolicyArnSelector,omitempty" tf:"-"`

	// The state of the job queue. Must be one of: ENABLED or DISABLED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type JobQueueObservation struct {

	// The Amazon Resource Name of the job queue.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
	ComputeEnvironmentOrder []ComputeEnvironmentOrderObservation `json:"computeEnvironmentOrder,omitempty" tf:"compute_environment_order,omitempty"`

	// (Deprecated)  This parameter is deprecated, please use compute_environment_order instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter compute_environments will always be used over compute_environment_order. Please adjust your HCL accordingly.
	ComputeEnvironments []*string `json:"computeEnvironments,omitempty" tf:"compute_environments,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
	JobStateTimeLimitAction []JobStateTimeLimitActionObservation `json:"jobStateTimeLimitAction,omitempty" tf:"job_state_time_limit_action,omitempty"`

	// The priority of the job queue. Job queues with a higher priority
	// are evaluated first when associated with the same compute environment.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.
	SchedulingPolicyArn *string `json:"schedulingPolicyArn,omitempty" tf:"scheduling_policy_arn,omitempty"`

	// The state of the job queue. Must be one of: ENABLED or DISABLED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type JobQueueParameters struct {

	// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
	// +kubebuilder:validation:Optional
	ComputeEnvironmentOrder []ComputeEnvironmentOrderParameters `json:"computeEnvironmentOrder,omitempty" tf:"compute_environment_order,omitempty"`

	// (Deprecated)  This parameter is deprecated, please use compute_environment_order instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter compute_environments will always be used over compute_environment_order. Please adjust your HCL accordingly.
	// +kubebuilder:validation:Optional
	ComputeEnvironments []*string `json:"computeEnvironments,omitempty" tf:"compute_environments,omitempty"`

	// The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
	// +kubebuilder:validation:Optional
	JobStateTimeLimitAction []JobStateTimeLimitActionParameters `json:"jobStateTimeLimitAction,omitempty" tf:"job_state_time_limit_action,omitempty"`

	// The priority of the job queue. Job queues with a higher priority
	// are evaluated first when associated with the same compute environment.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/batch/v1beta2.SchedulingPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	SchedulingPolicyArn *string `json:"schedulingPolicyArn,omitempty" tf:"scheduling_policy_arn,omitempty"`

	// Reference to a SchedulingPolicy in batch to populate schedulingPolicyArn.
	// +kubebuilder:validation:Optional
	SchedulingPolicyArnRef *v1.Reference `json:"schedulingPolicyArnRef,omitempty" tf:"-"`

	// Selector for a SchedulingPolicy in batch to populate schedulingPolicyArn.
	// +kubebuilder:validation:Optional
	SchedulingPolicyArnSelector *v1.Selector `json:"schedulingPolicyArnSelector,omitempty" tf:"-"`

	// The state of the job queue. Must be one of: ENABLED or DISABLED
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type JobStateTimeLimitActionInitParameters struct {

	// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include "CANCEL"
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between 600 & 86400
	MaxTimeSeconds *float64 `json:"maxTimeSeconds,omitempty" tf:"max_time_seconds,omitempty"`

	// The reason to log for the action being taken.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// The state of the job needed to trigger the action. Valid values include "RUNNABLE".
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type JobStateTimeLimitActionObservation struct {

	// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include "CANCEL"
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between 600 & 86400
	MaxTimeSeconds *float64 `json:"maxTimeSeconds,omitempty" tf:"max_time_seconds,omitempty"`

	// The reason to log for the action being taken.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// The state of the job needed to trigger the action. Valid values include "RUNNABLE".
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type JobStateTimeLimitActionParameters struct {

	// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include "CANCEL"
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between 600 & 86400
	// +kubebuilder:validation:Optional
	MaxTimeSeconds *float64 `json:"maxTimeSeconds" tf:"max_time_seconds,omitempty"`

	// The reason to log for the action being taken.
	// +kubebuilder:validation:Optional
	Reason *string `json:"reason" tf:"reason,omitempty"`

	// The state of the job needed to trigger the action. Valid values include "RUNNABLE".
	// +kubebuilder:validation:Optional
	State *string `json:"state" tf:"state,omitempty"`
}

// JobQueueSpec defines the desired state of JobQueue
type JobQueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     JobQueueParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider JobQueueInitParameters `json:"initProvider,omitempty"`
}

// JobQueueStatus defines the observed state of JobQueue.
type JobQueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        JobQueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// JobQueue is the Schema for the JobQueues API. Provides a Batch Job Queue resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type JobQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.priority) || (has(self.initProvider) && has(self.initProvider.priority))",message="spec.forProvider.priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.state) || (has(self.initProvider) && has(self.initProvider.state))",message="spec.forProvider.state is a required parameter"
	Spec   JobQueueSpec   `json:"spec"`
	Status JobQueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// JobQueueList contains a list of JobQueues
type JobQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []JobQueue `json:"items"`
}

// Repository type metadata.
var (
	JobQueue_Kind             = "JobQueue"
	JobQueue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: JobQueue_Kind}.String()
	JobQueue_KindAPIVersion   = JobQueue_Kind + "." + CRDGroupVersion.String()
	JobQueue_GroupVersionKind = CRDGroupVersion.WithKind(JobQueue_Kind)
)

func init() {
	SchemeBuilder.Register(&JobQueue{}, &JobQueueList{})
}
