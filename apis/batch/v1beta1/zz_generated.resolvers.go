// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ComputeEnvironment) ResolveReferences( // ResolveReferences of this ComputeEnvironment.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "InstanceProfile", "InstanceProfileList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ComputeResources.InstanceRole),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.ComputeResources.InstanceRoleRef,
				Selector:     mg.Spec.ForProvider.ComputeResources.InstanceRoleSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ComputeResources.InstanceRole")
		}
		mg.Spec.ForProvider.ComputeResources.InstanceRole = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ComputeResources.InstanceRoleRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "PlacementGroup", "PlacementGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ComputeResources.PlacementGroup),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ComputeResources.PlacementGroupRef,
				Selector:     mg.Spec.ForProvider.ComputeResources.PlacementGroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ComputeResources.PlacementGroup")
		}
		mg.Spec.ForProvider.ComputeResources.PlacementGroup = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ComputeResources.PlacementGroupRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ComputeResources.SecurityGroupIds),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.ComputeResources.SecurityGroupIdsRefs,
				Selector:      mg.Spec.ForProvider.ComputeResources.SecurityGroupIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ComputeResources.SecurityGroupIds")
		}
		mg.Spec.ForProvider.ComputeResources.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ComputeResources.SecurityGroupIdsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ComputeResources.Subnets),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.ComputeResources.SubnetsRefs,
				Selector:      mg.Spec.ForProvider.ComputeResources.SubnetsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ComputeResources.Subnets")
		}
		mg.Spec.ForProvider.ComputeResources.Subnets = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ComputeResources.SubnetsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRole),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.ServiceRoleRef,
			Selector:     mg.Spec.ForProvider.ServiceRoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRole")
	}
	mg.Spec.ForProvider.ServiceRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "InstanceProfile", "InstanceProfileList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ComputeResources.InstanceRole),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.ComputeResources.InstanceRoleRef,
				Selector:     mg.Spec.InitProvider.ComputeResources.InstanceRoleSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ComputeResources.InstanceRole")
		}
		mg.Spec.InitProvider.ComputeResources.InstanceRole = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ComputeResources.InstanceRoleRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "PlacementGroup", "PlacementGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ComputeResources.PlacementGroup),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ComputeResources.PlacementGroupRef,
				Selector:     mg.Spec.InitProvider.ComputeResources.PlacementGroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ComputeResources.PlacementGroup")
		}
		mg.Spec.InitProvider.ComputeResources.PlacementGroup = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ComputeResources.PlacementGroupRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ComputeResources.SecurityGroupIds),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.ComputeResources.SecurityGroupIdsRefs,
				Selector:      mg.Spec.InitProvider.ComputeResources.SecurityGroupIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ComputeResources.SecurityGroupIds")
		}
		mg.Spec.InitProvider.ComputeResources.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ComputeResources.SecurityGroupIdsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.ComputeResources != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ComputeResources.Subnets),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.ComputeResources.SubnetsRefs,
				Selector:      mg.Spec.InitProvider.ComputeResources.SubnetsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ComputeResources.Subnets")
		}
		mg.Spec.InitProvider.ComputeResources.Subnets = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ComputeResources.SubnetsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceRole),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.ServiceRoleRef,
			Selector:     mg.Spec.InitProvider.ServiceRoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceRole")
	}
	mg.Spec.InitProvider.ServiceRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this JobQueue.
func (mg *JobQueue) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ComputeEnvironmentOrder); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("batch.aws.upbound.io", "v1beta1", "ComputeEnvironment", "ComputeEnvironmentList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ComputeEnvironmentOrder[i3].ComputeEnvironment),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.ComputeEnvironmentOrder[i3].ComputeEnvironmentRef,
				Selector:     mg.Spec.ForProvider.ComputeEnvironmentOrder[i3].ComputeEnvironmentSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ComputeEnvironmentOrder[i3].ComputeEnvironment")
		}
		mg.Spec.ForProvider.ComputeEnvironmentOrder[i3].ComputeEnvironment = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ComputeEnvironmentOrder[i3].ComputeEnvironmentRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("batch.aws.upbound.io", "v1beta2", "SchedulingPolicy", "SchedulingPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SchedulingPolicyArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.SchedulingPolicyArnRef,
			Selector:     mg.Spec.ForProvider.SchedulingPolicyArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SchedulingPolicyArn")
	}
	mg.Spec.ForProvider.SchedulingPolicyArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SchedulingPolicyArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ComputeEnvironmentOrder); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("batch.aws.upbound.io", "v1beta1", "ComputeEnvironment", "ComputeEnvironmentList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ComputeEnvironmentOrder[i3].ComputeEnvironment),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.ComputeEnvironmentOrder[i3].ComputeEnvironmentRef,
				Selector:     mg.Spec.InitProvider.ComputeEnvironmentOrder[i3].ComputeEnvironmentSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ComputeEnvironmentOrder[i3].ComputeEnvironment")
		}
		mg.Spec.InitProvider.ComputeEnvironmentOrder[i3].ComputeEnvironment = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ComputeEnvironmentOrder[i3].ComputeEnvironmentRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("batch.aws.upbound.io", "v1beta2", "SchedulingPolicy", "SchedulingPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SchedulingPolicyArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.SchedulingPolicyArnRef,
			Selector:     mg.Spec.InitProvider.SchedulingPolicyArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SchedulingPolicyArn")
	}
	mg.Spec.InitProvider.SchedulingPolicyArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SchedulingPolicyArnRef = rsp.ResolvedReference

	return nil
}
