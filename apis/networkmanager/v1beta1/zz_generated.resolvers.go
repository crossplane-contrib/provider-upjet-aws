/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AttachmentAccepter) ResolveReferences( // ResolveReferences of this AttachmentAccepter.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AttachmentID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AttachmentIDRef,
			Selector:     mg.Spec.ForProvider.AttachmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AttachmentID")
	}
	mg.Spec.ForProvider.AttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AttachmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AttachmentType),
			Extract:      resource.ExtractParamPath("attachment_type", true),
			Reference:    mg.Spec.ForProvider.AttachmentTypeRef,
			Selector:     mg.Spec.ForProvider.AttachmentTypeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AttachmentType")
	}
	mg.Spec.ForProvider.AttachmentType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AttachmentTypeRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AttachmentID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.AttachmentIDRef,
			Selector:     mg.Spec.InitProvider.AttachmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AttachmentID")
	}
	mg.Spec.InitProvider.AttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AttachmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AttachmentType),
			Extract:      resource.ExtractParamPath("attachment_type", true),
			Reference:    mg.Spec.InitProvider.AttachmentTypeRef,
			Selector:     mg.Spec.InitProvider.AttachmentTypeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AttachmentType")
	}
	mg.Spec.InitProvider.AttachmentType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AttachmentTypeRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ConnectAttachment.
func (mg *ConnectAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "CoreNetwork", "CoreNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CoreNetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CoreNetworkIDRef,
			Selector:     mg.Spec.ForProvider.CoreNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CoreNetworkID")
	}
	mg.Spec.ForProvider.CoreNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CoreNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeLocation),
			Extract:      resource.ExtractParamPath("edge_location", true),
			Reference:    mg.Spec.ForProvider.EdgeLocationRef,
			Selector:     mg.Spec.ForProvider.EdgeLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeLocation")
	}
	mg.Spec.ForProvider.EdgeLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransportAttachmentID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TransportAttachmentIDRef,
			Selector:     mg.Spec.ForProvider.TransportAttachmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransportAttachmentID")
	}
	mg.Spec.ForProvider.TransportAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransportAttachmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "CoreNetwork", "CoreNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CoreNetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CoreNetworkIDRef,
			Selector:     mg.Spec.InitProvider.CoreNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CoreNetworkID")
	}
	mg.Spec.InitProvider.CoreNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CoreNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EdgeLocation),
			Extract:      resource.ExtractParamPath("edge_location", true),
			Reference:    mg.Spec.InitProvider.EdgeLocationRef,
			Selector:     mg.Spec.InitProvider.EdgeLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EdgeLocation")
	}
	mg.Spec.InitProvider.EdgeLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EdgeLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "VPCAttachment", "VPCAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TransportAttachmentID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TransportAttachmentIDRef,
			Selector:     mg.Spec.InitProvider.TransportAttachmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TransportAttachmentID")
	}
	mg.Spec.InitProvider.TransportAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TransportAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Connection.
func (mg *Connection) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectedDeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ConnectedDeviceIDRef,
			Selector:     mg.Spec.ForProvider.ConnectedDeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectedDeviceID")
	}
	mg.Spec.ForProvider.ConnectedDeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectedDeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DeviceIDRef,
			Selector:     mg.Spec.ForProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeviceID")
	}
	mg.Spec.ForProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectedDeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ConnectedDeviceIDRef,
			Selector:     mg.Spec.InitProvider.ConnectedDeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectedDeviceID")
	}
	mg.Spec.InitProvider.ConnectedDeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectedDeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DeviceIDRef,
			Selector:     mg.Spec.InitProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DeviceID")
	}
	mg.Spec.InitProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.InitProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalNetworkID")
	}
	mg.Spec.InitProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CoreNetwork.
func (mg *CoreNetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.InitProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalNetworkID")
	}
	mg.Spec.InitProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CustomerGatewayAssociation.
func (mg *CustomerGatewayAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "CustomerGateway", "CustomerGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomerGatewayArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.CustomerGatewayArnRef,
			Selector:     mg.Spec.ForProvider.CustomerGatewayArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomerGatewayArn")
	}
	mg.Spec.ForProvider.CustomerGatewayArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomerGatewayArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DeviceIDRef,
			Selector:     mg.Spec.ForProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeviceID")
	}
	mg.Spec.ForProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DeviceIDRef,
			Selector:     mg.Spec.InitProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DeviceID")
	}
	mg.Spec.InitProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DeviceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Device.
func (mg *Device) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Site", "SiteList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SiteID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SiteIDRef,
			Selector:     mg.Spec.ForProvider.SiteIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SiteID")
	}
	mg.Spec.ForProvider.SiteID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SiteIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.InitProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalNetworkID")
	}
	mg.Spec.InitProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Site", "SiteList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SiteID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SiteIDRef,
			Selector:     mg.Spec.InitProvider.SiteIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SiteID")
	}
	mg.Spec.InitProvider.SiteID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SiteIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Link.
func (mg *Link) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Site", "SiteList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SiteID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.SiteIDRef,
			Selector:     mg.Spec.ForProvider.SiteIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SiteID")
	}
	mg.Spec.ForProvider.SiteID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SiteIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.InitProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalNetworkID")
	}
	mg.Spec.InitProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Site", "SiteList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SiteID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.SiteIDRef,
			Selector:     mg.Spec.InitProvider.SiteIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SiteID")
	}
	mg.Spec.InitProvider.SiteID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SiteIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkAssociation.
func (mg *LinkAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeviceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DeviceIDRef,
			Selector:     mg.Spec.ForProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeviceID")
	}
	mg.Spec.ForProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Link", "LinkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.LinkIDRef,
			Selector:     mg.Spec.ForProvider.LinkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkID")
	}
	mg.Spec.ForProvider.LinkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Site.
func (mg *Site) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.InitProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalNetworkID")
	}
	mg.Spec.InitProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayConnectPeerAssociation.
func (mg *TransitGatewayConnectPeerAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DeviceIDRef,
			Selector:     mg.Spec.ForProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeviceID")
	}
	mg.Spec.ForProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeviceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "TransitGatewayConnectPeer", "TransitGatewayConnectPeerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayConnectPeerArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.TransitGatewayConnectPeerArnRef,
			Selector:     mg.Spec.ForProvider.TransitGatewayConnectPeerArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayConnectPeerArn")
	}
	mg.Spec.ForProvider.TransitGatewayConnectPeerArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayConnectPeerArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "Device", "DeviceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DeviceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DeviceIDRef,
			Selector:     mg.Spec.InitProvider.DeviceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DeviceID")
	}
	mg.Spec.InitProvider.DeviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DeviceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayRegistration.
func (mg *TransitGatewayRegistration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "GlobalNetwork", "GlobalNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkIDRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkID")
	}
	mg.Spec.ForProvider.GlobalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "TransitGateway", "TransitGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.TransitGatewayArnRef,
			Selector:     mg.Spec.ForProvider.TransitGatewayArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayArn")
	}
	mg.Spec.ForProvider.TransitGatewayArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCAttachment.
func (mg *VPCAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "CoreNetwork", "CoreNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CoreNetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CoreNetworkIDRef,
			Selector:     mg.Spec.ForProvider.CoreNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CoreNetworkID")
	}
	mg.Spec.ForProvider.CoreNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CoreNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SubnetArns),
			Extract:       common.ARNExtractor(),
			References:    mg.Spec.ForProvider.SubnetArnsRefs,
			Selector:      mg.Spec.ForProvider.SubnetArnsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetArns")
	}
	mg.Spec.ForProvider.SubnetArns = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SubnetArnsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPC", "VPCList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.VPCArnRef,
			Selector:     mg.Spec.ForProvider.VPCArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCArn")
	}
	mg.Spec.ForProvider.VPCArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkmanager.aws.upbound.io", "v1beta1", "CoreNetwork", "CoreNetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CoreNetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CoreNetworkIDRef,
			Selector:     mg.Spec.InitProvider.CoreNetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CoreNetworkID")
	}
	mg.Spec.InitProvider.CoreNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CoreNetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SubnetArns),
			Extract:       common.ARNExtractor(),
			References:    mg.Spec.InitProvider.SubnetArnsRefs,
			Selector:      mg.Spec.InitProvider.SubnetArnsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetArns")
	}
	mg.Spec.InitProvider.SubnetArns = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SubnetArnsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPC", "VPCList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.VPCArnRef,
			Selector:     mg.Spec.InitProvider.VPCArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCArn")
	}
	mg.Spec.InitProvider.VPCArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCArnRef = rsp.ResolvedReference

	return nil
}
