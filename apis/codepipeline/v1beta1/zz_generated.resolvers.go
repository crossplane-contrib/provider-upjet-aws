/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta1 "github.com/upbound/provider-aws/apis/s3/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Codepipeline.
func (mg *Codepipeline) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ArtifactStore); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ArtifactStore[i3].Location),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ArtifactStore[i3].LocationRef,
			Selector:     mg.Spec.ForProvider.ArtifactStore[i3].LocationSelector,
			To: reference.To{
				List:    &v1beta1.BucketList{},
				Managed: &v1beta1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ArtifactStore[i3].Location")
		}
		mg.Spec.ForProvider.ArtifactStore[i3].Location = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ArtifactStore[i3].LocationRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.RoleArnRef,
		Selector:     mg.Spec.ForProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ArtifactStore); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ArtifactStore[i3].Location),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ArtifactStore[i3].LocationRef,
			Selector:     mg.Spec.InitProvider.ArtifactStore[i3].LocationSelector,
			To: reference.To{
				List:    &v1beta1.BucketList{},
				Managed: &v1beta1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ArtifactStore[i3].Location")
		}
		mg.Spec.InitProvider.ArtifactStore[i3].Location = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ArtifactStore[i3].LocationRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.InitProvider.RoleArnRef,
		Selector:     mg.Spec.InitProvider.RoleArnSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Webhook.
func (mg *Webhook) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetPipeline),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TargetPipelineRef,
		Selector:     mg.Spec.ForProvider.TargetPipelineSelector,
		To: reference.To{
			List:    &CodepipelineList{},
			Managed: &Codepipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPipeline")
	}
	mg.Spec.ForProvider.TargetPipeline = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetPipelineRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetPipeline),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TargetPipelineRef,
		Selector:     mg.Spec.InitProvider.TargetPipelineSelector,
		To: reference.To{
			List:    &CodepipelineList{},
			Managed: &Codepipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetPipeline")
	}
	mg.Spec.InitProvider.TargetPipeline = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetPipelineRef = rsp.ResolvedReference

	return nil
}
