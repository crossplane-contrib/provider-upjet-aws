// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogDatabaseInitParameters struct {

	// Creates a set of default permissions on the table for principals. See create_table_default_permission below.
	CreateTableDefaultPermission []CreateTableDefaultPermissionInitParameters `json:"createTableDefaultPermission,omitempty" tf:"create_table_default_permission,omitempty"`

	// Description of the database.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block that references an entity outside the AWS Glue Data Catalog. See federated_database below.
	FederatedDatabase []FederatedDatabaseInitParameters `json:"federatedDatabase,omitempty" tf:"federated_database,omitempty"`

	// Location of the database (for example, an HDFS path).
	LocationURI *string `json:"locationUri,omitempty" tf:"location_uri,omitempty"`

	// List of key-value pairs that define parameters and properties of the database.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Configuration block for a target database for resource linking. See target_database below.
	TargetDatabase []TargetDatabaseInitParameters `json:"targetDatabase,omitempty" tf:"target_database,omitempty"`
}

type CatalogDatabaseObservation struct {

	// ARN of the Glue Catalog Database.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// ID of the Glue Catalog to create the database in. If omitted, this defaults to the AWS Account ID.
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// Creates a set of default permissions on the table for principals. See create_table_default_permission below.
	CreateTableDefaultPermission []CreateTableDefaultPermissionObservation `json:"createTableDefaultPermission,omitempty" tf:"create_table_default_permission,omitempty"`

	// Description of the database.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block that references an entity outside the AWS Glue Data Catalog. See federated_database below.
	FederatedDatabase []FederatedDatabaseObservation `json:"federatedDatabase,omitempty" tf:"federated_database,omitempty"`

	// Catalog ID and name of the database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Location of the database (for example, an HDFS path).
	LocationURI *string `json:"locationUri,omitempty" tf:"location_uri,omitempty"`

	// List of key-value pairs that define parameters and properties of the database.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Configuration block for a target database for resource linking. See target_database below.
	TargetDatabase []TargetDatabaseObservation `json:"targetDatabase,omitempty" tf:"target_database,omitempty"`
}

type CatalogDatabaseParameters struct {

	// ID of the Glue Catalog to create the database in. If omitted, this defaults to the AWS Account ID.
	// +kubebuilder:validation:Required
	CatalogID *string `json:"catalogId" tf:"catalog_id,omitempty"`

	// Creates a set of default permissions on the table for principals. See create_table_default_permission below.
	// +kubebuilder:validation:Optional
	CreateTableDefaultPermission []CreateTableDefaultPermissionParameters `json:"createTableDefaultPermission,omitempty" tf:"create_table_default_permission,omitempty"`

	// Description of the database.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block that references an entity outside the AWS Glue Data Catalog. See federated_database below.
	// +kubebuilder:validation:Optional
	FederatedDatabase []FederatedDatabaseParameters `json:"federatedDatabase,omitempty" tf:"federated_database,omitempty"`

	// Location of the database (for example, an HDFS path).
	// +kubebuilder:validation:Optional
	LocationURI *string `json:"locationUri,omitempty" tf:"location_uri,omitempty"`

	// List of key-value pairs that define parameters and properties of the database.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Region of the target database.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Configuration block for a target database for resource linking. See target_database below.
	// +kubebuilder:validation:Optional
	TargetDatabase []TargetDatabaseParameters `json:"targetDatabase,omitempty" tf:"target_database,omitempty"`
}

type CreateTableDefaultPermissionInitParameters struct {

	// The permissions that are granted to the principal.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The principal who is granted permissions.. See principal below.
	Principal []PrincipalInitParameters `json:"principal,omitempty" tf:"principal,omitempty"`
}

type CreateTableDefaultPermissionObservation struct {

	// The permissions that are granted to the principal.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The principal who is granted permissions.. See principal below.
	Principal []PrincipalObservation `json:"principal,omitempty" tf:"principal,omitempty"`
}

type CreateTableDefaultPermissionParameters struct {

	// The permissions that are granted to the principal.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The principal who is granted permissions.. See principal below.
	// +kubebuilder:validation:Optional
	Principal []PrincipalParameters `json:"principal,omitempty" tf:"principal,omitempty"`
}

type FederatedDatabaseInitParameters struct {

	// Name of the connection to the external metastore.
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// Unique identifier for the federated database.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`
}

type FederatedDatabaseObservation struct {

	// Name of the connection to the external metastore.
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// Unique identifier for the federated database.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`
}

type FederatedDatabaseParameters struct {

	// Name of the connection to the external metastore.
	// +kubebuilder:validation:Optional
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// Unique identifier for the federated database.
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`
}

type PrincipalInitParameters struct {

	// An identifier for the Lake Formation principal.
	DataLakePrincipalIdentifier *string `json:"dataLakePrincipalIdentifier,omitempty" tf:"data_lake_principal_identifier,omitempty"`
}

type PrincipalObservation struct {

	// An identifier for the Lake Formation principal.
	DataLakePrincipalIdentifier *string `json:"dataLakePrincipalIdentifier,omitempty" tf:"data_lake_principal_identifier,omitempty"`
}

type PrincipalParameters struct {

	// An identifier for the Lake Formation principal.
	// +kubebuilder:validation:Optional
	DataLakePrincipalIdentifier *string `json:"dataLakePrincipalIdentifier,omitempty" tf:"data_lake_principal_identifier,omitempty"`
}

type TargetDatabaseInitParameters struct {

	// Name of the catalog database.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type TargetDatabaseObservation struct {

	// ID of the Data Catalog in which the database resides.
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// Name of the catalog database.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Region of the target database.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TargetDatabaseParameters struct {

	// ID of the Data Catalog in which the database resides.
	// +kubebuilder:validation:Required
	CatalogID *string `json:"catalogId" tf:"catalog_id,omitempty"`

	// Name of the catalog database.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// Region of the target database.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// CatalogDatabaseSpec defines the desired state of CatalogDatabase
type CatalogDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogDatabaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatalogDatabaseInitParameters `json:"initProvider,omitempty"`
}

// CatalogDatabaseStatus defines the observed state of CatalogDatabase.
type CatalogDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CatalogDatabase is the Schema for the CatalogDatabases API. Provides a Glue Catalog Database.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CatalogDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CatalogDatabaseSpec   `json:"spec"`
	Status            CatalogDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogDatabaseList contains a list of CatalogDatabases
type CatalogDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatalogDatabase `json:"items"`
}

// Repository type metadata.
var (
	CatalogDatabase_Kind             = "CatalogDatabase"
	CatalogDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatalogDatabase_Kind}.String()
	CatalogDatabase_KindAPIVersion   = CatalogDatabase_Kind + "." + CRDGroupVersion.String()
	CatalogDatabase_GroupVersionKind = CRDGroupVersion.WithKind(CatalogDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&CatalogDatabase{}, &CatalogDatabaseList{})
}
