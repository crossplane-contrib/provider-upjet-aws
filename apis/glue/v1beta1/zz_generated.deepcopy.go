//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabase) DeepCopyInto(out *CatalogDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabase.
func (in *CatalogDatabase) DeepCopy() *CatalogDatabase {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CatalogDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabaseInitParameters) DeepCopyInto(out *CatalogDatabaseInitParameters) {
	*out = *in
	if in.CreateTableDefaultPermission != nil {
		in, out := &in.CreateTableDefaultPermission, &out.CreateTableDefaultPermission
		*out = make([]CreateTableDefaultPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.LocationURI != nil {
		in, out := &in.LocationURI, &out.LocationURI
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetDatabase != nil {
		in, out := &in.TargetDatabase, &out.TargetDatabase
		*out = make([]TargetDatabaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabaseInitParameters.
func (in *CatalogDatabaseInitParameters) DeepCopy() *CatalogDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabaseList) DeepCopyInto(out *CatalogDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CatalogDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabaseList.
func (in *CatalogDatabaseList) DeepCopy() *CatalogDatabaseList {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CatalogDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabaseObservation) DeepCopyInto(out *CatalogDatabaseObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.CreateTableDefaultPermission != nil {
		in, out := &in.CreateTableDefaultPermission, &out.CreateTableDefaultPermission
		*out = make([]CreateTableDefaultPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LocationURI != nil {
		in, out := &in.LocationURI, &out.LocationURI
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetDatabase != nil {
		in, out := &in.TargetDatabase, &out.TargetDatabase
		*out = make([]TargetDatabaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabaseObservation.
func (in *CatalogDatabaseObservation) DeepCopy() *CatalogDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabaseParameters) DeepCopyInto(out *CatalogDatabaseParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.CreateTableDefaultPermission != nil {
		in, out := &in.CreateTableDefaultPermission, &out.CreateTableDefaultPermission
		*out = make([]CreateTableDefaultPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.LocationURI != nil {
		in, out := &in.LocationURI, &out.LocationURI
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetDatabase != nil {
		in, out := &in.TargetDatabase, &out.TargetDatabase
		*out = make([]TargetDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabaseParameters.
func (in *CatalogDatabaseParameters) DeepCopy() *CatalogDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabaseSpec) DeepCopyInto(out *CatalogDatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabaseSpec.
func (in *CatalogDatabaseSpec) DeepCopy() *CatalogDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogDatabaseStatus) DeepCopyInto(out *CatalogDatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogDatabaseStatus.
func (in *CatalogDatabaseStatus) DeepCopy() *CatalogDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(CatalogDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogTargetInitParameters) DeepCopyInto(out *CatalogTargetInitParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.DlqEventQueueArn != nil {
		in, out := &in.DlqEventQueueArn, &out.DlqEventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.EventQueueArn != nil {
		in, out := &in.EventQueueArn, &out.EventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.Tables != nil {
		in, out := &in.Tables, &out.Tables
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogTargetInitParameters.
func (in *CatalogTargetInitParameters) DeepCopy() *CatalogTargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(CatalogTargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogTargetObservation) DeepCopyInto(out *CatalogTargetObservation) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.DlqEventQueueArn != nil {
		in, out := &in.DlqEventQueueArn, &out.DlqEventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.EventQueueArn != nil {
		in, out := &in.EventQueueArn, &out.EventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.Tables != nil {
		in, out := &in.Tables, &out.Tables
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogTargetObservation.
func (in *CatalogTargetObservation) DeepCopy() *CatalogTargetObservation {
	if in == nil {
		return nil
	}
	out := new(CatalogTargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CatalogTargetParameters) DeepCopyInto(out *CatalogTargetParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseNameRef != nil {
		in, out := &in.DatabaseNameRef, &out.DatabaseNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseNameSelector != nil {
		in, out := &in.DatabaseNameSelector, &out.DatabaseNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DlqEventQueueArn != nil {
		in, out := &in.DlqEventQueueArn, &out.DlqEventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.EventQueueArn != nil {
		in, out := &in.EventQueueArn, &out.EventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.Tables != nil {
		in, out := &in.Tables, &out.Tables
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CatalogTargetParameters.
func (in *CatalogTargetParameters) DeepCopy() *CatalogTargetParameters {
	if in == nil {
		return nil
	}
	out := new(CatalogTargetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Crawler) DeepCopyInto(out *Crawler) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Crawler.
func (in *Crawler) DeepCopy() *Crawler {
	if in == nil {
		return nil
	}
	out := new(Crawler)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Crawler) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrawlerInitParameters) DeepCopyInto(out *CrawlerInitParameters) {
	*out = *in
	if in.CatalogTarget != nil {
		in, out := &in.CatalogTarget, &out.CatalogTarget
		*out = make([]CatalogTargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Classifiers != nil {
		in, out := &in.Classifiers, &out.Classifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Configuration != nil {
		in, out := &in.Configuration, &out.Configuration
		*out = new(string)
		**out = **in
	}
	if in.DeltaTarget != nil {
		in, out := &in.DeltaTarget, &out.DeltaTarget
		*out = make([]DeltaTargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DynamodbTarget != nil {
		in, out := &in.DynamodbTarget, &out.DynamodbTarget
		*out = make([]DynamodbTargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.JdbcTarget != nil {
		in, out := &in.JdbcTarget, &out.JdbcTarget
		*out = make([]JdbcTargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LakeFormationConfiguration != nil {
		in, out := &in.LakeFormationConfiguration, &out.LakeFormationConfiguration
		*out = make([]LakeFormationConfigurationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LineageConfiguration != nil {
		in, out := &in.LineageConfiguration, &out.LineageConfiguration
		*out = make([]LineageConfigurationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MongodbTarget != nil {
		in, out := &in.MongodbTarget, &out.MongodbTarget
		*out = make([]MongodbTargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecrawlPolicy != nil {
		in, out := &in.RecrawlPolicy, &out.RecrawlPolicy
		*out = make([]RecrawlPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.S3Target != nil {
		in, out := &in.S3Target, &out.S3Target
		*out = make([]S3TargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Schedule != nil {
		in, out := &in.Schedule, &out.Schedule
		*out = new(string)
		**out = **in
	}
	if in.SchemaChangePolicy != nil {
		in, out := &in.SchemaChangePolicy, &out.SchemaChangePolicy
		*out = make([]SchemaChangePolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityConfiguration != nil {
		in, out := &in.SecurityConfiguration, &out.SecurityConfiguration
		*out = new(string)
		**out = **in
	}
	if in.TablePrefix != nil {
		in, out := &in.TablePrefix, &out.TablePrefix
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrawlerInitParameters.
func (in *CrawlerInitParameters) DeepCopy() *CrawlerInitParameters {
	if in == nil {
		return nil
	}
	out := new(CrawlerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrawlerList) DeepCopyInto(out *CrawlerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Crawler, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrawlerList.
func (in *CrawlerList) DeepCopy() *CrawlerList {
	if in == nil {
		return nil
	}
	out := new(CrawlerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CrawlerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrawlerObservation) DeepCopyInto(out *CrawlerObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.CatalogTarget != nil {
		in, out := &in.CatalogTarget, &out.CatalogTarget
		*out = make([]CatalogTargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Classifiers != nil {
		in, out := &in.Classifiers, &out.Classifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Configuration != nil {
		in, out := &in.Configuration, &out.Configuration
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.DeltaTarget != nil {
		in, out := &in.DeltaTarget, &out.DeltaTarget
		*out = make([]DeltaTargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DynamodbTarget != nil {
		in, out := &in.DynamodbTarget, &out.DynamodbTarget
		*out = make([]DynamodbTargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.JdbcTarget != nil {
		in, out := &in.JdbcTarget, &out.JdbcTarget
		*out = make([]JdbcTargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LakeFormationConfiguration != nil {
		in, out := &in.LakeFormationConfiguration, &out.LakeFormationConfiguration
		*out = make([]LakeFormationConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LineageConfiguration != nil {
		in, out := &in.LineageConfiguration, &out.LineageConfiguration
		*out = make([]LineageConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MongodbTarget != nil {
		in, out := &in.MongodbTarget, &out.MongodbTarget
		*out = make([]MongodbTargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecrawlPolicy != nil {
		in, out := &in.RecrawlPolicy, &out.RecrawlPolicy
		*out = make([]RecrawlPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.S3Target != nil {
		in, out := &in.S3Target, &out.S3Target
		*out = make([]S3TargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Schedule != nil {
		in, out := &in.Schedule, &out.Schedule
		*out = new(string)
		**out = **in
	}
	if in.SchemaChangePolicy != nil {
		in, out := &in.SchemaChangePolicy, &out.SchemaChangePolicy
		*out = make([]SchemaChangePolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityConfiguration != nil {
		in, out := &in.SecurityConfiguration, &out.SecurityConfiguration
		*out = new(string)
		**out = **in
	}
	if in.TablePrefix != nil {
		in, out := &in.TablePrefix, &out.TablePrefix
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrawlerObservation.
func (in *CrawlerObservation) DeepCopy() *CrawlerObservation {
	if in == nil {
		return nil
	}
	out := new(CrawlerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrawlerParameters) DeepCopyInto(out *CrawlerParameters) {
	*out = *in
	if in.CatalogTarget != nil {
		in, out := &in.CatalogTarget, &out.CatalogTarget
		*out = make([]CatalogTargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Classifiers != nil {
		in, out := &in.Classifiers, &out.Classifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Configuration != nil {
		in, out := &in.Configuration, &out.Configuration
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseNameRef != nil {
		in, out := &in.DatabaseNameRef, &out.DatabaseNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseNameSelector != nil {
		in, out := &in.DatabaseNameSelector, &out.DatabaseNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeltaTarget != nil {
		in, out := &in.DeltaTarget, &out.DeltaTarget
		*out = make([]DeltaTargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DynamodbTarget != nil {
		in, out := &in.DynamodbTarget, &out.DynamodbTarget
		*out = make([]DynamodbTargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.JdbcTarget != nil {
		in, out := &in.JdbcTarget, &out.JdbcTarget
		*out = make([]JdbcTargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LakeFormationConfiguration != nil {
		in, out := &in.LakeFormationConfiguration, &out.LakeFormationConfiguration
		*out = make([]LakeFormationConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LineageConfiguration != nil {
		in, out := &in.LineageConfiguration, &out.LineageConfiguration
		*out = make([]LineageConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MongodbTarget != nil {
		in, out := &in.MongodbTarget, &out.MongodbTarget
		*out = make([]MongodbTargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecrawlPolicy != nil {
		in, out := &in.RecrawlPolicy, &out.RecrawlPolicy
		*out = make([]RecrawlPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.RoleRef != nil {
		in, out := &in.RoleRef, &out.RoleRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleSelector != nil {
		in, out := &in.RoleSelector, &out.RoleSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.S3Target != nil {
		in, out := &in.S3Target, &out.S3Target
		*out = make([]S3TargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Schedule != nil {
		in, out := &in.Schedule, &out.Schedule
		*out = new(string)
		**out = **in
	}
	if in.SchemaChangePolicy != nil {
		in, out := &in.SchemaChangePolicy, &out.SchemaChangePolicy
		*out = make([]SchemaChangePolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityConfiguration != nil {
		in, out := &in.SecurityConfiguration, &out.SecurityConfiguration
		*out = new(string)
		**out = **in
	}
	if in.TablePrefix != nil {
		in, out := &in.TablePrefix, &out.TablePrefix
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrawlerParameters.
func (in *CrawlerParameters) DeepCopy() *CrawlerParameters {
	if in == nil {
		return nil
	}
	out := new(CrawlerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrawlerSpec) DeepCopyInto(out *CrawlerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrawlerSpec.
func (in *CrawlerSpec) DeepCopy() *CrawlerSpec {
	if in == nil {
		return nil
	}
	out := new(CrawlerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrawlerStatus) DeepCopyInto(out *CrawlerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrawlerStatus.
func (in *CrawlerStatus) DeepCopy() *CrawlerStatus {
	if in == nil {
		return nil
	}
	out := new(CrawlerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateTableDefaultPermissionInitParameters) DeepCopyInto(out *CreateTableDefaultPermissionInitParameters) {
	*out = *in
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Principal != nil {
		in, out := &in.Principal, &out.Principal
		*out = make([]PrincipalInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateTableDefaultPermissionInitParameters.
func (in *CreateTableDefaultPermissionInitParameters) DeepCopy() *CreateTableDefaultPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(CreateTableDefaultPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateTableDefaultPermissionObservation) DeepCopyInto(out *CreateTableDefaultPermissionObservation) {
	*out = *in
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Principal != nil {
		in, out := &in.Principal, &out.Principal
		*out = make([]PrincipalObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateTableDefaultPermissionObservation.
func (in *CreateTableDefaultPermissionObservation) DeepCopy() *CreateTableDefaultPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(CreateTableDefaultPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateTableDefaultPermissionParameters) DeepCopyInto(out *CreateTableDefaultPermissionParameters) {
	*out = *in
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Principal != nil {
		in, out := &in.Principal, &out.Principal
		*out = make([]PrincipalParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateTableDefaultPermissionParameters.
func (in *CreateTableDefaultPermissionParameters) DeepCopy() *CreateTableDefaultPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(CreateTableDefaultPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeltaTargetInitParameters) DeepCopyInto(out *DeltaTargetInitParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.CreateNativeDeltaTable != nil {
		in, out := &in.CreateNativeDeltaTable, &out.CreateNativeDeltaTable
		*out = new(bool)
		**out = **in
	}
	if in.DeltaTables != nil {
		in, out := &in.DeltaTables, &out.DeltaTables
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WriteManifest != nil {
		in, out := &in.WriteManifest, &out.WriteManifest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeltaTargetInitParameters.
func (in *DeltaTargetInitParameters) DeepCopy() *DeltaTargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(DeltaTargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeltaTargetObservation) DeepCopyInto(out *DeltaTargetObservation) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.CreateNativeDeltaTable != nil {
		in, out := &in.CreateNativeDeltaTable, &out.CreateNativeDeltaTable
		*out = new(bool)
		**out = **in
	}
	if in.DeltaTables != nil {
		in, out := &in.DeltaTables, &out.DeltaTables
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WriteManifest != nil {
		in, out := &in.WriteManifest, &out.WriteManifest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeltaTargetObservation.
func (in *DeltaTargetObservation) DeepCopy() *DeltaTargetObservation {
	if in == nil {
		return nil
	}
	out := new(DeltaTargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeltaTargetParameters) DeepCopyInto(out *DeltaTargetParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.CreateNativeDeltaTable != nil {
		in, out := &in.CreateNativeDeltaTable, &out.CreateNativeDeltaTable
		*out = new(bool)
		**out = **in
	}
	if in.DeltaTables != nil {
		in, out := &in.DeltaTables, &out.DeltaTables
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WriteManifest != nil {
		in, out := &in.WriteManifest, &out.WriteManifest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeltaTargetParameters.
func (in *DeltaTargetParameters) DeepCopy() *DeltaTargetParameters {
	if in == nil {
		return nil
	}
	out := new(DeltaTargetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DynamodbTargetInitParameters) DeepCopyInto(out *DynamodbTargetInitParameters) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ScanAll != nil {
		in, out := &in.ScanAll, &out.ScanAll
		*out = new(bool)
		**out = **in
	}
	if in.ScanRate != nil {
		in, out := &in.ScanRate, &out.ScanRate
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DynamodbTargetInitParameters.
func (in *DynamodbTargetInitParameters) DeepCopy() *DynamodbTargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(DynamodbTargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DynamodbTargetObservation) DeepCopyInto(out *DynamodbTargetObservation) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ScanAll != nil {
		in, out := &in.ScanAll, &out.ScanAll
		*out = new(bool)
		**out = **in
	}
	if in.ScanRate != nil {
		in, out := &in.ScanRate, &out.ScanRate
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DynamodbTargetObservation.
func (in *DynamodbTargetObservation) DeepCopy() *DynamodbTargetObservation {
	if in == nil {
		return nil
	}
	out := new(DynamodbTargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DynamodbTargetParameters) DeepCopyInto(out *DynamodbTargetParameters) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ScanAll != nil {
		in, out := &in.ScanAll, &out.ScanAll
		*out = new(bool)
		**out = **in
	}
	if in.ScanRate != nil {
		in, out := &in.ScanRate, &out.ScanRate
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DynamodbTargetParameters.
func (in *DynamodbTargetParameters) DeepCopy() *DynamodbTargetParameters {
	if in == nil {
		return nil
	}
	out := new(DynamodbTargetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JdbcTargetInitParameters) DeepCopyInto(out *JdbcTargetInitParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.EnableAdditionalMetadata != nil {
		in, out := &in.EnableAdditionalMetadata, &out.EnableAdditionalMetadata
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Exclusions != nil {
		in, out := &in.Exclusions, &out.Exclusions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JdbcTargetInitParameters.
func (in *JdbcTargetInitParameters) DeepCopy() *JdbcTargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(JdbcTargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JdbcTargetObservation) DeepCopyInto(out *JdbcTargetObservation) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.EnableAdditionalMetadata != nil {
		in, out := &in.EnableAdditionalMetadata, &out.EnableAdditionalMetadata
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Exclusions != nil {
		in, out := &in.Exclusions, &out.Exclusions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JdbcTargetObservation.
func (in *JdbcTargetObservation) DeepCopy() *JdbcTargetObservation {
	if in == nil {
		return nil
	}
	out := new(JdbcTargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JdbcTargetParameters) DeepCopyInto(out *JdbcTargetParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.EnableAdditionalMetadata != nil {
		in, out := &in.EnableAdditionalMetadata, &out.EnableAdditionalMetadata
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Exclusions != nil {
		in, out := &in.Exclusions, &out.Exclusions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JdbcTargetParameters.
func (in *JdbcTargetParameters) DeepCopy() *JdbcTargetParameters {
	if in == nil {
		return nil
	}
	out := new(JdbcTargetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LakeFormationConfigurationInitParameters) DeepCopyInto(out *LakeFormationConfigurationInitParameters) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.UseLakeFormationCredentials != nil {
		in, out := &in.UseLakeFormationCredentials, &out.UseLakeFormationCredentials
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LakeFormationConfigurationInitParameters.
func (in *LakeFormationConfigurationInitParameters) DeepCopy() *LakeFormationConfigurationInitParameters {
	if in == nil {
		return nil
	}
	out := new(LakeFormationConfigurationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LakeFormationConfigurationObservation) DeepCopyInto(out *LakeFormationConfigurationObservation) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.UseLakeFormationCredentials != nil {
		in, out := &in.UseLakeFormationCredentials, &out.UseLakeFormationCredentials
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LakeFormationConfigurationObservation.
func (in *LakeFormationConfigurationObservation) DeepCopy() *LakeFormationConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(LakeFormationConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LakeFormationConfigurationParameters) DeepCopyInto(out *LakeFormationConfigurationParameters) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.UseLakeFormationCredentials != nil {
		in, out := &in.UseLakeFormationCredentials, &out.UseLakeFormationCredentials
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LakeFormationConfigurationParameters.
func (in *LakeFormationConfigurationParameters) DeepCopy() *LakeFormationConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(LakeFormationConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LineageConfigurationInitParameters) DeepCopyInto(out *LineageConfigurationInitParameters) {
	*out = *in
	if in.CrawlerLineageSettings != nil {
		in, out := &in.CrawlerLineageSettings, &out.CrawlerLineageSettings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LineageConfigurationInitParameters.
func (in *LineageConfigurationInitParameters) DeepCopy() *LineageConfigurationInitParameters {
	if in == nil {
		return nil
	}
	out := new(LineageConfigurationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LineageConfigurationObservation) DeepCopyInto(out *LineageConfigurationObservation) {
	*out = *in
	if in.CrawlerLineageSettings != nil {
		in, out := &in.CrawlerLineageSettings, &out.CrawlerLineageSettings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LineageConfigurationObservation.
func (in *LineageConfigurationObservation) DeepCopy() *LineageConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(LineageConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LineageConfigurationParameters) DeepCopyInto(out *LineageConfigurationParameters) {
	*out = *in
	if in.CrawlerLineageSettings != nil {
		in, out := &in.CrawlerLineageSettings, &out.CrawlerLineageSettings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LineageConfigurationParameters.
func (in *LineageConfigurationParameters) DeepCopy() *LineageConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(LineageConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbTargetInitParameters) DeepCopyInto(out *MongodbTargetInitParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ScanAll != nil {
		in, out := &in.ScanAll, &out.ScanAll
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbTargetInitParameters.
func (in *MongodbTargetInitParameters) DeepCopy() *MongodbTargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbTargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbTargetObservation) DeepCopyInto(out *MongodbTargetObservation) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ScanAll != nil {
		in, out := &in.ScanAll, &out.ScanAll
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbTargetObservation.
func (in *MongodbTargetObservation) DeepCopy() *MongodbTargetObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbTargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbTargetParameters) DeepCopyInto(out *MongodbTargetParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ScanAll != nil {
		in, out := &in.ScanAll, &out.ScanAll
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbTargetParameters.
func (in *MongodbTargetParameters) DeepCopy() *MongodbTargetParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbTargetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrincipalInitParameters) DeepCopyInto(out *PrincipalInitParameters) {
	*out = *in
	if in.DataLakePrincipalIdentifier != nil {
		in, out := &in.DataLakePrincipalIdentifier, &out.DataLakePrincipalIdentifier
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrincipalInitParameters.
func (in *PrincipalInitParameters) DeepCopy() *PrincipalInitParameters {
	if in == nil {
		return nil
	}
	out := new(PrincipalInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrincipalObservation) DeepCopyInto(out *PrincipalObservation) {
	*out = *in
	if in.DataLakePrincipalIdentifier != nil {
		in, out := &in.DataLakePrincipalIdentifier, &out.DataLakePrincipalIdentifier
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrincipalObservation.
func (in *PrincipalObservation) DeepCopy() *PrincipalObservation {
	if in == nil {
		return nil
	}
	out := new(PrincipalObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrincipalParameters) DeepCopyInto(out *PrincipalParameters) {
	*out = *in
	if in.DataLakePrincipalIdentifier != nil {
		in, out := &in.DataLakePrincipalIdentifier, &out.DataLakePrincipalIdentifier
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrincipalParameters.
func (in *PrincipalParameters) DeepCopy() *PrincipalParameters {
	if in == nil {
		return nil
	}
	out := new(PrincipalParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecrawlPolicyInitParameters) DeepCopyInto(out *RecrawlPolicyInitParameters) {
	*out = *in
	if in.RecrawlBehavior != nil {
		in, out := &in.RecrawlBehavior, &out.RecrawlBehavior
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecrawlPolicyInitParameters.
func (in *RecrawlPolicyInitParameters) DeepCopy() *RecrawlPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(RecrawlPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecrawlPolicyObservation) DeepCopyInto(out *RecrawlPolicyObservation) {
	*out = *in
	if in.RecrawlBehavior != nil {
		in, out := &in.RecrawlBehavior, &out.RecrawlBehavior
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecrawlPolicyObservation.
func (in *RecrawlPolicyObservation) DeepCopy() *RecrawlPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(RecrawlPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecrawlPolicyParameters) DeepCopyInto(out *RecrawlPolicyParameters) {
	*out = *in
	if in.RecrawlBehavior != nil {
		in, out := &in.RecrawlBehavior, &out.RecrawlBehavior
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecrawlPolicyParameters.
func (in *RecrawlPolicyParameters) DeepCopy() *RecrawlPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(RecrawlPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3TargetInitParameters) DeepCopyInto(out *S3TargetInitParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.DlqEventQueueArn != nil {
		in, out := &in.DlqEventQueueArn, &out.DlqEventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.EventQueueArn != nil {
		in, out := &in.EventQueueArn, &out.EventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.Exclusions != nil {
		in, out := &in.Exclusions, &out.Exclusions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.SampleSize != nil {
		in, out := &in.SampleSize, &out.SampleSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3TargetInitParameters.
func (in *S3TargetInitParameters) DeepCopy() *S3TargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(S3TargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3TargetObservation) DeepCopyInto(out *S3TargetObservation) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.DlqEventQueueArn != nil {
		in, out := &in.DlqEventQueueArn, &out.DlqEventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.EventQueueArn != nil {
		in, out := &in.EventQueueArn, &out.EventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.Exclusions != nil {
		in, out := &in.Exclusions, &out.Exclusions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.SampleSize != nil {
		in, out := &in.SampleSize, &out.SampleSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3TargetObservation.
func (in *S3TargetObservation) DeepCopy() *S3TargetObservation {
	if in == nil {
		return nil
	}
	out := new(S3TargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3TargetParameters) DeepCopyInto(out *S3TargetParameters) {
	*out = *in
	if in.ConnectionName != nil {
		in, out := &in.ConnectionName, &out.ConnectionName
		*out = new(string)
		**out = **in
	}
	if in.DlqEventQueueArn != nil {
		in, out := &in.DlqEventQueueArn, &out.DlqEventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.EventQueueArn != nil {
		in, out := &in.EventQueueArn, &out.EventQueueArn
		*out = new(string)
		**out = **in
	}
	if in.Exclusions != nil {
		in, out := &in.Exclusions, &out.Exclusions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.SampleSize != nil {
		in, out := &in.SampleSize, &out.SampleSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3TargetParameters.
func (in *S3TargetParameters) DeepCopy() *S3TargetParameters {
	if in == nil {
		return nil
	}
	out := new(S3TargetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaChangePolicyInitParameters) DeepCopyInto(out *SchemaChangePolicyInitParameters) {
	*out = *in
	if in.DeleteBehavior != nil {
		in, out := &in.DeleteBehavior, &out.DeleteBehavior
		*out = new(string)
		**out = **in
	}
	if in.UpdateBehavior != nil {
		in, out := &in.UpdateBehavior, &out.UpdateBehavior
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaChangePolicyInitParameters.
func (in *SchemaChangePolicyInitParameters) DeepCopy() *SchemaChangePolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(SchemaChangePolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaChangePolicyObservation) DeepCopyInto(out *SchemaChangePolicyObservation) {
	*out = *in
	if in.DeleteBehavior != nil {
		in, out := &in.DeleteBehavior, &out.DeleteBehavior
		*out = new(string)
		**out = **in
	}
	if in.UpdateBehavior != nil {
		in, out := &in.UpdateBehavior, &out.UpdateBehavior
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaChangePolicyObservation.
func (in *SchemaChangePolicyObservation) DeepCopy() *SchemaChangePolicyObservation {
	if in == nil {
		return nil
	}
	out := new(SchemaChangePolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchemaChangePolicyParameters) DeepCopyInto(out *SchemaChangePolicyParameters) {
	*out = *in
	if in.DeleteBehavior != nil {
		in, out := &in.DeleteBehavior, &out.DeleteBehavior
		*out = new(string)
		**out = **in
	}
	if in.UpdateBehavior != nil {
		in, out := &in.UpdateBehavior, &out.UpdateBehavior
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchemaChangePolicyParameters.
func (in *SchemaChangePolicyParameters) DeepCopy() *SchemaChangePolicyParameters {
	if in == nil {
		return nil
	}
	out := new(SchemaChangePolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetDatabaseInitParameters) DeepCopyInto(out *TargetDatabaseInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetDatabaseInitParameters.
func (in *TargetDatabaseInitParameters) DeepCopy() *TargetDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(TargetDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetDatabaseObservation) DeepCopyInto(out *TargetDatabaseObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetDatabaseObservation.
func (in *TargetDatabaseObservation) DeepCopy() *TargetDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(TargetDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetDatabaseParameters) DeepCopyInto(out *TargetDatabaseParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetDatabaseParameters.
func (in *TargetDatabaseParameters) DeepCopy() *TargetDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(TargetDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}
