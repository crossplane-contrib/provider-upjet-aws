/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregationConfigObservation struct {
}

type AggregationConfigParameters struct {

	// Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are None and SingleFile.
	// +kubebuilder:validation:Optional
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`
}

type AmplitudeObservation struct {
}

type AmplitudeParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type ConnectorOperatorObservation struct {
}

type ConnectorOperatorParameters struct {

	// Specifies the information that is required for querying Amplitude. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Amplitude *string `json:"amplitude,omitempty" tf:"amplitude,omitempty"`

	// The properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	// +kubebuilder:validation:Optional
	CustomConnector *string `json:"customConnector,omitempty" tf:"custom_connector,omitempty"`

	// Specifies the information that is required for querying Datadog. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Datadog *string `json:"datadog,omitempty" tf:"datadog,omitempty"`

	// The operation to be performed on the provided Dynatrace source fields. Valid values are PROJECTION, BETWEEN, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	Dynatrace *string `json:"dynatrace,omitempty" tf:"dynatrace,omitempty"`

	// The operation to be performed on the provided Google Analytics source fields. Valid values are PROJECTION and BETWEEN.
	// +kubebuilder:validation:Optional
	GoogleAnalytics *string `json:"googleAnalytics,omitempty" tf:"google_analytics,omitempty"`

	// Specifies the information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	InforNexus *string `json:"inforNexus,omitempty" tf:"infor_nexus,omitempty"`

	// The properties that are required to query Marketo. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Marketo *string `json:"marketo,omitempty" tf:"marketo,omitempty"`

	// The properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	// +kubebuilder:validation:Optional
	S3 *string `json:"s3,omitempty" tf:"s3,omitempty"`

	// The properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Salesforce *string `json:"salesforce,omitempty" tf:"salesforce,omitempty"`

	// The properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	// +kubebuilder:validation:Optional
	SapoData *string `json:"sapoData,omitempty" tf:"sapo_data,omitempty"`

	// Specifies the information that is required for querying ServiceNow. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	ServiceNow *string `json:"serviceNow,omitempty" tf:"service_now,omitempty"`

	// Specifies the information that is required for querying Singular. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Singular *string `json:"singular,omitempty" tf:"singular,omitempty"`

	// Specifies the information that is required for querying Slack. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Slack *string `json:"slack,omitempty" tf:"slack,omitempty"`

	// The operation to be performed on the provided Trend Micro source fields. Valid values are PROJECTION, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	Trendmicro *string `json:"trendmicro,omitempty" tf:"trendmicro,omitempty"`

	// Specifies the information that is required for querying Veeva. See Veeva Source Properties for more details.
	// +kubebuilder:validation:Optional
	Veeva *string `json:"veeva,omitempty" tf:"veeva,omitempty"`

	// The properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Zendesk *string `json:"zendesk,omitempty" tf:"zendesk,omitempty"`
}

type CustomConnectorObservation struct {
}

type CustomConnectorParameters struct {

	// The custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	// +kubebuilder:validation:Optional
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// The entity specified in the custom connector as a destination in the flow.
	// +kubebuilder:validation:Required
	EntityName *string `json:"entityName" tf:"entity_name,omitempty"`

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []ErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	IDFieldNames []*string `json:"idFieldNames,omitempty" tf:"id_field_names,omitempty"`

	// Specifies the type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	WriteOperationType *string `json:"writeOperationType,omitempty" tf:"write_operation_type,omitempty"`
}

type CustomerProfilesObservation struct {
}

type CustomerProfilesParameters struct {

	// The unique name of the Amazon Connect Customer Profiles domain.
	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// The object specified in the Amazon Connect Customer Profiles flow destination.
	// +kubebuilder:validation:Optional
	ObjectTypeName *string `json:"objectTypeName,omitempty" tf:"object_type_name,omitempty"`
}

type DatadogObservation struct {
}

type DatadogParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type DestinationConnectorPropertiesObservation struct {
}

type DestinationConnectorPropertiesParameters struct {

	// The properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	// +kubebuilder:validation:Optional
	CustomConnector []CustomConnectorParameters `json:"customConnector,omitempty" tf:"custom_connector,omitempty"`

	// The properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
	// +kubebuilder:validation:Optional
	CustomerProfiles []CustomerProfilesParameters `json:"customerProfiles,omitempty" tf:"customer_profiles,omitempty"`

	// The properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	EventBridge []EventBridgeParameters `json:"eventBridge,omitempty" tf:"event_bridge,omitempty"`

	// The properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Honeycode []HoneycodeParameters `json:"honeycode,omitempty" tf:"honeycode,omitempty"`

	// +kubebuilder:validation:Optional
	LookoutMetrics []LookoutMetricsParameters `json:"lookoutMetrics,omitempty" tf:"lookout_metrics,omitempty"`

	// The properties that are required to query Marketo. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Marketo []MarketoParameters `json:"marketo,omitempty" tf:"marketo,omitempty"`

	// The properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Redshift []RedshiftParameters `json:"redshift,omitempty" tf:"redshift,omitempty"`

	// The properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	// +kubebuilder:validation:Optional
	S3 []S3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// The properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Salesforce []SalesforceParameters `json:"salesforce,omitempty" tf:"salesforce,omitempty"`

	// The properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	// +kubebuilder:validation:Optional
	SapoData []SapoDataParameters `json:"sapoData,omitempty" tf:"sapo_data,omitempty"`

	// The properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Snowflake []SnowflakeParameters `json:"snowflake,omitempty" tf:"snowflake,omitempty"`

	// The properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Upsolver []UpsolverParameters `json:"upsolver,omitempty" tf:"upsolver,omitempty"`

	// The properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Zendesk []ZendeskParameters `json:"zendesk,omitempty" tf:"zendesk,omitempty"`
}

type DestinationFlowConfigObservation struct {
}

type DestinationFlowConfigParameters struct {

	// The API version that the destination connector uses.
	// +kubebuilder:validation:Optional
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	// The name of the connector profile. This name must be unique for each connector profile in the AWS account.
	// +kubebuilder:validation:Optional
	ConnectorProfileName *string `json:"connectorProfileName,omitempty" tf:"connector_profile_name,omitempty"`

	// The type of connector, such as Salesforce, Amplitude, and so on. Valid values are Salesforce, Singular, Slack, Redshift, S3, Marketo, Googleanalytics, Zendesk, Servicenow, Datadog, Trendmicro, Snowflake, Dynatrace, Infornexus, Amplitude, Veeva, EventBridge, LookoutMetrics, Upsolver, Honeycode, CustomerProfiles, SAPOData, and CustomConnector.
	// +kubebuilder:validation:Required
	ConnectorType *string `json:"connectorType" tf:"connector_type,omitempty"`

	// This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
	// +kubebuilder:validation:Required
	DestinationConnectorProperties []DestinationConnectorPropertiesParameters `json:"destinationConnectorProperties" tf:"destination_connector_properties,omitempty"`
}

type DynatraceObservation struct {
}

type DynatraceParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type ErrorHandlingConfigObservation struct {
}

type ErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type EventBridgeErrorHandlingConfigObservation struct {
}

type EventBridgeErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type EventBridgeObservation struct {
}

type EventBridgeParameters struct {

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []EventBridgeErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type FlowObservation struct {

	// The flow's Amazon Resource Name (ARN).
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type FlowParameters struct {

	// A description of the flow you want to create.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	// +kubebuilder:validation:Required
	DestinationFlowConfig []DestinationFlowConfigParameters `json:"destinationFlowConfig" tf:"destination_flow_config,omitempty"`

	// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	// +kubebuilder:validation:Optional
	KMSArn *string `json:"kmsArn,omitempty" tf:"kms_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	// +kubebuilder:validation:Required
	SourceFlowConfig []SourceFlowConfigParameters `json:"sourceFlowConfig" tf:"source_flow_config,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	// +kubebuilder:validation:Required
	Task []TaskParameters `json:"task" tf:"task,omitempty"`

	// A Trigger that determine how and when the flow runs.
	// +kubebuilder:validation:Required
	TriggerConfig []TriggerConfigParameters `json:"triggerConfig" tf:"trigger_config,omitempty"`
}

type GoogleAnalyticsObservation struct {
}

type GoogleAnalyticsParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type HoneycodeErrorHandlingConfigObservation struct {
}

type HoneycodeErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type HoneycodeObservation struct {
}

type HoneycodeParameters struct {

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []HoneycodeErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type IncrementalPullConfigObservation struct {
}

type IncrementalPullConfigParameters struct {

	// A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
	// +kubebuilder:validation:Optional
	DatetimeTypeFieldName *string `json:"datetimeTypeFieldName,omitempty" tf:"datetime_type_field_name,omitempty"`
}

type InforNexusObservation struct {
}

type InforNexusParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type LookoutMetricsObservation struct {
}

type LookoutMetricsParameters struct {
}

type MarketoErrorHandlingConfigObservation struct {
}

type MarketoErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type MarketoObservation struct {
}

type MarketoParameters struct {

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []MarketoErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type PrefixConfigObservation struct {
}

type PrefixConfigParameters struct {

	// Determines the level of granularity that's included in the prefix. Valid values are YEAR, MONTH, DAY, HOUR, and MINUTE.
	// +kubebuilder:validation:Optional
	PrefixFormat *string `json:"prefixFormat,omitempty" tf:"prefix_format,omitempty"`

	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are FILENAME, PATH, and PATH_AND_FILENAME.
	// +kubebuilder:validation:Optional
	PrefixType *string `json:"prefixType,omitempty" tf:"prefix_type,omitempty"`
}

type RedshiftErrorHandlingConfigObservation struct {
}

type RedshiftErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type RedshiftObservation struct {
}

type RedshiftParameters struct {

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []RedshiftErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	// +kubebuilder:validation:Required
	IntermediateBucketName *string `json:"intermediateBucketName" tf:"intermediate_bucket_name,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type S3InputFormatConfigObservation struct {
}

type S3InputFormatConfigParameters struct {

	// The file type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are CSV and JSON.
	// +kubebuilder:validation:Optional
	S3InputFileType *string `json:"s3InputFileType,omitempty" tf:"s3_input_file_type,omitempty"`
}

type S3Observation struct {
}

type S3OutputFormatConfigAggregationConfigObservation struct {
}

type S3OutputFormatConfigAggregationConfigParameters struct {

	// Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are None and SingleFile.
	// +kubebuilder:validation:Optional
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`
}

type S3OutputFormatConfigObservation struct {
}

type S3OutputFormatConfigParameters struct {

	// The aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	// +kubebuilder:validation:Optional
	AggregationConfig []AggregationConfigParameters `json:"aggregationConfig,omitempty" tf:"aggregation_config,omitempty"`

	// Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are CSV, JSON, and PARQUET.
	// +kubebuilder:validation:Optional
	FileType *string `json:"fileType,omitempty" tf:"file_type,omitempty"`

	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	// +kubebuilder:validation:Optional
	PrefixConfig []PrefixConfigParameters `json:"prefixConfig,omitempty" tf:"prefix_config,omitempty"`
}

type S3OutputFormatConfigPrefixConfigObservation struct {
}

type S3OutputFormatConfigPrefixConfigParameters struct {

	// Determines the level of granularity that's included in the prefix. Valid values are YEAR, MONTH, DAY, HOUR, and MINUTE.
	// +kubebuilder:validation:Optional
	PrefixFormat *string `json:"prefixFormat,omitempty" tf:"prefix_format,omitempty"`

	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are FILENAME, PATH, and PATH_AND_FILENAME.
	// +kubebuilder:validation:Required
	PrefixType *string `json:"prefixType" tf:"prefix_type,omitempty"`
}

type S3Parameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.BucketPolicy
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("bucket",false)
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a BucketPolicy in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.Reference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a BucketPolicy in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.Selector `json:"bucketNameSelector,omitempty" tf:"-"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	// +kubebuilder:validation:Optional
	S3OutputFormatConfig []S3OutputFormatConfigParameters `json:"s3OutputFormatConfig,omitempty" tf:"s3_output_format_config,omitempty"`
}

type SalesforceErrorHandlingConfigObservation struct {
}

type SalesforceErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type SalesforceObservation struct {
}

type SalesforceParameters struct {

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []SalesforceErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	IDFieldNames []*string `json:"idFieldNames,omitempty" tf:"id_field_names,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`

	// Specifies the type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	WriteOperationType *string `json:"writeOperationType,omitempty" tf:"write_operation_type,omitempty"`
}

type SapoDataErrorHandlingConfigObservation struct {
}

type SapoDataErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type SapoDataObservation struct {
}

type SapoDataParameters struct {

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []SapoDataErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	IDFieldNames []*string `json:"idFieldNames,omitempty" tf:"id_field_names,omitempty"`

	// The object path specified in the SAPOData flow destination.
	// +kubebuilder:validation:Required
	ObjectPath *string `json:"objectPath" tf:"object_path,omitempty"`

	// Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
	// +kubebuilder:validation:Optional
	SuccessResponseHandlingConfig []SuccessResponseHandlingConfigParameters `json:"successResponseHandlingConfig,omitempty" tf:"success_response_handling_config,omitempty"`

	// Specifies the type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	WriteOperationType *string `json:"writeOperationType,omitempty" tf:"write_operation_type,omitempty"`
}

type ScheduledObservation struct {
}

type ScheduledParameters struct {

	// Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are Incremental and Complete.
	// +kubebuilder:validation:Optional
	DataPullMode *string `json:"dataPullMode,omitempty" tf:"data_pull_mode,omitempty"`

	// Specifies the date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
	// +kubebuilder:validation:Optional
	FirstExecutionFrom *string `json:"firstExecutionFrom,omitempty" tf:"first_execution_from,omitempty"`

	// Specifies the scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	// +kubebuilder:validation:Optional
	ScheduleEndTime *string `json:"scheduleEndTime,omitempty" tf:"schedule_end_time,omitempty"`

	// The scheduling expression that determines the rate at which the schedule will run, for example rate(5minutes).
	// +kubebuilder:validation:Required
	ScheduleExpression *string `json:"scheduleExpression" tf:"schedule_expression,omitempty"`

	// Specifies the optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
	// +kubebuilder:validation:Optional
	ScheduleOffset *float64 `json:"scheduleOffset,omitempty" tf:"schedule_offset,omitempty"`

	// Specifies the scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	// +kubebuilder:validation:Optional
	ScheduleStartTime *string `json:"scheduleStartTime,omitempty" tf:"schedule_start_time,omitempty"`

	// Specifies the time zone used when referring to the date and time of a scheduled-triggered flow, such as America/New_York.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type ServiceNowObservation struct {
}

type ServiceNowParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SingularObservation struct {
}

type SingularParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SlackObservation struct {
}

type SlackParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SnowflakeErrorHandlingConfigObservation struct {
}

type SnowflakeErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type SnowflakeObservation struct {
}

type SnowflakeParameters struct {

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []SnowflakeErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	// +kubebuilder:validation:Required
	IntermediateBucketName *string `json:"intermediateBucketName" tf:"intermediate_bucket_name,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SourceConnectorPropertiesCustomConnectorObservation struct {
}

type SourceConnectorPropertiesCustomConnectorParameters struct {

	// The custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	// +kubebuilder:validation:Optional
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// The entity specified in the custom connector as a destination in the flow.
	// +kubebuilder:validation:Required
	EntityName *string `json:"entityName" tf:"entity_name,omitempty"`
}

type SourceConnectorPropertiesMarketoObservation struct {
}

type SourceConnectorPropertiesMarketoParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SourceConnectorPropertiesObservation struct {
}

type SourceConnectorPropertiesParameters struct {

	// Specifies the information that is required for querying Amplitude. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Amplitude []AmplitudeParameters `json:"amplitude,omitempty" tf:"amplitude,omitempty"`

	// The properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	// +kubebuilder:validation:Optional
	CustomConnector []SourceConnectorPropertiesCustomConnectorParameters `json:"customConnector,omitempty" tf:"custom_connector,omitempty"`

	// Specifies the information that is required for querying Datadog. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Datadog []DatadogParameters `json:"datadog,omitempty" tf:"datadog,omitempty"`

	// The operation to be performed on the provided Dynatrace source fields. Valid values are PROJECTION, BETWEEN, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	Dynatrace []DynatraceParameters `json:"dynatrace,omitempty" tf:"dynatrace,omitempty"`

	// The operation to be performed on the provided Google Analytics source fields. Valid values are PROJECTION and BETWEEN.
	// +kubebuilder:validation:Optional
	GoogleAnalytics []GoogleAnalyticsParameters `json:"googleAnalytics,omitempty" tf:"google_analytics,omitempty"`

	// Specifies the information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	InforNexus []InforNexusParameters `json:"inforNexus,omitempty" tf:"infor_nexus,omitempty"`

	// The properties that are required to query Marketo. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Marketo []SourceConnectorPropertiesMarketoParameters `json:"marketo,omitempty" tf:"marketo,omitempty"`

	// The properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	// +kubebuilder:validation:Optional
	S3 []SourceConnectorPropertiesS3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// The properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Salesforce []SourceConnectorPropertiesSalesforceParameters `json:"salesforce,omitempty" tf:"salesforce,omitempty"`

	// The properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	// +kubebuilder:validation:Optional
	SapoData []SourceConnectorPropertiesSapoDataParameters `json:"sapoData,omitempty" tf:"sapo_data,omitempty"`

	// Specifies the information that is required for querying ServiceNow. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	ServiceNow []ServiceNowParameters `json:"serviceNow,omitempty" tf:"service_now,omitempty"`

	// Specifies the information that is required for querying Singular. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Singular []SingularParameters `json:"singular,omitempty" tf:"singular,omitempty"`

	// Specifies the information that is required for querying Slack. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	Slack []SlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// The operation to be performed on the provided Trend Micro source fields. Valid values are PROJECTION, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	Trendmicro []TrendmicroParameters `json:"trendmicro,omitempty" tf:"trendmicro,omitempty"`

	// Specifies the information that is required for querying Veeva. See Veeva Source Properties for more details.
	// +kubebuilder:validation:Optional
	Veeva []VeevaParameters `json:"veeva,omitempty" tf:"veeva,omitempty"`

	// The properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	// +kubebuilder:validation:Optional
	Zendesk []SourceConnectorPropertiesZendeskParameters `json:"zendesk,omitempty" tf:"zendesk,omitempty"`
}

type SourceConnectorPropertiesS3Observation struct {
}

type SourceConnectorPropertiesS3Parameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.BucketPolicy
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("bucket",false)
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a BucketPolicy in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.Reference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a BucketPolicy in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.Selector `json:"bucketNameSelector,omitempty" tf:"-"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
	// +kubebuilder:validation:Optional
	S3InputFormatConfig []S3InputFormatConfigParameters `json:"s3InputFormatConfig,omitempty" tf:"s3_input_format_config,omitempty"`
}

type SourceConnectorPropertiesSalesforceObservation struct {
}

type SourceConnectorPropertiesSalesforceParameters struct {

	// The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
	// +kubebuilder:validation:Optional
	EnableDynamicFieldUpdate *bool `json:"enableDynamicFieldUpdate,omitempty" tf:"enable_dynamic_field_update,omitempty"`

	// Indicates whether Amazon AppFlow includes deleted files in the flow run.
	// +kubebuilder:validation:Optional
	IncludeDeletedRecords *bool `json:"includeDeletedRecords,omitempty" tf:"include_deleted_records,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SourceConnectorPropertiesSapoDataObservation struct {
}

type SourceConnectorPropertiesSapoDataParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SourceConnectorPropertiesZendeskObservation struct {
}

type SourceConnectorPropertiesZendeskParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SourceFlowConfigObservation struct {
}

type SourceFlowConfigParameters struct {

	// The API version that the destination connector uses.
	// +kubebuilder:validation:Optional
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	// The name of the connector profile. This name must be unique for each connector profile in the AWS account.
	// +kubebuilder:validation:Optional
	ConnectorProfileName *string `json:"connectorProfileName,omitempty" tf:"connector_profile_name,omitempty"`

	// The type of connector, such as Salesforce, Amplitude, and so on. Valid values are Salesforce, Singular, Slack, Redshift, S3, Marketo, Googleanalytics, Zendesk, Servicenow, Datadog, Trendmicro, Snowflake, Dynatrace, Infornexus, Amplitude, Veeva, EventBridge, LookoutMetrics, Upsolver, Honeycode, CustomerProfiles, SAPOData, and CustomConnector.
	// +kubebuilder:validation:Required
	ConnectorType *string `json:"connectorType" tf:"connector_type,omitempty"`

	// Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
	// +kubebuilder:validation:Optional
	IncrementalPullConfig []IncrementalPullConfigParameters `json:"incrementalPullConfig,omitempty" tf:"incremental_pull_config,omitempty"`

	// Specifies the information that is required to query a particular source connector. See Source Connector Properties for details.
	// +kubebuilder:validation:Required
	SourceConnectorProperties []SourceConnectorPropertiesParameters `json:"sourceConnectorProperties" tf:"source_connector_properties,omitempty"`
}

type SuccessResponseHandlingConfigObservation struct {
}

type SuccessResponseHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`
}

type TaskObservation struct {
}

type TaskParameters struct {

	// The operation to be performed on the provided source fields. See Connector Operator for details.
	// +kubebuilder:validation:Optional
	ConnectorOperator []ConnectorOperatorParameters `json:"connectorOperator,omitempty" tf:"connector_operator,omitempty"`

	// A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
	// +kubebuilder:validation:Optional
	DestinationField *string `json:"destinationField,omitempty" tf:"destination_field,omitempty"`

	// The source fields to which a particular task is applied.
	// +kubebuilder:validation:Required
	SourceFields []*string `json:"sourceFields" tf:"source_fields,omitempty"`

	// A map used to store task-related information. The execution service looks for particular information based on the TaskType. Valid keys are VALUE, VALUES, DATA_TYPE, UPPER_BOUND, LOWER_BOUND, SOURCE_DATA_TYPE, DESTINATION_DATA_TYPE, VALIDATION_ACTION, MASK_VALUE, MASK_LENGTH, TRUNCATE_LENGTH, MATH_OPERATION_FIELDS_ORDER, CONCAT_FORMAT, SUBFIELD_CATEGORY_MAP, and EXCLUDE_SOURCE_FIELDS_LIST.
	// +kubebuilder:validation:Optional
	TaskProperties map[string]*string `json:"taskProperties,omitempty" tf:"task_properties,omitempty"`

	// Specifies the particular task implementation that Amazon AppFlow performs. Valid values are Arithmetic, Filter, Map, Map_all, Mask, Merge, Passthrough, Truncate, and Validate.
	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`
}

type TrendmicroObservation struct {
}

type TrendmicroParameters struct {

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type TriggerConfigObservation struct {
}

type TriggerConfigParameters struct {

	// Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the Scheduled trigger type. See Scheduled Trigger Properties for details.
	// +kubebuilder:validation:Optional
	TriggerProperties []TriggerPropertiesParameters `json:"triggerProperties,omitempty" tf:"trigger_properties,omitempty"`

	// Specifies the type of flow trigger. Valid values are Scheduled, Event, and OnDemand.
	// +kubebuilder:validation:Required
	TriggerType *string `json:"triggerType" tf:"trigger_type,omitempty"`
}

type TriggerPropertiesObservation struct {
}

type TriggerPropertiesParameters struct {

	// +kubebuilder:validation:Optional
	Scheduled []ScheduledParameters `json:"scheduled,omitempty" tf:"scheduled,omitempty"`
}

type UpsolverObservation struct {
}

type UpsolverParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	// +kubebuilder:validation:Required
	S3OutputFormatConfig []UpsolverS3OutputFormatConfigParameters `json:"s3OutputFormatConfig" tf:"s3_output_format_config,omitempty"`
}

type UpsolverS3OutputFormatConfigObservation struct {
}

type UpsolverS3OutputFormatConfigParameters struct {

	// The aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	// +kubebuilder:validation:Optional
	AggregationConfig []S3OutputFormatConfigAggregationConfigParameters `json:"aggregationConfig,omitempty" tf:"aggregation_config,omitempty"`

	// Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are CSV, JSON, and PARQUET.
	// +kubebuilder:validation:Optional
	FileType *string `json:"fileType,omitempty" tf:"file_type,omitempty"`

	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	// +kubebuilder:validation:Required
	PrefixConfig []S3OutputFormatConfigPrefixConfigParameters `json:"prefixConfig" tf:"prefix_config,omitempty"`
}

type VeevaObservation struct {
}

type VeevaParameters struct {

	// The document type specified in the Veeva document extract flow.
	// +kubebuilder:validation:Optional
	DocumentType *string `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// Boolean value to include All Versions of files in Veeva document extract flow.
	// +kubebuilder:validation:Optional
	IncludeAllVersions *bool `json:"includeAllVersions,omitempty" tf:"include_all_versions,omitempty"`

	// Boolean value to include file renditions in Veeva document extract flow.
	// +kubebuilder:validation:Optional
	IncludeRenditions *bool `json:"includeRenditions,omitempty" tf:"include_renditions,omitempty"`

	// Boolean value to include source files in Veeva document extract flow.
	// +kubebuilder:validation:Optional
	IncludeSourceFiles *bool `json:"includeSourceFiles,omitempty" tf:"include_source_files,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type ZendeskErrorHandlingConfigObservation struct {
}

type ZendeskErrorHandlingConfigParameters struct {

	// The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix,omitempty"`

	// Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	FailOnFirstDestinationError *bool `json:"failOnFirstDestinationError,omitempty" tf:"fail_on_first_destination_error,omitempty"`
}

type ZendeskObservation struct {
}

type ZendeskParameters struct {

	// The settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	ErrorHandlingConfig []ZendeskErrorHandlingConfigParameters `json:"errorHandlingConfig,omitempty" tf:"error_handling_config,omitempty"`

	// The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	IDFieldNames []*string `json:"idFieldNames,omitempty" tf:"id_field_names,omitempty"`

	// The object specified in the flow destination.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`

	// Specifies the type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	WriteOperationType *string `json:"writeOperationType,omitempty" tf:"write_operation_type,omitempty"`
}

// FlowSpec defines the desired state of Flow
type FlowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlowParameters `json:"forProvider"`
}

// FlowStatus defines the observed state of Flow.
type FlowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Flow is the Schema for the Flows API. Provides an AppFlow Flow resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Flow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlowSpec   `json:"spec"`
	Status            FlowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlowList contains a list of Flows
type FlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Flow `json:"items"`
}

// Repository type metadata.
var (
	Flow_Kind             = "Flow"
	Flow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Flow_Kind}.String()
	Flow_KindAPIVersion   = Flow_Kind + "." + CRDGroupVersion.String()
	Flow_GroupVersionKind = CRDGroupVersion.WithKind(Flow_Kind)
)

func init() {
	SchemeBuilder.Register(&Flow{}, &FlowList{})
}
