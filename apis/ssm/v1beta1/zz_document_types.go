// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentsSourceInitParameters struct {

	// The key of a key-value pair that identifies the location of an attachment to the document. Valid values: SourceUrl, S3FileUrl, AttachmentReference.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The name of the document attachment file.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of a key-value pair that identifies the location of an attachment to the document. The argument format is a list of a single string that depends on the type of key you specify - see the API Reference for details.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AttachmentsSourceObservation struct {

	// The key of a key-value pair that identifies the location of an attachment to the document. Valid values: SourceUrl, S3FileUrl, AttachmentReference.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The name of the document attachment file.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of a key-value pair that identifies the location of an attachment to the document. The argument format is a list of a single string that depends on the type of key you specify - see the API Reference for details.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AttachmentsSourceParameters struct {

	// The key of a key-value pair that identifies the location of an attachment to the document. Valid values: SourceUrl, S3FileUrl, AttachmentReference.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The name of the document attachment file.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of a key-value pair that identifies the location of an attachment to the document. The argument format is a list of a single string that depends on the type of key you specify - see the API Reference for details.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type DocumentInitParameters struct {

	// One or more configuration blocks describing attachments sources to a version of a document. See attachments_source block below for details.
	AttachmentsSource []AttachmentsSourceInitParameters `json:"attachmentsSource,omitempty" tf:"attachments_source,omitempty"`

	// The content for the SSM document in JSON or YAML format. The content of the document must not exceed 64KB. This quota also includes the content specified for input parameters at runtime. We recommend storing the contents for your new document in an external JSON or YAML file and referencing the file in a command.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The format of the document. Valid values: JSON, TEXT, YAML.
	DocumentFormat *string `json:"documentFormat,omitempty" tf:"document_format,omitempty"`

	// The type of the document. For a list of valid values, see the API Reference.
	DocumentType *string `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// Additional permissions to attach to the document. See Permissions below for details.
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS resource and property types reference.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// The version of the artifact associated with the document. For example, 12.6. This value is unique across all versions of a document, and can't be changed.
	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`
}

type DocumentObservation struct {

	// The Amazon Resource Name (ARN) of the document.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// One or more configuration blocks describing attachments sources to a version of a document. See attachments_source block below for details.
	AttachmentsSource []AttachmentsSourceObservation `json:"attachmentsSource,omitempty" tf:"attachments_source,omitempty"`

	// The content for the SSM document in JSON or YAML format. The content of the document must not exceed 64KB. This quota also includes the content specified for input parameters at runtime. We recommend storing the contents for your new document in an external JSON or YAML file and referencing the file in a command.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The date the document was created.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	// The default version of the document.
	DefaultVersion *string `json:"defaultVersion,omitempty" tf:"default_version,omitempty"`

	// The description of the document.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The format of the document. Valid values: JSON, TEXT, YAML.
	DocumentFormat *string `json:"documentFormat,omitempty" tf:"document_format,omitempty"`

	// The type of the document. For a list of valid values, see the API Reference.
	DocumentType *string `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// The document version.
	DocumentVersion *string `json:"documentVersion,omitempty" tf:"document_version,omitempty"`

	// The Sha256 or Sha1 hash created by the system when the document was created.
	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	// The hash type of the document. Valid values: Sha256, Sha1.
	HashType *string `json:"hashType,omitempty" tf:"hash_type,omitempty"`

	// The name of the document.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The latest version of the document.
	LatestVersion *string `json:"latestVersion,omitempty" tf:"latest_version,omitempty"`

	// The Amazon Web Services user that created the document.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// One or more configuration blocks describing the parameters for the document. See parameter block below for details.
	Parameter []ParameterObservation `json:"parameter,omitempty" tf:"parameter,omitempty"`

	// Additional permissions to attach to the document. See Permissions below for details.
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The list of operating system (OS) platforms compatible with this SSM document. Valid values: Windows, Linux, MacOS.
	PlatformTypes []*string `json:"platformTypes,omitempty" tf:"platform_types,omitempty"`

	// The schema version of the document.
	SchemaVersion *string `json:"schemaVersion,omitempty" tf:"schema_version,omitempty"`

	// The status of the SSM document. Valid values: Creating, Active, Updating, Deleting, Failed.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS resource and property types reference.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// The version of the artifact associated with the document. For example, 12.6. This value is unique across all versions of a document, and can't be changed.
	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`
}

type DocumentParameters struct {

	// One or more configuration blocks describing attachments sources to a version of a document. See attachments_source block below for details.
	// +kubebuilder:validation:Optional
	AttachmentsSource []AttachmentsSourceParameters `json:"attachmentsSource,omitempty" tf:"attachments_source,omitempty"`

	// The content for the SSM document in JSON or YAML format. The content of the document must not exceed 64KB. This quota also includes the content specified for input parameters at runtime. We recommend storing the contents for your new document in an external JSON or YAML file and referencing the file in a command.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The format of the document. Valid values: JSON, TEXT, YAML.
	// +kubebuilder:validation:Optional
	DocumentFormat *string `json:"documentFormat,omitempty" tf:"document_format,omitempty"`

	// The type of the document. For a list of valid values, see the API Reference.
	// +kubebuilder:validation:Optional
	DocumentType *string `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// Additional permissions to attach to the document. See Permissions below for details.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS resource and property types reference.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// The version of the artifact associated with the document. For example, 12.6. This value is unique across all versions of a document, and can't be changed.
	// +kubebuilder:validation:Optional
	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`
}

type ParameterInitParameters struct {
}

type ParameterObservation struct {

	// If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value,omitempty"`

	// A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the parameter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of parameter. Valid values: String, StringList.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ParameterParameters struct {
}

// DocumentSpec defines the desired state of Document
type DocumentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DocumentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DocumentInitParameters `json:"initProvider,omitempty"`
}

// DocumentStatus defines the observed state of Document.
type DocumentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DocumentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Document is the Schema for the Documents API. Provides an SSM Document resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Document struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.documentType) || (has(self.initProvider) && has(self.initProvider.documentType))",message="spec.forProvider.documentType is a required parameter"
	Spec   DocumentSpec   `json:"spec"`
	Status DocumentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DocumentList contains a list of Documents
type DocumentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Document `json:"items"`
}

// Repository type metadata.
var (
	Document_Kind             = "Document"
	Document_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Document_Kind}.String()
	Document_KindAPIVersion   = Document_Kind + "." + CRDGroupVersion.String()
	Document_GroupVersionKind = CRDGroupVersion.WithKind(Document_Kind)
)

func init() {
	SchemeBuilder.Register(&Document{}, &DocumentList{})
}
