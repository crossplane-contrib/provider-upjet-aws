/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MaintenanceWindowObservation struct {

	// The ID of the maintenance window.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type MaintenanceWindowParameters struct {

	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	// +kubebuilder:validation:Optional
	AllowUnassociatedTargets *bool `json:"allowUnassociatedTargets,omitempty" tf:"allow_unassociated_targets,omitempty"`

	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	// +kubebuilder:validation:Required
	Cutoff *float64 `json:"cutoff" tf:"cutoff,omitempty"`

	// A description for the maintenance window.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The duration of the Maintenance Window in hours.
	// +kubebuilder:validation:Required
	Duration *float64 `json:"duration" tf:"duration,omitempty"`

	// Whether the maintenance window is enabled. Default: true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Timestamp in ISO-8601 extended format when to no longer run the maintenance window.
	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// The name of the maintenance window.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The schedule of the Maintenance Window in the form of a cron or rate expression.
	// +kubebuilder:validation:Required
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`

	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	// +kubebuilder:validation:Optional
	ScheduleOffset *float64 `json:"scheduleOffset,omitempty" tf:"schedule_offset,omitempty"`

	// Timezone for schedule in Internet Assigned Numbers Authority (IANA) Time Zone Database format. For example: America/Los_Angeles, etc/UTC, or Asia/Seoul.
	// +kubebuilder:validation:Optional
	ScheduleTimezone *string `json:"scheduleTimezone,omitempty" tf:"schedule_timezone,omitempty"`

	// Timestamp in ISO-8601 extended format when to begin the maintenance window.
	// +kubebuilder:validation:Optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// MaintenanceWindowSpec defines the desired state of MaintenanceWindow
type MaintenanceWindowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MaintenanceWindowParameters `json:"forProvider"`
}

// MaintenanceWindowStatus defines the observed state of MaintenanceWindow.
type MaintenanceWindowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MaintenanceWindowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceWindow is the Schema for the MaintenanceWindows API. Provides an SSM Maintenance Window resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type MaintenanceWindow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaintenanceWindowSpec   `json:"spec"`
	Status            MaintenanceWindowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceWindowList contains a list of MaintenanceWindows
type MaintenanceWindowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MaintenanceWindow `json:"items"`
}

// Repository type metadata.
var (
	MaintenanceWindow_Kind             = "MaintenanceWindow"
	MaintenanceWindow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MaintenanceWindow_Kind}.String()
	MaintenanceWindow_KindAPIVersion   = MaintenanceWindow_Kind + "." + CRDGroupVersion.String()
	MaintenanceWindow_GroupVersionKind = CRDGroupVersion.WithKind(MaintenanceWindow_Kind)
)

func init() {
	SchemeBuilder.Register(&MaintenanceWindow{}, &MaintenanceWindowList{})
}
