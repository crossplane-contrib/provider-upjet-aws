/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta11 "github.com/upbound/provider-aws/apis/lambda/v1beta1"
	v1beta13 "github.com/upbound/provider-aws/apis/s3/v1beta1"
	v1beta12 "github.com/upbound/provider-aws/apis/sns/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Activation.
func (mg *Activation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IAMRole),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IAMRoleRef,
		Selector:     mg.Spec.ForProvider.IAMRoleSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IAMRole")
	}
	mg.Spec.ForProvider.IAMRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IAMRoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Association.
func (mg *Association) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NameRef,
		Selector:     mg.Spec.ForProvider.NameSelector,
		To: reference.To{
			List:    &DocumentList{},
			Managed: &Document{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DefaultPatchBaseline.
func (mg *DefaultPatchBaseline) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BaselineID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.BaselineIDRef,
		Selector:     mg.Spec.ForProvider.BaselineIDSelector,
		To: reference.To{
			List:    &PatchBaselineList{},
			Managed: &PatchBaseline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BaselineID")
	}
	mg.Spec.ForProvider.BaselineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BaselineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OperatingSystem),
		Extract:      resource.ExtractParamPath("operating_system", false),
		Reference:    mg.Spec.ForProvider.OperatingSystemRef,
		Selector:     mg.Spec.ForProvider.OperatingSystemSelector,
		To: reference.To{
			List:    &PatchBaselineList{},
			Managed: &PatchBaseline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OperatingSystem")
	}
	mg.Spec.ForProvider.OperatingSystem = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OperatingSystemRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MaintenanceWindowTarget.
func (mg *MaintenanceWindowTarget) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WindowID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.WindowIDRef,
		Selector:     mg.Spec.ForProvider.WindowIDSelector,
		To: reference.To{
			List:    &MaintenanceWindowList{},
			Managed: &MaintenanceWindow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WindowID")
	}
	mg.Spec.ForProvider.WindowID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WindowIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MaintenanceWindowTask.
func (mg *MaintenanceWindowTask) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.ServiceRoleArnRef,
		Selector:     mg.Spec.ForProvider.ServiceRoleArnSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRoleArn")
	}
	mg.Spec.ForProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TaskArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.TaskArnRef,
		Selector:     mg.Spec.ForProvider.TaskArnSelector,
		To: reference.To{
			List:    &v1beta11.FunctionList{},
			Managed: &v1beta11.Function{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TaskArn")
	}
	mg.Spec.ForProvider.TaskArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TaskArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.TaskInvocationParameters); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig[i5].NotificationArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Reference:    mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig[i5].NotificationArnRef,
					Selector:     mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig[i5].NotificationArnSelector,
					To: reference.To{
						List:    &v1beta12.TopicList{},
						Managed: &v1beta12.Topic{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig[i5].NotificationArn")
				}
				mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig[i5].NotificationArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].NotificationConfig[i5].NotificationArnRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.TaskInvocationParameters); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].OutputS3Bucket),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].OutputS3BucketRef,
				Selector:     mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].OutputS3BucketSelector,
				To: reference.To{
					List:    &v1beta13.BucketList{},
					Managed: &v1beta13.Bucket{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].OutputS3Bucket")
			}
			mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].OutputS3Bucket = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].OutputS3BucketRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.TaskInvocationParameters); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].ServiceRoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].ServiceRoleArnRef,
				Selector:     mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].ServiceRoleArnSelector,
				To: reference.To{
					List:    &v1beta1.RoleList{},
					Managed: &v1beta1.Role{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].ServiceRoleArn")
			}
			mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.TaskInvocationParameters[i3].RunCommandParameters[i4].ServiceRoleArnRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WindowID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.WindowIDRef,
		Selector:     mg.Spec.ForProvider.WindowIDSelector,
		To: reference.To{
			List:    &MaintenanceWindowList{},
			Managed: &MaintenanceWindow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WindowID")
	}
	mg.Spec.ForProvider.WindowID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WindowIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PatchGroup.
func (mg *PatchGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BaselineID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.BaselineIDRef,
		Selector:     mg.Spec.ForProvider.BaselineIDSelector,
		To: reference.To{
			List:    &PatchBaselineList{},
			Managed: &PatchBaseline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BaselineID")
	}
	mg.Spec.ForProvider.BaselineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BaselineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ResourceDataSync.
func (mg *ResourceDataSync) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.S3Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3Destination[i3].BucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.S3Destination[i3].BucketNameRef,
			Selector:     mg.Spec.ForProvider.S3Destination[i3].BucketNameSelector,
			To: reference.To{
				List:    &v1beta13.BucketList{},
				Managed: &v1beta13.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3Destination[i3].BucketName")
		}
		mg.Spec.ForProvider.S3Destination[i3].BucketName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3Destination[i3].BucketNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.S3Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3Destination[i3].Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.S3Destination[i3].RegionRef,
			Selector:     mg.Spec.ForProvider.S3Destination[i3].RegionSelector,
			To: reference.To{
				List:    &v1beta13.BucketList{},
				Managed: &v1beta13.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3Destination[i3].Region")
		}
		mg.Spec.ForProvider.S3Destination[i3].Region = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3Destination[i3].RegionRef = rsp.ResolvedReference

	}

	return nil
}
