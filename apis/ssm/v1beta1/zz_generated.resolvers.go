/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Activation.
func (mg *Activation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IAMRole),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IAMRoleRef,
		Selector:     mg.Spec.ForProvider.IAMRoleSelector,
		To: reference.To{
			List:    &v1beta1.RoleList{},
			Managed: &v1beta1.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IAMRole")
	}
	mg.Spec.ForProvider.IAMRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IAMRoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Association.
func (mg *Association) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NameRef,
		Selector:     mg.Spec.ForProvider.NameSelector,
		To: reference.To{
			List:    &DocumentList{},
			Managed: &Document{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MaintenanceWindowTarget.
func (mg *MaintenanceWindowTarget) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WindowID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.WindowIDRef,
		Selector:     mg.Spec.ForProvider.WindowIDSelector,
		To: reference.To{
			List:    &MaintenanceWindowList{},
			Managed: &MaintenanceWindow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WindowID")
	}
	mg.Spec.ForProvider.WindowID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WindowIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PatchGroup.
func (mg *PatchGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BaselineID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.BaselineIDRef,
		Selector:     mg.Spec.ForProvider.BaselineIDSelector,
		To: reference.To{
			List:    &PatchBaselineList{},
			Managed: &PatchBaseline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BaselineID")
	}
	mg.Spec.ForProvider.BaselineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BaselineIDRef = rsp.ResolvedReference

	return nil
}
