//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Association) DeepCopyInto(out *Association) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Association.
func (in *Association) DeepCopy() *Association {
	if in == nil {
		return nil
	}
	out := new(Association)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Association) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociationInitParameters) DeepCopyInto(out *AssociationInitParameters) {
	*out = *in
	if in.ApplyOnlyAtCronInterval != nil {
		in, out := &in.ApplyOnlyAtCronInterval, &out.ApplyOnlyAtCronInterval
		*out = new(bool)
		**out = **in
	}
	if in.AssociationName != nil {
		in, out := &in.AssociationName, &out.AssociationName
		*out = new(string)
		**out = **in
	}
	if in.AutomationTargetParameterName != nil {
		in, out := &in.AutomationTargetParameterName, &out.AutomationTargetParameterName
		*out = new(string)
		**out = **in
	}
	if in.ComplianceSeverity != nil {
		in, out := &in.ComplianceSeverity, &out.ComplianceSeverity
		*out = new(string)
		**out = **in
	}
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(string)
		**out = **in
	}
	if in.MaxErrors != nil {
		in, out := &in.MaxErrors, &out.MaxErrors
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputLocation != nil {
		in, out := &in.OutputLocation, &out.OutputLocation
		*out = new(OutputLocationInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ScheduleExpression != nil {
		in, out := &in.ScheduleExpression, &out.ScheduleExpression
		*out = new(string)
		**out = **in
	}
	if in.SyncCompliance != nil {
		in, out := &in.SyncCompliance, &out.SyncCompliance
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]TargetsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WaitForSuccessTimeoutSeconds != nil {
		in, out := &in.WaitForSuccessTimeoutSeconds, &out.WaitForSuccessTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociationInitParameters.
func (in *AssociationInitParameters) DeepCopy() *AssociationInitParameters {
	if in == nil {
		return nil
	}
	out := new(AssociationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociationList) DeepCopyInto(out *AssociationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Association, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociationList.
func (in *AssociationList) DeepCopy() *AssociationList {
	if in == nil {
		return nil
	}
	out := new(AssociationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AssociationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociationObservation) DeepCopyInto(out *AssociationObservation) {
	*out = *in
	if in.ApplyOnlyAtCronInterval != nil {
		in, out := &in.ApplyOnlyAtCronInterval, &out.ApplyOnlyAtCronInterval
		*out = new(bool)
		**out = **in
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.AssociationID != nil {
		in, out := &in.AssociationID, &out.AssociationID
		*out = new(string)
		**out = **in
	}
	if in.AssociationName != nil {
		in, out := &in.AssociationName, &out.AssociationName
		*out = new(string)
		**out = **in
	}
	if in.AutomationTargetParameterName != nil {
		in, out := &in.AutomationTargetParameterName, &out.AutomationTargetParameterName
		*out = new(string)
		**out = **in
	}
	if in.ComplianceSeverity != nil {
		in, out := &in.ComplianceSeverity, &out.ComplianceSeverity
		*out = new(string)
		**out = **in
	}
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(string)
		**out = **in
	}
	if in.MaxErrors != nil {
		in, out := &in.MaxErrors, &out.MaxErrors
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OutputLocation != nil {
		in, out := &in.OutputLocation, &out.OutputLocation
		*out = new(OutputLocationObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ScheduleExpression != nil {
		in, out := &in.ScheduleExpression, &out.ScheduleExpression
		*out = new(string)
		**out = **in
	}
	if in.SyncCompliance != nil {
		in, out := &in.SyncCompliance, &out.SyncCompliance
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]TargetsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WaitForSuccessTimeoutSeconds != nil {
		in, out := &in.WaitForSuccessTimeoutSeconds, &out.WaitForSuccessTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociationObservation.
func (in *AssociationObservation) DeepCopy() *AssociationObservation {
	if in == nil {
		return nil
	}
	out := new(AssociationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociationParameters) DeepCopyInto(out *AssociationParameters) {
	*out = *in
	if in.ApplyOnlyAtCronInterval != nil {
		in, out := &in.ApplyOnlyAtCronInterval, &out.ApplyOnlyAtCronInterval
		*out = new(bool)
		**out = **in
	}
	if in.AssociationName != nil {
		in, out := &in.AssociationName, &out.AssociationName
		*out = new(string)
		**out = **in
	}
	if in.AutomationTargetParameterName != nil {
		in, out := &in.AutomationTargetParameterName, &out.AutomationTargetParameterName
		*out = new(string)
		**out = **in
	}
	if in.ComplianceSeverity != nil {
		in, out := &in.ComplianceSeverity, &out.ComplianceSeverity
		*out = new(string)
		**out = **in
	}
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(string)
		**out = **in
	}
	if in.MaxErrors != nil {
		in, out := &in.MaxErrors, &out.MaxErrors
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputLocation != nil {
		in, out := &in.OutputLocation, &out.OutputLocation
		*out = new(OutputLocationParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ScheduleExpression != nil {
		in, out := &in.ScheduleExpression, &out.ScheduleExpression
		*out = new(string)
		**out = **in
	}
	if in.SyncCompliance != nil {
		in, out := &in.SyncCompliance, &out.SyncCompliance
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]TargetsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WaitForSuccessTimeoutSeconds != nil {
		in, out := &in.WaitForSuccessTimeoutSeconds, &out.WaitForSuccessTimeoutSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociationParameters.
func (in *AssociationParameters) DeepCopy() *AssociationParameters {
	if in == nil {
		return nil
	}
	out := new(AssociationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociationSpec) DeepCopyInto(out *AssociationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociationSpec.
func (in *AssociationSpec) DeepCopy() *AssociationSpec {
	if in == nil {
		return nil
	}
	out := new(AssociationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociationStatus) DeepCopyInto(out *AssociationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociationStatus.
func (in *AssociationStatus) DeepCopy() *AssociationStatus {
	if in == nil {
		return nil
	}
	out := new(AssociationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutomationParametersInitParameters) DeepCopyInto(out *AutomationParametersInitParameters) {
	*out = *in
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.Parameter != nil {
		in, out := &in.Parameter, &out.Parameter
		*out = make([]ParameterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutomationParametersInitParameters.
func (in *AutomationParametersInitParameters) DeepCopy() *AutomationParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutomationParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutomationParametersObservation) DeepCopyInto(out *AutomationParametersObservation) {
	*out = *in
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.Parameter != nil {
		in, out := &in.Parameter, &out.Parameter
		*out = make([]ParameterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutomationParametersObservation.
func (in *AutomationParametersObservation) DeepCopy() *AutomationParametersObservation {
	if in == nil {
		return nil
	}
	out := new(AutomationParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutomationParametersParameters) DeepCopyInto(out *AutomationParametersParameters) {
	*out = *in
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.Parameter != nil {
		in, out := &in.Parameter, &out.Parameter
		*out = make([]ParameterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutomationParametersParameters.
func (in *AutomationParametersParameters) DeepCopy() *AutomationParametersParameters {
	if in == nil {
		return nil
	}
	out := new(AutomationParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudwatchConfigInitParameters) DeepCopyInto(out *CloudwatchConfigInitParameters) {
	*out = *in
	if in.CloudwatchLogGroupName != nil {
		in, out := &in.CloudwatchLogGroupName, &out.CloudwatchLogGroupName
		*out = new(string)
		**out = **in
	}
	if in.CloudwatchOutputEnabled != nil {
		in, out := &in.CloudwatchOutputEnabled, &out.CloudwatchOutputEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudwatchConfigInitParameters.
func (in *CloudwatchConfigInitParameters) DeepCopy() *CloudwatchConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(CloudwatchConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudwatchConfigObservation) DeepCopyInto(out *CloudwatchConfigObservation) {
	*out = *in
	if in.CloudwatchLogGroupName != nil {
		in, out := &in.CloudwatchLogGroupName, &out.CloudwatchLogGroupName
		*out = new(string)
		**out = **in
	}
	if in.CloudwatchOutputEnabled != nil {
		in, out := &in.CloudwatchOutputEnabled, &out.CloudwatchOutputEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudwatchConfigObservation.
func (in *CloudwatchConfigObservation) DeepCopy() *CloudwatchConfigObservation {
	if in == nil {
		return nil
	}
	out := new(CloudwatchConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudwatchConfigParameters) DeepCopyInto(out *CloudwatchConfigParameters) {
	*out = *in
	if in.CloudwatchLogGroupName != nil {
		in, out := &in.CloudwatchLogGroupName, &out.CloudwatchLogGroupName
		*out = new(string)
		**out = **in
	}
	if in.CloudwatchOutputEnabled != nil {
		in, out := &in.CloudwatchOutputEnabled, &out.CloudwatchOutputEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudwatchConfigParameters.
func (in *CloudwatchConfigParameters) DeepCopy() *CloudwatchConfigParameters {
	if in == nil {
		return nil
	}
	out := new(CloudwatchConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LambdaParametersInitParameters) DeepCopyInto(out *LambdaParametersInitParameters) {
	*out = *in
	if in.ClientContext != nil {
		in, out := &in.ClientContext, &out.ClientContext
		*out = new(string)
		**out = **in
	}
	if in.PayloadSecretRef != nil {
		in, out := &in.PayloadSecretRef, &out.PayloadSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Qualifier != nil {
		in, out := &in.Qualifier, &out.Qualifier
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LambdaParametersInitParameters.
func (in *LambdaParametersInitParameters) DeepCopy() *LambdaParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(LambdaParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LambdaParametersObservation) DeepCopyInto(out *LambdaParametersObservation) {
	*out = *in
	if in.ClientContext != nil {
		in, out := &in.ClientContext, &out.ClientContext
		*out = new(string)
		**out = **in
	}
	if in.Qualifier != nil {
		in, out := &in.Qualifier, &out.Qualifier
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LambdaParametersObservation.
func (in *LambdaParametersObservation) DeepCopy() *LambdaParametersObservation {
	if in == nil {
		return nil
	}
	out := new(LambdaParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LambdaParametersParameters) DeepCopyInto(out *LambdaParametersParameters) {
	*out = *in
	if in.ClientContext != nil {
		in, out := &in.ClientContext, &out.ClientContext
		*out = new(string)
		**out = **in
	}
	if in.PayloadSecretRef != nil {
		in, out := &in.PayloadSecretRef, &out.PayloadSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Qualifier != nil {
		in, out := &in.Qualifier, &out.Qualifier
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LambdaParametersParameters.
func (in *LambdaParametersParameters) DeepCopy() *LambdaParametersParameters {
	if in == nil {
		return nil
	}
	out := new(LambdaParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTask) DeepCopyInto(out *MaintenanceWindowTask) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTask.
func (in *MaintenanceWindowTask) DeepCopy() *MaintenanceWindowTask {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTask)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MaintenanceWindowTask) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskInitParameters) DeepCopyInto(out *MaintenanceWindowTaskInitParameters) {
	*out = *in
	if in.CutoffBehavior != nil {
		in, out := &in.CutoffBehavior, &out.CutoffBehavior
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(string)
		**out = **in
	}
	if in.MaxErrors != nil {
		in, out := &in.MaxErrors, &out.MaxErrors
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ServiceRoleArn != nil {
		in, out := &in.ServiceRoleArn, &out.ServiceRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ServiceRoleArnRef != nil {
		in, out := &in.ServiceRoleArnRef, &out.ServiceRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceRoleArnSelector != nil {
		in, out := &in.ServiceRoleArnSelector, &out.ServiceRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]MaintenanceWindowTaskTargetsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TaskArn != nil {
		in, out := &in.TaskArn, &out.TaskArn
		*out = new(string)
		**out = **in
	}
	if in.TaskArnRef != nil {
		in, out := &in.TaskArnRef, &out.TaskArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskArnSelector != nil {
		in, out := &in.TaskArnSelector, &out.TaskArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskInvocationParameters != nil {
		in, out := &in.TaskInvocationParameters, &out.TaskInvocationParameters
		*out = new(TaskInvocationParametersInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskType != nil {
		in, out := &in.TaskType, &out.TaskType
		*out = new(string)
		**out = **in
	}
	if in.WindowID != nil {
		in, out := &in.WindowID, &out.WindowID
		*out = new(string)
		**out = **in
	}
	if in.WindowIDRef != nil {
		in, out := &in.WindowIDRef, &out.WindowIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.WindowIDSelector != nil {
		in, out := &in.WindowIDSelector, &out.WindowIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskInitParameters.
func (in *MaintenanceWindowTaskInitParameters) DeepCopy() *MaintenanceWindowTaskInitParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskList) DeepCopyInto(out *MaintenanceWindowTaskList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MaintenanceWindowTask, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskList.
func (in *MaintenanceWindowTaskList) DeepCopy() *MaintenanceWindowTaskList {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MaintenanceWindowTaskList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskObservation) DeepCopyInto(out *MaintenanceWindowTaskObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.CutoffBehavior != nil {
		in, out := &in.CutoffBehavior, &out.CutoffBehavior
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(string)
		**out = **in
	}
	if in.MaxErrors != nil {
		in, out := &in.MaxErrors, &out.MaxErrors
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ServiceRoleArn != nil {
		in, out := &in.ServiceRoleArn, &out.ServiceRoleArn
		*out = new(string)
		**out = **in
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]MaintenanceWindowTaskTargetsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TaskArn != nil {
		in, out := &in.TaskArn, &out.TaskArn
		*out = new(string)
		**out = **in
	}
	if in.TaskInvocationParameters != nil {
		in, out := &in.TaskInvocationParameters, &out.TaskInvocationParameters
		*out = new(TaskInvocationParametersObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskType != nil {
		in, out := &in.TaskType, &out.TaskType
		*out = new(string)
		**out = **in
	}
	if in.WindowID != nil {
		in, out := &in.WindowID, &out.WindowID
		*out = new(string)
		**out = **in
	}
	if in.WindowTaskID != nil {
		in, out := &in.WindowTaskID, &out.WindowTaskID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskObservation.
func (in *MaintenanceWindowTaskObservation) DeepCopy() *MaintenanceWindowTaskObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskParameters) DeepCopyInto(out *MaintenanceWindowTaskParameters) {
	*out = *in
	if in.CutoffBehavior != nil {
		in, out := &in.CutoffBehavior, &out.CutoffBehavior
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.MaxConcurrency != nil {
		in, out := &in.MaxConcurrency, &out.MaxConcurrency
		*out = new(string)
		**out = **in
	}
	if in.MaxErrors != nil {
		in, out := &in.MaxErrors, &out.MaxErrors
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ServiceRoleArn != nil {
		in, out := &in.ServiceRoleArn, &out.ServiceRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ServiceRoleArnRef != nil {
		in, out := &in.ServiceRoleArnRef, &out.ServiceRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceRoleArnSelector != nil {
		in, out := &in.ServiceRoleArnSelector, &out.ServiceRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]MaintenanceWindowTaskTargetsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TaskArn != nil {
		in, out := &in.TaskArn, &out.TaskArn
		*out = new(string)
		**out = **in
	}
	if in.TaskArnRef != nil {
		in, out := &in.TaskArnRef, &out.TaskArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskArnSelector != nil {
		in, out := &in.TaskArnSelector, &out.TaskArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskInvocationParameters != nil {
		in, out := &in.TaskInvocationParameters, &out.TaskInvocationParameters
		*out = new(TaskInvocationParametersParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.TaskType != nil {
		in, out := &in.TaskType, &out.TaskType
		*out = new(string)
		**out = **in
	}
	if in.WindowID != nil {
		in, out := &in.WindowID, &out.WindowID
		*out = new(string)
		**out = **in
	}
	if in.WindowIDRef != nil {
		in, out := &in.WindowIDRef, &out.WindowIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.WindowIDSelector != nil {
		in, out := &in.WindowIDSelector, &out.WindowIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskParameters.
func (in *MaintenanceWindowTaskParameters) DeepCopy() *MaintenanceWindowTaskParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskSpec) DeepCopyInto(out *MaintenanceWindowTaskSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskSpec.
func (in *MaintenanceWindowTaskSpec) DeepCopy() *MaintenanceWindowTaskSpec {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskStatus) DeepCopyInto(out *MaintenanceWindowTaskStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskStatus.
func (in *MaintenanceWindowTaskStatus) DeepCopy() *MaintenanceWindowTaskStatus {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskTargetsInitParameters) DeepCopyInto(out *MaintenanceWindowTaskTargetsInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskTargetsInitParameters.
func (in *MaintenanceWindowTaskTargetsInitParameters) DeepCopy() *MaintenanceWindowTaskTargetsInitParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskTargetsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskTargetsObservation) DeepCopyInto(out *MaintenanceWindowTaskTargetsObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskTargetsObservation.
func (in *MaintenanceWindowTaskTargetsObservation) DeepCopy() *MaintenanceWindowTaskTargetsObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskTargetsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowTaskTargetsParameters) DeepCopyInto(out *MaintenanceWindowTaskTargetsParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowTaskTargetsParameters.
func (in *MaintenanceWindowTaskTargetsParameters) DeepCopy() *MaintenanceWindowTaskTargetsParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowTaskTargetsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationConfigInitParameters) DeepCopyInto(out *NotificationConfigInitParameters) {
	*out = *in
	if in.NotificationArn != nil {
		in, out := &in.NotificationArn, &out.NotificationArn
		*out = new(string)
		**out = **in
	}
	if in.NotificationArnRef != nil {
		in, out := &in.NotificationArnRef, &out.NotificationArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NotificationArnSelector != nil {
		in, out := &in.NotificationArnSelector, &out.NotificationArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.NotificationEvents != nil {
		in, out := &in.NotificationEvents, &out.NotificationEvents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotificationType != nil {
		in, out := &in.NotificationType, &out.NotificationType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationConfigInitParameters.
func (in *NotificationConfigInitParameters) DeepCopy() *NotificationConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationConfigObservation) DeepCopyInto(out *NotificationConfigObservation) {
	*out = *in
	if in.NotificationArn != nil {
		in, out := &in.NotificationArn, &out.NotificationArn
		*out = new(string)
		**out = **in
	}
	if in.NotificationEvents != nil {
		in, out := &in.NotificationEvents, &out.NotificationEvents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotificationType != nil {
		in, out := &in.NotificationType, &out.NotificationType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationConfigObservation.
func (in *NotificationConfigObservation) DeepCopy() *NotificationConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NotificationConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationConfigParameters) DeepCopyInto(out *NotificationConfigParameters) {
	*out = *in
	if in.NotificationArn != nil {
		in, out := &in.NotificationArn, &out.NotificationArn
		*out = new(string)
		**out = **in
	}
	if in.NotificationArnRef != nil {
		in, out := &in.NotificationArnRef, &out.NotificationArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NotificationArnSelector != nil {
		in, out := &in.NotificationArnSelector, &out.NotificationArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.NotificationEvents != nil {
		in, out := &in.NotificationEvents, &out.NotificationEvents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotificationType != nil {
		in, out := &in.NotificationType, &out.NotificationType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationConfigParameters.
func (in *NotificationConfigParameters) DeepCopy() *NotificationConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OutputLocationInitParameters) DeepCopyInto(out *OutputLocationInitParameters) {
	*out = *in
	if in.S3BucketName != nil {
		in, out := &in.S3BucketName, &out.S3BucketName
		*out = new(string)
		**out = **in
	}
	if in.S3KeyPrefix != nil {
		in, out := &in.S3KeyPrefix, &out.S3KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.S3Region != nil {
		in, out := &in.S3Region, &out.S3Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OutputLocationInitParameters.
func (in *OutputLocationInitParameters) DeepCopy() *OutputLocationInitParameters {
	if in == nil {
		return nil
	}
	out := new(OutputLocationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OutputLocationObservation) DeepCopyInto(out *OutputLocationObservation) {
	*out = *in
	if in.S3BucketName != nil {
		in, out := &in.S3BucketName, &out.S3BucketName
		*out = new(string)
		**out = **in
	}
	if in.S3KeyPrefix != nil {
		in, out := &in.S3KeyPrefix, &out.S3KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.S3Region != nil {
		in, out := &in.S3Region, &out.S3Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OutputLocationObservation.
func (in *OutputLocationObservation) DeepCopy() *OutputLocationObservation {
	if in == nil {
		return nil
	}
	out := new(OutputLocationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OutputLocationParameters) DeepCopyInto(out *OutputLocationParameters) {
	*out = *in
	if in.S3BucketName != nil {
		in, out := &in.S3BucketName, &out.S3BucketName
		*out = new(string)
		**out = **in
	}
	if in.S3KeyPrefix != nil {
		in, out := &in.S3KeyPrefix, &out.S3KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.S3Region != nil {
		in, out := &in.S3Region, &out.S3Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OutputLocationParameters.
func (in *OutputLocationParameters) DeepCopy() *OutputLocationParameters {
	if in == nil {
		return nil
	}
	out := new(OutputLocationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterInitParameters) DeepCopyInto(out *ParameterInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterInitParameters.
func (in *ParameterInitParameters) DeepCopy() *ParameterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ParameterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterObservation) DeepCopyInto(out *ParameterObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterObservation.
func (in *ParameterObservation) DeepCopy() *ParameterObservation {
	if in == nil {
		return nil
	}
	out := new(ParameterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterParameters) DeepCopyInto(out *ParameterParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterParameters.
func (in *ParameterParameters) DeepCopy() *ParameterParameters {
	if in == nil {
		return nil
	}
	out := new(ParameterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSync) DeepCopyInto(out *ResourceDataSync) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSync.
func (in *ResourceDataSync) DeepCopy() *ResourceDataSync {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSync)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ResourceDataSync) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSyncInitParameters) DeepCopyInto(out *ResourceDataSyncInitParameters) {
	*out = *in
	if in.S3Destination != nil {
		in, out := &in.S3Destination, &out.S3Destination
		*out = new(S3DestinationInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSyncInitParameters.
func (in *ResourceDataSyncInitParameters) DeepCopy() *ResourceDataSyncInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSyncInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSyncList) DeepCopyInto(out *ResourceDataSyncList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ResourceDataSync, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSyncList.
func (in *ResourceDataSyncList) DeepCopy() *ResourceDataSyncList {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSyncList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ResourceDataSyncList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSyncObservation) DeepCopyInto(out *ResourceDataSyncObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.S3Destination != nil {
		in, out := &in.S3Destination, &out.S3Destination
		*out = new(S3DestinationObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSyncObservation.
func (in *ResourceDataSyncObservation) DeepCopy() *ResourceDataSyncObservation {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSyncObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSyncParameters) DeepCopyInto(out *ResourceDataSyncParameters) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.S3Destination != nil {
		in, out := &in.S3Destination, &out.S3Destination
		*out = new(S3DestinationParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSyncParameters.
func (in *ResourceDataSyncParameters) DeepCopy() *ResourceDataSyncParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSyncParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSyncSpec) DeepCopyInto(out *ResourceDataSyncSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSyncSpec.
func (in *ResourceDataSyncSpec) DeepCopy() *ResourceDataSyncSpec {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSyncSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceDataSyncStatus) DeepCopyInto(out *ResourceDataSyncStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceDataSyncStatus.
func (in *ResourceDataSyncStatus) DeepCopy() *ResourceDataSyncStatus {
	if in == nil {
		return nil
	}
	out := new(ResourceDataSyncStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RunCommandParametersInitParameters) DeepCopyInto(out *RunCommandParametersInitParameters) {
	*out = *in
	if in.CloudwatchConfig != nil {
		in, out := &in.CloudwatchConfig, &out.CloudwatchConfig
		*out = new(CloudwatchConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DocumentHash != nil {
		in, out := &in.DocumentHash, &out.DocumentHash
		*out = new(string)
		**out = **in
	}
	if in.DocumentHashType != nil {
		in, out := &in.DocumentHashType, &out.DocumentHashType
		*out = new(string)
		**out = **in
	}
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.NotificationConfig != nil {
		in, out := &in.NotificationConfig, &out.NotificationConfig
		*out = new(NotificationConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3Bucket != nil {
		in, out := &in.OutputS3Bucket, &out.OutputS3Bucket
		*out = new(string)
		**out = **in
	}
	if in.OutputS3BucketRef != nil {
		in, out := &in.OutputS3BucketRef, &out.OutputS3BucketRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3BucketSelector != nil {
		in, out := &in.OutputS3BucketSelector, &out.OutputS3BucketSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3KeyPrefix != nil {
		in, out := &in.OutputS3KeyPrefix, &out.OutputS3KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.Parameter != nil {
		in, out := &in.Parameter, &out.Parameter
		*out = make([]RunCommandParametersParameterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceRoleArn != nil {
		in, out := &in.ServiceRoleArn, &out.ServiceRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ServiceRoleArnRef != nil {
		in, out := &in.ServiceRoleArnRef, &out.ServiceRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceRoleArnSelector != nil {
		in, out := &in.ServiceRoleArnSelector, &out.ServiceRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TimeoutSeconds != nil {
		in, out := &in.TimeoutSeconds, &out.TimeoutSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RunCommandParametersInitParameters.
func (in *RunCommandParametersInitParameters) DeepCopy() *RunCommandParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(RunCommandParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RunCommandParametersObservation) DeepCopyInto(out *RunCommandParametersObservation) {
	*out = *in
	if in.CloudwatchConfig != nil {
		in, out := &in.CloudwatchConfig, &out.CloudwatchConfig
		*out = new(CloudwatchConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DocumentHash != nil {
		in, out := &in.DocumentHash, &out.DocumentHash
		*out = new(string)
		**out = **in
	}
	if in.DocumentHashType != nil {
		in, out := &in.DocumentHashType, &out.DocumentHashType
		*out = new(string)
		**out = **in
	}
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.NotificationConfig != nil {
		in, out := &in.NotificationConfig, &out.NotificationConfig
		*out = new(NotificationConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3Bucket != nil {
		in, out := &in.OutputS3Bucket, &out.OutputS3Bucket
		*out = new(string)
		**out = **in
	}
	if in.OutputS3KeyPrefix != nil {
		in, out := &in.OutputS3KeyPrefix, &out.OutputS3KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.Parameter != nil {
		in, out := &in.Parameter, &out.Parameter
		*out = make([]RunCommandParametersParameterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceRoleArn != nil {
		in, out := &in.ServiceRoleArn, &out.ServiceRoleArn
		*out = new(string)
		**out = **in
	}
	if in.TimeoutSeconds != nil {
		in, out := &in.TimeoutSeconds, &out.TimeoutSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RunCommandParametersObservation.
func (in *RunCommandParametersObservation) DeepCopy() *RunCommandParametersObservation {
	if in == nil {
		return nil
	}
	out := new(RunCommandParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RunCommandParametersParameterInitParameters) DeepCopyInto(out *RunCommandParametersParameterInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RunCommandParametersParameterInitParameters.
func (in *RunCommandParametersParameterInitParameters) DeepCopy() *RunCommandParametersParameterInitParameters {
	if in == nil {
		return nil
	}
	out := new(RunCommandParametersParameterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RunCommandParametersParameterObservation) DeepCopyInto(out *RunCommandParametersParameterObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RunCommandParametersParameterObservation.
func (in *RunCommandParametersParameterObservation) DeepCopy() *RunCommandParametersParameterObservation {
	if in == nil {
		return nil
	}
	out := new(RunCommandParametersParameterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RunCommandParametersParameterParameters) DeepCopyInto(out *RunCommandParametersParameterParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RunCommandParametersParameterParameters.
func (in *RunCommandParametersParameterParameters) DeepCopy() *RunCommandParametersParameterParameters {
	if in == nil {
		return nil
	}
	out := new(RunCommandParametersParameterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RunCommandParametersParameters) DeepCopyInto(out *RunCommandParametersParameters) {
	*out = *in
	if in.CloudwatchConfig != nil {
		in, out := &in.CloudwatchConfig, &out.CloudwatchConfig
		*out = new(CloudwatchConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DocumentHash != nil {
		in, out := &in.DocumentHash, &out.DocumentHash
		*out = new(string)
		**out = **in
	}
	if in.DocumentHashType != nil {
		in, out := &in.DocumentHashType, &out.DocumentHashType
		*out = new(string)
		**out = **in
	}
	if in.DocumentVersion != nil {
		in, out := &in.DocumentVersion, &out.DocumentVersion
		*out = new(string)
		**out = **in
	}
	if in.NotificationConfig != nil {
		in, out := &in.NotificationConfig, &out.NotificationConfig
		*out = new(NotificationConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3Bucket != nil {
		in, out := &in.OutputS3Bucket, &out.OutputS3Bucket
		*out = new(string)
		**out = **in
	}
	if in.OutputS3BucketRef != nil {
		in, out := &in.OutputS3BucketRef, &out.OutputS3BucketRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3BucketSelector != nil {
		in, out := &in.OutputS3BucketSelector, &out.OutputS3BucketSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.OutputS3KeyPrefix != nil {
		in, out := &in.OutputS3KeyPrefix, &out.OutputS3KeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.Parameter != nil {
		in, out := &in.Parameter, &out.Parameter
		*out = make([]RunCommandParametersParameterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceRoleArn != nil {
		in, out := &in.ServiceRoleArn, &out.ServiceRoleArn
		*out = new(string)
		**out = **in
	}
	if in.ServiceRoleArnRef != nil {
		in, out := &in.ServiceRoleArnRef, &out.ServiceRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceRoleArnSelector != nil {
		in, out := &in.ServiceRoleArnSelector, &out.ServiceRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TimeoutSeconds != nil {
		in, out := &in.TimeoutSeconds, &out.TimeoutSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RunCommandParametersParameters.
func (in *RunCommandParametersParameters) DeepCopy() *RunCommandParametersParameters {
	if in == nil {
		return nil
	}
	out := new(RunCommandParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3DestinationInitParameters) DeepCopyInto(out *S3DestinationInitParameters) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.BucketNameRef != nil {
		in, out := &in.BucketNameRef, &out.BucketNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.BucketNameSelector != nil {
		in, out := &in.BucketNameSelector, &out.BucketNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.SyncFormat != nil {
		in, out := &in.SyncFormat, &out.SyncFormat
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3DestinationInitParameters.
func (in *S3DestinationInitParameters) DeepCopy() *S3DestinationInitParameters {
	if in == nil {
		return nil
	}
	out := new(S3DestinationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3DestinationObservation) DeepCopyInto(out *S3DestinationObservation) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SyncFormat != nil {
		in, out := &in.SyncFormat, &out.SyncFormat
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3DestinationObservation.
func (in *S3DestinationObservation) DeepCopy() *S3DestinationObservation {
	if in == nil {
		return nil
	}
	out := new(S3DestinationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3DestinationParameters) DeepCopyInto(out *S3DestinationParameters) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.BucketNameRef != nil {
		in, out := &in.BucketNameRef, &out.BucketNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.BucketNameSelector != nil {
		in, out := &in.BucketNameSelector, &out.BucketNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RegionRef != nil {
		in, out := &in.RegionRef, &out.RegionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionSelector != nil {
		in, out := &in.RegionSelector, &out.RegionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SyncFormat != nil {
		in, out := &in.SyncFormat, &out.SyncFormat
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3DestinationParameters.
func (in *S3DestinationParameters) DeepCopy() *S3DestinationParameters {
	if in == nil {
		return nil
	}
	out := new(S3DestinationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepFunctionsParametersInitParameters) DeepCopyInto(out *StepFunctionsParametersInitParameters) {
	*out = *in
	if in.InputSecretRef != nil {
		in, out := &in.InputSecretRef, &out.InputSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepFunctionsParametersInitParameters.
func (in *StepFunctionsParametersInitParameters) DeepCopy() *StepFunctionsParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(StepFunctionsParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepFunctionsParametersObservation) DeepCopyInto(out *StepFunctionsParametersObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepFunctionsParametersObservation.
func (in *StepFunctionsParametersObservation) DeepCopy() *StepFunctionsParametersObservation {
	if in == nil {
		return nil
	}
	out := new(StepFunctionsParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepFunctionsParametersParameters) DeepCopyInto(out *StepFunctionsParametersParameters) {
	*out = *in
	if in.InputSecretRef != nil {
		in, out := &in.InputSecretRef, &out.InputSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepFunctionsParametersParameters.
func (in *StepFunctionsParametersParameters) DeepCopy() *StepFunctionsParametersParameters {
	if in == nil {
		return nil
	}
	out := new(StepFunctionsParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetsInitParameters) DeepCopyInto(out *TargetsInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetsInitParameters.
func (in *TargetsInitParameters) DeepCopy() *TargetsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TargetsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetsObservation) DeepCopyInto(out *TargetsObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetsObservation.
func (in *TargetsObservation) DeepCopy() *TargetsObservation {
	if in == nil {
		return nil
	}
	out := new(TargetsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetsParameters) DeepCopyInto(out *TargetsParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetsParameters.
func (in *TargetsParameters) DeepCopy() *TargetsParameters {
	if in == nil {
		return nil
	}
	out := new(TargetsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskInvocationParametersInitParameters) DeepCopyInto(out *TaskInvocationParametersInitParameters) {
	*out = *in
	if in.AutomationParameters != nil {
		in, out := &in.AutomationParameters, &out.AutomationParameters
		*out = new(AutomationParametersInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaParameters != nil {
		in, out := &in.LambdaParameters, &out.LambdaParameters
		*out = new(LambdaParametersInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RunCommandParameters != nil {
		in, out := &in.RunCommandParameters, &out.RunCommandParameters
		*out = new(RunCommandParametersInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.StepFunctionsParameters != nil {
		in, out := &in.StepFunctionsParameters, &out.StepFunctionsParameters
		*out = new(StepFunctionsParametersInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskInvocationParametersInitParameters.
func (in *TaskInvocationParametersInitParameters) DeepCopy() *TaskInvocationParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(TaskInvocationParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskInvocationParametersObservation) DeepCopyInto(out *TaskInvocationParametersObservation) {
	*out = *in
	if in.AutomationParameters != nil {
		in, out := &in.AutomationParameters, &out.AutomationParameters
		*out = new(AutomationParametersObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaParameters != nil {
		in, out := &in.LambdaParameters, &out.LambdaParameters
		*out = new(LambdaParametersObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.RunCommandParameters != nil {
		in, out := &in.RunCommandParameters, &out.RunCommandParameters
		*out = new(RunCommandParametersObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.StepFunctionsParameters != nil {
		in, out := &in.StepFunctionsParameters, &out.StepFunctionsParameters
		*out = new(StepFunctionsParametersObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskInvocationParametersObservation.
func (in *TaskInvocationParametersObservation) DeepCopy() *TaskInvocationParametersObservation {
	if in == nil {
		return nil
	}
	out := new(TaskInvocationParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskInvocationParametersParameters) DeepCopyInto(out *TaskInvocationParametersParameters) {
	*out = *in
	if in.AutomationParameters != nil {
		in, out := &in.AutomationParameters, &out.AutomationParameters
		*out = new(AutomationParametersParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LambdaParameters != nil {
		in, out := &in.LambdaParameters, &out.LambdaParameters
		*out = new(LambdaParametersParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RunCommandParameters != nil {
		in, out := &in.RunCommandParameters, &out.RunCommandParameters
		*out = new(RunCommandParametersParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.StepFunctionsParameters != nil {
		in, out := &in.StepFunctionsParameters, &out.StepFunctionsParameters
		*out = new(StepFunctionsParametersParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskInvocationParametersParameters.
func (in *TaskInvocationParametersParameters) DeepCopy() *TaskInvocationParametersParameters {
	if in == nil {
		return nil
	}
	out := new(TaskInvocationParametersParameters)
	in.DeepCopyInto(out)
	return out
}
