// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceShareAccepterInitParameters struct {

	// The ARN of the resource share.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ram/v1beta1.PrincipalAssociation
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("resource_share_arn",false)
	ShareArn *string `json:"shareArn,omitempty" tf:"share_arn,omitempty"`

	// Reference to a PrincipalAssociation in ram to populate shareArn.
	// +kubebuilder:validation:Optional
	ShareArnRef *v1.Reference `json:"shareArnRef,omitempty" tf:"-"`

	// Selector for a PrincipalAssociation in ram to populate shareArn.
	// +kubebuilder:validation:Optional
	ShareArnSelector *v1.Selector `json:"shareArnSelector,omitempty" tf:"-"`
}

type ResourceShareAccepterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ARN of the resource share invitation.
	InvitationArn *string `json:"invitationArn,omitempty" tf:"invitation_arn,omitempty"`

	// The account ID of the receiver account which accepts the invitation.
	ReceiverAccountID *string `json:"receiverAccountId,omitempty" tf:"receiver_account_id,omitempty"`

	// A list of the resource ARNs shared via the resource share.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// The account ID of the sender account which submits the invitation.
	SenderAccountID *string `json:"senderAccountId,omitempty" tf:"sender_account_id,omitempty"`

	// The ARN of the resource share.
	ShareArn *string `json:"shareArn,omitempty" tf:"share_arn,omitempty"`

	// The ID of the resource share as displayed in the console.
	ShareID *string `json:"shareId,omitempty" tf:"share_id,omitempty"`

	// The name of the resource share.
	ShareName *string `json:"shareName,omitempty" tf:"share_name,omitempty"`

	// The status of the resource share (ACTIVE, PENDING, FAILED, DELETING, DELETED).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ResourceShareAccepterParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The ARN of the resource share.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ram/v1beta1.PrincipalAssociation
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("resource_share_arn",false)
	// +kubebuilder:validation:Optional
	ShareArn *string `json:"shareArn,omitempty" tf:"share_arn,omitempty"`

	// Reference to a PrincipalAssociation in ram to populate shareArn.
	// +kubebuilder:validation:Optional
	ShareArnRef *v1.Reference `json:"shareArnRef,omitempty" tf:"-"`

	// Selector for a PrincipalAssociation in ram to populate shareArn.
	// +kubebuilder:validation:Optional
	ShareArnSelector *v1.Selector `json:"shareArnSelector,omitempty" tf:"-"`
}

// ResourceShareAccepterSpec defines the desired state of ResourceShareAccepter
type ResourceShareAccepterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceShareAccepterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceShareAccepterInitParameters `json:"initProvider,omitempty"`
}

// ResourceShareAccepterStatus defines the observed state of ResourceShareAccepter.
type ResourceShareAccepterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceShareAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceShareAccepter is the Schema for the ResourceShareAccepters API. Manages accepting a Resource Access Manager (RAM) Resource Share invitation.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ResourceShareAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceShareAccepterSpec   `json:"spec"`
	Status            ResourceShareAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceShareAccepterList contains a list of ResourceShareAccepters
type ResourceShareAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceShareAccepter `json:"items"`
}

// Repository type metadata.
var (
	ResourceShareAccepter_Kind             = "ResourceShareAccepter"
	ResourceShareAccepter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceShareAccepter_Kind}.String()
	ResourceShareAccepter_KindAPIVersion   = ResourceShareAccepter_Kind + "." + CRDGroupVersion.String()
	ResourceShareAccepter_GroupVersionKind = CRDGroupVersion.WithKind(ResourceShareAccepter_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceShareAccepter{}, &ResourceShareAccepterList{})
}
