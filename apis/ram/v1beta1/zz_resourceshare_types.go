// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceShareInitParameters struct {

	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals *bool `json:"allowExternalPrincipals,omitempty" tf:"allow_external_principals,omitempty"`

	// The name of the resource share.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	// +listType:set
	PermissionArns []*string `json:"permissionArns,omitempty" tf:"permission_arns,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ResourceShareObservation struct {

	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals *bool `json:"allowExternalPrincipals,omitempty" tf:"allow_external_principals,omitempty"`

	// The Amazon Resource Name (ARN) of the resource share.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The Amazon Resource Name (ARN) of the resource share.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the resource share.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	// +listType:set
	PermissionArns []*string `json:"permissionArns,omitempty" tf:"permission_arns,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ResourceShareParameters struct {

	// Indicates whether principals outside your organization can be associated with a resource share.
	// +kubebuilder:validation:Optional
	AllowExternalPrincipals *bool `json:"allowExternalPrincipals,omitempty" tf:"allow_external_principals,omitempty"`

	// The name of the resource share.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	// +kubebuilder:validation:Optional
	// +listType:set
	PermissionArns []*string `json:"permissionArns,omitempty" tf:"permission_arns,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ResourceShareSpec defines the desired state of ResourceShare
type ResourceShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceShareParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceShareInitParameters `json:"initProvider,omitempty"`
}

// ResourceShareStatus defines the observed state of ResourceShare.
type ResourceShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceShare is the Schema for the ResourceShares API. Manages a Resource Access Manager (RAM) Resource Share.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ResourceShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ResourceShareSpec   `json:"spec"`
	Status ResourceShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceShareList contains a list of ResourceShares
type ResourceShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceShare `json:"items"`
}

// Repository type metadata.
var (
	ResourceShare_Kind             = "ResourceShare"
	ResourceShare_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceShare_Kind}.String()
	ResourceShare_KindAPIVersion   = ResourceShare_Kind + "." + CRDGroupVersion.String()
	ResourceShare_GroupVersionKind = CRDGroupVersion.WithKind(ResourceShare_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceShare{}, &ResourceShareList{})
}
