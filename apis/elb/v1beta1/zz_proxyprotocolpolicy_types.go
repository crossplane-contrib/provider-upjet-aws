/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProxyProtocolPolicyObservation struct {

	// The ID of the policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of instance ports to which the policy
	// should be applied. This can be specified if the protocol is SSL or TCP.
	InstancePorts []*string `json:"instancePorts,omitempty" tf:"instance_ports,omitempty"`

	// The load balancer to which the policy
	// should be attached.
	LoadBalancer *string `json:"loadBalancer,omitempty" tf:"load_balancer,omitempty"`
}

type ProxyProtocolPolicyParameters struct {

	// List of instance ports to which the policy
	// should be applied. This can be specified if the protocol is SSL or TCP.
	// +kubebuilder:validation:Optional
	InstancePorts []*string `json:"instancePorts,omitempty" tf:"instance_ports,omitempty"`

	// The load balancer to which the policy
	// should be attached.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +kubebuilder:validation:Optional
	LoadBalancer *string `json:"loadBalancer,omitempty" tf:"load_balancer,omitempty"`

	// Reference to a ELB in elb to populate loadBalancer.
	// +kubebuilder:validation:Optional
	LoadBalancerRef *v1.Reference `json:"loadBalancerRef,omitempty" tf:"-"`

	// Selector for a ELB in elb to populate loadBalancer.
	// +kubebuilder:validation:Optional
	LoadBalancerSelector *v1.Selector `json:"loadBalancerSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ProxyProtocolPolicySpec defines the desired state of ProxyProtocolPolicy
type ProxyProtocolPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProxyProtocolPolicyParameters `json:"forProvider"`
}

// ProxyProtocolPolicyStatus defines the observed state of ProxyProtocolPolicy.
type ProxyProtocolPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProxyProtocolPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyProtocolPolicy is the Schema for the ProxyProtocolPolicys API. Provides a proxy protocol policy, which allows an ELB to carry a client connection information to a backend.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ProxyProtocolPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instancePorts)",message="instancePorts is a required parameter"
	Spec   ProxyProtocolPolicySpec   `json:"spec"`
	Status ProxyProtocolPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyProtocolPolicyList contains a list of ProxyProtocolPolicys
type ProxyProtocolPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProxyProtocolPolicy `json:"items"`
}

// Repository type metadata.
var (
	ProxyProtocolPolicy_Kind             = "ProxyProtocolPolicy"
	ProxyProtocolPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProxyProtocolPolicy_Kind}.String()
	ProxyProtocolPolicy_KindAPIVersion   = ProxyProtocolPolicy_Kind + "." + CRDGroupVersion.String()
	ProxyProtocolPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ProxyProtocolPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ProxyProtocolPolicy{}, &ProxyProtocolPolicyList{})
}
