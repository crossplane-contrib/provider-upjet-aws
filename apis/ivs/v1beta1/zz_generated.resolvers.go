/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/s3/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RecordingConfiguration.
func (mg *RecordingConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DestinationConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DestinationConfiguration[i3].S3); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationConfiguration[i3].S3[i4].BucketName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.DestinationConfiguration[i3].S3[i4].BucketNameRef,
				Selector:     mg.Spec.ForProvider.DestinationConfiguration[i3].S3[i4].BucketNameSelector,
				To: reference.To{
					List:    &v1beta1.BucketList{},
					Managed: &v1beta1.Bucket{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DestinationConfiguration[i3].S3[i4].BucketName")
			}
			mg.Spec.ForProvider.DestinationConfiguration[i3].S3[i4].BucketName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DestinationConfiguration[i3].S3[i4].BucketNameRef = rsp.ResolvedReference

		}
	}

	return nil
}
