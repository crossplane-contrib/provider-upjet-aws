/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BotAssociationObservation struct {

	// The Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (:).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot []LexBotObservation `json:"lexBot,omitempty" tf:"lex_bot,omitempty"`
}

type BotAssociationParameters struct {

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/connect/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in connect to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in connect to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	// +kubebuilder:validation:Optional
	LexBot []LexBotParameters `json:"lexBot,omitempty" tf:"lex_bot,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type LexBotObservation struct {

	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	LexRegion *string `json:"lexRegion,omitempty" tf:"lex_region,omitempty"`

	// The name of the Amazon Lex (V1) bot.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LexBotParameters struct {

	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	// +kubebuilder:validation:Optional
	LexRegion *string `json:"lexRegion,omitempty" tf:"lex_region,omitempty"`

	// The name of the Amazon Lex (V1) bot.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lexmodels/v1beta1.Bot
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a Bot in lexmodels to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a Bot in lexmodels to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`
}

// BotAssociationSpec defines the desired state of BotAssociation
type BotAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BotAssociationParameters `json:"forProvider"`
}

// BotAssociationStatus defines the observed state of BotAssociation.
type BotAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BotAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotAssociation is the Schema for the BotAssociations API. Associates an Amazon Connect instance to an Amazon Lex (V1) bot
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type BotAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lexBot)",message="lexBot is a required parameter"
	Spec   BotAssociationSpec   `json:"spec"`
	Status BotAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotAssociationList contains a list of BotAssociations
type BotAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotAssociation `json:"items"`
}

// Repository type metadata.
var (
	BotAssociation_Kind             = "BotAssociation"
	BotAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BotAssociation_Kind}.String()
	BotAssociation_KindAPIVersion   = BotAssociation_Kind + "." + CRDGroupVersion.String()
	BotAssociation_GroupVersionKind = CRDGroupVersion.WithKind(BotAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&BotAssociation{}, &BotAssociationList{})
}
