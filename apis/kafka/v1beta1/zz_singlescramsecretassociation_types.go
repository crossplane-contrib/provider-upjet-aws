// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SingleScramSecretAssociationInitParameters struct {
}

type SingleScramSecretAssociationObservation struct {

	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn *string `json:"clusterArn,omitempty" tf:"cluster_arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// AWS Secrets Manager secret ARN.
	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn,omitempty"`
}

type SingleScramSecretAssociationParameters struct {

	// Amazon Resource Name (ARN) of the MSK cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kafka/v1beta3.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	ClusterArn *string `json:"clusterArn,omitempty" tf:"cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate clusterArn.
	// +kubebuilder:validation:Optional
	ClusterArnRef *v1.Reference `json:"clusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate clusterArn.
	// +kubebuilder:validation:Optional
	ClusterArnSelector *v1.Selector `json:"clusterArnSelector,omitempty" tf:"-"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// AWS Secrets Manager secret ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/secretsmanager/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn,omitempty"`

	// Reference to a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	SecretArnRef *v1.Reference `json:"secretArnRef,omitempty" tf:"-"`

	// Selector for a Secret in secretsmanager to populate secretArn.
	// +kubebuilder:validation:Optional
	SecretArnSelector *v1.Selector `json:"secretArnSelector,omitempty" tf:"-"`
}

// SingleScramSecretAssociationSpec defines the desired state of SingleScramSecretAssociation
type SingleScramSecretAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SingleScramSecretAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SingleScramSecretAssociationInitParameters `json:"initProvider,omitempty"`
}

// SingleScramSecretAssociationStatus defines the observed state of SingleScramSecretAssociation.
type SingleScramSecretAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SingleScramSecretAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SingleScramSecretAssociation is the Schema for the SingleScramSecretAssociations API. Associates a single SCRAM secret with a Managed Streaming for Kafka (MSK) cluster. Warning: If this AWS MSK cluster has a ScramSecretAssociation managed resource that does not reference, select, or list this secret, the secret will be repeatedly attached and detached each time one of the resources enters its reconciliation loop. To avoid this, choose either ScramSecretAssociation or SingleScramSecretAssociation to manage credentials, not both.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SingleScramSecretAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SingleScramSecretAssociationSpec   `json:"spec"`
	Status            SingleScramSecretAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SingleScramSecretAssociationList contains a list of SingleScramSecretAssociations
type SingleScramSecretAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SingleScramSecretAssociation `json:"items"`
}

// Repository type metadata.
var (
	SingleScramSecretAssociation_Kind             = "SingleScramSecretAssociation"
	SingleScramSecretAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SingleScramSecretAssociation_Kind}.String()
	SingleScramSecretAssociation_KindAPIVersion   = SingleScramSecretAssociation_Kind + "." + CRDGroupVersion.String()
	SingleScramSecretAssociation_GroupVersionKind = CRDGroupVersion.WithKind(SingleScramSecretAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&SingleScramSecretAssociation{}, &SingleScramSecretAssociationList{})
}
