// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActivemqBrokerParametersInitParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *CredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`
}

type ActivemqBrokerParametersObservation struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *CredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`
}

type ActivemqBrokerParametersParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	// +kubebuilder:validation:Optional
	Credentials *CredentialsParameters `json:"credentials" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The name of the destination queue to consume. Maximum length of 1000.
	// +kubebuilder:validation:Optional
	QueueName *string `json:"queueName" tf:"queue_name,omitempty"`
}

type ArrayPropertiesInitParameters struct {

	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type ArrayPropertiesObservation struct {

	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type ArrayPropertiesParameters struct {

	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type AwsVPCConfigurationInitParameters struct {

	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	AssignPublicIP *string `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type AwsVPCConfigurationObservation struct {

	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	AssignPublicIP *string `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type AwsVPCConfigurationParameters struct {

	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	AssignPublicIP *string `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	// +kubebuilder:validation:Optional
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type BatchJobParametersInitParameters struct {

	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	ArrayProperties *ArrayPropertiesInitParameters `json:"arrayProperties,omitempty" tf:"array_properties,omitempty"`

	// The overrides that are sent to a container. Detailed below.
	ContainerOverrides *ContainerOverridesInitParameters `json:"containerOverrides,omitempty" tf:"container_overrides,omitempty"`

	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	DependsOn []DependsOnInitParameters `json:"dependsOn,omitempty" tf:"depends_on,omitempty"`

	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	JobDefinition *string `json:"jobDefinition,omitempty" tf:"job_definition,omitempty"`

	// The name of the job. It can be up to 128 letters long.
	JobName *string `json:"jobName,omitempty" tf:"job_name,omitempty"`

	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	RetryStrategy *RetryStrategyInitParameters `json:"retryStrategy,omitempty" tf:"retry_strategy,omitempty"`
}

type BatchJobParametersObservation struct {

	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	ArrayProperties *ArrayPropertiesObservation `json:"arrayProperties,omitempty" tf:"array_properties,omitempty"`

	// The overrides that are sent to a container. Detailed below.
	ContainerOverrides *ContainerOverridesObservation `json:"containerOverrides,omitempty" tf:"container_overrides,omitempty"`

	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	DependsOn []DependsOnObservation `json:"dependsOn,omitempty" tf:"depends_on,omitempty"`

	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	JobDefinition *string `json:"jobDefinition,omitempty" tf:"job_definition,omitempty"`

	// The name of the job. It can be up to 128 letters long.
	JobName *string `json:"jobName,omitempty" tf:"job_name,omitempty"`

	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	RetryStrategy *RetryStrategyObservation `json:"retryStrategy,omitempty" tf:"retry_strategy,omitempty"`
}

type BatchJobParametersParameters struct {

	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	// +kubebuilder:validation:Optional
	ArrayProperties *ArrayPropertiesParameters `json:"arrayProperties,omitempty" tf:"array_properties,omitempty"`

	// The overrides that are sent to a container. Detailed below.
	// +kubebuilder:validation:Optional
	ContainerOverrides *ContainerOverridesParameters `json:"containerOverrides,omitempty" tf:"container_overrides,omitempty"`

	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	// +kubebuilder:validation:Optional
	DependsOn []DependsOnParameters `json:"dependsOn,omitempty" tf:"depends_on,omitempty"`

	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	// +kubebuilder:validation:Optional
	JobDefinition *string `json:"jobDefinition" tf:"job_definition,omitempty"`

	// The name of the job. It can be up to 128 letters long.
	// +kubebuilder:validation:Optional
	JobName *string `json:"jobName" tf:"job_name,omitempty"`

	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	// +kubebuilder:validation:Optional
	RetryStrategy *RetryStrategyParameters `json:"retryStrategy,omitempty" tf:"retry_strategy,omitempty"`
}

type CapacityProviderStrategyInitParameters struct {

	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	Base *float64 `json:"base,omitempty" tf:"base,omitempty"`

	// The short name of the capacity provider. Maximum value of 255.
	CapacityProvider *string `json:"capacityProvider,omitempty" tf:"capacity_provider,omitempty"`

	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type CapacityProviderStrategyObservation struct {

	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	Base *float64 `json:"base,omitempty" tf:"base,omitempty"`

	// The short name of the capacity provider. Maximum value of 255.
	CapacityProvider *string `json:"capacityProvider,omitempty" tf:"capacity_provider,omitempty"`

	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type CapacityProviderStrategyParameters struct {

	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	// +kubebuilder:validation:Optional
	Base *float64 `json:"base,omitempty" tf:"base,omitempty"`

	// The short name of the capacity provider. Maximum value of 255.
	// +kubebuilder:validation:Optional
	CapacityProvider *string `json:"capacityProvider" tf:"capacity_provider,omitempty"`

	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type CloudwatchLogsLogDestinationInitParameters struct {

	// Amazon Web Services Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	LogGroupArn *string `json:"logGroupArn,omitempty" tf:"log_group_arn,omitempty"`

	// Reference to a Group in cloudwatchlogs to populate logGroupArn.
	// +kubebuilder:validation:Optional
	LogGroupArnRef *v1.Reference `json:"logGroupArnRef,omitempty" tf:"-"`

	// Selector for a Group in cloudwatchlogs to populate logGroupArn.
	// +kubebuilder:validation:Optional
	LogGroupArnSelector *v1.Selector `json:"logGroupArnSelector,omitempty" tf:"-"`
}

type CloudwatchLogsLogDestinationObservation struct {

	// Amazon Web Services Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.
	LogGroupArn *string `json:"logGroupArn,omitempty" tf:"log_group_arn,omitempty"`
}

type CloudwatchLogsLogDestinationParameters struct {

	// Amazon Web Services Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	LogGroupArn *string `json:"logGroupArn,omitempty" tf:"log_group_arn,omitempty"`

	// Reference to a Group in cloudwatchlogs to populate logGroupArn.
	// +kubebuilder:validation:Optional
	LogGroupArnRef *v1.Reference `json:"logGroupArnRef,omitempty" tf:"-"`

	// Selector for a Group in cloudwatchlogs to populate logGroupArn.
	// +kubebuilder:validation:Optional
	LogGroupArnSelector *v1.Selector `json:"logGroupArnSelector,omitempty" tf:"-"`
}

type CloudwatchLogsParametersInitParameters struct {

	// The name of the log stream.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type CloudwatchLogsParametersObservation struct {

	// The name of the log stream.
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type CloudwatchLogsParametersParameters struct {

	// The name of the log stream.
	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name,omitempty"`

	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	// +kubebuilder:validation:Optional
	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type ContainerOverrideEnvironmentInitParameters struct {

	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerOverrideEnvironmentObservation struct {

	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerOverrideEnvironmentParameters struct {

	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerOverrideInitParameters struct {

	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	Environment []ContainerOverrideEnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	EnvironmentFile []EnvironmentFileInitParameters `json:"environmentFile,omitempty" tf:"environment_file,omitempty"`

	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The name of the container that receives the override. This parameter is required if any override is specified.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	ResourceRequirement []ContainerOverrideResourceRequirementInitParameters `json:"resourceRequirement,omitempty" tf:"resource_requirement,omitempty"`
}

type ContainerOverrideObservation struct {

	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	Environment []ContainerOverrideEnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	EnvironmentFile []EnvironmentFileObservation `json:"environmentFile,omitempty" tf:"environment_file,omitempty"`

	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The name of the container that receives the override. This parameter is required if any override is specified.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	ResourceRequirement []ContainerOverrideResourceRequirementObservation `json:"resourceRequirement,omitempty" tf:"resource_requirement,omitempty"`
}

type ContainerOverrideParameters struct {

	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	// +kubebuilder:validation:Optional
	Environment []ContainerOverrideEnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	// +kubebuilder:validation:Optional
	EnvironmentFile []EnvironmentFileParameters `json:"environmentFile,omitempty" tf:"environment_file,omitempty"`

	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	// +kubebuilder:validation:Optional
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The name of the container that receives the override. This parameter is required if any override is specified.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	// +kubebuilder:validation:Optional
	ResourceRequirement []ContainerOverrideResourceRequirementParameters `json:"resourceRequirement,omitempty" tf:"resource_requirement,omitempty"`
}

type ContainerOverrideResourceRequirementInitParameters struct {

	// The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerOverrideResourceRequirementObservation struct {

	// The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerOverrideResourceRequirementParameters struct {

	// The type of resource to assign to a container. The supported values are GPU or InferenceAccelerator.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// The value for the specified resource type. If the GPU type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches the deviceName for an InferenceAccelerator specified in a task definition.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ContainerOverridesInitParameters struct {

	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	Environment []EnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	ResourceRequirement []ResourceRequirementInitParameters `json:"resourceRequirement,omitempty" tf:"resource_requirement,omitempty"`
}

type ContainerOverridesObservation struct {

	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	Environment []EnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	ResourceRequirement []ResourceRequirementObservation `json:"resourceRequirement,omitempty" tf:"resource_requirement,omitempty"`
}

type ContainerOverridesParameters struct {

	// List of commands to send to the container that overrides the default command from the Docker image or the task definition.
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. Environment variables cannot start with " AWS Batch ". This naming convention is reserved for variables that AWS Batch sets. Detailed below.
	// +kubebuilder:validation:Optional
	Environment []EnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU. Detailed below.
	// +kubebuilder:validation:Optional
	ResourceRequirement []ResourceRequirementParameters `json:"resourceRequirement,omitempty" tf:"resource_requirement,omitempty"`
}

type CredentialsInitParameters struct {

	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`
}

type CredentialsObservation struct {

	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`
}

type CredentialsParameters struct {

	// The ARN of the Secrets Manager secret containing the basic auth credentials.
	// +kubebuilder:validation:Optional
	BasicAuth *string `json:"basicAuth" tf:"basic_auth,omitempty"`
}

type DeadLetterConfigInitParameters struct {

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type DeadLetterConfigObservation struct {

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type DeadLetterConfigParameters struct {

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type DependsOnInitParameters struct {

	// The job ID of the AWS Batch job that's associated with this dependency.
	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	// The type of the job dependency. Valid Values: N_TO_N, SEQUENTIAL.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependsOnObservation struct {

	// The job ID of the AWS Batch job that's associated with this dependency.
	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	// The type of the job dependency. Valid Values: N_TO_N, SEQUENTIAL.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependsOnParameters struct {

	// The job ID of the AWS Batch job that's associated with this dependency.
	// +kubebuilder:validation:Optional
	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	// The type of the job dependency. Valid Values: N_TO_N, SEQUENTIAL.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DynamodbStreamParametersInitParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *DeadLetterConfigInitParameters `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *float64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds,omitempty"`

	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `json:"onPartialBatchItemFailure,omitempty" tf:"on_partial_batch_item_failure,omitempty"`

	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *float64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`
}

type DynamodbStreamParametersObservation struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *DeadLetterConfigObservation `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *float64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds,omitempty"`

	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `json:"onPartialBatchItemFailure,omitempty" tf:"on_partial_batch_item_failure,omitempty"`

	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *float64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`
}

type DynamodbStreamParametersParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// Define the target queue to send dead-letter queue events to. Detailed below.
	// +kubebuilder:validation:Optional
	DeadLetterConfig *DeadLetterConfigParameters `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	// +kubebuilder:validation:Optional
	MaximumRecordAgeInSeconds *float64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds,omitempty"`

	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	// +kubebuilder:validation:Optional
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	// +kubebuilder:validation:Optional
	OnPartialBatchItemFailure *string `json:"onPartialBatchItemFailure,omitempty" tf:"on_partial_batch_item_failure,omitempty"`

	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	// +kubebuilder:validation:Optional
	ParallelizationFactor *float64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	// +kubebuilder:validation:Optional
	StartingPosition *string `json:"startingPosition" tf:"starting_position,omitempty"`
}

type EcsTaskParametersInitParameters struct {

	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	CapacityProviderStrategy []CapacityProviderStrategyInitParameters `json:"capacityProviderStrategy,omitempty" tf:"capacity_provider_strategy,omitempty"`

	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	EnableEcsManagedTags *bool `json:"enableEcsManagedTags,omitempty" tf:"enable_ecs_managed_tags,omitempty"`

	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	EnableExecuteCommand *bool `json:"enableExecuteCommand,omitempty" tf:"enable_execute_command,omitempty"`

	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	LaunchType *string `json:"launchType,omitempty" tf:"launch_type,omitempty"`

	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	NetworkConfiguration *NetworkConfigurationInitParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// The overrides that are associated with a task. Detailed below.
	Overrides *OverridesInitParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	PlacementConstraint []PlacementConstraintInitParameters `json:"placementConstraint,omitempty" tf:"placement_constraint,omitempty"`

	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	PlacementStrategy []PlacementStrategyInitParameters `json:"placementStrategy,omitempty" tf:"placement_strategy,omitempty"`

	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version,omitempty"`

	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	PropagateTags *string `json:"propagateTags,omitempty" tf:"propagate_tags,omitempty"`

	// The reference ID to use for the task. Maximum length of 1,024.
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`

	// Key-value map of tags that you apply to the task to help you categorize and organize them.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn *string `json:"taskDefinitionArn,omitempty" tf:"task_definition_arn,omitempty"`
}

type EcsTaskParametersObservation struct {

	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	CapacityProviderStrategy []CapacityProviderStrategyObservation `json:"capacityProviderStrategy,omitempty" tf:"capacity_provider_strategy,omitempty"`

	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	EnableEcsManagedTags *bool `json:"enableEcsManagedTags,omitempty" tf:"enable_ecs_managed_tags,omitempty"`

	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	EnableExecuteCommand *bool `json:"enableExecuteCommand,omitempty" tf:"enable_execute_command,omitempty"`

	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	LaunchType *string `json:"launchType,omitempty" tf:"launch_type,omitempty"`

	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	NetworkConfiguration *NetworkConfigurationObservation `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// The overrides that are associated with a task. Detailed below.
	Overrides *OverridesObservation `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	PlacementConstraint []PlacementConstraintObservation `json:"placementConstraint,omitempty" tf:"placement_constraint,omitempty"`

	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	PlacementStrategy []PlacementStrategyObservation `json:"placementStrategy,omitempty" tf:"placement_strategy,omitempty"`

	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version,omitempty"`

	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	PropagateTags *string `json:"propagateTags,omitempty" tf:"propagate_tags,omitempty"`

	// The reference ID to use for the task. Maximum length of 1,024.
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`

	// Key-value map of tags that you apply to the task to help you categorize and organize them.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn *string `json:"taskDefinitionArn,omitempty" tf:"task_definition_arn,omitempty"`
}

type EcsTaskParametersParameters struct {

	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	// +kubebuilder:validation:Optional
	CapacityProviderStrategy []CapacityProviderStrategyParameters `json:"capacityProviderStrategy,omitempty" tf:"capacity_provider_strategy,omitempty"`

	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	// +kubebuilder:validation:Optional
	EnableEcsManagedTags *bool `json:"enableEcsManagedTags,omitempty" tf:"enable_ecs_managed_tags,omitempty"`

	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	// +kubebuilder:validation:Optional
	EnableExecuteCommand *bool `json:"enableExecuteCommand,omitempty" tf:"enable_execute_command,omitempty"`

	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	// +kubebuilder:validation:Optional
	LaunchType *string `json:"launchType,omitempty" tf:"launch_type,omitempty"`

	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	// +kubebuilder:validation:Optional
	NetworkConfiguration *NetworkConfigurationParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// The overrides that are associated with a task. Detailed below.
	// +kubebuilder:validation:Optional
	Overrides *OverridesParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	// +kubebuilder:validation:Optional
	PlacementConstraint []PlacementConstraintParameters `json:"placementConstraint,omitempty" tf:"placement_constraint,omitempty"`

	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	// +kubebuilder:validation:Optional
	PlacementStrategy []PlacementStrategyParameters `json:"placementStrategy,omitempty" tf:"placement_strategy,omitempty"`

	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	// +kubebuilder:validation:Optional
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version,omitempty"`

	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	// +kubebuilder:validation:Optional
	PropagateTags *string `json:"propagateTags,omitempty" tf:"propagate_tags,omitempty"`

	// The reference ID to use for the task. Maximum length of 1,024.
	// +kubebuilder:validation:Optional
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`

	// Key-value map of tags that you apply to the task to help you categorize and organize them.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of tasks to create based on TaskDefinition. The default is 1.
	// +kubebuilder:validation:Optional
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	// +kubebuilder:validation:Optional
	TaskDefinitionArn *string `json:"taskDefinitionArn" tf:"task_definition_arn,omitempty"`
}

type EnrichmentParametersInitParameters struct {

	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	HTTPParameters *HTTPParametersInitParameters `json:"httpParameters,omitempty" tf:"http_parameters,omitempty"`

	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `json:"inputTemplate,omitempty" tf:"input_template,omitempty"`
}

type EnrichmentParametersObservation struct {

	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	HTTPParameters *HTTPParametersObservation `json:"httpParameters,omitempty" tf:"http_parameters,omitempty"`

	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `json:"inputTemplate,omitempty" tf:"input_template,omitempty"`
}

type EnrichmentParametersParameters struct {

	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	// +kubebuilder:validation:Optional
	HTTPParameters *HTTPParametersParameters `json:"httpParameters,omitempty" tf:"http_parameters,omitempty"`

	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	// +kubebuilder:validation:Optional
	InputTemplate *string `json:"inputTemplate,omitempty" tf:"input_template,omitempty"`
}

type EnvironmentFileInitParameters struct {

	// The file type to use. The only supported value is s3.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvironmentFileObservation struct {

	// The file type to use. The only supported value is s3.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvironmentFileParameters struct {

	// The file type to use. The only supported value is s3.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type EnvironmentInitParameters struct {

	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvironmentObservation struct {

	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvironmentParameters struct {

	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EphemeralStorageInitParameters struct {

	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	SizeInGib *float64 `json:"sizeInGib,omitempty" tf:"size_in_gib,omitempty"`
}

type EphemeralStorageObservation struct {

	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	SizeInGib *float64 `json:"sizeInGib,omitempty" tf:"size_in_gib,omitempty"`
}

type EphemeralStorageParameters struct {

	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	// +kubebuilder:validation:Optional
	SizeInGib *float64 `json:"sizeInGib" tf:"size_in_gib,omitempty"`
}

type EventbridgeEventBusParametersInitParameters struct {

	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType *string `json:"detailType,omitempty" tf:"detail_type,omitempty"`

	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// The source of the event. Maximum length of 256.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type EventbridgeEventBusParametersObservation struct {

	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType *string `json:"detailType,omitempty" tf:"detail_type,omitempty"`

	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// The source of the event. Maximum length of 256.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type EventbridgeEventBusParametersParameters struct {

	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	// +kubebuilder:validation:Optional
	DetailType *string `json:"detailType,omitempty" tf:"detail_type,omitempty"`

	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	// +kubebuilder:validation:Optional
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	// +kubebuilder:validation:Optional
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// The source of the event. Maximum length of 256.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	// +kubebuilder:validation:Optional
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type FilterCriteriaInitParameters struct {

	// An array of up to 5 event patterns. Detailed below.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FilterCriteriaObservation struct {

	// An array of up to 5 event patterns. Detailed below.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FilterCriteriaParameters struct {

	// An array of up to 5 event patterns. Detailed below.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FilterInitParameters struct {

	// The event pattern. At most 4096 characters.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type FilterObservation struct {

	// The event pattern. At most 4096 characters.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type FilterParameters struct {

	// The event pattern. At most 4096 characters.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

type FirehoseLogDestinationInitParameters struct {

	// Amazon Resource Name (ARN) of the Kinesis Data Firehose delivery stream to which EventBridge delivers the pipe log records.
	DeliveryStreamArn *string `json:"deliveryStreamArn,omitempty" tf:"delivery_stream_arn,omitempty"`
}

type FirehoseLogDestinationObservation struct {

	// Amazon Resource Name (ARN) of the Kinesis Data Firehose delivery stream to which EventBridge delivers the pipe log records.
	DeliveryStreamArn *string `json:"deliveryStreamArn,omitempty" tf:"delivery_stream_arn,omitempty"`
}

type FirehoseLogDestinationParameters struct {

	// Amazon Resource Name (ARN) of the Kinesis Data Firehose delivery stream to which EventBridge delivers the pipe log records.
	// +kubebuilder:validation:Optional
	DeliveryStreamArn *string `json:"deliveryStreamArn" tf:"delivery_stream_arn,omitempty"`
}

type HTTPParametersInitParameters struct {

	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	// +mapType=granular
	HeaderParameters map[string]*string `json:"headerParameters,omitempty" tf:"header_parameters,omitempty"`

	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues []*string `json:"pathParameterValues,omitempty" tf:"path_parameter_values,omitempty"`

	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	// +mapType=granular
	QueryStringParameters map[string]*string `json:"queryStringParameters,omitempty" tf:"query_string_parameters,omitempty"`
}

type HTTPParametersObservation struct {

	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	// +mapType=granular
	HeaderParameters map[string]*string `json:"headerParameters,omitempty" tf:"header_parameters,omitempty"`

	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues []*string `json:"pathParameterValues,omitempty" tf:"path_parameter_values,omitempty"`

	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	// +mapType=granular
	QueryStringParameters map[string]*string `json:"queryStringParameters,omitempty" tf:"query_string_parameters,omitempty"`
}

type HTTPParametersParameters struct {

	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	HeaderParameters map[string]*string `json:"headerParameters,omitempty" tf:"header_parameters,omitempty"`

	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	// +kubebuilder:validation:Optional
	PathParameterValues []*string `json:"pathParameterValues,omitempty" tf:"path_parameter_values,omitempty"`

	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	QueryStringParameters map[string]*string `json:"queryStringParameters,omitempty" tf:"query_string_parameters,omitempty"`
}

type InferenceAcceleratorOverrideInitParameters struct {

	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// The Elastic Inference accelerator type to use.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`
}

type InferenceAcceleratorOverrideObservation struct {

	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// The Elastic Inference accelerator type to use.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`
}

type InferenceAcceleratorOverrideParameters struct {

	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// The Elastic Inference accelerator type to use.
	// +kubebuilder:validation:Optional
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`
}

type KinesisStreamParametersDeadLetterConfigInitParameters struct {

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type KinesisStreamParametersDeadLetterConfigObservation struct {

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type KinesisStreamParametersDeadLetterConfigParameters struct {

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type KinesisStreamParametersInitParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *KinesisStreamParametersDeadLetterConfigInitParameters `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *float64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds,omitempty"`

	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `json:"onPartialBatchItemFailure,omitempty" tf:"on_partial_batch_item_failure,omitempty"`

	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *float64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST, AT_TIMESTAMP.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp *string `json:"startingPositionTimestamp,omitempty" tf:"starting_position_timestamp,omitempty"`
}

type KinesisStreamParametersObservation struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *KinesisStreamParametersDeadLetterConfigObservation `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *float64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds,omitempty"`

	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `json:"onPartialBatchItemFailure,omitempty" tf:"on_partial_batch_item_failure,omitempty"`

	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *float64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST, AT_TIMESTAMP.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp *string `json:"startingPositionTimestamp,omitempty" tf:"starting_position_timestamp,omitempty"`
}

type KinesisStreamParametersParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// Define the target queue to send dead-letter queue events to. Detailed below.
	// +kubebuilder:validation:Optional
	DeadLetterConfig *KinesisStreamParametersDeadLetterConfigParameters `json:"deadLetterConfig,omitempty" tf:"dead_letter_config,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	// +kubebuilder:validation:Optional
	MaximumRecordAgeInSeconds *float64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds,omitempty"`

	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	// +kubebuilder:validation:Optional
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	// +kubebuilder:validation:Optional
	OnPartialBatchItemFailure *string `json:"onPartialBatchItemFailure,omitempty" tf:"on_partial_batch_item_failure,omitempty"`

	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	// +kubebuilder:validation:Optional
	ParallelizationFactor *float64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST, AT_TIMESTAMP.
	// +kubebuilder:validation:Optional
	StartingPosition *string `json:"startingPosition" tf:"starting_position,omitempty"`

	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	// +kubebuilder:validation:Optional
	StartingPositionTimestamp *string `json:"startingPositionTimestamp,omitempty" tf:"starting_position_timestamp,omitempty"`
}

type LambdaFunctionParametersInitParameters struct {

	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType *string `json:"invocationType,omitempty" tf:"invocation_type,omitempty"`
}

type LambdaFunctionParametersObservation struct {

	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType *string `json:"invocationType,omitempty" tf:"invocation_type,omitempty"`
}

type LambdaFunctionParametersParameters struct {

	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	// +kubebuilder:validation:Optional
	InvocationType *string `json:"invocationType" tf:"invocation_type,omitempty"`
}

type LogConfigurationInitParameters struct {

	// Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.
	CloudwatchLogsLogDestination *CloudwatchLogsLogDestinationInitParameters `json:"cloudwatchLogsLogDestination,omitempty" tf:"cloudwatch_logs_log_destination,omitempty"`

	// Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.
	FirehoseLogDestination *FirehoseLogDestinationInitParameters `json:"firehoseLogDestination,omitempty" tf:"firehose_log_destination,omitempty"`

	// String list that specifies whether the execution data (specifically, the payload, awsRequest, and awsResponse fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values ALL.
	// +listType=set
	IncludeExecutionData []*string `json:"includeExecutionData,omitempty" tf:"include_execution_data,omitempty"`

	// The level of logging detail to include. Valid values OFF, ERROR, INFO and TRACE.
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amazon S3 logging configuration settings for the pipe. Detailed below.
	S3LogDestination *S3LogDestinationInitParameters `json:"s3LogDestination,omitempty" tf:"s3_log_destination,omitempty"`
}

type LogConfigurationObservation struct {

	// Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.
	CloudwatchLogsLogDestination *CloudwatchLogsLogDestinationObservation `json:"cloudwatchLogsLogDestination,omitempty" tf:"cloudwatch_logs_log_destination,omitempty"`

	// Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.
	FirehoseLogDestination *FirehoseLogDestinationObservation `json:"firehoseLogDestination,omitempty" tf:"firehose_log_destination,omitempty"`

	// String list that specifies whether the execution data (specifically, the payload, awsRequest, and awsResponse fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values ALL.
	// +listType=set
	IncludeExecutionData []*string `json:"includeExecutionData,omitempty" tf:"include_execution_data,omitempty"`

	// The level of logging detail to include. Valid values OFF, ERROR, INFO and TRACE.
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amazon S3 logging configuration settings for the pipe. Detailed below.
	S3LogDestination *S3LogDestinationObservation `json:"s3LogDestination,omitempty" tf:"s3_log_destination,omitempty"`
}

type LogConfigurationParameters struct {

	// Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.
	// +kubebuilder:validation:Optional
	CloudwatchLogsLogDestination *CloudwatchLogsLogDestinationParameters `json:"cloudwatchLogsLogDestination,omitempty" tf:"cloudwatch_logs_log_destination,omitempty"`

	// Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.
	// +kubebuilder:validation:Optional
	FirehoseLogDestination *FirehoseLogDestinationParameters `json:"firehoseLogDestination,omitempty" tf:"firehose_log_destination,omitempty"`

	// String list that specifies whether the execution data (specifically, the payload, awsRequest, and awsResponse fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values ALL.
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludeExecutionData []*string `json:"includeExecutionData,omitempty" tf:"include_execution_data,omitempty"`

	// The level of logging detail to include. Valid values OFF, ERROR, INFO and TRACE.
	// +kubebuilder:validation:Optional
	Level *string `json:"level" tf:"level,omitempty"`

	// Amazon S3 logging configuration settings for the pipe. Detailed below.
	// +kubebuilder:validation:Optional
	S3LogDestination *S3LogDestinationParameters `json:"s3LogDestination,omitempty" tf:"s3_log_destination,omitempty"`
}

type ManagedStreamingKafkaParametersCredentialsInitParameters struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTLSAuth *string `json:"clientCertificateTlsAuth,omitempty" tf:"client_certificate_tls_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `json:"saslScram512Auth,omitempty" tf:"sasl_scram_512_auth,omitempty"`
}

type ManagedStreamingKafkaParametersCredentialsObservation struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTLSAuth *string `json:"clientCertificateTlsAuth,omitempty" tf:"client_certificate_tls_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `json:"saslScram512Auth,omitempty" tf:"sasl_scram_512_auth,omitempty"`
}

type ManagedStreamingKafkaParametersCredentialsParameters struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	ClientCertificateTLSAuth *string `json:"clientCertificateTlsAuth,omitempty" tf:"client_certificate_tls_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	SaslScram512Auth *string `json:"saslScram512Auth,omitempty" tf:"sasl_scram_512_auth,omitempty"`
}

type ManagedStreamingKafkaParametersInitParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *ManagedStreamingKafkaParametersCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type ManagedStreamingKafkaParametersObservation struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *ManagedStreamingKafkaParametersCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type ManagedStreamingKafkaParametersParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The name of the destination queue to consume. Maximum value of 200.
	// +kubebuilder:validation:Optional
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	// +kubebuilder:validation:Optional
	Credentials *ManagedStreamingKafkaParametersCredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	// +kubebuilder:validation:Optional
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// The name of the topic that the pipe will read from. Maximum length of 249.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName" tf:"topic_name,omitempty"`
}

type NetworkConfigurationInitParameters struct {

	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	AwsVPCConfiguration *AwsVPCConfigurationInitParameters `json:"awsVpcConfiguration,omitempty" tf:"aws_vpc_configuration,omitempty"`
}

type NetworkConfigurationObservation struct {

	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	AwsVPCConfiguration *AwsVPCConfigurationObservation `json:"awsVpcConfiguration,omitempty" tf:"aws_vpc_configuration,omitempty"`
}

type NetworkConfigurationParameters struct {

	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	// +kubebuilder:validation:Optional
	AwsVPCConfiguration *AwsVPCConfigurationParameters `json:"awsVpcConfiguration,omitempty" tf:"aws_vpc_configuration,omitempty"`
}

type OverridesInitParameters struct {

	// The cpu override for the task.
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// One or more container overrides that are sent to a task. Detailed below.
	ContainerOverride []ContainerOverrideInitParameters `json:"containerOverride,omitempty" tf:"container_override,omitempty"`

	// The ephemeral storage setting override for the task.  Detailed below.
	EphemeralStorage *EphemeralStorageInitParameters `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn,omitempty"`

	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	InferenceAcceleratorOverride []InferenceAcceleratorOverrideInitParameters `json:"inferenceAcceleratorOverride,omitempty" tf:"inference_accelerator_override,omitempty"`

	// The memory override for the task.
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	TaskRoleArn *string `json:"taskRoleArn,omitempty" tf:"task_role_arn,omitempty"`
}

type OverridesObservation struct {

	// The cpu override for the task.
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// One or more container overrides that are sent to a task. Detailed below.
	ContainerOverride []ContainerOverrideObservation `json:"containerOverride,omitempty" tf:"container_override,omitempty"`

	// The ephemeral storage setting override for the task.  Detailed below.
	EphemeralStorage *EphemeralStorageObservation `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn,omitempty"`

	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	InferenceAcceleratorOverride []InferenceAcceleratorOverrideObservation `json:"inferenceAcceleratorOverride,omitempty" tf:"inference_accelerator_override,omitempty"`

	// The memory override for the task.
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	TaskRoleArn *string `json:"taskRoleArn,omitempty" tf:"task_role_arn,omitempty"`
}

type OverridesParameters struct {

	// The cpu override for the task.
	// +kubebuilder:validation:Optional
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// One or more container overrides that are sent to a task. Detailed below.
	// +kubebuilder:validation:Optional
	ContainerOverride []ContainerOverrideParameters `json:"containerOverride,omitempty" tf:"container_override,omitempty"`

	// The ephemeral storage setting override for the task.  Detailed below.
	// +kubebuilder:validation:Optional
	EphemeralStorage *EphemeralStorageParameters `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	// +kubebuilder:validation:Optional
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn,omitempty"`

	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	// +kubebuilder:validation:Optional
	InferenceAcceleratorOverride []InferenceAcceleratorOverrideParameters `json:"inferenceAcceleratorOverride,omitempty" tf:"inference_accelerator_override,omitempty"`

	// The memory override for the task.
	// +kubebuilder:validation:Optional
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	// +kubebuilder:validation:Optional
	TaskRoleArn *string `json:"taskRoleArn,omitempty" tf:"task_role_arn,omitempty"`
}

type PipeInitParameters struct {

	// A description of the pipe. At most 512 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The state the pipe should be in. One of: RUNNING, STOPPED.
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the User Guide.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchevents/v1beta1.APIDestination
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	Enrichment *string `json:"enrichment,omitempty" tf:"enrichment,omitempty"`

	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters *EnrichmentParametersInitParameters `json:"enrichmentParameters,omitempty" tf:"enrichment_parameters,omitempty"`

	// Reference to a APIDestination in cloudwatchevents to populate enrichment.
	// +kubebuilder:validation:Optional
	EnrichmentRef *v1.Reference `json:"enrichmentRef,omitempty" tf:"-"`

	// Selector for a APIDestination in cloudwatchevents to populate enrichment.
	// +kubebuilder:validation:Optional
	EnrichmentSelector *v1.Selector `json:"enrichmentSelector,omitempty" tf:"-"`

	// Logging configuration settings for the pipe. Detailed below.
	LogConfiguration *LogConfigurationInitParameters `json:"logConfiguration,omitempty" tf:"log_configuration,omitempty"`

	// ARN of the role that allows the pipe to send data to the target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters *SourceParametersInitParameters `json:"sourceParameters,omitempty" tf:"source_parameters,omitempty"`

	// Reference to a Queue in sqs to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.Reference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.Selector `json:"sourceSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Target resource of the pipe (typically an ARN).
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters *TargetParametersInitParameters `json:"targetParameters,omitempty" tf:"target_parameters,omitempty"`

	// Reference to a Queue in sqs to populate target.
	// +kubebuilder:validation:Optional
	TargetRef *v1.Reference `json:"targetRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate target.
	// +kubebuilder:validation:Optional
	TargetSelector *v1.Selector `json:"targetSelector,omitempty" tf:"-"`
}

type PipeObservation struct {

	// ARN of this pipe.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// A description of the pipe. At most 512 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The state the pipe should be in. One of: RUNNING, STOPPED.
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the User Guide.
	Enrichment *string `json:"enrichment,omitempty" tf:"enrichment,omitempty"`

	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters *EnrichmentParametersObservation `json:"enrichmentParameters,omitempty" tf:"enrichment_parameters,omitempty"`

	// Same as name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Logging configuration settings for the pipe. Detailed below.
	LogConfiguration *LogConfigurationObservation `json:"logConfiguration,omitempty" tf:"log_configuration,omitempty"`

	// ARN of the role that allows the pipe to send data to the target.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters *SourceParametersObservation `json:"sourceParameters,omitempty" tf:"source_parameters,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Target resource of the pipe (typically an ARN).
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters *TargetParametersObservation `json:"targetParameters,omitempty" tf:"target_parameters,omitempty"`
}

type PipeParameters struct {

	// A description of the pipe. At most 512 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The state the pipe should be in. One of: RUNNING, STOPPED.
	// +kubebuilder:validation:Optional
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the User Guide.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchevents/v1beta1.APIDestination
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	Enrichment *string `json:"enrichment,omitempty" tf:"enrichment,omitempty"`

	// Parameters to configure enrichment for your pipe. Detailed below.
	// +kubebuilder:validation:Optional
	EnrichmentParameters *EnrichmentParametersParameters `json:"enrichmentParameters,omitempty" tf:"enrichment_parameters,omitempty"`

	// Reference to a APIDestination in cloudwatchevents to populate enrichment.
	// +kubebuilder:validation:Optional
	EnrichmentRef *v1.Reference `json:"enrichmentRef,omitempty" tf:"-"`

	// Selector for a APIDestination in cloudwatchevents to populate enrichment.
	// +kubebuilder:validation:Optional
	EnrichmentSelector *v1.Selector `json:"enrichmentSelector,omitempty" tf:"-"`

	// Logging configuration settings for the pipe. Detailed below.
	// +kubebuilder:validation:Optional
	LogConfiguration *LogConfigurationParameters `json:"logConfiguration,omitempty" tf:"log_configuration,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// ARN of the role that allows the pipe to send data to the target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Parameters to configure a source for the pipe. Detailed below.
	// +kubebuilder:validation:Optional
	SourceParameters *SourceParametersParameters `json:"sourceParameters,omitempty" tf:"source_parameters,omitempty"`

	// Reference to a Queue in sqs to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.Reference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.Selector `json:"sourceSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Target resource of the pipe (typically an ARN).
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Parameters to configure a target for your pipe. Detailed below.
	// +kubebuilder:validation:Optional
	TargetParameters *TargetParametersParameters `json:"targetParameters,omitempty" tf:"target_parameters,omitempty"`

	// Reference to a Queue in sqs to populate target.
	// +kubebuilder:validation:Optional
	TargetRef *v1.Reference `json:"targetRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate target.
	// +kubebuilder:validation:Optional
	TargetSelector *v1.Selector `json:"targetSelector,omitempty" tf:"-"`
}

type PipelineParameterInitParameters struct {

	// The name of the container that receives the override. This parameter is required if any override is specified.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PipelineParameterObservation struct {

	// The name of the container that receives the override. This parameter is required if any override is specified.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PipelineParameterParameters struct {

	// The name of the container that receives the override. This parameter is required if any override is specified.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type PlacementConstraintInitParameters struct {

	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. Valid Values: distinctInstance, memberOf.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementConstraintObservation struct {

	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. Valid Values: distinctInstance, memberOf.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementConstraintParameters struct {

	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. Valid Values: distinctInstance, memberOf.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementStrategyInitParameters struct {

	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementStrategyObservation struct {

	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementStrategyParameters struct {

	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	// +kubebuilder:validation:Optional
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RabbitmqBrokerParametersCredentialsInitParameters struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`
}

type RabbitmqBrokerParametersCredentialsObservation struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`
}

type RabbitmqBrokerParametersCredentialsParameters struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	BasicAuth *string `json:"basicAuth" tf:"basic_auth,omitempty"`
}

type RabbitmqBrokerParametersInitParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *RabbitmqBrokerParametersCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// The name of the virtual host associated with the source broker. Maximum length of 200.
	VirtualHost *string `json:"virtualHost,omitempty" tf:"virtual_host,omitempty"`
}

type RabbitmqBrokerParametersObservation struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *RabbitmqBrokerParametersCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// The name of the virtual host associated with the source broker. Maximum length of 200.
	VirtualHost *string `json:"virtualHost,omitempty" tf:"virtual_host,omitempty"`
}

type RabbitmqBrokerParametersParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	// +kubebuilder:validation:Optional
	Credentials *RabbitmqBrokerParametersCredentialsParameters `json:"credentials" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The name of the destination queue to consume. Maximum length of 1000.
	// +kubebuilder:validation:Optional
	QueueName *string `json:"queueName" tf:"queue_name,omitempty"`

	// The name of the virtual host associated with the source broker. Maximum length of 200.
	// +kubebuilder:validation:Optional
	VirtualHost *string `json:"virtualHost,omitempty" tf:"virtual_host,omitempty"`
}

type RedshiftDataParametersInitParameters struct {

	// The database user name. Required when authenticating using temporary credentials.
	DBUser *string `json:"dbUser,omitempty" tf:"db_user,omitempty"`

	// The name of the database. Required when authenticating using temporary credentials.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	SecretManagerArn *string `json:"secretManagerArn,omitempty" tf:"secret_manager_arn,omitempty"`

	// List of SQL statements text to run, each of maximum length of 100,000.
	// +listType=set
	Sqls []*string `json:"sqls,omitempty" tf:"sqls,omitempty"`

	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `json:"statementName,omitempty" tf:"statement_name,omitempty"`

	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent *bool `json:"withEvent,omitempty" tf:"with_event,omitempty"`
}

type RedshiftDataParametersObservation struct {

	// The database user name. Required when authenticating using temporary credentials.
	DBUser *string `json:"dbUser,omitempty" tf:"db_user,omitempty"`

	// The name of the database. Required when authenticating using temporary credentials.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	SecretManagerArn *string `json:"secretManagerArn,omitempty" tf:"secret_manager_arn,omitempty"`

	// List of SQL statements text to run, each of maximum length of 100,000.
	// +listType=set
	Sqls []*string `json:"sqls,omitempty" tf:"sqls,omitempty"`

	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `json:"statementName,omitempty" tf:"statement_name,omitempty"`

	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent *bool `json:"withEvent,omitempty" tf:"with_event,omitempty"`
}

type RedshiftDataParametersParameters struct {

	// The database user name. Required when authenticating using temporary credentials.
	// +kubebuilder:validation:Optional
	DBUser *string `json:"dbUser,omitempty" tf:"db_user,omitempty"`

	// The name of the database. Required when authenticating using temporary credentials.
	// +kubebuilder:validation:Optional
	Database *string `json:"database" tf:"database,omitempty"`

	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	// +kubebuilder:validation:Optional
	SecretManagerArn *string `json:"secretManagerArn,omitempty" tf:"secret_manager_arn,omitempty"`

	// List of SQL statements text to run, each of maximum length of 100,000.
	// +kubebuilder:validation:Optional
	// +listType=set
	Sqls []*string `json:"sqls" tf:"sqls,omitempty"`

	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	// +kubebuilder:validation:Optional
	StatementName *string `json:"statementName,omitempty" tf:"statement_name,omitempty"`

	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	// +kubebuilder:validation:Optional
	WithEvent *bool `json:"withEvent,omitempty" tf:"with_event,omitempty"`
}

type ResourceRequirementInitParameters struct {

	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ResourceRequirementObservation struct {

	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ResourceRequirementParameters struct {

	// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type RetryStrategyInitParameters struct {

	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	Attempts *float64 `json:"attempts,omitempty" tf:"attempts,omitempty"`
}

type RetryStrategyObservation struct {

	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	Attempts *float64 `json:"attempts,omitempty" tf:"attempts,omitempty"`
}

type RetryStrategyParameters struct {

	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	// +kubebuilder:validation:Optional
	Attempts *float64 `json:"attempts,omitempty" tf:"attempts,omitempty"`
}

type S3LogDestinationInitParameters struct {

	// Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
	BucketOwner *string `json:"bucketOwner,omitempty" tf:"bucket_owner,omitempty"`

	// EventBridge format for the log records. Valid values json, plain and w3c.
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// Prefix text with which to begin Amazon S3 log object names.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type S3LogDestinationObservation struct {

	// Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
	BucketOwner *string `json:"bucketOwner,omitempty" tf:"bucket_owner,omitempty"`

	// EventBridge format for the log records. Valid values json, plain and w3c.
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// Prefix text with which to begin Amazon S3 log object names.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type S3LogDestinationParameters struct {

	// Name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
	// +kubebuilder:validation:Optional
	BucketOwner *string `json:"bucketOwner" tf:"bucket_owner,omitempty"`

	// EventBridge format for the log records. Valid values json, plain and w3c.
	// +kubebuilder:validation:Optional
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// Prefix text with which to begin Amazon S3 log object names.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type SagemakerPipelineParametersInitParameters struct {

	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	PipelineParameter []PipelineParameterInitParameters `json:"pipelineParameter,omitempty" tf:"pipeline_parameter,omitempty"`
}

type SagemakerPipelineParametersObservation struct {

	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	PipelineParameter []PipelineParameterObservation `json:"pipelineParameter,omitempty" tf:"pipeline_parameter,omitempty"`
}

type SagemakerPipelineParametersParameters struct {

	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	// +kubebuilder:validation:Optional
	PipelineParameter []PipelineParameterParameters `json:"pipelineParameter,omitempty" tf:"pipeline_parameter,omitempty"`
}

type SelfManagedKafkaParametersCredentialsInitParameters struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTLSAuth *string `json:"clientCertificateTlsAuth,omitempty" tf:"client_certificate_tls_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram256Auth *string `json:"saslScram256Auth,omitempty" tf:"sasl_scram_256_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `json:"saslScram512Auth,omitempty" tf:"sasl_scram_512_auth,omitempty"`
}

type SelfManagedKafkaParametersCredentialsObservation struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTLSAuth *string `json:"clientCertificateTlsAuth,omitempty" tf:"client_certificate_tls_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram256Auth *string `json:"saslScram256Auth,omitempty" tf:"sasl_scram_256_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `json:"saslScram512Auth,omitempty" tf:"sasl_scram_512_auth,omitempty"`
}

type SelfManagedKafkaParametersCredentialsParameters struct {

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	BasicAuth *string `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	ClientCertificateTLSAuth *string `json:"clientCertificateTlsAuth,omitempty" tf:"client_certificate_tls_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	SaslScram256Auth *string `json:"saslScram256Auth,omitempty" tf:"sasl_scram_256_auth,omitempty"`

	// The ARN of the Secrets Manager secret containing the credentials.
	// +kubebuilder:validation:Optional
	SaslScram512Auth *string `json:"saslScram512Auth,omitempty" tf:"sasl_scram_512_auth,omitempty"`
}

type SelfManagedKafkaParametersInitParameters struct {

	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	// +listType=set
	AdditionalBootstrapServers []*string `json:"additionalBootstrapServers,omitempty" tf:"additional_bootstrap_servers,omitempty"`

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *SelfManagedKafkaParametersCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The ARN of the Secrets Manager secret used for certification.
	ServerRootCACertificate *string `json:"serverRootCaCertificate,omitempty" tf:"server_root_ca_certificate,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	VPC *VPCInitParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type SelfManagedKafkaParametersObservation struct {

	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	// +listType=set
	AdditionalBootstrapServers []*string `json:"additionalBootstrapServers,omitempty" tf:"additional_bootstrap_servers,omitempty"`

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	Credentials *SelfManagedKafkaParametersCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The ARN of the Secrets Manager secret used for certification.
	ServerRootCACertificate *string `json:"serverRootCaCertificate,omitempty" tf:"server_root_ca_certificate,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	VPC *VPCObservation `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type SelfManagedKafkaParametersParameters struct {

	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalBootstrapServers []*string `json:"additionalBootstrapServers,omitempty" tf:"additional_bootstrap_servers,omitempty"`

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The name of the destination queue to consume. Maximum value of 200.
	// +kubebuilder:validation:Optional
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	// The credentials needed to access the resource. Detailed below.
	// +kubebuilder:validation:Optional
	Credentials *SelfManagedKafkaParametersCredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`

	// The ARN of the Secrets Manager secret used for certification.
	// +kubebuilder:validation:Optional
	ServerRootCACertificate *string `json:"serverRootCaCertificate,omitempty" tf:"server_root_ca_certificate,omitempty"`

	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	// +kubebuilder:validation:Optional
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// The name of the topic that the pipe will read from. Maximum length of 249.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName" tf:"topic_name,omitempty"`

	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	// +kubebuilder:validation:Optional
	VPC *VPCParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type SourceParametersInitParameters struct {

	// The parameters for using an Active MQ broker as a source. Detailed below.
	ActivemqBrokerParameters *ActivemqBrokerParametersInitParameters `json:"activemqBrokerParameters,omitempty" tf:"activemq_broker_parameters,omitempty"`

	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	DynamodbStreamParameters *DynamodbStreamParametersInitParameters `json:"dynamodbStreamParameters,omitempty" tf:"dynamodb_stream_parameters,omitempty"`

	// The collection of event patterns used to filter events. Detailed below.
	FilterCriteria *FilterCriteriaInitParameters `json:"filterCriteria,omitempty" tf:"filter_criteria,omitempty"`

	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *KinesisStreamParametersInitParameters `json:"kinesisStreamParameters,omitempty" tf:"kinesis_stream_parameters,omitempty"`

	// The parameters for using an MSK stream as a source. Detailed below.
	ManagedStreamingKafkaParameters *ManagedStreamingKafkaParametersInitParameters `json:"managedStreamingKafkaParameters,omitempty" tf:"managed_streaming_kafka_parameters,omitempty"`

	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	RabbitmqBrokerParameters *RabbitmqBrokerParametersInitParameters `json:"rabbitmqBrokerParameters,omitempty" tf:"rabbitmq_broker_parameters,omitempty"`

	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	SelfManagedKafkaParameters *SelfManagedKafkaParametersInitParameters `json:"selfManagedKafkaParameters,omitempty" tf:"self_managed_kafka_parameters,omitempty"`

	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	SqsQueueParameters *SqsQueueParametersInitParameters `json:"sqsQueueParameters,omitempty" tf:"sqs_queue_parameters,omitempty"`
}

type SourceParametersObservation struct {

	// The parameters for using an Active MQ broker as a source. Detailed below.
	ActivemqBrokerParameters *ActivemqBrokerParametersObservation `json:"activemqBrokerParameters,omitempty" tf:"activemq_broker_parameters,omitempty"`

	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	DynamodbStreamParameters *DynamodbStreamParametersObservation `json:"dynamodbStreamParameters,omitempty" tf:"dynamodb_stream_parameters,omitempty"`

	// The collection of event patterns used to filter events. Detailed below.
	FilterCriteria *FilterCriteriaObservation `json:"filterCriteria,omitempty" tf:"filter_criteria,omitempty"`

	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *KinesisStreamParametersObservation `json:"kinesisStreamParameters,omitempty" tf:"kinesis_stream_parameters,omitempty"`

	// The parameters for using an MSK stream as a source. Detailed below.
	ManagedStreamingKafkaParameters *ManagedStreamingKafkaParametersObservation `json:"managedStreamingKafkaParameters,omitempty" tf:"managed_streaming_kafka_parameters,omitempty"`

	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	RabbitmqBrokerParameters *RabbitmqBrokerParametersObservation `json:"rabbitmqBrokerParameters,omitempty" tf:"rabbitmq_broker_parameters,omitempty"`

	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	SelfManagedKafkaParameters *SelfManagedKafkaParametersObservation `json:"selfManagedKafkaParameters,omitempty" tf:"self_managed_kafka_parameters,omitempty"`

	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	SqsQueueParameters *SqsQueueParametersObservation `json:"sqsQueueParameters,omitempty" tf:"sqs_queue_parameters,omitempty"`
}

type SourceParametersParameters struct {

	// The parameters for using an Active MQ broker as a source. Detailed below.
	// +kubebuilder:validation:Optional
	ActivemqBrokerParameters *ActivemqBrokerParametersParameters `json:"activemqBrokerParameters,omitempty" tf:"activemq_broker_parameters,omitempty"`

	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	// +kubebuilder:validation:Optional
	DynamodbStreamParameters *DynamodbStreamParametersParameters `json:"dynamodbStreamParameters,omitempty" tf:"dynamodb_stream_parameters,omitempty"`

	// The collection of event patterns used to filter events. Detailed below.
	// +kubebuilder:validation:Optional
	FilterCriteria *FilterCriteriaParameters `json:"filterCriteria,omitempty" tf:"filter_criteria,omitempty"`

	// The parameters for using a Kinesis stream as a source. Detailed below.
	// +kubebuilder:validation:Optional
	KinesisStreamParameters *KinesisStreamParametersParameters `json:"kinesisStreamParameters,omitempty" tf:"kinesis_stream_parameters,omitempty"`

	// The parameters for using an MSK stream as a source. Detailed below.
	// +kubebuilder:validation:Optional
	ManagedStreamingKafkaParameters *ManagedStreamingKafkaParametersParameters `json:"managedStreamingKafkaParameters,omitempty" tf:"managed_streaming_kafka_parameters,omitempty"`

	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	// +kubebuilder:validation:Optional
	RabbitmqBrokerParameters *RabbitmqBrokerParametersParameters `json:"rabbitmqBrokerParameters,omitempty" tf:"rabbitmq_broker_parameters,omitempty"`

	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	// +kubebuilder:validation:Optional
	SelfManagedKafkaParameters *SelfManagedKafkaParametersParameters `json:"selfManagedKafkaParameters,omitempty" tf:"self_managed_kafka_parameters,omitempty"`

	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	// +kubebuilder:validation:Optional
	SqsQueueParameters *SqsQueueParametersParameters `json:"sqsQueueParameters,omitempty" tf:"sqs_queue_parameters,omitempty"`
}

type SqsQueueParametersInitParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`
}

type SqsQueueParametersObservation struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`
}

type SqsQueueParametersParameters struct {

	// The maximum number of records to include in each batch. Maximum value of 10000.
	// +kubebuilder:validation:Optional
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// The maximum length of a time to wait for events. Maximum value of 300.
	// +kubebuilder:validation:Optional
	MaximumBatchingWindowInSeconds *float64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds,omitempty"`
}

type StepFunctionStateMachineParametersInitParameters struct {

	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType *string `json:"invocationType,omitempty" tf:"invocation_type,omitempty"`
}

type StepFunctionStateMachineParametersObservation struct {

	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType *string `json:"invocationType,omitempty" tf:"invocation_type,omitempty"`
}

type StepFunctionStateMachineParametersParameters struct {

	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	// +kubebuilder:validation:Optional
	InvocationType *string `json:"invocationType" tf:"invocation_type,omitempty"`
}

type TargetParametersHTTPParametersInitParameters struct {

	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.
	// +mapType=granular
	HeaderParameters map[string]*string `json:"headerParameters,omitempty" tf:"header_parameters,omitempty"`

	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues []*string `json:"pathParameterValues,omitempty" tf:"path_parameter_values,omitempty"`

	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.
	// +mapType=granular
	QueryStringParameters map[string]*string `json:"queryStringParameters,omitempty" tf:"query_string_parameters,omitempty"`
}

type TargetParametersHTTPParametersObservation struct {

	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.
	// +mapType=granular
	HeaderParameters map[string]*string `json:"headerParameters,omitempty" tf:"header_parameters,omitempty"`

	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues []*string `json:"pathParameterValues,omitempty" tf:"path_parameter_values,omitempty"`

	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.
	// +mapType=granular
	QueryStringParameters map[string]*string `json:"queryStringParameters,omitempty" tf:"query_string_parameters,omitempty"`
}

type TargetParametersHTTPParametersParameters struct {

	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	HeaderParameters map[string]*string `json:"headerParameters,omitempty" tf:"header_parameters,omitempty"`

	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	// +kubebuilder:validation:Optional
	PathParameterValues []*string `json:"pathParameterValues,omitempty" tf:"path_parameter_values,omitempty"`

	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination. Detailed below.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	QueryStringParameters map[string]*string `json:"queryStringParameters,omitempty" tf:"query_string_parameters,omitempty"`
}

type TargetParametersInitParameters struct {

	// The parameters for using an AWS Batch job as a target. Detailed below.
	BatchJobParameters *BatchJobParametersInitParameters `json:"batchJobParameters,omitempty" tf:"batch_job_parameters,omitempty"`

	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	CloudwatchLogsParameters *CloudwatchLogsParametersInitParameters `json:"cloudwatchLogsParameters,omitempty" tf:"cloudwatch_logs_parameters,omitempty"`

	// The parameters for using an Amazon ECS task as a target. Detailed below.
	EcsTaskParameters *EcsTaskParametersInitParameters `json:"ecsTaskParameters,omitempty" tf:"ecs_task_parameters,omitempty"`

	// The parameters for using an EventBridge event bus as a target. Detailed below.
	EventbridgeEventBusParameters *EventbridgeEventBusParametersInitParameters `json:"eventbridgeEventBusParameters,omitempty" tf:"eventbridge_event_bus_parameters,omitempty"`

	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	HTTPParameters *TargetParametersHTTPParametersInitParameters `json:"httpParameters,omitempty" tf:"http_parameters,omitempty"`

	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `json:"inputTemplate,omitempty" tf:"input_template,omitempty"`

	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *TargetParametersKinesisStreamParametersInitParameters `json:"kinesisStreamParameters,omitempty" tf:"kinesis_stream_parameters,omitempty"`

	// The parameters for using a Lambda function as a target. Detailed below.
	LambdaFunctionParameters *LambdaFunctionParametersInitParameters `json:"lambdaFunctionParameters,omitempty" tf:"lambda_function_parameters,omitempty"`

	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	RedshiftDataParameters *RedshiftDataParametersInitParameters `json:"redshiftDataParameters,omitempty" tf:"redshift_data_parameters,omitempty"`

	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	SagemakerPipelineParameters *SagemakerPipelineParametersInitParameters `json:"sagemakerPipelineParameters,omitempty" tf:"sagemaker_pipeline_parameters,omitempty"`

	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	SqsQueueParameters *TargetParametersSqsQueueParametersInitParameters `json:"sqsQueueParameters,omitempty" tf:"sqs_queue_parameters,omitempty"`

	// The parameters for using a Step Functions state machine as a target. Detailed below.
	StepFunctionStateMachineParameters *StepFunctionStateMachineParametersInitParameters `json:"stepFunctionStateMachineParameters,omitempty" tf:"step_function_state_machine_parameters,omitempty"`
}

type TargetParametersKinesisStreamParametersInitParameters struct {

	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key,omitempty"`
}

type TargetParametersKinesisStreamParametersObservation struct {

	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key,omitempty"`
}

type TargetParametersKinesisStreamParametersParameters struct {

	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey" tf:"partition_key,omitempty"`
}

type TargetParametersObservation struct {

	// The parameters for using an AWS Batch job as a target. Detailed below.
	BatchJobParameters *BatchJobParametersObservation `json:"batchJobParameters,omitempty" tf:"batch_job_parameters,omitempty"`

	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	CloudwatchLogsParameters *CloudwatchLogsParametersObservation `json:"cloudwatchLogsParameters,omitempty" tf:"cloudwatch_logs_parameters,omitempty"`

	// The parameters for using an Amazon ECS task as a target. Detailed below.
	EcsTaskParameters *EcsTaskParametersObservation `json:"ecsTaskParameters,omitempty" tf:"ecs_task_parameters,omitempty"`

	// The parameters for using an EventBridge event bus as a target. Detailed below.
	EventbridgeEventBusParameters *EventbridgeEventBusParametersObservation `json:"eventbridgeEventBusParameters,omitempty" tf:"eventbridge_event_bus_parameters,omitempty"`

	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	HTTPParameters *TargetParametersHTTPParametersObservation `json:"httpParameters,omitempty" tf:"http_parameters,omitempty"`

	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `json:"inputTemplate,omitempty" tf:"input_template,omitempty"`

	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *TargetParametersKinesisStreamParametersObservation `json:"kinesisStreamParameters,omitempty" tf:"kinesis_stream_parameters,omitempty"`

	// The parameters for using a Lambda function as a target. Detailed below.
	LambdaFunctionParameters *LambdaFunctionParametersObservation `json:"lambdaFunctionParameters,omitempty" tf:"lambda_function_parameters,omitempty"`

	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	RedshiftDataParameters *RedshiftDataParametersObservation `json:"redshiftDataParameters,omitempty" tf:"redshift_data_parameters,omitempty"`

	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	SagemakerPipelineParameters *SagemakerPipelineParametersObservation `json:"sagemakerPipelineParameters,omitempty" tf:"sagemaker_pipeline_parameters,omitempty"`

	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	SqsQueueParameters *TargetParametersSqsQueueParametersObservation `json:"sqsQueueParameters,omitempty" tf:"sqs_queue_parameters,omitempty"`

	// The parameters for using a Step Functions state machine as a target. Detailed below.
	StepFunctionStateMachineParameters *StepFunctionStateMachineParametersObservation `json:"stepFunctionStateMachineParameters,omitempty" tf:"step_function_state_machine_parameters,omitempty"`
}

type TargetParametersParameters struct {

	// The parameters for using an AWS Batch job as a target. Detailed below.
	// +kubebuilder:validation:Optional
	BatchJobParameters *BatchJobParametersParameters `json:"batchJobParameters,omitempty" tf:"batch_job_parameters,omitempty"`

	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	// +kubebuilder:validation:Optional
	CloudwatchLogsParameters *CloudwatchLogsParametersParameters `json:"cloudwatchLogsParameters,omitempty" tf:"cloudwatch_logs_parameters,omitempty"`

	// The parameters for using an Amazon ECS task as a target. Detailed below.
	// +kubebuilder:validation:Optional
	EcsTaskParameters *EcsTaskParametersParameters `json:"ecsTaskParameters,omitempty" tf:"ecs_task_parameters,omitempty"`

	// The parameters for using an EventBridge event bus as a target. Detailed below.
	// +kubebuilder:validation:Optional
	EventbridgeEventBusParameters *EventbridgeEventBusParametersParameters `json:"eventbridgeEventBusParameters,omitempty" tf:"eventbridge_event_bus_parameters,omitempty"`

	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	// +kubebuilder:validation:Optional
	HTTPParameters *TargetParametersHTTPParametersParameters `json:"httpParameters,omitempty" tf:"http_parameters,omitempty"`

	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	// +kubebuilder:validation:Optional
	InputTemplate *string `json:"inputTemplate,omitempty" tf:"input_template,omitempty"`

	// The parameters for using a Kinesis stream as a source. Detailed below.
	// +kubebuilder:validation:Optional
	KinesisStreamParameters *TargetParametersKinesisStreamParametersParameters `json:"kinesisStreamParameters,omitempty" tf:"kinesis_stream_parameters,omitempty"`

	// The parameters for using a Lambda function as a target. Detailed below.
	// +kubebuilder:validation:Optional
	LambdaFunctionParameters *LambdaFunctionParametersParameters `json:"lambdaFunctionParameters,omitempty" tf:"lambda_function_parameters,omitempty"`

	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	// +kubebuilder:validation:Optional
	RedshiftDataParameters *RedshiftDataParametersParameters `json:"redshiftDataParameters,omitempty" tf:"redshift_data_parameters,omitempty"`

	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	// +kubebuilder:validation:Optional
	SagemakerPipelineParameters *SagemakerPipelineParametersParameters `json:"sagemakerPipelineParameters,omitempty" tf:"sagemaker_pipeline_parameters,omitempty"`

	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	// +kubebuilder:validation:Optional
	SqsQueueParameters *TargetParametersSqsQueueParametersParameters `json:"sqsQueueParameters,omitempty" tf:"sqs_queue_parameters,omitempty"`

	// The parameters for using a Step Functions state machine as a target. Detailed below.
	// +kubebuilder:validation:Optional
	StepFunctionStateMachineParameters *StepFunctionStateMachineParametersParameters `json:"stepFunctionStateMachineParameters,omitempty" tf:"step_function_state_machine_parameters,omitempty"`
}

type TargetParametersSqsQueueParametersInitParameters struct {

	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	MessageDeduplicationID *string `json:"messageDeduplicationId,omitempty" tf:"message_deduplication_id,omitempty"`

	// The FIFO message group ID to use as the target.
	MessageGroupID *string `json:"messageGroupId,omitempty" tf:"message_group_id,omitempty"`
}

type TargetParametersSqsQueueParametersObservation struct {

	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	MessageDeduplicationID *string `json:"messageDeduplicationId,omitempty" tf:"message_deduplication_id,omitempty"`

	// The FIFO message group ID to use as the target.
	MessageGroupID *string `json:"messageGroupId,omitempty" tf:"message_group_id,omitempty"`
}

type TargetParametersSqsQueueParametersParameters struct {

	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	// +kubebuilder:validation:Optional
	MessageDeduplicationID *string `json:"messageDeduplicationId,omitempty" tf:"message_deduplication_id,omitempty"`

	// The FIFO message group ID to use as the target.
	// +kubebuilder:validation:Optional
	MessageGroupID *string `json:"messageGroupId,omitempty" tf:"message_group_id,omitempty"`
}

type VPCInitParameters struct {

	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type VPCObservation struct {

	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type VPCParameters struct {

	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	// +kubebuilder:validation:Optional
	// +listType=set
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

// PipeSpec defines the desired state of Pipe
type PipeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PipeInitParameters `json:"initProvider,omitempty"`
}

// PipeStatus defines the observed state of Pipe.
type PipeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Pipe is the Schema for the Pipes API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Pipe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PipeSpec   `json:"spec"`
	Status            PipeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipeList contains a list of Pipes
type PipeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pipe `json:"items"`
}

// Repository type metadata.
var (
	Pipe_Kind             = "Pipe"
	Pipe_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pipe_Kind}.String()
	Pipe_KindAPIVersion   = Pipe_Kind + "." + CRDGroupVersion.String()
	Pipe_GroupVersionKind = CRDGroupVersion.WithKind(Pipe_Kind)
)

func init() {
	SchemeBuilder.Register(&Pipe{}, &PipeList{})
}
