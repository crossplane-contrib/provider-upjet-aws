/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationSetObservation struct {

	// ARN of the Configuration Set.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
	// +kubebuilder:validation:Optional
	ReputationOptions []ReputationOptionsObservation `json:"reputationOptions,omitempty" tf:"reputation_options,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ConfigurationSetParameters struct {

	// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
	// +kubebuilder:validation:Optional
	DeliveryOptions []DeliveryOptionsParameters `json:"deliveryOptions,omitempty" tf:"delivery_options,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
	// +kubebuilder:validation:Optional
	ReputationOptions []ReputationOptionsParameters `json:"reputationOptions,omitempty" tf:"reputation_options,omitempty"`

	// An object that defines whether or not Amazon SES can send email that you send using the configuration set.
	// +kubebuilder:validation:Optional
	SendingOptions []SendingOptionsParameters `json:"sendingOptions,omitempty" tf:"sending_options,omitempty"`

	// An object that contains information about the suppression list preferences for your account.
	// +kubebuilder:validation:Optional
	SuppressionOptions []SuppressionOptionsParameters `json:"suppressionOptions,omitempty" tf:"suppression_options,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// An object that defines the open and click tracking options for emails that you send using the configuration set.
	// +kubebuilder:validation:Optional
	TrackingOptions []TrackingOptionsParameters `json:"trackingOptions,omitempty" tf:"tracking_options,omitempty"`
}

type DeliveryOptionsObservation struct {
}

type DeliveryOptionsParameters struct {

	// The name of the dedicated IP pool to associate with the configuration set.
	// +kubebuilder:validation:Optional
	SendingPoolName *string `json:"sendingPoolName,omitempty" tf:"sending_pool_name,omitempty"`

	// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: REQUIRE, OPTIONAL.
	// +kubebuilder:validation:Optional
	TLSPolicy *string `json:"tlsPolicy,omitempty" tf:"tls_policy,omitempty"`
}

type ReputationOptionsObservation struct {

	// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
	LastFreshStart *string `json:"lastFreshStart,omitempty" tf:"last_fresh_start,omitempty"`
}

type ReputationOptionsParameters struct {

	// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
	// +kubebuilder:validation:Optional
	ReputationMetricsEnabled *bool `json:"reputationMetricsEnabled,omitempty" tf:"reputation_metrics_enabled,omitempty"`
}

type SendingOptionsObservation struct {
}

type SendingOptionsParameters struct {

	// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
	// +kubebuilder:validation:Optional
	SendingEnabled *bool `json:"sendingEnabled,omitempty" tf:"sending_enabled,omitempty"`
}

type SuppressionOptionsObservation struct {
}

type SuppressionOptionsParameters struct {

	// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: BOUNCE, COMPLAINT.
	// +kubebuilder:validation:Optional
	SuppressedReasons []*string `json:"suppressedReasons,omitempty" tf:"suppressed_reasons,omitempty"`
}

type TrackingOptionsObservation struct {
}

type TrackingOptionsParameters struct {

	// The domain to use for tracking open and click events.
	// +kubebuilder:validation:Required
	CustomRedirectDomain *string `json:"customRedirectDomain" tf:"custom_redirect_domain,omitempty"`
}

// ConfigurationSetSpec defines the desired state of ConfigurationSet
type ConfigurationSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationSetParameters `json:"forProvider"`
}

// ConfigurationSetStatus defines the observed state of ConfigurationSet.
type ConfigurationSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationSet is the Schema for the ConfigurationSets API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ConfigurationSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationSetSpec   `json:"spec"`
	Status            ConfigurationSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationSetList contains a list of ConfigurationSets
type ConfigurationSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationSet `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationSet_Kind             = "ConfigurationSet"
	ConfigurationSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationSet_Kind}.String()
	ConfigurationSet_KindAPIVersion   = ConfigurationSet_Kind + "." + CRDGroupVersion.String()
	ConfigurationSet_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationSet_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationSet{}, &ConfigurationSetList{})
}
