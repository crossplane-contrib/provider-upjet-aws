/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EmailIdentityMailFromAttributesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EmailIdentityMailFromAttributesParameters struct {

	// The action to take if the required MX record isn't found when you send an email. Valid values: USE_DEFAULT_VALUE, REJECT_MESSAGE.
	// +kubebuilder:validation:Optional
	BehaviorOnMxFailure *string `json:"behaviorOnMxFailure,omitempty" tf:"behavior_on_mx_failure,omitempty"`

	// The custom MAIL FROM domain that you want the verified identity to use. Required if behavior_on_mx_failure is REJECT_MESSAGE.
	// +kubebuilder:validation:Optional
	MailFromDomain *string `json:"mailFromDomain,omitempty" tf:"mail_from_domain,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// EmailIdentityMailFromAttributesSpec defines the desired state of EmailIdentityMailFromAttributes
type EmailIdentityMailFromAttributesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EmailIdentityMailFromAttributesParameters `json:"forProvider"`
}

// EmailIdentityMailFromAttributesStatus defines the observed state of EmailIdentityMailFromAttributes.
type EmailIdentityMailFromAttributesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EmailIdentityMailFromAttributesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmailIdentityMailFromAttributes is the Schema for the EmailIdentityMailFromAttributess API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EmailIdentityMailFromAttributes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmailIdentityMailFromAttributesSpec   `json:"spec"`
	Status            EmailIdentityMailFromAttributesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmailIdentityMailFromAttributesList contains a list of EmailIdentityMailFromAttributess
type EmailIdentityMailFromAttributesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmailIdentityMailFromAttributes `json:"items"`
}

// Repository type metadata.
var (
	EmailIdentityMailFromAttributes_Kind             = "EmailIdentityMailFromAttributes"
	EmailIdentityMailFromAttributes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EmailIdentityMailFromAttributes_Kind}.String()
	EmailIdentityMailFromAttributes_KindAPIVersion   = EmailIdentityMailFromAttributes_Kind + "." + CRDGroupVersion.String()
	EmailIdentityMailFromAttributes_GroupVersionKind = CRDGroupVersion.WithKind(EmailIdentityMailFromAttributes_Kind)
)

func init() {
	SchemeBuilder.Register(&EmailIdentityMailFromAttributes{}, &EmailIdentityMailFromAttributesList{})
}
