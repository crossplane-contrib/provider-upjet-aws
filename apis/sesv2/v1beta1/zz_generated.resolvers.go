/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/firehose/v1beta1"
	v1beta11 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta12 "github.com/upbound/provider-aws/apis/pinpoint/v1beta1"
	v1beta13 "github.com/upbound/provider-aws/apis/sns/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ConfigurationSetEventDestination.
func (mg *ConfigurationSetEventDestination) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConfigurationSetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConfigurationSetNameRef,
		Selector:     mg.Spec.ForProvider.ConfigurationSetNameSelector,
		To: reference.To{
			List:    &ConfigurationSetList{},
			Managed: &ConfigurationSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConfigurationSetName")
	}
	mg.Spec.ForProvider.ConfigurationSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConfigurationSetNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventDestination); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].DeliveryStreamArn),
				Extract:      resource.ExtractParamPath("arn", false),
				Reference:    mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].DeliveryStreamArnRef,
				Selector:     mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].DeliveryStreamArnSelector,
				To: reference.To{
					List:    &v1beta1.DeliveryStreamList{},
					Managed: &v1beta1.DeliveryStream{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].DeliveryStreamArn")
			}
			mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].DeliveryStreamArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].DeliveryStreamArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventDestination); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].IAMRoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].IAMRoleArnRef,
				Selector:     mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].IAMRoleArnSelector,
				To: reference.To{
					List:    &v1beta11.RoleList{},
					Managed: &v1beta11.Role{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].IAMRoleArn")
			}
			mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].IAMRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.EventDestination[i3].KinesisFirehoseDestination[i4].IAMRoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventDestination); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.EventDestination[i3].PinpointDestination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventDestination[i3].PinpointDestination[i4].ApplicationArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.EventDestination[i3].PinpointDestination[i4].ApplicationArnRef,
				Selector:     mg.Spec.ForProvider.EventDestination[i3].PinpointDestination[i4].ApplicationArnSelector,
				To: reference.To{
					List:    &v1beta12.AppList{},
					Managed: &v1beta12.App{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.EventDestination[i3].PinpointDestination[i4].ApplicationArn")
			}
			mg.Spec.ForProvider.EventDestination[i3].PinpointDestination[i4].ApplicationArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.EventDestination[i3].PinpointDestination[i4].ApplicationArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventDestination); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.EventDestination[i3].SnsDestination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventDestination[i3].SnsDestination[i4].TopicArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.EventDestination[i3].SnsDestination[i4].TopicArnRef,
				Selector:     mg.Spec.ForProvider.EventDestination[i3].SnsDestination[i4].TopicArnSelector,
				To: reference.To{
					List:    &v1beta13.TopicList{},
					Managed: &v1beta13.Topic{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.EventDestination[i3].SnsDestination[i4].TopicArn")
			}
			mg.Spec.ForProvider.EventDestination[i3].SnsDestination[i4].TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.EventDestination[i3].SnsDestination[i4].TopicArnRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this EmailIdentity.
func (mg *EmailIdentity) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConfigurationSetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConfigurationSetNameRef,
		Selector:     mg.Spec.ForProvider.ConfigurationSetNameSelector,
		To: reference.To{
			List:    &ConfigurationSetList{},
			Managed: &ConfigurationSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConfigurationSetName")
	}
	mg.Spec.ForProvider.ConfigurationSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConfigurationSetNameRef = rsp.ResolvedReference

	return nil
}
