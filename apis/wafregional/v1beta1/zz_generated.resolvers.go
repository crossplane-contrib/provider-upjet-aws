/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/firehose/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RateBasedRule.
func (mg *RateBasedRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Predicate); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Predicate[i3].DataID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Predicate[i3].DataIDRef,
			Selector:     mg.Spec.ForProvider.Predicate[i3].DataIDSelector,
			To: reference.To{
				List:    &IPSetList{},
				Managed: &IPSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Predicate[i3].DataID")
		}
		mg.Spec.ForProvider.Predicate[i3].DataID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Predicate[i3].DataIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Predicate); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Predicate[i3].DataID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Predicate[i3].DataIDRef,
			Selector:     mg.Spec.InitProvider.Predicate[i3].DataIDSelector,
			To: reference.To{
				List:    &IPSetList{},
				Managed: &IPSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Predicate[i3].DataID")
		}
		mg.Spec.InitProvider.Predicate[i3].DataID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Predicate[i3].DataIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RegexMatchSet.
func (mg *RegexMatchSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RegexMatchTuple); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RegexMatchTuple[i3].RegexPatternSetID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.RegexMatchTuple[i3].RegexPatternSetIDRef,
			Selector:     mg.Spec.ForProvider.RegexMatchTuple[i3].RegexPatternSetIDSelector,
			To: reference.To{
				List:    &RegexPatternSetList{},
				Managed: &RegexPatternSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RegexMatchTuple[i3].RegexPatternSetID")
		}
		mg.Spec.ForProvider.RegexMatchTuple[i3].RegexPatternSetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RegexMatchTuple[i3].RegexPatternSetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RegexMatchTuple); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RegexMatchTuple[i3].RegexPatternSetID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.RegexMatchTuple[i3].RegexPatternSetIDRef,
			Selector:     mg.Spec.InitProvider.RegexMatchTuple[i3].RegexPatternSetIDSelector,
			To: reference.To{
				List:    &RegexPatternSetList{},
				Managed: &RegexPatternSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RegexMatchTuple[i3].RegexPatternSetID")
		}
		mg.Spec.InitProvider.RegexMatchTuple[i3].RegexPatternSetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.RegexMatchTuple[i3].RegexPatternSetIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Rule.
func (mg *Rule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Predicate); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Predicate[i3].DataID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Predicate[i3].DataIDRef,
			Selector:     mg.Spec.ForProvider.Predicate[i3].DataIDSelector,
			To: reference.To{
				List:    &IPSetList{},
				Managed: &IPSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Predicate[i3].DataID")
		}
		mg.Spec.ForProvider.Predicate[i3].DataID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Predicate[i3].DataIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Predicate); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Predicate[i3].DataID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Predicate[i3].DataIDRef,
			Selector:     mg.Spec.InitProvider.Predicate[i3].DataIDSelector,
			To: reference.To{
				List:    &IPSetList{},
				Managed: &IPSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Predicate[i3].DataID")
		}
		mg.Spec.InitProvider.Predicate[i3].DataID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Predicate[i3].DataIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this WebACL.
func (mg *WebACL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LoggingConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoggingConfiguration[i3].LogDestination),
			Extract:      resource.ExtractParamPath("arn", false),
			Reference:    mg.Spec.ForProvider.LoggingConfiguration[i3].LogDestinationRef,
			Selector:     mg.Spec.ForProvider.LoggingConfiguration[i3].LogDestinationSelector,
			To: reference.To{
				List:    &v1beta1.DeliveryStreamList{},
				Managed: &v1beta1.DeliveryStream{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LoggingConfiguration[i3].LogDestination")
		}
		mg.Spec.ForProvider.LoggingConfiguration[i3].LogDestination = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LoggingConfiguration[i3].LogDestinationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].RuleID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Rule[i3].RuleIDRef,
			Selector:     mg.Spec.ForProvider.Rule[i3].RuleIDSelector,
			To: reference.To{
				List:    &RuleList{},
				Managed: &Rule{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].RuleID")
		}
		mg.Spec.ForProvider.Rule[i3].RuleID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Rule[i3].RuleIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LoggingConfiguration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoggingConfiguration[i3].LogDestination),
			Extract:      resource.ExtractParamPath("arn", false),
			Reference:    mg.Spec.InitProvider.LoggingConfiguration[i3].LogDestinationRef,
			Selector:     mg.Spec.InitProvider.LoggingConfiguration[i3].LogDestinationSelector,
			To: reference.To{
				List:    &v1beta1.DeliveryStreamList{},
				Managed: &v1beta1.DeliveryStream{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LoggingConfiguration[i3].LogDestination")
		}
		mg.Spec.InitProvider.LoggingConfiguration[i3].LogDestination = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LoggingConfiguration[i3].LogDestinationRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Rule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Rule[i3].RuleID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Rule[i3].RuleIDRef,
			Selector:     mg.Spec.InitProvider.Rule[i3].RuleIDSelector,
			To: reference.To{
				List:    &RuleList{},
				Managed: &Rule{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Rule[i3].RuleID")
		}
		mg.Spec.InitProvider.Rule[i3].RuleID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Rule[i3].RuleIDRef = rsp.ResolvedReference

	}

	return nil
}
