/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AndObservation struct {
}

type AndParameters struct {

	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	SimpleCriterion []SimpleCriterionParameters `json:"simpleCriterion,omitempty" tf:"simple_criterion,omitempty"`

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	TagCriterion []TagCriterionParameters `json:"tagCriterion,omitempty" tf:"tag_criterion,omitempty"`
}

type AndSimpleCriterionObservation struct {
}

type AndSimpleCriterionParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AndSimpleScopeTermObservation struct {
}

type AndSimpleScopeTermParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AndTagCriterionObservation struct {
}

type AndTagCriterionParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	TagValues []TagCriterionTagValuesParameters `json:"tagValues,omitempty" tf:"tag_values,omitempty"`
}

type AndTagScopeTermObservation struct {
}

type AndTagScopeTermParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	TagValues []AndTagScopeTermTagValuesParameters `json:"tagValues,omitempty" tf:"tag_values,omitempty"`

	// The type of object to apply the condition to. The only valid value is S3_OBJECT.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type AndTagScopeTermTagValuesObservation struct {
}

type AndTagScopeTermTagValuesParameters struct {

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BucketCriteriaObservation struct {
}

type BucketCriteriaParameters struct {

	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	// +kubebuilder:validation:Optional
	Excludes []ExcludesParameters `json:"excludes,omitempty" tf:"excludes,omitempty"`

	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	// +kubebuilder:validation:Optional
	Includes []IncludesParameters `json:"includes,omitempty" tf:"includes,omitempty"`
}

type BucketDefinitionsObservation struct {
}

type BucketDefinitionsParameters struct {

	// The unique identifier for the AWS account that owns the buckets.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// An array that lists the names of the buckets.
	// +kubebuilder:validation:Required
	Buckets []*string `json:"buckets" tf:"buckets,omitempty"`
}

type ClassificationJobObservation struct {

	// The date and time, in UTC and extended RFC 3339 format, when the job was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The unique identifier (ID) of the macie classification job.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	JobArn *string `json:"jobArn,omitempty" tf:"job_arn,omitempty"`

	// The unique identifier (ID) of the macie classification job.
	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for job-status is USER_PAUSED.
	UserPausedDetails []UserPausedDetailsObservation `json:"userPausedDetails,omitempty" tf:"user_paused_details,omitempty"`
}

type ClassificationJobParameters struct {

	// The custom data identifiers to use for data analysis and classification.
	// +kubebuilder:validation:Optional
	CustomDataIdentifierIds []*string `json:"customDataIdentifierIds,omitempty" tf:"custom_data_identifier_ids,omitempty"`

	// A custom description of the job. The description can contain as many as 200 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	// +kubebuilder:validation:Optional
	InitialRun *bool `json:"initialRun,omitempty" tf:"initial_run,omitempty"`

	// The status for the job. Valid values are: CANCELLED, RUNNING and USER_PAUSED
	// +kubebuilder:validation:Optional
	JobStatus *string `json:"jobStatus,omitempty" tf:"job_status,omitempty"`

	// The schedule for running the job. Valid values are: ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the schedule_frequency property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the schedule_frequency property to define the recurrence pattern for the job.
	// +kubebuilder:validation:Required
	JobType *string `json:"jobType" tf:"job_type,omitempty"`

	// A custom name for the job. The name can contain as many as 500 characters. Conflicts with name_prefix.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	// +kubebuilder:validation:Required
	S3JobDefinition []S3JobDefinitionParameters `json:"s3JobDefinition" tf:"s3_job_definition,omitempty"`

	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	// +kubebuilder:validation:Optional
	SamplingPercentage *float64 `json:"samplingPercentage,omitempty" tf:"sampling_percentage,omitempty"`

	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
	// +kubebuilder:validation:Optional
	ScheduleFrequency []ScheduleFrequencyParameters `json:"scheduleFrequency,omitempty" tf:"schedule_frequency,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ExcludesAndObservation struct {
}

type ExcludesAndParameters struct {

	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	SimpleScopeTerm []SimpleScopeTermParameters `json:"simpleScopeTerm,omitempty" tf:"simple_scope_term,omitempty"`

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	TagScopeTerm []TagScopeTermParameters `json:"tagScopeTerm,omitempty" tf:"tag_scope_term,omitempty"`
}

type ExcludesObservation struct {
}

type ExcludesParameters struct {

	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	And []AndParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type IncludesAndObservation struct {
}

type IncludesAndParameters struct {

	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	SimpleCriterion []AndSimpleCriterionParameters `json:"simpleCriterion,omitempty" tf:"simple_criterion,omitempty"`

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	TagCriterion []AndTagCriterionParameters `json:"tagCriterion,omitempty" tf:"tag_criterion,omitempty"`
}

type IncludesObservation struct {
}

type IncludesParameters struct {

	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	And []IncludesAndParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type S3JobDefinitionObservation struct {
}

type S3JobDefinitionParameters struct {

	// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
	// +kubebuilder:validation:Optional
	BucketCriteria []BucketCriteriaParameters `json:"bucketCriteria,omitempty" tf:"bucket_criteria,omitempty"`

	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with bucket_criteria. (documented below)
	// +kubebuilder:validation:Optional
	BucketDefinitions []BucketDefinitionsParameters `json:"bucketDefinitions,omitempty" tf:"bucket_definitions,omitempty"`

	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	// +kubebuilder:validation:Optional
	Scoping []ScopingParameters `json:"scoping,omitempty" tf:"scoping,omitempty"`
}

type ScheduleFrequencyObservation struct {
}

type ScheduleFrequencyParameters struct {

	// Specifies a daily recurrence pattern for running the job.
	// +kubebuilder:validation:Optional
	DailySchedule *bool `json:"dailySchedule,omitempty" tf:"daily_schedule,omitempty"`

	// Specifies a monthly recurrence pattern for running the job.
	// +kubebuilder:validation:Optional
	MonthlySchedule *float64 `json:"monthlySchedule,omitempty" tf:"monthly_schedule,omitempty"`

	// Specifies a weekly recurrence pattern for running the job.
	// +kubebuilder:validation:Optional
	WeeklySchedule *string `json:"weeklySchedule,omitempty" tf:"weekly_schedule,omitempty"`
}

type ScopingExcludesObservation struct {
}

type ScopingExcludesParameters struct {

	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	And []ExcludesAndParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type ScopingIncludesAndObservation struct {
}

type ScopingIncludesAndParameters struct {

	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	SimpleScopeTerm []AndSimpleScopeTermParameters `json:"simpleScopeTerm,omitempty" tf:"simple_scope_term,omitempty"`

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	TagScopeTerm []AndTagScopeTermParameters `json:"tagScopeTerm,omitempty" tf:"tag_scope_term,omitempty"`
}

type ScopingIncludesObservation struct {
}

type ScopingIncludesParameters struct {

	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	And []ScopingIncludesAndParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type ScopingObservation struct {
}

type ScopingParameters struct {

	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	// +kubebuilder:validation:Optional
	Excludes []ScopingExcludesParameters `json:"excludes,omitempty" tf:"excludes,omitempty"`

	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	// +kubebuilder:validation:Optional
	Includes []ScopingIncludesParameters `json:"includes,omitempty" tf:"includes,omitempty"`
}

type SimpleCriterionObservation struct {
}

type SimpleCriterionParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SimpleScopeTermObservation struct {
}

type SimpleScopeTermParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type TagCriterionObservation struct {
}

type TagCriterionParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	TagValues []TagValuesParameters `json:"tagValues,omitempty" tf:"tag_values,omitempty"`
}

type TagCriterionTagValuesObservation struct {
}

type TagCriterionTagValuesParameters struct {

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagScopeTermObservation struct {
}

type TagScopeTermParameters struct {

	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	Comparator *string `json:"comparator,omitempty" tf:"comparator,omitempty"`

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	TagValues []TagScopeTermTagValuesParameters `json:"tagValues,omitempty" tf:"tag_values,omitempty"`

	// The type of object to apply the condition to. The only valid value is S3_OBJECT.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type TagScopeTermTagValuesObservation struct {
}

type TagScopeTermTagValuesParameters struct {

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagValuesObservation struct {
}

type TagValuesParameters struct {

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UserPausedDetailsObservation struct {
	JobExpiresAt *string `json:"jobExpiresAt,omitempty" tf:"job_expires_at,omitempty"`

	JobImminentExpirationHealthEventArn *string `json:"jobImminentExpirationHealthEventArn,omitempty" tf:"job_imminent_expiration_health_event_arn,omitempty"`

	JobPausedAt *string `json:"jobPausedAt,omitempty" tf:"job_paused_at,omitempty"`
}

type UserPausedDetailsParameters struct {
}

// ClassificationJobSpec defines the desired state of ClassificationJob
type ClassificationJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClassificationJobParameters `json:"forProvider"`
}

// ClassificationJobStatus defines the observed state of ClassificationJob.
type ClassificationJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClassificationJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClassificationJob is the Schema for the ClassificationJobs API. Provides a resource to manage an AWS Macie Classification Job.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ClassificationJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClassificationJobSpec   `json:"spec"`
	Status            ClassificationJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClassificationJobList contains a list of ClassificationJobs
type ClassificationJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClassificationJob `json:"items"`
}

// Repository type metadata.
var (
	ClassificationJob_Kind             = "ClassificationJob"
	ClassificationJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClassificationJob_Kind}.String()
	ClassificationJob_KindAPIVersion   = ClassificationJob_Kind + "." + CRDGroupVersion.String()
	ClassificationJob_GroupVersionKind = CRDGroupVersion.WithKind(ClassificationJob_Kind)
)

func init() {
	SchemeBuilder.Register(&ClassificationJob{}, &ClassificationJobList{})
}
