// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type CustomizedCapacityMetricSpecificationInitParameters struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	MetricDataQuery []MetricDataQueryInitParameters `json:"metricDataQuery,omitempty" tf:"metric_data_query,omitempty"`
}

type CustomizedCapacityMetricSpecificationObservation struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	MetricDataQuery []MetricDataQueryObservation `json:"metricDataQuery,omitempty" tf:"metric_data_query,omitempty"`
}

type CustomizedCapacityMetricSpecificationParameters struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	MetricDataQuery []MetricDataQueryParameters `json:"metricDataQuery" tf:"metric_data_query,omitempty"`
}

type CustomizedLoadMetricSpecificationInitParameters struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	MetricDataQuery []CustomizedLoadMetricSpecificationMetricDataQueryInitParameters `json:"metricDataQuery,omitempty" tf:"metric_data_query,omitempty"`
}

type CustomizedLoadMetricSpecificationMetricDataQueryInitParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *MetricDataQueryMetricStatInitParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type CustomizedLoadMetricSpecificationMetricDataQueryObservation struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *MetricDataQueryMetricStatObservation `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type CustomizedLoadMetricSpecificationMetricDataQueryParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	MetricStat *MetricDataQueryMetricStatParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	// +kubebuilder:validation:Optional
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type CustomizedLoadMetricSpecificationObservation struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	MetricDataQuery []CustomizedLoadMetricSpecificationMetricDataQueryObservation `json:"metricDataQuery,omitempty" tf:"metric_data_query,omitempty"`
}

type CustomizedLoadMetricSpecificationParameters struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	MetricDataQuery []CustomizedLoadMetricSpecificationMetricDataQueryParameters `json:"metricDataQuery" tf:"metric_data_query,omitempty"`
}

type CustomizedMetricSpecificationInitParameters struct {

	// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
	Dimensions []DimensionsInitParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Metrics to include, as a metric data query.
	Metrics []MetricsInitParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedMetricSpecificationObservation struct {

	// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
	Dimensions []DimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Metrics to include, as a metric data query.
	Metrics []MetricsObservation `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedMetricSpecificationParameters struct {

	// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
	// +kubebuilder:validation:Optional
	Dimensions []DimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Name of the metric.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Metrics to include, as a metric data query.
	// +kubebuilder:validation:Optional
	Metrics []MetricsParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Namespace of the metric.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.
	// +kubebuilder:validation:Optional
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`

	// Unit of the metric.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedScalingMetricSpecificationInitParameters struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	MetricDataQuery []CustomizedScalingMetricSpecificationMetricDataQueryInitParameters `json:"metricDataQuery,omitempty" tf:"metric_data_query,omitempty"`
}

type CustomizedScalingMetricSpecificationMetricDataQueryInitParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *CustomizedScalingMetricSpecificationMetricDataQueryMetricStatInitParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type CustomizedScalingMetricSpecificationMetricDataQueryMetricStatInitParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricDataQueryMetricStatMetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedScalingMetricSpecificationMetricDataQueryMetricStatObservation struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricDataQueryMetricStatMetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedScalingMetricSpecificationMetricDataQueryMetricStatParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Optional
	Metric *MetricDataQueryMetricStatMetricParameters `json:"metric" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Optional
	Stat *string `json:"stat" tf:"stat,omitempty"`

	// Unit of the metric.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedScalingMetricSpecificationMetricDataQueryObservation struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *CustomizedScalingMetricSpecificationMetricDataQueryMetricStatObservation `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type CustomizedScalingMetricSpecificationMetricDataQueryParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	MetricStat *CustomizedScalingMetricSpecificationMetricDataQueryMetricStatParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	// +kubebuilder:validation:Optional
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type CustomizedScalingMetricSpecificationObservation struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	MetricDataQuery []CustomizedScalingMetricSpecificationMetricDataQueryObservation `json:"metricDataQuery,omitempty" tf:"metric_data_query,omitempty"`
}

type CustomizedScalingMetricSpecificationParameters struct {

	// One or more metric data queries to provide data points for a metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	MetricDataQuery []CustomizedScalingMetricSpecificationMetricDataQueryParameters `json:"metricDataQuery" tf:"metric_data_query,omitempty"`
}

type DimensionInitParameters struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DimensionObservation struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DimensionParameters struct {

	// Name of the dimension.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the dimension.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type DimensionsInitParameters struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DimensionsObservation struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DimensionsParameters struct {

	// Name of the dimension.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the dimension.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type MetricDataQueryInitParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *MetricStatInitParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricDataQueryMetricStatInitParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricStatMetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricDataQueryMetricStatMetricInitParameters struct {

	// Dimensions of the metric. See supported fields below.
	Dimension []MetricStatMetricDimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricDataQueryMetricStatMetricObservation struct {

	// Dimensions of the metric. See supported fields below.
	Dimension []MetricStatMetricDimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricDataQueryMetricStatMetricParameters struct {

	// Dimensions of the metric. See supported fields below.
	// +kubebuilder:validation:Optional
	Dimension []MetricStatMetricDimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricDataQueryMetricStatObservation struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricStatMetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricDataQueryMetricStatParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Optional
	Metric *MetricStatMetricParameters `json:"metric" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Optional
	Stat *string `json:"stat" tf:"stat,omitempty"`

	// Unit of the metric.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricDataQueryObservation struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *MetricStatObservation `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricDataQueryParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	MetricStat *MetricStatParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	// +kubebuilder:validation:Optional
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricDimensionInitParameters struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricDimensionObservation struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricDimensionParameters struct {

	// Name of the dimension.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the dimension.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type MetricDimensionsInitParameters struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricDimensionsObservation struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricDimensionsParameters struct {

	// Name of the dimension.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the dimension.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type MetricInitParameters struct {

	// Dimensions of the metric. See supported fields below.
	Dimension []DimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricObservation struct {

	// Dimensions of the metric. See supported fields below.
	Dimension []DimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricParameters struct {

	// Dimensions of the metric. See supported fields below.
	// +kubebuilder:validation:Optional
	Dimension []DimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricSpecificationInitParameters struct {

	// Customized capacity metric specification. See supported fields below.
	CustomizedCapacityMetricSpecification *CustomizedCapacityMetricSpecificationInitParameters `json:"customizedCapacityMetricSpecification,omitempty" tf:"customized_capacity_metric_specification,omitempty"`

	// Customized load metric specification. See supported fields below.
	CustomizedLoadMetricSpecification *CustomizedLoadMetricSpecificationInitParameters `json:"customizedLoadMetricSpecification,omitempty" tf:"customized_load_metric_specification,omitempty"`

	// Customized scaling metric specification. See supported fields below.
	CustomizedScalingMetricSpecification *CustomizedScalingMetricSpecificationInitParameters `json:"customizedScalingMetricSpecification,omitempty" tf:"customized_scaling_metric_specification,omitempty"`

	// Predefined load metric specification. See supported fields below.
	PredefinedLoadMetricSpecification *PredefinedLoadMetricSpecificationInitParameters `json:"predefinedLoadMetricSpecification,omitempty" tf:"predefined_load_metric_specification,omitempty"`

	// Predefined metric pair specification that determines the appropriate scaling metric and load metric to use. See supported fields below.
	PredefinedMetricPairSpecification *PredefinedMetricPairSpecificationInitParameters `json:"predefinedMetricPairSpecification,omitempty" tf:"predefined_metric_pair_specification,omitempty"`

	// Predefined scaling metric specification. See supported fields below.
	PredefinedScalingMetricSpecification *PredefinedScalingMetricSpecificationInitParameters `json:"predefinedScalingMetricSpecification,omitempty" tf:"predefined_scaling_metric_specification,omitempty"`

	// Target value for the metric.
	TargetValue *string `json:"targetValue,omitempty" tf:"target_value,omitempty"`
}

type MetricSpecificationObservation struct {

	// Customized capacity metric specification. See supported fields below.
	CustomizedCapacityMetricSpecification *CustomizedCapacityMetricSpecificationObservation `json:"customizedCapacityMetricSpecification,omitempty" tf:"customized_capacity_metric_specification,omitempty"`

	// Customized load metric specification. See supported fields below.
	CustomizedLoadMetricSpecification *CustomizedLoadMetricSpecificationObservation `json:"customizedLoadMetricSpecification,omitempty" tf:"customized_load_metric_specification,omitempty"`

	// Customized scaling metric specification. See supported fields below.
	CustomizedScalingMetricSpecification *CustomizedScalingMetricSpecificationObservation `json:"customizedScalingMetricSpecification,omitempty" tf:"customized_scaling_metric_specification,omitempty"`

	// Predefined load metric specification. See supported fields below.
	PredefinedLoadMetricSpecification *PredefinedLoadMetricSpecificationObservation `json:"predefinedLoadMetricSpecification,omitempty" tf:"predefined_load_metric_specification,omitempty"`

	// Predefined metric pair specification that determines the appropriate scaling metric and load metric to use. See supported fields below.
	PredefinedMetricPairSpecification *PredefinedMetricPairSpecificationObservation `json:"predefinedMetricPairSpecification,omitempty" tf:"predefined_metric_pair_specification,omitempty"`

	// Predefined scaling metric specification. See supported fields below.
	PredefinedScalingMetricSpecification *PredefinedScalingMetricSpecificationObservation `json:"predefinedScalingMetricSpecification,omitempty" tf:"predefined_scaling_metric_specification,omitempty"`

	// Target value for the metric.
	TargetValue *string `json:"targetValue,omitempty" tf:"target_value,omitempty"`
}

type MetricSpecificationParameters struct {

	// Customized capacity metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	CustomizedCapacityMetricSpecification *CustomizedCapacityMetricSpecificationParameters `json:"customizedCapacityMetricSpecification,omitempty" tf:"customized_capacity_metric_specification,omitempty"`

	// Customized load metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	CustomizedLoadMetricSpecification *CustomizedLoadMetricSpecificationParameters `json:"customizedLoadMetricSpecification,omitempty" tf:"customized_load_metric_specification,omitempty"`

	// Customized scaling metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	CustomizedScalingMetricSpecification *CustomizedScalingMetricSpecificationParameters `json:"customizedScalingMetricSpecification,omitempty" tf:"customized_scaling_metric_specification,omitempty"`

	// Predefined load metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	PredefinedLoadMetricSpecification *PredefinedLoadMetricSpecificationParameters `json:"predefinedLoadMetricSpecification,omitempty" tf:"predefined_load_metric_specification,omitempty"`

	// Predefined metric pair specification that determines the appropriate scaling metric and load metric to use. See supported fields below.
	// +kubebuilder:validation:Optional
	PredefinedMetricPairSpecification *PredefinedMetricPairSpecificationParameters `json:"predefinedMetricPairSpecification,omitempty" tf:"predefined_metric_pair_specification,omitempty"`

	// Predefined scaling metric specification. See supported fields below.
	// +kubebuilder:validation:Optional
	PredefinedScalingMetricSpecification *PredefinedScalingMetricSpecificationParameters `json:"predefinedScalingMetricSpecification,omitempty" tf:"predefined_scaling_metric_specification,omitempty"`

	// Target value for the metric.
	// +kubebuilder:validation:Optional
	TargetValue *string `json:"targetValue" tf:"target_value,omitempty"`
}

type MetricStatInitParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricStatMetricDimensionInitParameters struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricStatMetricDimensionObservation struct {

	// Name of the dimension.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the dimension.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricStatMetricDimensionParameters struct {

	// Name of the dimension.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the dimension.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type MetricStatMetricInitParameters struct {

	// Dimensions of the metric. See supported fields below.
	Dimension []MetricDimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricStatMetricObservation struct {

	// Dimensions of the metric. See supported fields below.
	Dimension []MetricDimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricStatMetricParameters struct {

	// Dimensions of the metric. See supported fields below.
	// +kubebuilder:validation:Optional
	Dimension []MetricDimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// Name of the metric.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricStatObservation struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricStatParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Optional
	Metric *MetricParameters `json:"metric" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Optional
	Stat *string `json:"stat" tf:"stat,omitempty"`

	// Unit of the metric.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricsInitParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *MetricsMetricStatInitParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricsMetricStatInitParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricsMetricStatMetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricsMetricStatMetricInitParameters struct {

	// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
	Dimensions []MetricDimensionsInitParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricsMetricStatMetricObservation struct {

	// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
	Dimensions []MetricDimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Name of the metric.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricsMetricStatMetricParameters struct {

	// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
	// +kubebuilder:validation:Optional
	Dimensions []MetricDimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Name of the metric.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// Namespace of the metric.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type MetricsMetricStatObservation struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	Metric *MetricsMetricStatMetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	Stat *string `json:"stat,omitempty" tf:"stat,omitempty"`

	// Unit of the metric.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricsMetricStatParameters struct {

	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Optional
	Metric *MetricsMetricStatMetricParameters `json:"metric" tf:"metric,omitempty"`

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Optional
	Stat *string `json:"stat" tf:"stat,omitempty"`

	// Unit of the metric.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetricsObservation struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	MetricStat *MetricsMetricStatObservation `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type MetricsParameters struct {

	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	MetricStat *MetricsMetricStatParameters `json:"metricStat,omitempty" tf:"metric_stat,omitempty"`

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
	// +kubebuilder:validation:Optional
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data,omitempty"`
}

type PolicyInitParameters struct {

	// Policy type. Valid values are StepScaling, TargetTrackingScaling, and PredictiveScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies, Step Scaling Policies, and Predictive Scaling documentation.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// Predictive scaling policy configuration, requires policy_type = "PredictiveScaling". See supported fields below.
	PredictiveScalingPolicyConfiguration *PredictiveScalingPolicyConfigurationInitParameters `json:"predictiveScalingPolicyConfiguration,omitempty" tf:"predictive_scaling_policy_configuration,omitempty"`

	// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
	StepScalingPolicyConfiguration *StepScalingPolicyConfigurationInitParameters `json:"stepScalingPolicyConfiguration,omitempty" tf:"step_scaling_policy_configuration,omitempty"`

	// Target tracking policy configuration, requires policy_type = "TargetTrackingScaling". See supported fields below.
	TargetTrackingScalingPolicyConfiguration *TargetTrackingScalingPolicyConfigurationInitParameters `json:"targetTrackingScalingPolicyConfiguration,omitempty" tf:"target_tracking_scaling_policy_configuration,omitempty"`
}

type PolicyObservation struct {

	// List of CloudWatch alarm ARNs associated with the scaling policy.
	AlarmArns []*string `json:"alarmArns,omitempty" tf:"alarm_arns,omitempty"`

	// ARN assigned by AWS to the scaling policy.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Short name for the metric used in target tracking scaling policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Policy type. Valid values are StepScaling, TargetTrackingScaling, and PredictiveScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies, Step Scaling Policies, and Predictive Scaling documentation.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// Predictive scaling policy configuration, requires policy_type = "PredictiveScaling". See supported fields below.
	PredictiveScalingPolicyConfiguration *PredictiveScalingPolicyConfigurationObservation `json:"predictiveScalingPolicyConfiguration,omitempty" tf:"predictive_scaling_policy_configuration,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Scalable dimension of the scalable target. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference
	ScalableDimension *string `json:"scalableDimension,omitempty" tf:"scalable_dimension,omitempty"`

	// AWS service namespace of the scalable target. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference
	ServiceNamespace *string `json:"serviceNamespace,omitempty" tf:"service_namespace,omitempty"`

	// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
	StepScalingPolicyConfiguration *StepScalingPolicyConfigurationObservation `json:"stepScalingPolicyConfiguration,omitempty" tf:"step_scaling_policy_configuration,omitempty"`

	// Target tracking policy configuration, requires policy_type = "TargetTrackingScaling". See supported fields below.
	TargetTrackingScalingPolicyConfiguration *TargetTrackingScalingPolicyConfigurationObservation `json:"targetTrackingScalingPolicyConfiguration,omitempty" tf:"target_tracking_scaling_policy_configuration,omitempty"`
}

type PolicyParameters struct {

	// Policy type. Valid values are StepScaling, TargetTrackingScaling, and PredictiveScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies, Step Scaling Policies, and Predictive Scaling documentation.
	// +kubebuilder:validation:Optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// Predictive scaling policy configuration, requires policy_type = "PredictiveScaling". See supported fields below.
	// +kubebuilder:validation:Optional
	PredictiveScalingPolicyConfiguration *PredictiveScalingPolicyConfigurationParameters `json:"predictiveScalingPolicyConfiguration,omitempty" tf:"predictive_scaling_policy_configuration,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/appautoscaling/v1beta1.Target
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("resource_id",false)
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Reference to a Target in appautoscaling to populate resourceId.
	// +kubebuilder:validation:Optional
	ResourceIDRef *v1.Reference `json:"resourceIdRef,omitempty" tf:"-"`

	// Selector for a Target in appautoscaling to populate resourceId.
	// +kubebuilder:validation:Optional
	ResourceIDSelector *v1.Selector `json:"resourceIdSelector,omitempty" tf:"-"`

	// Scalable dimension of the scalable target. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/appautoscaling/v1beta1.Target
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("scalable_dimension",false)
	// +kubebuilder:validation:Optional
	ScalableDimension *string `json:"scalableDimension,omitempty" tf:"scalable_dimension,omitempty"`

	// Reference to a Target in appautoscaling to populate scalableDimension.
	// +kubebuilder:validation:Optional
	ScalableDimensionRef *v1.Reference `json:"scalableDimensionRef,omitempty" tf:"-"`

	// Selector for a Target in appautoscaling to populate scalableDimension.
	// +kubebuilder:validation:Optional
	ScalableDimensionSelector *v1.Selector `json:"scalableDimensionSelector,omitempty" tf:"-"`

	// AWS service namespace of the scalable target. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/appautoscaling/v1beta1.Target
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("service_namespace",false)
	// +kubebuilder:validation:Optional
	ServiceNamespace *string `json:"serviceNamespace,omitempty" tf:"service_namespace,omitempty"`

	// Reference to a Target in appautoscaling to populate serviceNamespace.
	// +kubebuilder:validation:Optional
	ServiceNamespaceRef *v1.Reference `json:"serviceNamespaceRef,omitempty" tf:"-"`

	// Selector for a Target in appautoscaling to populate serviceNamespace.
	// +kubebuilder:validation:Optional
	ServiceNamespaceSelector *v1.Selector `json:"serviceNamespaceSelector,omitempty" tf:"-"`

	// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
	// +kubebuilder:validation:Optional
	StepScalingPolicyConfiguration *StepScalingPolicyConfigurationParameters `json:"stepScalingPolicyConfiguration,omitempty" tf:"step_scaling_policy_configuration,omitempty"`

	// Target tracking policy configuration, requires policy_type = "TargetTrackingScaling". See supported fields below.
	// +kubebuilder:validation:Optional
	TargetTrackingScalingPolicyConfiguration *TargetTrackingScalingPolicyConfigurationParameters `json:"targetTrackingScalingPolicyConfiguration,omitempty" tf:"target_tracking_scaling_policy_configuration,omitempty"`
}

type PredefinedLoadMetricSpecificationInitParameters struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedLoadMetricSpecificationObservation struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedLoadMetricSpecificationParameters struct {

	// Metric type.
	// +kubebuilder:validation:Optional
	PredefinedMetricType *string `json:"predefinedMetricType" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedMetricPairSpecificationInitParameters struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedMetricPairSpecificationObservation struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedMetricPairSpecificationParameters struct {

	// Metric type.
	// +kubebuilder:validation:Optional
	PredefinedMetricType *string `json:"predefinedMetricType" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedMetricSpecificationInitParameters struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedMetricSpecificationObservation struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedMetricSpecificationParameters struct {

	// Metric type.
	// +kubebuilder:validation:Optional
	PredefinedMetricType *string `json:"predefinedMetricType" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedScalingMetricSpecificationInitParameters struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedScalingMetricSpecificationObservation struct {

	// Metric type.
	PredefinedMetricType *string `json:"predefinedMetricType,omitempty" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedScalingMetricSpecificationParameters struct {

	// Metric type.
	// +kubebuilder:validation:Optional
	PredefinedMetricType *string `json:"predefinedMetricType" tf:"predefined_metric_type,omitempty"`

	// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredictiveScalingPolicyConfigurationInitParameters struct {

	// The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are HonorMaxCapacity and IncreaseMaxCapacity.
	MaxCapacityBreachBehavior *string `json:"maxCapacityBreachBehavior,omitempty" tf:"max_capacity_breach_behavior,omitempty"`

	// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the max_capacity_breach_behavior argument is set to IncreaseMaxCapacity, and cannot be used otherwise.
	MaxCapacityBuffer *float64 `json:"maxCapacityBuffer,omitempty" tf:"max_capacity_buffer,omitempty"`

	// Metrics and target utilization to use for predictive scaling. See supported fields below.
	MetricSpecification []MetricSpecificationInitParameters `json:"metricSpecification,omitempty" tf:"metric_specification,omitempty"`

	// Predictive scaling mode. Valid values are ForecastOnly and ForecastAndScale.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Amount of time, in seconds, that the start time can be advanced.
	SchedulingBufferTime *float64 `json:"schedulingBufferTime,omitempty" tf:"scheduling_buffer_time,omitempty"`
}

type PredictiveScalingPolicyConfigurationObservation struct {

	// The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are HonorMaxCapacity and IncreaseMaxCapacity.
	MaxCapacityBreachBehavior *string `json:"maxCapacityBreachBehavior,omitempty" tf:"max_capacity_breach_behavior,omitempty"`

	// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the max_capacity_breach_behavior argument is set to IncreaseMaxCapacity, and cannot be used otherwise.
	MaxCapacityBuffer *float64 `json:"maxCapacityBuffer,omitempty" tf:"max_capacity_buffer,omitempty"`

	// Metrics and target utilization to use for predictive scaling. See supported fields below.
	MetricSpecification []MetricSpecificationObservation `json:"metricSpecification,omitempty" tf:"metric_specification,omitempty"`

	// Predictive scaling mode. Valid values are ForecastOnly and ForecastAndScale.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Amount of time, in seconds, that the start time can be advanced.
	SchedulingBufferTime *float64 `json:"schedulingBufferTime,omitempty" tf:"scheduling_buffer_time,omitempty"`
}

type PredictiveScalingPolicyConfigurationParameters struct {

	// The behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Valid values are HonorMaxCapacity and IncreaseMaxCapacity.
	// +kubebuilder:validation:Optional
	MaxCapacityBreachBehavior *string `json:"maxCapacityBreachBehavior,omitempty" tf:"max_capacity_breach_behavior,omitempty"`

	// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. Required if the max_capacity_breach_behavior argument is set to IncreaseMaxCapacity, and cannot be used otherwise.
	// +kubebuilder:validation:Optional
	MaxCapacityBuffer *float64 `json:"maxCapacityBuffer,omitempty" tf:"max_capacity_buffer,omitempty"`

	// Metrics and target utilization to use for predictive scaling. See supported fields below.
	// +kubebuilder:validation:Optional
	MetricSpecification []MetricSpecificationParameters `json:"metricSpecification" tf:"metric_specification,omitempty"`

	// Predictive scaling mode. Valid values are ForecastOnly and ForecastAndScale.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Amount of time, in seconds, that the start time can be advanced.
	// +kubebuilder:validation:Optional
	SchedulingBufferTime *float64 `json:"schedulingBufferTime,omitempty" tf:"scheduling_buffer_time,omitempty"`
}

type StepAdjustmentInitParameters struct {

	// Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
	MetricIntervalLowerBound *string `json:"metricIntervalLowerBound,omitempty" tf:"metric_interval_lower_bound,omitempty"`

	// Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
	MetricIntervalUpperBound *string `json:"metricIntervalUpperBound,omitempty" tf:"metric_interval_upper_bound,omitempty"`

	// Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
	ScalingAdjustment *float64 `json:"scalingAdjustment,omitempty" tf:"scaling_adjustment,omitempty"`
}

type StepAdjustmentObservation struct {

	// Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
	MetricIntervalLowerBound *string `json:"metricIntervalLowerBound,omitempty" tf:"metric_interval_lower_bound,omitempty"`

	// Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
	MetricIntervalUpperBound *string `json:"metricIntervalUpperBound,omitempty" tf:"metric_interval_upper_bound,omitempty"`

	// Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
	ScalingAdjustment *float64 `json:"scalingAdjustment,omitempty" tf:"scaling_adjustment,omitempty"`
}

type StepAdjustmentParameters struct {

	// Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
	// +kubebuilder:validation:Optional
	MetricIntervalLowerBound *string `json:"metricIntervalLowerBound,omitempty" tf:"metric_interval_lower_bound,omitempty"`

	// Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
	// +kubebuilder:validation:Optional
	MetricIntervalUpperBound *string `json:"metricIntervalUpperBound,omitempty" tf:"metric_interval_upper_bound,omitempty"`

	// Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
	// +kubebuilder:validation:Optional
	ScalingAdjustment *float64 `json:"scalingAdjustment" tf:"scaling_adjustment,omitempty"`
}

type StepScalingPolicyConfigurationInitParameters struct {

	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
	AdjustmentType *string `json:"adjustmentType,omitempty" tf:"adjustment_type,omitempty"`

	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown *float64 `json:"cooldown,omitempty" tf:"cooldown,omitempty"`

	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType *string `json:"metricAggregationType,omitempty" tf:"metric_aggregation_type,omitempty"`

	// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
	MinAdjustmentMagnitude *float64 `json:"minAdjustmentMagnitude,omitempty" tf:"min_adjustment_magnitude,omitempty"`

	// Set of adjustments that manage scaling. These have the following structure:
	StepAdjustment []StepAdjustmentInitParameters `json:"stepAdjustment,omitempty" tf:"step_adjustment,omitempty"`
}

type StepScalingPolicyConfigurationObservation struct {

	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
	AdjustmentType *string `json:"adjustmentType,omitempty" tf:"adjustment_type,omitempty"`

	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown *float64 `json:"cooldown,omitempty" tf:"cooldown,omitempty"`

	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType *string `json:"metricAggregationType,omitempty" tf:"metric_aggregation_type,omitempty"`

	// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
	MinAdjustmentMagnitude *float64 `json:"minAdjustmentMagnitude,omitempty" tf:"min_adjustment_magnitude,omitempty"`

	// Set of adjustments that manage scaling. These have the following structure:
	StepAdjustment []StepAdjustmentObservation `json:"stepAdjustment,omitempty" tf:"step_adjustment,omitempty"`
}

type StepScalingPolicyConfigurationParameters struct {

	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
	// +kubebuilder:validation:Optional
	AdjustmentType *string `json:"adjustmentType,omitempty" tf:"adjustment_type,omitempty"`

	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	// +kubebuilder:validation:Optional
	Cooldown *float64 `json:"cooldown,omitempty" tf:"cooldown,omitempty"`

	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	// +kubebuilder:validation:Optional
	MetricAggregationType *string `json:"metricAggregationType,omitempty" tf:"metric_aggregation_type,omitempty"`

	// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
	// +kubebuilder:validation:Optional
	MinAdjustmentMagnitude *float64 `json:"minAdjustmentMagnitude,omitempty" tf:"min_adjustment_magnitude,omitempty"`

	// Set of adjustments that manage scaling. These have the following structure:
	// +kubebuilder:validation:Optional
	StepAdjustment []StepAdjustmentParameters `json:"stepAdjustment,omitempty" tf:"step_adjustment,omitempty"`
}

type TargetTrackingScalingPolicyConfigurationInitParameters struct {

	// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
	CustomizedMetricSpecification *CustomizedMetricSpecificationInitParameters `json:"customizedMetricSpecification,omitempty" tf:"customized_metric_specification,omitempty"`

	// Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
	DisableScaleIn *bool `json:"disableScaleIn,omitempty" tf:"disable_scale_in,omitempty"`

	// Predefined metric. See supported fields below.
	PredefinedMetricSpecification *PredefinedMetricSpecificationInitParameters `json:"predefinedMetricSpecification,omitempty" tf:"predefined_metric_specification,omitempty"`

	// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
	ScaleInCooldown *float64 `json:"scaleInCooldown,omitempty" tf:"scale_in_cooldown,omitempty"`

	// Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
	ScaleOutCooldown *float64 `json:"scaleOutCooldown,omitempty" tf:"scale_out_cooldown,omitempty"`

	// Target value for the metric.
	TargetValue *float64 `json:"targetValue,omitempty" tf:"target_value,omitempty"`
}

type TargetTrackingScalingPolicyConfigurationObservation struct {

	// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
	CustomizedMetricSpecification *CustomizedMetricSpecificationObservation `json:"customizedMetricSpecification,omitempty" tf:"customized_metric_specification,omitempty"`

	// Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
	DisableScaleIn *bool `json:"disableScaleIn,omitempty" tf:"disable_scale_in,omitempty"`

	// Predefined metric. See supported fields below.
	PredefinedMetricSpecification *PredefinedMetricSpecificationObservation `json:"predefinedMetricSpecification,omitempty" tf:"predefined_metric_specification,omitempty"`

	// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
	ScaleInCooldown *float64 `json:"scaleInCooldown,omitempty" tf:"scale_in_cooldown,omitempty"`

	// Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
	ScaleOutCooldown *float64 `json:"scaleOutCooldown,omitempty" tf:"scale_out_cooldown,omitempty"`

	// Target value for the metric.
	TargetValue *float64 `json:"targetValue,omitempty" tf:"target_value,omitempty"`
}

type TargetTrackingScalingPolicyConfigurationParameters struct {

	// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
	// +kubebuilder:validation:Optional
	CustomizedMetricSpecification *CustomizedMetricSpecificationParameters `json:"customizedMetricSpecification,omitempty" tf:"customized_metric_specification,omitempty"`

	// Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
	// +kubebuilder:validation:Optional
	DisableScaleIn *bool `json:"disableScaleIn,omitempty" tf:"disable_scale_in,omitempty"`

	// Predefined metric. See supported fields below.
	// +kubebuilder:validation:Optional
	PredefinedMetricSpecification *PredefinedMetricSpecificationParameters `json:"predefinedMetricSpecification,omitempty" tf:"predefined_metric_specification,omitempty"`

	// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
	// +kubebuilder:validation:Optional
	ScaleInCooldown *float64 `json:"scaleInCooldown,omitempty" tf:"scale_in_cooldown,omitempty"`

	// Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
	// +kubebuilder:validation:Optional
	ScaleOutCooldown *float64 `json:"scaleOutCooldown,omitempty" tf:"scale_out_cooldown,omitempty"`

	// Target value for the metric.
	// +kubebuilder:validation:Optional
	TargetValue *float64 `json:"targetValue" tf:"target_value,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// Policy is the Schema for the Policys API. Provides an Application AutoScaling Policy resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec"`
	Status            PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
