//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchSettingsInitParameters) DeepCopyInto(out *ElasticsearchSettingsInitParameters) {
	*out = *in
	if in.EndpointURI != nil {
		in, out := &in.EndpointURI, &out.EndpointURI
		*out = new(string)
		**out = **in
	}
	if in.ErrorRetryDuration != nil {
		in, out := &in.ErrorRetryDuration, &out.ErrorRetryDuration
		*out = new(float64)
		**out = **in
	}
	if in.FullLoadErrorPercentage != nil {
		in, out := &in.FullLoadErrorPercentage, &out.FullLoadErrorPercentage
		*out = new(float64)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.UseNewMappingType != nil {
		in, out := &in.UseNewMappingType, &out.UseNewMappingType
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchSettingsInitParameters.
func (in *ElasticsearchSettingsInitParameters) DeepCopy() *ElasticsearchSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchSettingsObservation) DeepCopyInto(out *ElasticsearchSettingsObservation) {
	*out = *in
	if in.EndpointURI != nil {
		in, out := &in.EndpointURI, &out.EndpointURI
		*out = new(string)
		**out = **in
	}
	if in.ErrorRetryDuration != nil {
		in, out := &in.ErrorRetryDuration, &out.ErrorRetryDuration
		*out = new(float64)
		**out = **in
	}
	if in.FullLoadErrorPercentage != nil {
		in, out := &in.FullLoadErrorPercentage, &out.FullLoadErrorPercentage
		*out = new(float64)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.UseNewMappingType != nil {
		in, out := &in.UseNewMappingType, &out.UseNewMappingType
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchSettingsObservation.
func (in *ElasticsearchSettingsObservation) DeepCopy() *ElasticsearchSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchSettingsParameters) DeepCopyInto(out *ElasticsearchSettingsParameters) {
	*out = *in
	if in.EndpointURI != nil {
		in, out := &in.EndpointURI, &out.EndpointURI
		*out = new(string)
		**out = **in
	}
	if in.ErrorRetryDuration != nil {
		in, out := &in.ErrorRetryDuration, &out.ErrorRetryDuration
		*out = new(float64)
		**out = **in
	}
	if in.FullLoadErrorPercentage != nil {
		in, out := &in.FullLoadErrorPercentage, &out.FullLoadErrorPercentage
		*out = new(float64)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.UseNewMappingType != nil {
		in, out := &in.UseNewMappingType, &out.UseNewMappingType
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchSettingsParameters.
func (in *ElasticsearchSettingsParameters) DeepCopy() *ElasticsearchSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Endpoint) DeepCopyInto(out *Endpoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Endpoint.
func (in *Endpoint) DeepCopy() *Endpoint {
	if in == nil {
		return nil
	}
	out := new(Endpoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Endpoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointInitParameters) DeepCopyInto(out *EndpointInitParameters) {
	*out = *in
	if in.CertificateArn != nil {
		in, out := &in.CertificateArn, &out.CertificateArn
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ElasticsearchSettings != nil {
		in, out := &in.ElasticsearchSettings, &out.ElasticsearchSettings
		*out = new(ElasticsearchSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.EngineName != nil {
		in, out := &in.EngineName, &out.EngineName
		*out = new(string)
		**out = **in
	}
	if in.ExtraConnectionAttributes != nil {
		in, out := &in.ExtraConnectionAttributes, &out.ExtraConnectionAttributes
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArnRef != nil {
		in, out := &in.KMSKeyArnRef, &out.KMSKeyArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyArnSelector != nil {
		in, out := &in.KMSKeyArnSelector, &out.KMSKeyArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KafkaSettings != nil {
		in, out := &in.KafkaSettings, &out.KafkaSettings
		*out = new(KafkaSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.KinesisSettings != nil {
		in, out := &in.KinesisSettings, &out.KinesisSettings
		*out = new(KinesisSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.MongodbSettings != nil {
		in, out := &in.MongodbSettings, &out.MongodbSettings
		*out = new(MongodbSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PauseReplicationTasks != nil {
		in, out := &in.PauseReplicationTasks, &out.PauseReplicationTasks
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PostgresSettings != nil {
		in, out := &in.PostgresSettings, &out.PostgresSettings
		*out = new(PostgresSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisSettings != nil {
		in, out := &in.RedisSettings, &out.RedisSettings
		*out = new(RedisSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RedshiftSettings != nil {
		in, out := &in.RedshiftSettings, &out.RedshiftSettings
		*out = new(RedshiftSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLMode != nil {
		in, out := &in.SSLMode, &out.SSLMode
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArn != nil {
		in, out := &in.SecretsManagerAccessRoleArn, &out.SecretsManagerAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArnRef != nil {
		in, out := &in.SecretsManagerAccessRoleArnRef, &out.SecretsManagerAccessRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretsManagerAccessRoleArnSelector != nil {
		in, out := &in.SecretsManagerAccessRoleArnSelector, &out.SecretsManagerAccessRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretsManagerArn != nil {
		in, out := &in.SecretsManagerArn, &out.SecretsManagerArn
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRole != nil {
		in, out := &in.ServiceAccessRole, &out.ServiceAccessRole
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRoleRef != nil {
		in, out := &in.ServiceAccessRoleRef, &out.ServiceAccessRoleRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccessRoleSelector != nil {
		in, out := &in.ServiceAccessRoleSelector, &out.ServiceAccessRoleSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointInitParameters.
func (in *EndpointInitParameters) DeepCopy() *EndpointInitParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointList) DeepCopyInto(out *EndpointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Endpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointList.
func (in *EndpointList) DeepCopy() *EndpointList {
	if in == nil {
		return nil
	}
	out := new(EndpointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EndpointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointObservation) DeepCopyInto(out *EndpointObservation) {
	*out = *in
	if in.CertificateArn != nil {
		in, out := &in.CertificateArn, &out.CertificateArn
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ElasticsearchSettings != nil {
		in, out := &in.ElasticsearchSettings, &out.ElasticsearchSettings
		*out = new(ElasticsearchSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.EndpointArn != nil {
		in, out := &in.EndpointArn, &out.EndpointArn
		*out = new(string)
		**out = **in
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.EngineName != nil {
		in, out := &in.EngineName, &out.EngineName
		*out = new(string)
		**out = **in
	}
	if in.ExtraConnectionAttributes != nil {
		in, out := &in.ExtraConnectionAttributes, &out.ExtraConnectionAttributes
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.KafkaSettings != nil {
		in, out := &in.KafkaSettings, &out.KafkaSettings
		*out = new(KafkaSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.KinesisSettings != nil {
		in, out := &in.KinesisSettings, &out.KinesisSettings
		*out = new(KinesisSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.MongodbSettings != nil {
		in, out := &in.MongodbSettings, &out.MongodbSettings
		*out = new(MongodbSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.PauseReplicationTasks != nil {
		in, out := &in.PauseReplicationTasks, &out.PauseReplicationTasks
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PostgresSettings != nil {
		in, out := &in.PostgresSettings, &out.PostgresSettings
		*out = new(PostgresSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisSettings != nil {
		in, out := &in.RedisSettings, &out.RedisSettings
		*out = new(RedisSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.RedshiftSettings != nil {
		in, out := &in.RedshiftSettings, &out.RedshiftSettings
		*out = new(RedshiftSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLMode != nil {
		in, out := &in.SSLMode, &out.SSLMode
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArn != nil {
		in, out := &in.SecretsManagerAccessRoleArn, &out.SecretsManagerAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerArn != nil {
		in, out := &in.SecretsManagerArn, &out.SecretsManagerArn
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRole != nil {
		in, out := &in.ServiceAccessRole, &out.ServiceAccessRole
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointObservation.
func (in *EndpointObservation) DeepCopy() *EndpointObservation {
	if in == nil {
		return nil
	}
	out := new(EndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointParameters) DeepCopyInto(out *EndpointParameters) {
	*out = *in
	if in.CertificateArn != nil {
		in, out := &in.CertificateArn, &out.CertificateArn
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ElasticsearchSettings != nil {
		in, out := &in.ElasticsearchSettings, &out.ElasticsearchSettings
		*out = new(ElasticsearchSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.EngineName != nil {
		in, out := &in.EngineName, &out.EngineName
		*out = new(string)
		**out = **in
	}
	if in.ExtraConnectionAttributes != nil {
		in, out := &in.ExtraConnectionAttributes, &out.ExtraConnectionAttributes
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArn != nil {
		in, out := &in.KMSKeyArn, &out.KMSKeyArn
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyArnRef != nil {
		in, out := &in.KMSKeyArnRef, &out.KMSKeyArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyArnSelector != nil {
		in, out := &in.KMSKeyArnSelector, &out.KMSKeyArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KafkaSettings != nil {
		in, out := &in.KafkaSettings, &out.KafkaSettings
		*out = new(KafkaSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.KinesisSettings != nil {
		in, out := &in.KinesisSettings, &out.KinesisSettings
		*out = new(KinesisSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.MongodbSettings != nil {
		in, out := &in.MongodbSettings, &out.MongodbSettings
		*out = new(MongodbSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PauseReplicationTasks != nil {
		in, out := &in.PauseReplicationTasks, &out.PauseReplicationTasks
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.PostgresSettings != nil {
		in, out := &in.PostgresSettings, &out.PostgresSettings
		*out = new(PostgresSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisSettings != nil {
		in, out := &in.RedisSettings, &out.RedisSettings
		*out = new(RedisSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RedshiftSettings != nil {
		in, out := &in.RedshiftSettings, &out.RedshiftSettings
		*out = new(RedshiftSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLMode != nil {
		in, out := &in.SSLMode, &out.SSLMode
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArn != nil {
		in, out := &in.SecretsManagerAccessRoleArn, &out.SecretsManagerAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.SecretsManagerAccessRoleArnRef != nil {
		in, out := &in.SecretsManagerAccessRoleArnRef, &out.SecretsManagerAccessRoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretsManagerAccessRoleArnSelector != nil {
		in, out := &in.SecretsManagerAccessRoleArnSelector, &out.SecretsManagerAccessRoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretsManagerArn != nil {
		in, out := &in.SecretsManagerArn, &out.SecretsManagerArn
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRole != nil {
		in, out := &in.ServiceAccessRole, &out.ServiceAccessRole
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRoleRef != nil {
		in, out := &in.ServiceAccessRoleRef, &out.ServiceAccessRoleRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccessRoleSelector != nil {
		in, out := &in.ServiceAccessRoleSelector, &out.ServiceAccessRoleSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointParameters.
func (in *EndpointParameters) DeepCopy() *EndpointParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointSpec) DeepCopyInto(out *EndpointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointSpec.
func (in *EndpointSpec) DeepCopy() *EndpointSpec {
	if in == nil {
		return nil
	}
	out := new(EndpointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointStatus) DeepCopyInto(out *EndpointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointStatus.
func (in *EndpointStatus) DeepCopy() *EndpointStatus {
	if in == nil {
		return nil
	}
	out := new(EndpointStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaSettingsInitParameters) DeepCopyInto(out *KafkaSettingsInitParameters) {
	*out = *in
	if in.Broker != nil {
		in, out := &in.Broker, &out.Broker
		*out = new(string)
		**out = **in
	}
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(float64)
		**out = **in
	}
	if in.NoHexPrefix != nil {
		in, out := &in.NoHexPrefix, &out.NoHexPrefix
		*out = new(bool)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificateArn != nil {
		in, out := &in.SSLClientCertificateArn, &out.SSLClientCertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyArn != nil {
		in, out := &in.SSLClientKeyArn, &out.SSLClientKeyArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyPasswordSecretRef != nil {
		in, out := &in.SSLClientKeyPasswordSecretRef, &out.SSLClientKeyPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaSettingsInitParameters.
func (in *KafkaSettingsInitParameters) DeepCopy() *KafkaSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaSettingsObservation) DeepCopyInto(out *KafkaSettingsObservation) {
	*out = *in
	if in.Broker != nil {
		in, out := &in.Broker, &out.Broker
		*out = new(string)
		**out = **in
	}
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(float64)
		**out = **in
	}
	if in.NoHexPrefix != nil {
		in, out := &in.NoHexPrefix, &out.NoHexPrefix
		*out = new(bool)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificateArn != nil {
		in, out := &in.SSLClientCertificateArn, &out.SSLClientCertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyArn != nil {
		in, out := &in.SSLClientKeyArn, &out.SSLClientKeyArn
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaSettingsObservation.
func (in *KafkaSettingsObservation) DeepCopy() *KafkaSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaSettingsParameters) DeepCopyInto(out *KafkaSettingsParameters) {
	*out = *in
	if in.Broker != nil {
		in, out := &in.Broker, &out.Broker
		*out = new(string)
		**out = **in
	}
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(float64)
		**out = **in
	}
	if in.NoHexPrefix != nil {
		in, out := &in.NoHexPrefix, &out.NoHexPrefix
		*out = new(bool)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificateArn != nil {
		in, out := &in.SSLClientCertificateArn, &out.SSLClientCertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyArn != nil {
		in, out := &in.SSLClientKeyArn, &out.SSLClientKeyArn
		*out = new(string)
		**out = **in
	}
	if in.SSLClientKeyPasswordSecretRef != nil {
		in, out := &in.SSLClientKeyPasswordSecretRef, &out.SSLClientKeyPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaSettingsParameters.
func (in *KafkaSettingsParameters) DeepCopy() *KafkaSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KinesisSettingsInitParameters) DeepCopyInto(out *KinesisSettingsInitParameters) {
	*out = *in
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.StreamArn != nil {
		in, out := &in.StreamArn, &out.StreamArn
		*out = new(string)
		**out = **in
	}
	if in.UseLargeIntegerValue != nil {
		in, out := &in.UseLargeIntegerValue, &out.UseLargeIntegerValue
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KinesisSettingsInitParameters.
func (in *KinesisSettingsInitParameters) DeepCopy() *KinesisSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(KinesisSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KinesisSettingsObservation) DeepCopyInto(out *KinesisSettingsObservation) {
	*out = *in
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.StreamArn != nil {
		in, out := &in.StreamArn, &out.StreamArn
		*out = new(string)
		**out = **in
	}
	if in.UseLargeIntegerValue != nil {
		in, out := &in.UseLargeIntegerValue, &out.UseLargeIntegerValue
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KinesisSettingsObservation.
func (in *KinesisSettingsObservation) DeepCopy() *KinesisSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(KinesisSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KinesisSettingsParameters) DeepCopyInto(out *KinesisSettingsParameters) {
	*out = *in
	if in.IncludeControlDetails != nil {
		in, out := &in.IncludeControlDetails, &out.IncludeControlDetails
		*out = new(bool)
		**out = **in
	}
	if in.IncludeNullAndEmpty != nil {
		in, out := &in.IncludeNullAndEmpty, &out.IncludeNullAndEmpty
		*out = new(bool)
		**out = **in
	}
	if in.IncludePartitionValue != nil {
		in, out := &in.IncludePartitionValue, &out.IncludePartitionValue
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTableAlterOperations != nil {
		in, out := &in.IncludeTableAlterOperations, &out.IncludeTableAlterOperations
		*out = new(bool)
		**out = **in
	}
	if in.IncludeTransactionDetails != nil {
		in, out := &in.IncludeTransactionDetails, &out.IncludeTransactionDetails
		*out = new(bool)
		**out = **in
	}
	if in.MessageFormat != nil {
		in, out := &in.MessageFormat, &out.MessageFormat
		*out = new(string)
		**out = **in
	}
	if in.PartitionIncludeSchemaTable != nil {
		in, out := &in.PartitionIncludeSchemaTable, &out.PartitionIncludeSchemaTable
		*out = new(bool)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
	if in.StreamArn != nil {
		in, out := &in.StreamArn, &out.StreamArn
		*out = new(string)
		**out = **in
	}
	if in.UseLargeIntegerValue != nil {
		in, out := &in.UseLargeIntegerValue, &out.UseLargeIntegerValue
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KinesisSettingsParameters.
func (in *KinesisSettingsParameters) DeepCopy() *KinesisSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(KinesisSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbSettingsInitParameters) DeepCopyInto(out *MongodbSettingsInitParameters) {
	*out = *in
	if in.AuthMechanism != nil {
		in, out := &in.AuthMechanism, &out.AuthMechanism
		*out = new(string)
		**out = **in
	}
	if in.AuthSource != nil {
		in, out := &in.AuthSource, &out.AuthSource
		*out = new(string)
		**out = **in
	}
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.DocsToInvestigate != nil {
		in, out := &in.DocsToInvestigate, &out.DocsToInvestigate
		*out = new(string)
		**out = **in
	}
	if in.ExtractDocID != nil {
		in, out := &in.ExtractDocID, &out.ExtractDocID
		*out = new(string)
		**out = **in
	}
	if in.NestingLevel != nil {
		in, out := &in.NestingLevel, &out.NestingLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbSettingsInitParameters.
func (in *MongodbSettingsInitParameters) DeepCopy() *MongodbSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbSettingsObservation) DeepCopyInto(out *MongodbSettingsObservation) {
	*out = *in
	if in.AuthMechanism != nil {
		in, out := &in.AuthMechanism, &out.AuthMechanism
		*out = new(string)
		**out = **in
	}
	if in.AuthSource != nil {
		in, out := &in.AuthSource, &out.AuthSource
		*out = new(string)
		**out = **in
	}
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.DocsToInvestigate != nil {
		in, out := &in.DocsToInvestigate, &out.DocsToInvestigate
		*out = new(string)
		**out = **in
	}
	if in.ExtractDocID != nil {
		in, out := &in.ExtractDocID, &out.ExtractDocID
		*out = new(string)
		**out = **in
	}
	if in.NestingLevel != nil {
		in, out := &in.NestingLevel, &out.NestingLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbSettingsObservation.
func (in *MongodbSettingsObservation) DeepCopy() *MongodbSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbSettingsParameters) DeepCopyInto(out *MongodbSettingsParameters) {
	*out = *in
	if in.AuthMechanism != nil {
		in, out := &in.AuthMechanism, &out.AuthMechanism
		*out = new(string)
		**out = **in
	}
	if in.AuthSource != nil {
		in, out := &in.AuthSource, &out.AuthSource
		*out = new(string)
		**out = **in
	}
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.DocsToInvestigate != nil {
		in, out := &in.DocsToInvestigate, &out.DocsToInvestigate
		*out = new(string)
		**out = **in
	}
	if in.ExtractDocID != nil {
		in, out := &in.ExtractDocID, &out.ExtractDocID
		*out = new(string)
		**out = **in
	}
	if in.NestingLevel != nil {
		in, out := &in.NestingLevel, &out.NestingLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbSettingsParameters.
func (in *MongodbSettingsParameters) DeepCopy() *MongodbSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresSettingsInitParameters) DeepCopyInto(out *PostgresSettingsInitParameters) {
	*out = *in
	if in.AfterConnectScript != nil {
		in, out := &in.AfterConnectScript, &out.AfterConnectScript
		*out = new(string)
		**out = **in
	}
	if in.BabelfishDatabaseName != nil {
		in, out := &in.BabelfishDatabaseName, &out.BabelfishDatabaseName
		*out = new(string)
		**out = **in
	}
	if in.CaptureDdls != nil {
		in, out := &in.CaptureDdls, &out.CaptureDdls
		*out = new(bool)
		**out = **in
	}
	if in.DatabaseMode != nil {
		in, out := &in.DatabaseMode, &out.DatabaseMode
		*out = new(string)
		**out = **in
	}
	if in.DdlArtifactsSchema != nil {
		in, out := &in.DdlArtifactsSchema, &out.DdlArtifactsSchema
		*out = new(string)
		**out = **in
	}
	if in.ExecuteTimeout != nil {
		in, out := &in.ExecuteTimeout, &out.ExecuteTimeout
		*out = new(float64)
		**out = **in
	}
	if in.FailTasksOnLobTruncation != nil {
		in, out := &in.FailTasksOnLobTruncation, &out.FailTasksOnLobTruncation
		*out = new(bool)
		**out = **in
	}
	if in.HeartbeatEnable != nil {
		in, out := &in.HeartbeatEnable, &out.HeartbeatEnable
		*out = new(bool)
		**out = **in
	}
	if in.HeartbeatFrequency != nil {
		in, out := &in.HeartbeatFrequency, &out.HeartbeatFrequency
		*out = new(float64)
		**out = **in
	}
	if in.HeartbeatSchema != nil {
		in, out := &in.HeartbeatSchema, &out.HeartbeatSchema
		*out = new(string)
		**out = **in
	}
	if in.MapBooleanAsBoolean != nil {
		in, out := &in.MapBooleanAsBoolean, &out.MapBooleanAsBoolean
		*out = new(bool)
		**out = **in
	}
	if in.MapJsonbAsClob != nil {
		in, out := &in.MapJsonbAsClob, &out.MapJsonbAsClob
		*out = new(bool)
		**out = **in
	}
	if in.MapLongVarcharAs != nil {
		in, out := &in.MapLongVarcharAs, &out.MapLongVarcharAs
		*out = new(string)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.PluginName != nil {
		in, out := &in.PluginName, &out.PluginName
		*out = new(string)
		**out = **in
	}
	if in.SlotName != nil {
		in, out := &in.SlotName, &out.SlotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresSettingsInitParameters.
func (in *PostgresSettingsInitParameters) DeepCopy() *PostgresSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresSettingsObservation) DeepCopyInto(out *PostgresSettingsObservation) {
	*out = *in
	if in.AfterConnectScript != nil {
		in, out := &in.AfterConnectScript, &out.AfterConnectScript
		*out = new(string)
		**out = **in
	}
	if in.BabelfishDatabaseName != nil {
		in, out := &in.BabelfishDatabaseName, &out.BabelfishDatabaseName
		*out = new(string)
		**out = **in
	}
	if in.CaptureDdls != nil {
		in, out := &in.CaptureDdls, &out.CaptureDdls
		*out = new(bool)
		**out = **in
	}
	if in.DatabaseMode != nil {
		in, out := &in.DatabaseMode, &out.DatabaseMode
		*out = new(string)
		**out = **in
	}
	if in.DdlArtifactsSchema != nil {
		in, out := &in.DdlArtifactsSchema, &out.DdlArtifactsSchema
		*out = new(string)
		**out = **in
	}
	if in.ExecuteTimeout != nil {
		in, out := &in.ExecuteTimeout, &out.ExecuteTimeout
		*out = new(float64)
		**out = **in
	}
	if in.FailTasksOnLobTruncation != nil {
		in, out := &in.FailTasksOnLobTruncation, &out.FailTasksOnLobTruncation
		*out = new(bool)
		**out = **in
	}
	if in.HeartbeatEnable != nil {
		in, out := &in.HeartbeatEnable, &out.HeartbeatEnable
		*out = new(bool)
		**out = **in
	}
	if in.HeartbeatFrequency != nil {
		in, out := &in.HeartbeatFrequency, &out.HeartbeatFrequency
		*out = new(float64)
		**out = **in
	}
	if in.HeartbeatSchema != nil {
		in, out := &in.HeartbeatSchema, &out.HeartbeatSchema
		*out = new(string)
		**out = **in
	}
	if in.MapBooleanAsBoolean != nil {
		in, out := &in.MapBooleanAsBoolean, &out.MapBooleanAsBoolean
		*out = new(bool)
		**out = **in
	}
	if in.MapJsonbAsClob != nil {
		in, out := &in.MapJsonbAsClob, &out.MapJsonbAsClob
		*out = new(bool)
		**out = **in
	}
	if in.MapLongVarcharAs != nil {
		in, out := &in.MapLongVarcharAs, &out.MapLongVarcharAs
		*out = new(string)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.PluginName != nil {
		in, out := &in.PluginName, &out.PluginName
		*out = new(string)
		**out = **in
	}
	if in.SlotName != nil {
		in, out := &in.SlotName, &out.SlotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresSettingsObservation.
func (in *PostgresSettingsObservation) DeepCopy() *PostgresSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresSettingsParameters) DeepCopyInto(out *PostgresSettingsParameters) {
	*out = *in
	if in.AfterConnectScript != nil {
		in, out := &in.AfterConnectScript, &out.AfterConnectScript
		*out = new(string)
		**out = **in
	}
	if in.BabelfishDatabaseName != nil {
		in, out := &in.BabelfishDatabaseName, &out.BabelfishDatabaseName
		*out = new(string)
		**out = **in
	}
	if in.CaptureDdls != nil {
		in, out := &in.CaptureDdls, &out.CaptureDdls
		*out = new(bool)
		**out = **in
	}
	if in.DatabaseMode != nil {
		in, out := &in.DatabaseMode, &out.DatabaseMode
		*out = new(string)
		**out = **in
	}
	if in.DdlArtifactsSchema != nil {
		in, out := &in.DdlArtifactsSchema, &out.DdlArtifactsSchema
		*out = new(string)
		**out = **in
	}
	if in.ExecuteTimeout != nil {
		in, out := &in.ExecuteTimeout, &out.ExecuteTimeout
		*out = new(float64)
		**out = **in
	}
	if in.FailTasksOnLobTruncation != nil {
		in, out := &in.FailTasksOnLobTruncation, &out.FailTasksOnLobTruncation
		*out = new(bool)
		**out = **in
	}
	if in.HeartbeatEnable != nil {
		in, out := &in.HeartbeatEnable, &out.HeartbeatEnable
		*out = new(bool)
		**out = **in
	}
	if in.HeartbeatFrequency != nil {
		in, out := &in.HeartbeatFrequency, &out.HeartbeatFrequency
		*out = new(float64)
		**out = **in
	}
	if in.HeartbeatSchema != nil {
		in, out := &in.HeartbeatSchema, &out.HeartbeatSchema
		*out = new(string)
		**out = **in
	}
	if in.MapBooleanAsBoolean != nil {
		in, out := &in.MapBooleanAsBoolean, &out.MapBooleanAsBoolean
		*out = new(bool)
		**out = **in
	}
	if in.MapJsonbAsClob != nil {
		in, out := &in.MapJsonbAsClob, &out.MapJsonbAsClob
		*out = new(bool)
		**out = **in
	}
	if in.MapLongVarcharAs != nil {
		in, out := &in.MapLongVarcharAs, &out.MapLongVarcharAs
		*out = new(string)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.PluginName != nil {
		in, out := &in.PluginName, &out.PluginName
		*out = new(string)
		**out = **in
	}
	if in.SlotName != nil {
		in, out := &in.SlotName, &out.SlotName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresSettingsParameters.
func (in *PostgresSettingsParameters) DeepCopy() *PostgresSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisSettingsInitParameters) DeepCopyInto(out *RedisSettingsInitParameters) {
	*out = *in
	if in.AuthPasswordSecretRef != nil {
		in, out := &in.AuthPasswordSecretRef, &out.AuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.AuthUserName != nil {
		in, out := &in.AuthUserName, &out.AuthUserName
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLSecurityProtocol != nil {
		in, out := &in.SSLSecurityProtocol, &out.SSLSecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisSettingsInitParameters.
func (in *RedisSettingsInitParameters) DeepCopy() *RedisSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisSettingsObservation) DeepCopyInto(out *RedisSettingsObservation) {
	*out = *in
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.AuthUserName != nil {
		in, out := &in.AuthUserName, &out.AuthUserName
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLSecurityProtocol != nil {
		in, out := &in.SSLSecurityProtocol, &out.SSLSecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisSettingsObservation.
func (in *RedisSettingsObservation) DeepCopy() *RedisSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(RedisSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisSettingsParameters) DeepCopyInto(out *RedisSettingsParameters) {
	*out = *in
	if in.AuthPasswordSecretRef != nil {
		in, out := &in.AuthPasswordSecretRef, &out.AuthPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AuthType != nil {
		in, out := &in.AuthType, &out.AuthType
		*out = new(string)
		**out = **in
	}
	if in.AuthUserName != nil {
		in, out := &in.AuthUserName, &out.AuthUserName
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.SSLCACertificateArn != nil {
		in, out := &in.SSLCACertificateArn, &out.SSLCACertificateArn
		*out = new(string)
		**out = **in
	}
	if in.SSLSecurityProtocol != nil {
		in, out := &in.SSLSecurityProtocol, &out.SSLSecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisSettingsParameters.
func (in *RedisSettingsParameters) DeepCopy() *RedisSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(RedisSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedshiftSettingsInitParameters) DeepCopyInto(out *RedshiftSettingsInitParameters) {
	*out = *in
	if in.BucketFolder != nil {
		in, out := &in.BucketFolder, &out.BucketFolder
		*out = new(string)
		**out = **in
	}
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.EncryptionMode != nil {
		in, out := &in.EncryptionMode, &out.EncryptionMode
		*out = new(string)
		**out = **in
	}
	if in.ServerSideEncryptionKMSKeyID != nil {
		in, out := &in.ServerSideEncryptionKMSKeyID, &out.ServerSideEncryptionKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedshiftSettingsInitParameters.
func (in *RedshiftSettingsInitParameters) DeepCopy() *RedshiftSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedshiftSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedshiftSettingsObservation) DeepCopyInto(out *RedshiftSettingsObservation) {
	*out = *in
	if in.BucketFolder != nil {
		in, out := &in.BucketFolder, &out.BucketFolder
		*out = new(string)
		**out = **in
	}
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.EncryptionMode != nil {
		in, out := &in.EncryptionMode, &out.EncryptionMode
		*out = new(string)
		**out = **in
	}
	if in.ServerSideEncryptionKMSKeyID != nil {
		in, out := &in.ServerSideEncryptionKMSKeyID, &out.ServerSideEncryptionKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedshiftSettingsObservation.
func (in *RedshiftSettingsObservation) DeepCopy() *RedshiftSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(RedshiftSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedshiftSettingsParameters) DeepCopyInto(out *RedshiftSettingsParameters) {
	*out = *in
	if in.BucketFolder != nil {
		in, out := &in.BucketFolder, &out.BucketFolder
		*out = new(string)
		**out = **in
	}
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.EncryptionMode != nil {
		in, out := &in.EncryptionMode, &out.EncryptionMode
		*out = new(string)
		**out = **in
	}
	if in.ServerSideEncryptionKMSKeyID != nil {
		in, out := &in.ServerSideEncryptionKMSKeyID, &out.ServerSideEncryptionKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccessRoleArn != nil {
		in, out := &in.ServiceAccessRoleArn, &out.ServiceAccessRoleArn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedshiftSettingsParameters.
func (in *RedshiftSettingsParameters) DeepCopy() *RedshiftSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(RedshiftSettingsParameters)
	in.DeepCopyInto(out)
	return out
}
