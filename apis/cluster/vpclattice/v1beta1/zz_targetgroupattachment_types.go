// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type TargetGroupAttachmentInitParameters struct {

	// The target.
	Target *TargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// The ID or Amazon Resource Name (ARN) of the target group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/vpclattice/v1beta1.TargetGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	TargetGroupIdentifier *string `json:"targetGroupIdentifier,omitempty" tf:"target_group_identifier,omitempty"`

	// Reference to a TargetGroup in vpclattice to populate targetGroupIdentifier.
	// +kubebuilder:validation:Optional
	TargetGroupIdentifierRef *v1.Reference `json:"targetGroupIdentifierRef,omitempty" tf:"-"`

	// Selector for a TargetGroup in vpclattice to populate targetGroupIdentifier.
	// +kubebuilder:validation:Optional
	TargetGroupIdentifierSelector *v1.Selector `json:"targetGroupIdentifierSelector,omitempty" tf:"-"`
}

type TargetGroupAttachmentObservation struct {

	// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The target.
	Target *TargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// The ID or Amazon Resource Name (ARN) of the target group.
	TargetGroupIdentifier *string `json:"targetGroupIdentifier,omitempty" tf:"target_group_identifier,omitempty"`
}

type TargetGroupAttachmentParameters struct {

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The target.
	// +kubebuilder:validation:Optional
	Target *TargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// The ID or Amazon Resource Name (ARN) of the target group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/vpclattice/v1beta1.TargetGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TargetGroupIdentifier *string `json:"targetGroupIdentifier,omitempty" tf:"target_group_identifier,omitempty"`

	// Reference to a TargetGroup in vpclattice to populate targetGroupIdentifier.
	// +kubebuilder:validation:Optional
	TargetGroupIdentifierRef *v1.Reference `json:"targetGroupIdentifierRef,omitempty" tf:"-"`

	// Selector for a TargetGroup in vpclattice to populate targetGroupIdentifier.
	// +kubebuilder:validation:Optional
	TargetGroupIdentifierSelector *v1.Selector `json:"targetGroupIdentifierSelector,omitempty" tf:"-"`
}

type TargetInitParameters struct {

	// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/elbv2/v1beta2.LB
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a LB in elbv2 to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a LB in elbv2 to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// This port is used for routing traffic to the target, and defaults to the target group port. However, you can override the default and specify a custom port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type TargetObservation struct {

	// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This port is used for routing traffic to the target, and defaults to the target group port. However, you can override the default and specify a custom port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type TargetParameters struct {

	// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/elbv2/v1beta2.LB
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a LB in elbv2 to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a LB in elbv2 to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// This port is used for routing traffic to the target, and defaults to the target group port. However, you can override the default and specify a custom port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

// TargetGroupAttachmentSpec defines the desired state of TargetGroupAttachment
type TargetGroupAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetGroupAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TargetGroupAttachmentInitParameters `json:"initProvider,omitempty"`
}

// TargetGroupAttachmentStatus defines the observed state of TargetGroupAttachment.
type TargetGroupAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetGroupAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TargetGroupAttachment is the Schema for the TargetGroupAttachments API. Provides the ability to register a target with an AWS VPC Lattice Target Group.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TargetGroupAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))",message="spec.forProvider.target is a required parameter"
	Spec   TargetGroupAttachmentSpec   `json:"spec"`
	Status TargetGroupAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGroupAttachmentList contains a list of TargetGroupAttachments
type TargetGroupAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetGroupAttachment `json:"items"`
}

// Repository type metadata.
var (
	TargetGroupAttachment_Kind             = "TargetGroupAttachment"
	TargetGroupAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TargetGroupAttachment_Kind}.String()
	TargetGroupAttachment_KindAPIVersion   = TargetGroupAttachment_Kind + "." + CRDGroupVersion.String()
	TargetGroupAttachment_GroupVersionKind = CRDGroupVersion.WithKind(TargetGroupAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&TargetGroupAttachment{}, &TargetGroupAttachmentList{})
}
