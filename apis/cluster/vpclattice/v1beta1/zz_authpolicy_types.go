// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AuthPolicyInitParameters struct {

	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/vpclattice/v1beta1.Service
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty" tf:"resource_identifier,omitempty"`

	// Reference to a Service in vpclattice to populate resourceIdentifier.
	// +kubebuilder:validation:Optional
	ResourceIdentifierRef *v1.Reference `json:"resourceIdentifierRef,omitempty" tf:"-"`

	// Selector for a Service in vpclattice to populate resourceIdentifier.
	// +kubebuilder:validation:Optional
	ResourceIdentifierSelector *v1.Selector `json:"resourceIdentifierSelector,omitempty" tf:"-"`

	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type AuthPolicyObservation struct {

	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty" tf:"resource_identifier,omitempty"`

	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type AuthPolicyParameters struct {

	// The auth policy. The policy string in JSON must not contain newlines or blank lines.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/vpclattice/v1beta1.Service
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty" tf:"resource_identifier,omitempty"`

	// Reference to a Service in vpclattice to populate resourceIdentifier.
	// +kubebuilder:validation:Optional
	ResourceIdentifierRef *v1.Reference `json:"resourceIdentifierRef,omitempty" tf:"-"`

	// Selector for a Service in vpclattice to populate resourceIdentifier.
	// +kubebuilder:validation:Optional
	ResourceIdentifierSelector *v1.Selector `json:"resourceIdentifierSelector,omitempty" tf:"-"`

	// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// AuthPolicySpec defines the desired state of AuthPolicy
type AuthPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthPolicyInitParameters `json:"initProvider,omitempty"`
}

// AuthPolicyStatus defines the observed state of AuthPolicy.
type AuthPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AuthPolicy is the Schema for the AuthPolicys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AuthPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	Spec   AuthPolicySpec   `json:"spec"`
	Status AuthPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthPolicyList contains a list of AuthPolicys
type AuthPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthPolicy `json:"items"`
}

// Repository type metadata.
var (
	AuthPolicy_Kind             = "AuthPolicy"
	AuthPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthPolicy_Kind}.String()
	AuthPolicy_KindAPIVersion   = AuthPolicy_Kind + "." + CRDGroupVersion.String()
	AuthPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AuthPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthPolicy{}, &AuthPolicyList{})
}
