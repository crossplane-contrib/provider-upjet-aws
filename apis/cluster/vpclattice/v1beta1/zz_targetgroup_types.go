// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ConfigInitParameters struct {

	// The health check configuration.
	HealthCheck *HealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// The type of IP address used for the target group. Valid values: IPV4 | IPV6.
	IPAddressType *string `json:"ipAddressType,omitempty" tf:"ip_address_type,omitempty"`

	// The version of the event structure that the Lambda function receives. Supported only if type is LAMBDA. Valid Values are V1 | V2.
	LambdaEventStructureVersion *string `json:"lambdaEventStructureVersion,omitempty" tf:"lambda_event_structure_version,omitempty"`

	// The port on which the targets are listening.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// The ID of the VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	VPCIdentifier *string `json:"vpcIdentifier,omitempty" tf:"vpc_identifier,omitempty"`

	// Reference to a VPC in ec2 to populate vpcIdentifier.
	// +kubebuilder:validation:Optional
	VPCIdentifierRef *v1.Reference `json:"vpcIdentifierRef,omitempty" tf:"-"`

	// Selector for a VPC in ec2 to populate vpcIdentifier.
	// +kubebuilder:validation:Optional
	VPCIdentifierSelector *v1.Selector `json:"vpcIdentifierSelector,omitempty" tf:"-"`
}

type ConfigObservation struct {

	// The health check configuration.
	HealthCheck *HealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// The type of IP address used for the target group. Valid values: IPV4 | IPV6.
	IPAddressType *string `json:"ipAddressType,omitempty" tf:"ip_address_type,omitempty"`

	// The version of the event structure that the Lambda function receives. Supported only if type is LAMBDA. Valid Values are V1 | V2.
	LambdaEventStructureVersion *string `json:"lambdaEventStructureVersion,omitempty" tf:"lambda_event_structure_version,omitempty"`

	// The port on which the targets are listening.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// The ID of the VPC.
	VPCIdentifier *string `json:"vpcIdentifier,omitempty" tf:"vpc_identifier,omitempty"`
}

type ConfigParameters struct {

	// The health check configuration.
	// +kubebuilder:validation:Optional
	HealthCheck *HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// The type of IP address used for the target group. Valid values: IPV4 | IPV6.
	// +kubebuilder:validation:Optional
	IPAddressType *string `json:"ipAddressType,omitempty" tf:"ip_address_type,omitempty"`

	// The version of the event structure that the Lambda function receives. Supported only if type is LAMBDA. Valid Values are V1 | V2.
	// +kubebuilder:validation:Optional
	LambdaEventStructureVersion *string `json:"lambdaEventStructureVersion,omitempty" tf:"lambda_event_structure_version,omitempty"`

	// The port on which the targets are listening.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.
	// +kubebuilder:validation:Optional
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// The ID of the VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VPCIdentifier *string `json:"vpcIdentifier,omitempty" tf:"vpc_identifier,omitempty"`

	// Reference to a VPC in ec2 to populate vpcIdentifier.
	// +kubebuilder:validation:Optional
	VPCIdentifierRef *v1.Reference `json:"vpcIdentifierRef,omitempty" tf:"-"`

	// Selector for a VPC in ec2 to populate vpcIdentifier.
	// +kubebuilder:validation:Optional
	VPCIdentifierSelector *v1.Selector `json:"vpcIdentifierSelector,omitempty" tf:"-"`
}

type HealthCheckInitParameters struct {

	// Indicates whether health checking is enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
	HealthCheckIntervalSeconds *float64 `json:"healthCheckIntervalSeconds,omitempty" tf:"health_check_interval_seconds,omitempty"`

	// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
	HealthCheckTimeoutSeconds *float64 `json:"healthCheckTimeoutSeconds,omitempty" tf:"health_check_timeout_seconds,omitempty"`

	HealthyThresholdCount *float64 `json:"healthyThresholdCount,omitempty" tf:"healthy_threshold_count,omitempty"`

	// The codes to use when checking for a successful response from a target. These are called Success codes in the console.
	Matcher *MatcherInitParameters `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port on which the targets are listening.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
	UnhealthyThresholdCount *float64 `json:"unhealthyThresholdCount,omitempty" tf:"unhealthy_threshold_count,omitempty"`
}

type HealthCheckObservation struct {

	// Indicates whether health checking is enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
	HealthCheckIntervalSeconds *float64 `json:"healthCheckIntervalSeconds,omitempty" tf:"health_check_interval_seconds,omitempty"`

	// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
	HealthCheckTimeoutSeconds *float64 `json:"healthCheckTimeoutSeconds,omitempty" tf:"health_check_timeout_seconds,omitempty"`

	HealthyThresholdCount *float64 `json:"healthyThresholdCount,omitempty" tf:"healthy_threshold_count,omitempty"`

	// The codes to use when checking for a successful response from a target. These are called Success codes in the console.
	Matcher *MatcherObservation `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port on which the targets are listening.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
	UnhealthyThresholdCount *float64 `json:"unhealthyThresholdCount,omitempty" tf:"unhealthy_threshold_count,omitempty"`
}

type HealthCheckParameters struct {

	// Indicates whether health checking is enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
	// +kubebuilder:validation:Optional
	HealthCheckIntervalSeconds *float64 `json:"healthCheckIntervalSeconds,omitempty" tf:"health_check_interval_seconds,omitempty"`

	// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
	// +kubebuilder:validation:Optional
	HealthCheckTimeoutSeconds *float64 `json:"healthCheckTimeoutSeconds,omitempty" tf:"health_check_timeout_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	HealthyThresholdCount *float64 `json:"healthyThresholdCount,omitempty" tf:"healthy_threshold_count,omitempty"`

	// The codes to use when checking for a successful response from a target. These are called Success codes in the console.
	// +kubebuilder:validation:Optional
	Matcher *MatcherParameters `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port on which the targets are listening.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.
	// +kubebuilder:validation:Optional
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version,omitempty"`

	// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
	// +kubebuilder:validation:Optional
	UnhealthyThresholdCount *float64 `json:"unhealthyThresholdCount,omitempty" tf:"unhealthy_threshold_count,omitempty"`
}

type MatcherInitParameters struct {

	// The HTTP codes to use when checking for a successful response from a target.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MatcherObservation struct {

	// The HTTP codes to use when checking for a successful response from a target.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MatcherParameters struct {

	// The HTTP codes to use when checking for a successful response from a target.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetGroupInitParameters struct {

	// The target group configuration.
	Config *ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of target group. Valid Values are IP | LAMBDA | INSTANCE | ALB
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TargetGroupObservation struct {

	// ARN of the target group.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The target group configuration.
	Config *ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Unique identifier for the target group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Status of the target group.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The type of target group. Valid Values are IP | LAMBDA | INSTANCE | ALB
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TargetGroupParameters struct {

	// The target group configuration.
	// +kubebuilder:validation:Optional
	Config *ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of target group. Valid Values are IP | LAMBDA | INSTANCE | ALB
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// TargetGroupSpec defines the desired state of TargetGroup
type TargetGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TargetGroupInitParameters `json:"initProvider,omitempty"`
}

// TargetGroupStatus defines the observed state of TargetGroup.
type TargetGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TargetGroup is the Schema for the TargetGroups API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TargetGroupSpec   `json:"spec"`
	Status TargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGroupList contains a list of TargetGroups
type TargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetGroup `json:"items"`
}

// Repository type metadata.
var (
	TargetGroup_Kind             = "TargetGroup"
	TargetGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TargetGroup_Kind}.String()
	TargetGroup_KindAPIVersion   = TargetGroup_Kind + "." + CRDGroupVersion.String()
	TargetGroup_GroupVersionKind = CRDGroupVersion.WithKind(TargetGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&TargetGroup{}, &TargetGroupList{})
}
