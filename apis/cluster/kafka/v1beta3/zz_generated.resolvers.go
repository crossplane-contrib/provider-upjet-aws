// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta3

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/cluster/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Cluster) ResolveReferences( // ResolveReferences of this Cluster.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.BrokerNodeGroupInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.BrokerNodeGroupInfo.ClientSubnets),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.BrokerNodeGroupInfo.ClientSubnetsRefs,
				Selector:      mg.Spec.ForProvider.BrokerNodeGroupInfo.ClientSubnetsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BrokerNodeGroupInfo.ClientSubnets")
		}
		mg.Spec.ForProvider.BrokerNodeGroupInfo.ClientSubnets = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.BrokerNodeGroupInfo.ClientSubnetsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.BrokerNodeGroupInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.BrokerNodeGroupInfo.SecurityGroups),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.BrokerNodeGroupInfo.SecurityGroupsRefs,
				Selector:      mg.Spec.ForProvider.BrokerNodeGroupInfo.SecurityGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BrokerNodeGroupInfo.SecurityGroups")
		}
		mg.Spec.ForProvider.BrokerNodeGroupInfo.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.BrokerNodeGroupInfo.SecurityGroupsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.ConfigurationInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kafka.aws.upbound.io", "v1beta1", "Configuration", "ConfigurationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConfigurationInfo.Arn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.ConfigurationInfo.ArnRef,
				Selector:     mg.Spec.ForProvider.ConfigurationInfo.ArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ConfigurationInfo.Arn")
		}
		mg.Spec.ForProvider.ConfigurationInfo.Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ConfigurationInfo.ArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EncryptionInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EncryptionInfo.EncryptionAtRestKMSKeyArn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.EncryptionInfo.EncryptionAtRestKMSKeyArnRef,
				Selector:     mg.Spec.ForProvider.EncryptionInfo.EncryptionAtRestKMSKeyArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EncryptionInfo.EncryptionAtRestKMSKeyArn")
		}
		mg.Spec.ForProvider.EncryptionInfo.EncryptionAtRestKMSKeyArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EncryptionInfo.EncryptionAtRestKMSKeyArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LoggingInfo != nil {
		if mg.Spec.ForProvider.LoggingInfo.BrokerLogs != nil {
			if mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs != nil {
				{
					m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.upbound.io", "v1beta1", "Group", "GroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroup),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroupRef,
						Selector:     mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroupSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroup")
				}
				mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroup = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroupRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.LoggingInfo != nil {
		if mg.Spec.ForProvider.LoggingInfo.BrokerLogs != nil {
			if mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose != nil {
				{
					m, l, err = apisresolver.GetManagedResource("firehose.aws.upbound.io", "v1beta2", "DeliveryStream", "DeliveryStreamList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream),
						Extract:      resource.ExtractParamPath("name", false),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStreamRef,
						Selector:     mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStreamSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream")
				}
				mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStreamRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.LoggingInfo != nil {
		if mg.Spec.ForProvider.LoggingInfo.BrokerLogs != nil {
			if mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Bucket),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.BucketRef,
						Selector:     mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.BucketSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Bucket")
				}
				mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.BucketRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.BrokerNodeGroupInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.BrokerNodeGroupInfo.ClientSubnets),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.BrokerNodeGroupInfo.ClientSubnetsRefs,
				Selector:      mg.Spec.InitProvider.BrokerNodeGroupInfo.ClientSubnetsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BrokerNodeGroupInfo.ClientSubnets")
		}
		mg.Spec.InitProvider.BrokerNodeGroupInfo.ClientSubnets = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.BrokerNodeGroupInfo.ClientSubnetsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.BrokerNodeGroupInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.BrokerNodeGroupInfo.SecurityGroups),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.BrokerNodeGroupInfo.SecurityGroupsRefs,
				Selector:      mg.Spec.InitProvider.BrokerNodeGroupInfo.SecurityGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BrokerNodeGroupInfo.SecurityGroups")
		}
		mg.Spec.InitProvider.BrokerNodeGroupInfo.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.BrokerNodeGroupInfo.SecurityGroupsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.ConfigurationInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kafka.aws.upbound.io", "v1beta1", "Configuration", "ConfigurationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConfigurationInfo.Arn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.ConfigurationInfo.ArnRef,
				Selector:     mg.Spec.InitProvider.ConfigurationInfo.ArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ConfigurationInfo.Arn")
		}
		mg.Spec.InitProvider.ConfigurationInfo.Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ConfigurationInfo.ArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EncryptionInfo != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EncryptionInfo.EncryptionAtRestKMSKeyArn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.EncryptionInfo.EncryptionAtRestKMSKeyArnRef,
				Selector:     mg.Spec.InitProvider.EncryptionInfo.EncryptionAtRestKMSKeyArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EncryptionInfo.EncryptionAtRestKMSKeyArn")
		}
		mg.Spec.InitProvider.EncryptionInfo.EncryptionAtRestKMSKeyArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EncryptionInfo.EncryptionAtRestKMSKeyArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LoggingInfo != nil {
		if mg.Spec.InitProvider.LoggingInfo.BrokerLogs != nil {
			if mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs != nil {
				{
					m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.upbound.io", "v1beta1", "Group", "GroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroup),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroupRef,
						Selector:     mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroupSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroup")
				}
				mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroup = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LoggingInfo.BrokerLogs.CloudwatchLogs.LogGroupRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.LoggingInfo != nil {
		if mg.Spec.InitProvider.LoggingInfo.BrokerLogs != nil {
			if mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose != nil {
				{
					m, l, err = apisresolver.GetManagedResource("firehose.aws.upbound.io", "v1beta2", "DeliveryStream", "DeliveryStreamList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream),
						Extract:      resource.ExtractParamPath("name", false),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStreamRef,
						Selector:     mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStreamSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream")
				}
				mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStreamRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.LoggingInfo != nil {
		if mg.Spec.InitProvider.LoggingInfo.BrokerLogs != nil {
			if mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3.Bucket),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3.BucketRef,
						Selector:     mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3.BucketSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3.Bucket")
				}
				mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LoggingInfo.BrokerLogs.S3.BucketRef = rsp.ResolvedReference

			}
		}
	}

	return nil
}
