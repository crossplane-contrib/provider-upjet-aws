// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Flow) ResolveReferences( // ResolveReferences of this Flow.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DestinationFlowConfig); i3++ {
		if mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties != nil {
			if mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "BucketPolicy", "BucketPolicyList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketName),
						Extract:      resource.ExtractParamPath("bucket", false),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketNameRef,
						Selector:     mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketName")
				}
				mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketNameRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.SourceFlowConfig != nil {
		if mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties != nil {
			if mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "BucketPolicy", "BucketPolicyList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketName),
						Extract:      resource.ExtractParamPath("bucket", false),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketNameRef,
						Selector:     mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketName")
				}
				mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketNameRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DestinationFlowConfig); i3++ {
		if mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties != nil {
			if mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "BucketPolicy", "BucketPolicyList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketName),
						Extract:      resource.ExtractParamPath("bucket", false),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketNameRef,
						Selector:     mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketName")
				}
				mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.DestinationFlowConfig[i3].DestinationConnectorProperties.S3.BucketNameRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.SourceFlowConfig != nil {
		if mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties != nil {
			if mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta1", "BucketPolicy", "BucketPolicyList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketName),
						Extract:      resource.ExtractParamPath("bucket", false),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketNameRef,
						Selector:     mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketName")
				}
				mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.SourceFlowConfig.SourceConnectorProperties.S3.BucketNameRef = rsp.ResolvedReference

			}
		}
	}

	return nil
}
