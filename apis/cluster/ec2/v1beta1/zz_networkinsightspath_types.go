// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type DestinationPortRangeInitParameters struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type DestinationPortRangeObservation struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type DestinationPortRangeParameters struct {

	// The first port in the range.
	// +kubebuilder:validation:Optional
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	// +kubebuilder:validation:Optional
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type FilterAtDestinationInitParameters struct {

	// The destination IPv4 address.
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// The destination port range. See below for details.
	DestinationPortRange *DestinationPortRangeInitParameters `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// IP address of the source resource.
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// The source port range. See below for details.
	SourcePortRange *SourcePortRangeInitParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type FilterAtDestinationObservation struct {

	// The destination IPv4 address.
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// The destination port range. See below for details.
	DestinationPortRange *DestinationPortRangeObservation `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// IP address of the source resource.
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// The source port range. See below for details.
	SourcePortRange *SourcePortRangeObservation `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type FilterAtDestinationParameters struct {

	// The destination IPv4 address.
	// +kubebuilder:validation:Optional
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// The destination port range. See below for details.
	// +kubebuilder:validation:Optional
	DestinationPortRange *DestinationPortRangeParameters `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// IP address of the source resource.
	// +kubebuilder:validation:Optional
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// The source port range. See below for details.
	// +kubebuilder:validation:Optional
	SourcePortRange *SourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type FilterAtSourceDestinationPortRangeInitParameters struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type FilterAtSourceDestinationPortRangeObservation struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type FilterAtSourceDestinationPortRangeParameters struct {

	// The first port in the range.
	// +kubebuilder:validation:Optional
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	// +kubebuilder:validation:Optional
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type FilterAtSourceInitParameters struct {

	// The destination IPv4 address.
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// The destination port range. See below for details.
	DestinationPortRange *FilterAtSourceDestinationPortRangeInitParameters `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// IP address of the source resource.
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// The source port range. See below for details.
	SourcePortRange *FilterAtSourceSourcePortRangeInitParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type FilterAtSourceObservation struct {

	// The destination IPv4 address.
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// The destination port range. See below for details.
	DestinationPortRange *FilterAtSourceDestinationPortRangeObservation `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// IP address of the source resource.
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// The source port range. See below for details.
	SourcePortRange *FilterAtSourceSourcePortRangeObservation `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type FilterAtSourceParameters struct {

	// The destination IPv4 address.
	// +kubebuilder:validation:Optional
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// The destination port range. See below for details.
	// +kubebuilder:validation:Optional
	DestinationPortRange *FilterAtSourceDestinationPortRangeParameters `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// IP address of the source resource.
	// +kubebuilder:validation:Optional
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// The source port range. See below for details.
	// +kubebuilder:validation:Optional
	SourcePortRange *FilterAtSourceSourcePortRangeParameters `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`
}

type FilterAtSourceSourcePortRangeInitParameters struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type FilterAtSourceSourcePortRangeObservation struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type FilterAtSourceSourcePortRangeParameters struct {

	// The first port in the range.
	// +kubebuilder:validation:Optional
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	// +kubebuilder:validation:Optional
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type NetworkInsightsPathInitParameters struct {

	// ID or ARN of the resource which is the destination of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN. Either the destination argument or the destination_address argument in the filter_at_source block must be specified.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.NetworkInterface
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// IP address of the destination resource.
	DestinationIP *string `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// Destination port to analyze access to.
	DestinationPort *float64 `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Reference to a NetworkInterface in ec2 to populate destination.
	// +kubebuilder:validation:Optional
	DestinationRef *v1.Reference `json:"destinationRef,omitempty" tf:"-"`

	// Selector for a NetworkInterface in ec2 to populate destination.
	// +kubebuilder:validation:Optional
	DestinationSelector *v1.Selector `json:"destinationSelector,omitempty" tf:"-"`

	// Scopes the analysis to network paths that match specific filters at the destination. If you specify this parameter, you can't specify destination_ip. See below for details.
	FilterAtDestination *FilterAtDestinationInitParameters `json:"filterAtDestination,omitempty" tf:"filter_at_destination,omitempty"`

	// Scopes the analysis to network paths that match specific filters at the source. If you specify this parameter, you can't specify source_ip or destination_port. See below for details.
	FilterAtSource *FilterAtSourceInitParameters `json:"filterAtSource,omitempty" tf:"filter_at_source,omitempty"`

	// Protocol to use for analysis. Valid options are tcp or udp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.NetworkInterface
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// IP address of the source resource.
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Reference to a NetworkInterface in ec2 to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.Reference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a NetworkInterface in ec2 to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.Selector `json:"sourceSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkInsightsPathObservation struct {

	// ARN of the Network Insights Path.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// ID or ARN of the resource which is the destination of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN. Either the destination argument or the destination_address argument in the filter_at_source block must be specified.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// ARN of the destination.
	DestinationArn *string `json:"destinationArn,omitempty" tf:"destination_arn,omitempty"`

	// IP address of the destination resource.
	DestinationIP *string `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// Destination port to analyze access to.
	DestinationPort *float64 `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Scopes the analysis to network paths that match specific filters at the destination. If you specify this parameter, you can't specify destination_ip. See below for details.
	FilterAtDestination *FilterAtDestinationObservation `json:"filterAtDestination,omitempty" tf:"filter_at_destination,omitempty"`

	// Scopes the analysis to network paths that match specific filters at the source. If you specify this parameter, you can't specify source_ip or destination_port. See below for details.
	FilterAtSource *FilterAtSourceObservation `json:"filterAtSource,omitempty" tf:"filter_at_source,omitempty"`

	// ID of the Network Insights Path.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Protocol to use for analysis. Valid options are tcp or udp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// ARN of the source.
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// IP address of the source resource.
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type NetworkInsightsPathParameters struct {

	// ID or ARN of the resource which is the destination of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN. Either the destination argument or the destination_address argument in the filter_at_source block must be specified.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.NetworkInterface
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// IP address of the destination resource.
	// +kubebuilder:validation:Optional
	DestinationIP *string `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// Destination port to analyze access to.
	// +kubebuilder:validation:Optional
	DestinationPort *float64 `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Reference to a NetworkInterface in ec2 to populate destination.
	// +kubebuilder:validation:Optional
	DestinationRef *v1.Reference `json:"destinationRef,omitempty" tf:"-"`

	// Selector for a NetworkInterface in ec2 to populate destination.
	// +kubebuilder:validation:Optional
	DestinationSelector *v1.Selector `json:"destinationSelector,omitempty" tf:"-"`

	// Scopes the analysis to network paths that match specific filters at the destination. If you specify this parameter, you can't specify destination_ip. See below for details.
	// +kubebuilder:validation:Optional
	FilterAtDestination *FilterAtDestinationParameters `json:"filterAtDestination,omitempty" tf:"filter_at_destination,omitempty"`

	// Scopes the analysis to network paths that match specific filters at the source. If you specify this parameter, you can't specify source_ip or destination_port. See below for details.
	// +kubebuilder:validation:Optional
	FilterAtSource *FilterAtSourceParameters `json:"filterAtSource,omitempty" tf:"filter_at_source,omitempty"`

	// Protocol to use for analysis. Valid options are tcp or udp.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// ID or ARN of the resource which is the source of the path. Can be an Instance, Internet Gateway, Network Interface, Transit Gateway, VPC Endpoint, VPC Peering Connection or VPN Gateway. If the resource is in another account, you must specify an ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.NetworkInterface
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// IP address of the source resource.
	// +kubebuilder:validation:Optional
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Reference to a NetworkInterface in ec2 to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.Reference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a NetworkInterface in ec2 to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.Selector `json:"sourceSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SourcePortRangeInitParameters struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type SourcePortRangeObservation struct {

	// The first port in the range.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type SourcePortRangeParameters struct {

	// The first port in the range.
	// +kubebuilder:validation:Optional
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The last port in the range.
	// +kubebuilder:validation:Optional
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

// NetworkInsightsPathSpec defines the desired state of NetworkInsightsPath
type NetworkInsightsPathSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkInsightsPathParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInsightsPathInitParameters `json:"initProvider,omitempty"`
}

// NetworkInsightsPathStatus defines the observed state of NetworkInsightsPath.
type NetworkInsightsPathStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkInsightsPathObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkInsightsPath is the Schema for the NetworkInsightsPaths API. Provides a Network Insights Path resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NetworkInsightsPath struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   NetworkInsightsPathSpec   `json:"spec"`
	Status NetworkInsightsPathStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkInsightsPathList contains a list of NetworkInsightsPaths
type NetworkInsightsPathList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkInsightsPath `json:"items"`
}

// Repository type metadata.
var (
	NetworkInsightsPath_Kind             = "NetworkInsightsPath"
	NetworkInsightsPath_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkInsightsPath_Kind}.String()
	NetworkInsightsPath_KindAPIVersion   = NetworkInsightsPath_Kind + "." + CRDGroupVersion.String()
	NetworkInsightsPath_GroupVersionKind = CRDGroupVersion.WithKind(NetworkInsightsPath_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkInsightsPath{}, &NetworkInsightsPathList{})
}
