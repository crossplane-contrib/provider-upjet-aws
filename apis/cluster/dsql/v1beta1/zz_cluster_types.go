// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ClusterInitParameters struct {

	// Whether deletion protection is enabled in this cluster.
	DeletionProtectionEnabled *bool `json:"deletionProtectionEnabled,omitempty" tf:"deletion_protection_enabled,omitempty"`

	// The ARN of the AWS KMS key that encrypts data in the DSQL Cluster, or "AWS_OWNED_KMS_KEY".
	KMSEncryptionKey *string `json:"kmsEncryptionKey,omitempty" tf:"kms_encryption_key,omitempty"`

	// Multi-region properties of the DSQL Cluster.
	MultiRegionProperties []MultiRegionPropertiesInitParameters `json:"multiRegionProperties,omitempty" tf:"multi_region_properties,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ClusterObservation struct {

	// ARN of the Cluster.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Whether deletion protection is enabled in this cluster.
	DeletionProtectionEnabled *bool `json:"deletionProtectionEnabled,omitempty" tf:"deletion_protection_enabled,omitempty"`

	// Encryption configuration details for the DSQL Cluster.
	EncryptionDetails []EncryptionDetailsObservation `json:"encryptionDetails,omitempty" tf:"encryption_details,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Cluster Identifier.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// The ARN of the AWS KMS key that encrypts data in the DSQL Cluster, or "AWS_OWNED_KMS_KEY".
	KMSEncryptionKey *string `json:"kmsEncryptionKey,omitempty" tf:"kms_encryption_key,omitempty"`

	// Multi-region properties of the DSQL Cluster.
	MultiRegionProperties []MultiRegionPropertiesObservation `json:"multiRegionProperties,omitempty" tf:"multi_region_properties,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The DSQL Cluster's VPC endpoint service name.
	VPCEndpointServiceName *string `json:"vpcEndpointServiceName,omitempty" tf:"vpc_endpoint_service_name,omitempty"`
}

type ClusterParameters struct {

	// Whether deletion protection is enabled in this cluster.
	// +kubebuilder:validation:Optional
	DeletionProtectionEnabled *bool `json:"deletionProtectionEnabled,omitempty" tf:"deletion_protection_enabled,omitempty"`

	// The ARN of the AWS KMS key that encrypts data in the DSQL Cluster, or "AWS_OWNED_KMS_KEY".
	// +kubebuilder:validation:Optional
	KMSEncryptionKey *string `json:"kmsEncryptionKey,omitempty" tf:"kms_encryption_key,omitempty"`

	// Multi-region properties of the DSQL Cluster.
	// +kubebuilder:validation:Optional
	MultiRegionProperties []MultiRegionPropertiesParameters `json:"multiRegionProperties,omitempty" tf:"multi_region_properties,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type EncryptionDetailsInitParameters struct {
}

type EncryptionDetailsObservation struct {

	// The status of encryption for the DSQL Cluster.
	EncryptionStatus *string `json:"encryptionStatus,omitempty" tf:"encryption_status,omitempty"`

	// The type of encryption that protects the data on the DSQL Cluster.
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`
}

type EncryptionDetailsParameters struct {
}

type MultiRegionPropertiesInitParameters struct {

	// List of DSQL Cluster ARNs peered to this cluster.
	// +listType=set
	Clusters []*string `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
	WitnessRegion *string `json:"witnessRegion,omitempty" tf:"witness_region,omitempty"`
}

type MultiRegionPropertiesObservation struct {

	// List of DSQL Cluster ARNs peered to this cluster.
	// +listType=set
	Clusters []*string `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
	WitnessRegion *string `json:"witnessRegion,omitempty" tf:"witness_region,omitempty"`
}

type MultiRegionPropertiesParameters struct {

	// List of DSQL Cluster ARNs peered to this cluster.
	// +kubebuilder:validation:Optional
	// +listType=set
	Clusters []*string `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
	// +kubebuilder:validation:Optional
	WitnessRegion *string `json:"witnessRegion,omitempty" tf:"witness_region,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
