// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AgentOrchestrationConfigInitParameters struct {

	// Boolean that specifies whether the profiling agent collects profiling data or
	ProfilingEnabled *bool `json:"profilingEnabled,omitempty" tf:"profiling_enabled,omitempty"`
}

type AgentOrchestrationConfigObservation struct {

	// Boolean that specifies whether the profiling agent collects profiling data or
	ProfilingEnabled *bool `json:"profilingEnabled,omitempty" tf:"profiling_enabled,omitempty"`
}

type AgentOrchestrationConfigParameters struct {

	// Boolean that specifies whether the profiling agent collects profiling data or
	// +kubebuilder:validation:Optional
	ProfilingEnabled *bool `json:"profilingEnabled" tf:"profiling_enabled,omitempty"`
}

type ProfilingGroupInitParameters struct {

	// Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
	AgentOrchestrationConfig []AgentOrchestrationConfigInitParameters `json:"agentOrchestrationConfig,omitempty" tf:"agent_orchestration_config,omitempty"`

	// Compute platform of the profiling group.
	ComputePlatform *string `json:"computePlatform,omitempty" tf:"compute_platform,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ProfilingGroupObservation struct {

	// Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
	AgentOrchestrationConfig []AgentOrchestrationConfigObservation `json:"agentOrchestrationConfig,omitempty" tf:"agent_orchestration_config,omitempty"`

	// ARN of the profiling group.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Compute platform of the profiling group.
	ComputePlatform *string `json:"computePlatform,omitempty" tf:"compute_platform,omitempty"`

	// Name of the profiling group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ProfilingGroupParameters struct {

	// Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
	// +kubebuilder:validation:Optional
	AgentOrchestrationConfig []AgentOrchestrationConfigParameters `json:"agentOrchestrationConfig,omitempty" tf:"agent_orchestration_config,omitempty"`

	// Compute platform of the profiling group.
	// +kubebuilder:validation:Optional
	ComputePlatform *string `json:"computePlatform,omitempty" tf:"compute_platform,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ProfilingGroupSpec defines the desired state of ProfilingGroup
type ProfilingGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProfilingGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProfilingGroupInitParameters `json:"initProvider,omitempty"`
}

// ProfilingGroupStatus defines the observed state of ProfilingGroup.
type ProfilingGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProfilingGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProfilingGroup is the Schema for the ProfilingGroups API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ProfilingGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProfilingGroupSpec   `json:"spec"`
	Status            ProfilingGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProfilingGroupList contains a list of ProfilingGroups
type ProfilingGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProfilingGroup `json:"items"`
}

// Repository type metadata.
var (
	ProfilingGroup_Kind             = "ProfilingGroup"
	ProfilingGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProfilingGroup_Kind}.String()
	ProfilingGroup_KindAPIVersion   = ProfilingGroup_Kind + "." + CRDGroupVersion.String()
	ProfilingGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProfilingGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProfilingGroup{}, &ProfilingGroupList{})
}
