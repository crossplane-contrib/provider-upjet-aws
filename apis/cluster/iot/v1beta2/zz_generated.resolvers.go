// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/cluster/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ProvisioningTemplate) ResolveReferences( // ResolveReferences of this ProvisioningTemplate.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProvisioningRoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProvisioningRoleArnRef,
			Selector:     mg.Spec.ForProvider.ProvisioningRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProvisioningRoleArn")
	}
	mg.Spec.ForProvider.ProvisioningRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProvisioningRoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProvisioningRoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProvisioningRoleArnRef,
			Selector:     mg.Spec.InitProvider.ProvisioningRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProvisioningRoleArn")
	}
	mg.Spec.InitProvider.ProvisioningRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProvisioningRoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ThingGroup.
func (mg *ThingGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iot.aws.upbound.io", "v1beta2", "ThingGroup", "ThingGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ParentGroupNameRef,
			Selector:     mg.Spec.ForProvider.ParentGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentGroupName")
	}
	mg.Spec.ForProvider.ParentGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iot.aws.upbound.io", "v1beta2", "ThingGroup", "ThingGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ParentGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ParentGroupNameRef,
			Selector:     mg.Spec.InitProvider.ParentGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ParentGroupName")
	}
	mg.Spec.InitProvider.ParentGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ParentGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TopicRule.
func (mg *TopicRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.ErrorAction != nil {
		if mg.Spec.ForProvider.ErrorAction.Sns != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ErrorAction.Sns.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.ErrorAction.Sns.RoleArnRef,
					Selector:     mg.Spec.ForProvider.ErrorAction.Sns.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ErrorAction.Sns.RoleArn")
			}
			mg.Spec.ForProvider.ErrorAction.Sns.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ErrorAction.Sns.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.ErrorAction != nil {
		if mg.Spec.ForProvider.ErrorAction.Sns != nil {
			{
				m, l, err = apisresolver.GetManagedResource("sns.aws.upbound.io", "v1beta1", "Topic", "TopicList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ErrorAction.Sns.TargetArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.ErrorAction.Sns.TargetArnRef,
					Selector:     mg.Spec.ForProvider.ErrorAction.Sns.TargetArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ErrorAction.Sns.TargetArn")
			}
			mg.Spec.ForProvider.ErrorAction.Sns.TargetArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ErrorAction.Sns.TargetArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Sns); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Sns[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Sns[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.Sns[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Sns[i3].RoleArn")
		}
		mg.Spec.ForProvider.Sns[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Sns[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Sns); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("sns.aws.upbound.io", "v1beta1", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Sns[i3].TargetArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Sns[i3].TargetArnRef,
				Selector:     mg.Spec.ForProvider.Sns[i3].TargetArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Sns[i3].TargetArn")
		}
		mg.Spec.ForProvider.Sns[i3].TargetArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Sns[i3].TargetArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ErrorAction != nil {
		if mg.Spec.InitProvider.ErrorAction.Sns != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ErrorAction.Sns.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.ErrorAction.Sns.RoleArnRef,
					Selector:     mg.Spec.InitProvider.ErrorAction.Sns.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ErrorAction.Sns.RoleArn")
			}
			mg.Spec.InitProvider.ErrorAction.Sns.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ErrorAction.Sns.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.ErrorAction != nil {
		if mg.Spec.InitProvider.ErrorAction.Sns != nil {
			{
				m, l, err = apisresolver.GetManagedResource("sns.aws.upbound.io", "v1beta1", "Topic", "TopicList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ErrorAction.Sns.TargetArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.ErrorAction.Sns.TargetArnRef,
					Selector:     mg.Spec.InitProvider.ErrorAction.Sns.TargetArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ErrorAction.Sns.TargetArn")
			}
			mg.Spec.InitProvider.ErrorAction.Sns.TargetArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ErrorAction.Sns.TargetArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Sns); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Sns[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Sns[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.Sns[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Sns[i3].RoleArn")
		}
		mg.Spec.InitProvider.Sns[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Sns[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Sns); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("sns.aws.upbound.io", "v1beta1", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Sns[i3].TargetArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Sns[i3].TargetArnRef,
				Selector:     mg.Spec.InitProvider.Sns[i3].TargetArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Sns[i3].TargetArn")
		}
		mg.Spec.InitProvider.Sns[i3].TargetArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Sns[i3].TargetArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this TopicRuleDestination.
func (mg *TopicRuleDestination) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.VPCConfiguration.RoleArnRef,
				Selector:     mg.Spec.ForProvider.VPCConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfiguration.RoleArn")
		}
		mg.Spec.ForProvider.VPCConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VPCConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCConfiguration.SecurityGroups),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.VPCConfiguration.SecurityGroupRefs,
				Selector:      mg.Spec.ForProvider.VPCConfiguration.SecurityGroupSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfiguration.SecurityGroups")
		}
		mg.Spec.ForProvider.VPCConfiguration.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCConfiguration.SecurityGroupRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCConfiguration.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.VPCConfiguration.SubnetIDRefs,
				Selector:      mg.Spec.ForProvider.VPCConfiguration.SubnetIDSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfiguration.SubnetIds")
		}
		mg.Spec.ForProvider.VPCConfiguration.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCConfiguration.SubnetIDRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPC", "VPCList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCConfiguration.VPCID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.VPCConfiguration.VPCIDRef,
				Selector:     mg.Spec.ForProvider.VPCConfiguration.VPCIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfiguration.VPCID")
		}
		mg.Spec.ForProvider.VPCConfiguration.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VPCConfiguration.VPCIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCConfiguration.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.VPCConfiguration.RoleArnRef,
				Selector:     mg.Spec.InitProvider.VPCConfiguration.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfiguration.RoleArn")
		}
		mg.Spec.InitProvider.VPCConfiguration.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VPCConfiguration.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCConfiguration.SecurityGroups),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.VPCConfiguration.SecurityGroupRefs,
				Selector:      mg.Spec.InitProvider.VPCConfiguration.SecurityGroupSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfiguration.SecurityGroups")
		}
		mg.Spec.InitProvider.VPCConfiguration.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCConfiguration.SecurityGroupRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCConfiguration.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.VPCConfiguration.SubnetIDRefs,
				Selector:      mg.Spec.InitProvider.VPCConfiguration.SubnetIDSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfiguration.SubnetIds")
		}
		mg.Spec.InitProvider.VPCConfiguration.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCConfiguration.SubnetIDRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "VPC", "VPCList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCConfiguration.VPCID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.VPCConfiguration.VPCIDRef,
				Selector:     mg.Spec.InitProvider.VPCConfiguration.VPCIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfiguration.VPCID")
		}
		mg.Spec.InitProvider.VPCConfiguration.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VPCConfiguration.VPCIDRef = rsp.ResolvedReference

	}

	return nil
}
