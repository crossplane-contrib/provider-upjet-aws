// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Permissions) ResolveReferences( // ResolveReferences of this Permissions.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.DataLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lakeformation.aws.upbound.io", "v1beta1", "Resource", "ResourceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataLocation.Arn),
				Extract:      resource.ExtractParamPath("arn", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.DataLocation.ArnRef,
				Selector:     mg.Spec.ForProvider.DataLocation.ArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DataLocation.Arn")
		}
		mg.Spec.ForProvider.DataLocation.Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.DataLocation.ArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Database != nil {
		{
			m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogDatabase", "CatalogDatabaseList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Database.Name),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Database.NameRef,
				Selector:     mg.Spec.ForProvider.Database.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Database.Name")
		}
		mg.Spec.ForProvider.Database.Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Database.NameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.TableWithColumns != nil {
		{
			m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TableWithColumns.Name),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.TableWithColumns.NameRef,
				Selector:     mg.Spec.ForProvider.TableWithColumns.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.TableWithColumns.Name")
		}
		mg.Spec.ForProvider.TableWithColumns.Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.TableWithColumns.NameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.DataLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lakeformation.aws.upbound.io", "v1beta1", "Resource", "ResourceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DataLocation.Arn),
				Extract:      resource.ExtractParamPath("arn", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.DataLocation.ArnRef,
				Selector:     mg.Spec.InitProvider.DataLocation.ArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.DataLocation.Arn")
		}
		mg.Spec.InitProvider.DataLocation.Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.DataLocation.ArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Database != nil {
		{
			m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogDatabase", "CatalogDatabaseList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Database.Name),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Database.NameRef,
				Selector:     mg.Spec.InitProvider.Database.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Database.Name")
		}
		mg.Spec.InitProvider.Database.Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Database.NameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.TableWithColumns != nil {
		{
			m, l, err = apisresolver.GetManagedResource("glue.aws.upbound.io", "v1beta2", "CatalogTable", "CatalogTableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TableWithColumns.Name),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.TableWithColumns.NameRef,
				Selector:     mg.Spec.InitProvider.TableWithColumns.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.TableWithColumns.Name")
		}
		mg.Spec.InitProvider.TableWithColumns.Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.TableWithColumns.NameRef = rsp.ResolvedReference

	}

	return nil
}
