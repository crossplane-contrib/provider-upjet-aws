//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataCellsFilterInitParameters) DeepCopyInto(out *DataCellsFilterInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TableCatalogID != nil {
		in, out := &in.TableCatalogID, &out.TableCatalogID
		*out = new(string)
		**out = **in
	}
	if in.TableName != nil {
		in, out := &in.TableName, &out.TableName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataCellsFilterInitParameters.
func (in *DataCellsFilterInitParameters) DeepCopy() *DataCellsFilterInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataCellsFilterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataCellsFilterObservation) DeepCopyInto(out *DataCellsFilterObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TableCatalogID != nil {
		in, out := &in.TableCatalogID, &out.TableCatalogID
		*out = new(string)
		**out = **in
	}
	if in.TableName != nil {
		in, out := &in.TableName, &out.TableName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataCellsFilterObservation.
func (in *DataCellsFilterObservation) DeepCopy() *DataCellsFilterObservation {
	if in == nil {
		return nil
	}
	out := new(DataCellsFilterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataCellsFilterParameters) DeepCopyInto(out *DataCellsFilterParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.TableCatalogID != nil {
		in, out := &in.TableCatalogID, &out.TableCatalogID
		*out = new(string)
		**out = **in
	}
	if in.TableName != nil {
		in, out := &in.TableName, &out.TableName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataCellsFilterParameters.
func (in *DataCellsFilterParameters) DeepCopy() *DataCellsFilterParameters {
	if in == nil {
		return nil
	}
	out := new(DataCellsFilterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataLocationInitParameters) DeepCopyInto(out *DataLocationInitParameters) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ArnRef != nil {
		in, out := &in.ArnRef, &out.ArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ArnSelector != nil {
		in, out := &in.ArnSelector, &out.ArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataLocationInitParameters.
func (in *DataLocationInitParameters) DeepCopy() *DataLocationInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataLocationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataLocationObservation) DeepCopyInto(out *DataLocationObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataLocationObservation.
func (in *DataLocationObservation) DeepCopy() *DataLocationObservation {
	if in == nil {
		return nil
	}
	out := new(DataLocationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataLocationParameters) DeepCopyInto(out *DataLocationParameters) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ArnRef != nil {
		in, out := &in.ArnRef, &out.ArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ArnSelector != nil {
		in, out := &in.ArnSelector, &out.ArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataLocationParameters.
func (in *DataLocationParameters) DeepCopy() *DataLocationParameters {
	if in == nil {
		return nil
	}
	out := new(DataLocationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExpressionInitParameters) DeepCopyInto(out *ExpressionInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExpressionInitParameters.
func (in *ExpressionInitParameters) DeepCopy() *ExpressionInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExpressionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExpressionObservation) DeepCopyInto(out *ExpressionObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExpressionObservation.
func (in *ExpressionObservation) DeepCopy() *ExpressionObservation {
	if in == nil {
		return nil
	}
	out := new(ExpressionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExpressionParameters) DeepCopyInto(out *ExpressionParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExpressionParameters.
func (in *ExpressionParameters) DeepCopy() *ExpressionParameters {
	if in == nil {
		return nil
	}
	out := new(ExpressionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LfTagInitParameters) DeepCopyInto(out *LfTagInitParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LfTagInitParameters.
func (in *LfTagInitParameters) DeepCopy() *LfTagInitParameters {
	if in == nil {
		return nil
	}
	out := new(LfTagInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LfTagObservation) DeepCopyInto(out *LfTagObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LfTagObservation.
func (in *LfTagObservation) DeepCopy() *LfTagObservation {
	if in == nil {
		return nil
	}
	out := new(LfTagObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LfTagParameters) DeepCopyInto(out *LfTagParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LfTagParameters.
func (in *LfTagParameters) DeepCopy() *LfTagParameters {
	if in == nil {
		return nil
	}
	out := new(LfTagParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LfTagPolicyInitParameters) DeepCopyInto(out *LfTagPolicyInitParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Expression != nil {
		in, out := &in.Expression, &out.Expression
		*out = make([]ExpressionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LfTagPolicyInitParameters.
func (in *LfTagPolicyInitParameters) DeepCopy() *LfTagPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(LfTagPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LfTagPolicyObservation) DeepCopyInto(out *LfTagPolicyObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Expression != nil {
		in, out := &in.Expression, &out.Expression
		*out = make([]ExpressionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LfTagPolicyObservation.
func (in *LfTagPolicyObservation) DeepCopy() *LfTagPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(LfTagPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LfTagPolicyParameters) DeepCopyInto(out *LfTagPolicyParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.Expression != nil {
		in, out := &in.Expression, &out.Expression
		*out = make([]ExpressionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LfTagPolicyParameters.
func (in *LfTagPolicyParameters) DeepCopy() *LfTagPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(LfTagPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Permissions) DeepCopyInto(out *Permissions) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Permissions.
func (in *Permissions) DeepCopy() *Permissions {
	if in == nil {
		return nil
	}
	out := new(Permissions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Permissions) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsInitParameters) DeepCopyInto(out *PermissionsInitParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.CatalogResource != nil {
		in, out := &in.CatalogResource, &out.CatalogResource
		*out = new(bool)
		**out = **in
	}
	if in.DataCellsFilter != nil {
		in, out := &in.DataCellsFilter, &out.DataCellsFilter
		*out = new(DataCellsFilterInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.DataLocation != nil {
		in, out := &in.DataLocation, &out.DataLocation
		*out = new(DataLocationInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(DatabaseInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LfTag != nil {
		in, out := &in.LfTag, &out.LfTag
		*out = new(LfTagInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LfTagPolicy != nil {
		in, out := &in.LfTagPolicy, &out.LfTagPolicy
		*out = new(LfTagPolicyInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PermissionsWithGrantOption != nil {
		in, out := &in.PermissionsWithGrantOption, &out.PermissionsWithGrantOption
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Principal != nil {
		in, out := &in.Principal, &out.Principal
		*out = new(string)
		**out = **in
	}
	if in.Table != nil {
		in, out := &in.Table, &out.Table
		*out = new(TableInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.TableWithColumns != nil {
		in, out := &in.TableWithColumns, &out.TableWithColumns
		*out = new(TableWithColumnsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsInitParameters.
func (in *PermissionsInitParameters) DeepCopy() *PermissionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsList) DeepCopyInto(out *PermissionsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Permissions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsList.
func (in *PermissionsList) DeepCopy() *PermissionsList {
	if in == nil {
		return nil
	}
	out := new(PermissionsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PermissionsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsObservation) DeepCopyInto(out *PermissionsObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.CatalogResource != nil {
		in, out := &in.CatalogResource, &out.CatalogResource
		*out = new(bool)
		**out = **in
	}
	if in.DataCellsFilter != nil {
		in, out := &in.DataCellsFilter, &out.DataCellsFilter
		*out = new(DataCellsFilterObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.DataLocation != nil {
		in, out := &in.DataLocation, &out.DataLocation
		*out = new(DataLocationObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(DatabaseObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LfTag != nil {
		in, out := &in.LfTag, &out.LfTag
		*out = new(LfTagObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LfTagPolicy != nil {
		in, out := &in.LfTagPolicy, &out.LfTagPolicy
		*out = new(LfTagPolicyObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PermissionsWithGrantOption != nil {
		in, out := &in.PermissionsWithGrantOption, &out.PermissionsWithGrantOption
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Principal != nil {
		in, out := &in.Principal, &out.Principal
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Table != nil {
		in, out := &in.Table, &out.Table
		*out = new(TableObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.TableWithColumns != nil {
		in, out := &in.TableWithColumns, &out.TableWithColumns
		*out = new(TableWithColumnsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsObservation.
func (in *PermissionsObservation) DeepCopy() *PermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(PermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsParameters) DeepCopyInto(out *PermissionsParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.CatalogResource != nil {
		in, out := &in.CatalogResource, &out.CatalogResource
		*out = new(bool)
		**out = **in
	}
	if in.DataCellsFilter != nil {
		in, out := &in.DataCellsFilter, &out.DataCellsFilter
		*out = new(DataCellsFilterParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.DataLocation != nil {
		in, out := &in.DataLocation, &out.DataLocation
		*out = new(DataLocationParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(DatabaseParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LfTag != nil {
		in, out := &in.LfTag, &out.LfTag
		*out = new(LfTagParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LfTagPolicy != nil {
		in, out := &in.LfTagPolicy, &out.LfTagPolicy
		*out = new(LfTagPolicyParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PermissionsWithGrantOption != nil {
		in, out := &in.PermissionsWithGrantOption, &out.PermissionsWithGrantOption
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Principal != nil {
		in, out := &in.Principal, &out.Principal
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Table != nil {
		in, out := &in.Table, &out.Table
		*out = new(TableParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.TableWithColumns != nil {
		in, out := &in.TableWithColumns, &out.TableWithColumns
		*out = new(TableWithColumnsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsParameters.
func (in *PermissionsParameters) DeepCopy() *PermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsSpec) DeepCopyInto(out *PermissionsSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsSpec.
func (in *PermissionsSpec) DeepCopy() *PermissionsSpec {
	if in == nil {
		return nil
	}
	out := new(PermissionsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsStatus) DeepCopyInto(out *PermissionsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsStatus.
func (in *PermissionsStatus) DeepCopy() *PermissionsStatus {
	if in == nil {
		return nil
	}
	out := new(PermissionsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableInitParameters) DeepCopyInto(out *TableInitParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Wildcard != nil {
		in, out := &in.Wildcard, &out.Wildcard
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableInitParameters.
func (in *TableInitParameters) DeepCopy() *TableInitParameters {
	if in == nil {
		return nil
	}
	out := new(TableInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableObservation) DeepCopyInto(out *TableObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Wildcard != nil {
		in, out := &in.Wildcard, &out.Wildcard
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableObservation.
func (in *TableObservation) DeepCopy() *TableObservation {
	if in == nil {
		return nil
	}
	out := new(TableObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableParameters) DeepCopyInto(out *TableParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Wildcard != nil {
		in, out := &in.Wildcard, &out.Wildcard
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableParameters.
func (in *TableParameters) DeepCopy() *TableParameters {
	if in == nil {
		return nil
	}
	out := new(TableParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableWithColumnsInitParameters) DeepCopyInto(out *TableWithColumnsInitParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.ColumnNames != nil {
		in, out := &in.ColumnNames, &out.ColumnNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ExcludedColumnNames != nil {
		in, out := &in.ExcludedColumnNames, &out.ExcludedColumnNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Wildcard != nil {
		in, out := &in.Wildcard, &out.Wildcard
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableWithColumnsInitParameters.
func (in *TableWithColumnsInitParameters) DeepCopy() *TableWithColumnsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TableWithColumnsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableWithColumnsObservation) DeepCopyInto(out *TableWithColumnsObservation) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.ColumnNames != nil {
		in, out := &in.ColumnNames, &out.ColumnNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ExcludedColumnNames != nil {
		in, out := &in.ExcludedColumnNames, &out.ExcludedColumnNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Wildcard != nil {
		in, out := &in.Wildcard, &out.Wildcard
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableWithColumnsObservation.
func (in *TableWithColumnsObservation) DeepCopy() *TableWithColumnsObservation {
	if in == nil {
		return nil
	}
	out := new(TableWithColumnsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableWithColumnsParameters) DeepCopyInto(out *TableWithColumnsParameters) {
	*out = *in
	if in.CatalogID != nil {
		in, out := &in.CatalogID, &out.CatalogID
		*out = new(string)
		**out = **in
	}
	if in.ColumnNames != nil {
		in, out := &in.ColumnNames, &out.ColumnNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.ExcludedColumnNames != nil {
		in, out := &in.ExcludedColumnNames, &out.ExcludedColumnNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Wildcard != nil {
		in, out := &in.Wildcard, &out.Wildcard
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableWithColumnsParameters.
func (in *TableWithColumnsParameters) DeepCopy() *TableWithColumnsParameters {
	if in == nil {
		return nil
	}
	out := new(TableWithColumnsParameters)
	in.DeepCopyInto(out)
	return out
}
