// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type RepositoryCreationTemplateEncryptionConfigurationInitParameters struct {

	// The encryption type to use for any created repositories. Valid values are AES256 or KMS. Defaults to AES256.
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// The ARN of the KMS key to use when encryption_type is KMS. If not specified, uses the default AWS managed key for ECR.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Reference to a Key in kms to populate kmsKey.
	// +kubebuilder:validation:Optional
	KMSKeyRef *v1.Reference `json:"kmsKeyRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsKey.
	// +kubebuilder:validation:Optional
	KMSKeySelector *v1.Selector `json:"kmsKeySelector,omitempty" tf:"-"`
}

type RepositoryCreationTemplateEncryptionConfigurationObservation struct {

	// The encryption type to use for any created repositories. Valid values are AES256 or KMS. Defaults to AES256.
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// The ARN of the KMS key to use when encryption_type is KMS. If not specified, uses the default AWS managed key for ECR.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`
}

type RepositoryCreationTemplateEncryptionConfigurationParameters struct {

	// The encryption type to use for any created repositories. Valid values are AES256 or KMS. Defaults to AES256.
	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// The ARN of the KMS key to use when encryption_type is KMS. If not specified, uses the default AWS managed key for ECR.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Reference to a Key in kms to populate kmsKey.
	// +kubebuilder:validation:Optional
	KMSKeyRef *v1.Reference `json:"kmsKeyRef,omitempty" tf:"-"`

	// Selector for a Key in kms to populate kmsKey.
	// +kubebuilder:validation:Optional
	KMSKeySelector *v1.Selector `json:"kmsKeySelector,omitempty" tf:"-"`
}

type RepositoryCreationTemplateInitParameters struct {

	// Which features this template applies to. Must contain one or more of PULL_THROUGH_CACHE or REPLICATION.
	// +listType=set
	AppliedFor []*string `json:"appliedFor,omitempty" tf:"applied_for,omitempty"`

	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn *string `json:"customRoleArn,omitempty" tf:"custom_role_arn,omitempty"`

	// The description for this template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfiguration []RepositoryCreationTemplateEncryptionConfigurationInitParameters `json:"encryptionConfiguration,omitempty" tf:"encryption_configuration,omitempty"`

	// The tag mutability setting for any created repositories. Must be one of: MUTABLE or IMMUTABLE. Defaults to MUTABLE.
	ImageTagMutability *string `json:"imageTagMutability,omitempty" tf:"image_tag_mutability,omitempty"`

	// The lifecycle policy document to apply to any created repositories. See more details about Policy Parameters in the official AWS docs. Consider using the aws_ecr_lifecycle_policy_document data_source to generate/manage the JSON document used for the lifecycle_policy argument.
	LifecyclePolicy *string `json:"lifecyclePolicy,omitempty" tf:"lifecycle_policy,omitempty"`

	// The repository name prefix to match against. Use ROOT to match any prefix that doesn't explicitly match another template.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The registry policy document to apply to any created repositories. This is a JSON formatted string.
	RepositoryPolicy *string `json:"repositoryPolicy,omitempty" tf:"repository_policy,omitempty"`

	// A map of tags to assign to any created repositories.
	// +mapType=granular
	ResourceTags map[string]*string `json:"resourceTags,omitempty" tf:"resource_tags,omitempty"`
}

type RepositoryCreationTemplateObservation struct {

	// Which features this template applies to. Must contain one or more of PULL_THROUGH_CACHE or REPLICATION.
	// +listType=set
	AppliedFor []*string `json:"appliedFor,omitempty" tf:"applied_for,omitempty"`

	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn *string `json:"customRoleArn,omitempty" tf:"custom_role_arn,omitempty"`

	// The description for this template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfiguration []RepositoryCreationTemplateEncryptionConfigurationObservation `json:"encryptionConfiguration,omitempty" tf:"encryption_configuration,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The tag mutability setting for any created repositories. Must be one of: MUTABLE or IMMUTABLE. Defaults to MUTABLE.
	ImageTagMutability *string `json:"imageTagMutability,omitempty" tf:"image_tag_mutability,omitempty"`

	// The lifecycle policy document to apply to any created repositories. See more details about Policy Parameters in the official AWS docs. Consider using the aws_ecr_lifecycle_policy_document data_source to generate/manage the JSON document used for the lifecycle_policy argument.
	LifecyclePolicy *string `json:"lifecyclePolicy,omitempty" tf:"lifecycle_policy,omitempty"`

	// The repository name prefix to match against. Use ROOT to match any prefix that doesn't explicitly match another template.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The registry ID the repository creation template applies to.
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// The registry policy document to apply to any created repositories. This is a JSON formatted string.
	RepositoryPolicy *string `json:"repositoryPolicy,omitempty" tf:"repository_policy,omitempty"`

	// A map of tags to assign to any created repositories.
	// +mapType=granular
	ResourceTags map[string]*string `json:"resourceTags,omitempty" tf:"resource_tags,omitempty"`
}

type RepositoryCreationTemplateParameters struct {

	// Which features this template applies to. Must contain one or more of PULL_THROUGH_CACHE or REPLICATION.
	// +kubebuilder:validation:Optional
	// +listType=set
	AppliedFor []*string `json:"appliedFor,omitempty" tf:"applied_for,omitempty"`

	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	// +kubebuilder:validation:Optional
	CustomRoleArn *string `json:"customRoleArn,omitempty" tf:"custom_role_arn,omitempty"`

	// The description for this template.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Encryption configuration for any created repositories. See below for schema.
	// +kubebuilder:validation:Optional
	EncryptionConfiguration []RepositoryCreationTemplateEncryptionConfigurationParameters `json:"encryptionConfiguration,omitempty" tf:"encryption_configuration,omitempty"`

	// The tag mutability setting for any created repositories. Must be one of: MUTABLE or IMMUTABLE. Defaults to MUTABLE.
	// +kubebuilder:validation:Optional
	ImageTagMutability *string `json:"imageTagMutability,omitempty" tf:"image_tag_mutability,omitempty"`

	// The lifecycle policy document to apply to any created repositories. See more details about Policy Parameters in the official AWS docs. Consider using the aws_ecr_lifecycle_policy_document data_source to generate/manage the JSON document used for the lifecycle_policy argument.
	// +kubebuilder:validation:Optional
	LifecyclePolicy *string `json:"lifecyclePolicy,omitempty" tf:"lifecycle_policy,omitempty"`

	// The repository name prefix to match against. Use ROOT to match any prefix that doesn't explicitly match another template.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The registry policy document to apply to any created repositories. This is a JSON formatted string.
	// +kubebuilder:validation:Optional
	RepositoryPolicy *string `json:"repositoryPolicy,omitempty" tf:"repository_policy,omitempty"`

	// A map of tags to assign to any created repositories.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ResourceTags map[string]*string `json:"resourceTags,omitempty" tf:"resource_tags,omitempty"`
}

// RepositoryCreationTemplateSpec defines the desired state of RepositoryCreationTemplate
type RepositoryCreationTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryCreationTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryCreationTemplateInitParameters `json:"initProvider,omitempty"`
}

// RepositoryCreationTemplateStatus defines the observed state of RepositoryCreationTemplate.
type RepositoryCreationTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryCreationTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryCreationTemplate is the Schema for the RepositoryCreationTemplates API. Provides an Elastic Container Registry Repository Creation Template.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RepositoryCreationTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appliedFor) || (has(self.initProvider) && has(self.initProvider.appliedFor))",message="spec.forProvider.appliedFor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.prefix) || (has(self.initProvider) && has(self.initProvider.prefix))",message="spec.forProvider.prefix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   RepositoryCreationTemplateSpec   `json:"spec"`
	Status RepositoryCreationTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryCreationTemplateList contains a list of RepositoryCreationTemplates
type RepositoryCreationTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryCreationTemplate `json:"items"`
}

// Repository type metadata.
var (
	RepositoryCreationTemplate_Kind             = "RepositoryCreationTemplate"
	RepositoryCreationTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryCreationTemplate_Kind}.String()
	RepositoryCreationTemplate_KindAPIVersion   = RepositoryCreationTemplate_Kind + "." + CRDGroupVersion.String()
	RepositoryCreationTemplate_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryCreationTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryCreationTemplate{}, &RepositoryCreationTemplateList{})
}
