// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type LayerVersionPermissionInitParameters struct {

	// Action that will be allowed. lambda:GetLayerVersion is the standard value for layer access.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Name or ARN of the Lambda Layer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/lambda/v1beta1.LayerVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("layer_name",false)
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// Reference to a LayerVersion in lambda to populate layerName.
	// +kubebuilder:validation:Optional
	LayerNameRef *v1.Reference `json:"layerNameRef,omitempty" tf:"-"`

	// Selector for a LayerVersion in lambda to populate layerName.
	// +kubebuilder:validation:Optional
	LayerNameSelector *v1.Selector `json:"layerNameSelector,omitempty" tf:"-"`

	// AWS Organization ID that should be able to use your Lambda Layer. principal should be set to * when organization_id is provided.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// AWS account ID that should be able to use your Lambda Layer. Use * to share with all AWS accounts.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// Whether to retain the permission when the resource is destroyed. Default is false.
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// Unique identifier for the permission statement.
	StatementID *string `json:"statementId,omitempty" tf:"statement_id,omitempty"`

	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/lambda/v1beta1.LayerVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("version",true)
	VersionNumber *float64 `json:"versionNumber,omitempty" tf:"version_number,omitempty"`

	// Reference to a LayerVersion in lambda to populate versionNumber.
	// +kubebuilder:validation:Optional
	VersionNumberRef *v1.Reference `json:"versionNumberRef,omitempty" tf:"-"`

	// Selector for a LayerVersion in lambda to populate versionNumber.
	// +kubebuilder:validation:Optional
	VersionNumberSelector *v1.Selector `json:"versionNumberSelector,omitempty" tf:"-"`
}

type LayerVersionPermissionObservation struct {

	// Action that will be allowed. lambda:GetLayerVersion is the standard value for layer access.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Layer name and version number, separated by a comma (,).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name or ARN of the Lambda Layer.
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// AWS Organization ID that should be able to use your Lambda Layer. principal should be set to * when organization_id is provided.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Full Lambda Layer Permission policy.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// AWS account ID that should be able to use your Lambda Layer. Use * to share with all AWS accounts.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Unique identifier for the current revision of the policy.
	RevisionID *string `json:"revisionId,omitempty" tf:"revision_id,omitempty"`

	// Whether to retain the permission when the resource is destroyed. Default is false.
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// Unique identifier for the permission statement.
	StatementID *string `json:"statementId,omitempty" tf:"statement_id,omitempty"`

	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber *float64 `json:"versionNumber,omitempty" tf:"version_number,omitempty"`
}

type LayerVersionPermissionParameters struct {

	// Action that will be allowed. lambda:GetLayerVersion is the standard value for layer access.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Name or ARN of the Lambda Layer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/lambda/v1beta1.LayerVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("layer_name",false)
	// +kubebuilder:validation:Optional
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// Reference to a LayerVersion in lambda to populate layerName.
	// +kubebuilder:validation:Optional
	LayerNameRef *v1.Reference `json:"layerNameRef,omitempty" tf:"-"`

	// Selector for a LayerVersion in lambda to populate layerName.
	// +kubebuilder:validation:Optional
	LayerNameSelector *v1.Selector `json:"layerNameSelector,omitempty" tf:"-"`

	// AWS Organization ID that should be able to use your Lambda Layer. principal should be set to * when organization_id is provided.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// AWS account ID that should be able to use your Lambda Layer. Use * to share with all AWS accounts.
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Whether to retain the permission when the resource is destroyed. Default is false.
	// +kubebuilder:validation:Optional
	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy,omitempty"`

	// Unique identifier for the permission statement.
	// +kubebuilder:validation:Optional
	StatementID *string `json:"statementId,omitempty" tf:"statement_id,omitempty"`

	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/lambda/v1beta1.LayerVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("version",true)
	// +kubebuilder:validation:Optional
	VersionNumber *float64 `json:"versionNumber,omitempty" tf:"version_number,omitempty"`

	// Reference to a LayerVersion in lambda to populate versionNumber.
	// +kubebuilder:validation:Optional
	VersionNumberRef *v1.Reference `json:"versionNumberRef,omitempty" tf:"-"`

	// Selector for a LayerVersion in lambda to populate versionNumber.
	// +kubebuilder:validation:Optional
	VersionNumberSelector *v1.Selector `json:"versionNumberSelector,omitempty" tf:"-"`
}

// LayerVersionPermissionSpec defines the desired state of LayerVersionPermission
type LayerVersionPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LayerVersionPermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LayerVersionPermissionInitParameters `json:"initProvider,omitempty"`
}

// LayerVersionPermissionStatus defines the observed state of LayerVersionPermission.
type LayerVersionPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LayerVersionPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LayerVersionPermission is the Schema for the LayerVersionPermissions API. Manages an AWS Lambda Layer Version Permission.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LayerVersionPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statementId) || (has(self.initProvider) && has(self.initProvider.statementId))",message="spec.forProvider.statementId is a required parameter"
	Spec   LayerVersionPermissionSpec   `json:"spec"`
	Status LayerVersionPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LayerVersionPermissionList contains a list of LayerVersionPermissions
type LayerVersionPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LayerVersionPermission `json:"items"`
}

// Repository type metadata.
var (
	LayerVersionPermission_Kind             = "LayerVersionPermission"
	LayerVersionPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LayerVersionPermission_Kind}.String()
	LayerVersionPermission_KindAPIVersion   = LayerVersionPermission_Kind + "." + CRDGroupVersion.String()
	LayerVersionPermission_GroupVersionKind = CRDGroupVersion.WithKind(LayerVersionPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&LayerVersionPermission{}, &LayerVersionPermissionList{})
}
