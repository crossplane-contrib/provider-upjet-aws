// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AliasInitParameters struct {

	// Description of the alias.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Lambda function version for which you are creating the alias. Pattern: (\$LATEST|[0-9]+).
	FunctionVersion *string `json:"functionVersion,omitempty" tf:"function_version,omitempty"`

	// Lambda alias' route configuration settings. See below.
	RoutingConfig []RoutingConfigInitParameters `json:"routingConfig,omitempty" tf:"routing_config,omitempty"`
}

type AliasObservation struct {

	// ARN identifying your Lambda function alias.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Description of the alias.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name or ARN of the Lambda function.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Lambda function version for which you are creating the alias. Pattern: (\$LATEST|[0-9]+).
	FunctionVersion *string `json:"functionVersion,omitempty" tf:"function_version,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
	InvokeArn *string `json:"invokeArn,omitempty" tf:"invoke_arn,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Lambda alias' route configuration settings. See below.
	RoutingConfig []RoutingConfigObservation `json:"routingConfig,omitempty" tf:"routing_config,omitempty"`
}

type AliasParameters struct {

	// Description of the alias.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name or ARN of the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/lambda/v1beta1.Function
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in lambda to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in lambda to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// Lambda function version for which you are creating the alias. Pattern: (\$LATEST|[0-9]+).
	// +kubebuilder:validation:Optional
	FunctionVersion *string `json:"functionVersion,omitempty" tf:"function_version,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Lambda alias' route configuration settings. See below.
	// +kubebuilder:validation:Optional
	RoutingConfig []RoutingConfigParameters `json:"routingConfig,omitempty" tf:"routing_config,omitempty"`
}

type RoutingConfigInitParameters struct {

	// Map that defines the proportion of events that should be sent to different versions of a Lambda function.
	// +mapType=granular
	AdditionalVersionWeights map[string]*float64 `json:"additionalVersionWeights,omitempty" tf:"additional_version_weights,omitempty"`
}

type RoutingConfigObservation struct {

	// Map that defines the proportion of events that should be sent to different versions of a Lambda function.
	// +mapType=granular
	AdditionalVersionWeights map[string]*float64 `json:"additionalVersionWeights,omitempty" tf:"additional_version_weights,omitempty"`
}

type RoutingConfigParameters struct {

	// Map that defines the proportion of events that should be sent to different versions of a Lambda function.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AdditionalVersionWeights map[string]*float64 `json:"additionalVersionWeights,omitempty" tf:"additional_version_weights,omitempty"`
}

// AliasSpec defines the desired state of Alias
type AliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AliasParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AliasInitParameters `json:"initProvider,omitempty"`
}

// AliasStatus defines the observed state of Alias.
type AliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Alias is the Schema for the Aliass API. Manages an AWS Lambda Alias.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Alias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.functionVersion) || (has(self.initProvider) && has(self.initProvider.functionVersion))",message="spec.forProvider.functionVersion is a required parameter"
	Spec   AliasSpec   `json:"spec"`
	Status AliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AliasList contains a list of Aliass
type AliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alias `json:"items"`
}

// Repository type metadata.
var (
	Alias_Kind             = "Alias"
	Alias_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Alias_Kind}.String()
	Alias_KindAPIVersion   = Alias_Kind + "." + CRDGroupVersion.String()
	Alias_GroupVersionKind = CRDGroupVersion.WithKind(Alias_Kind)
)

func init() {
	SchemeBuilder.Register(&Alias{}, &AliasList{})
}
