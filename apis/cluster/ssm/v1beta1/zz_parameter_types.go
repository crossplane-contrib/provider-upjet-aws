// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ParameterInitParameters_2 struct {

	// Regular expression used to validate the parameter value.
	AllowedPattern *string `json:"allowedPattern,omitempty" tf:"allowed_pattern,omitempty"`

	// ARN of the parameter.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Data type of the parameter. Valid values: text, aws:ssm:integration and aws:ec2:image for AMI format, see the Native parameter support for Amazon Machine Image IDs.
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Description of the parameter.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Value of the parameter. This argument is not valid with a type of SecureString.
	InsecureValue *string `json:"insecureValue,omitempty" tf:"insecure_value,omitempty"`

	// KMS key ID or ARN for encrypting a SecureString.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Overwrite an existing parameter. Lifecycle rules should be used to manage non-standard update behavior.
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Parameter tier to assign to the parameter. If not specified, will use the default parameter tier for the region. Valid tiers are Standard, Advanced, and Intelligent-Tiering. Downgrading an Advanced tier parameter to Standard will recreate the resource. For more information on parameter tiers, see the AWS SSM Parameter tier comparison and guide.
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// Type of the parameter. Valid types are String, StringList and SecureString.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Value of the parameter.15 and later, this may require additional configuration handling for certain scenarios.15 Upgrade Guide.
	ValueSecretRef *v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`

	// Value of the parameter. Additionally, write-only values are never stored to state. value_wo_version can be used to trigger an update and is required with this argument.15 and later, this may require additional configuration handling for certain scenarios.15 Upgrade Guide.
	ValueWoSecretRef *v1.SecretKeySelector `json:"valueWoSecretRef,omitempty" tf:"-"`

	// Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	ValueWoVersion *float64 `json:"valueWoVersion,omitempty" tf:"value_wo_version,omitempty"`
}

type ParameterObservation_2 struct {

	// Regular expression used to validate the parameter value.
	AllowedPattern *string `json:"allowedPattern,omitempty" tf:"allowed_pattern,omitempty"`

	// ARN of the parameter.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Data type of the parameter. Valid values: text, aws:ssm:integration and aws:ec2:image for AMI format, see the Native parameter support for Amazon Machine Image IDs.
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Description of the parameter.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates whether the resource has a value_wo set.
	HasValueWo *bool `json:"hasValueWo,omitempty" tf:"has_value_wo,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Value of the parameter. This argument is not valid with a type of SecureString.
	InsecureValue *string `json:"insecureValue,omitempty" tf:"insecure_value,omitempty"`

	// KMS key ID or ARN for encrypting a SecureString.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Overwrite an existing parameter. Lifecycle rules should be used to manage non-standard update behavior.
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Parameter tier to assign to the parameter. If not specified, will use the default parameter tier for the region. Valid tiers are Standard, Advanced, and Intelligent-Tiering. Downgrading an Advanced tier parameter to Standard will recreate the resource. For more information on parameter tiers, see the AWS SSM Parameter tier comparison and guide.
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// Type of the parameter. Valid types are String, StringList and SecureString.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	ValueWoVersion *float64 `json:"valueWoVersion,omitempty" tf:"value_wo_version,omitempty"`

	// Version of the parameter.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ParameterParameters_2 struct {

	// Regular expression used to validate the parameter value.
	// +kubebuilder:validation:Optional
	AllowedPattern *string `json:"allowedPattern,omitempty" tf:"allowed_pattern,omitempty"`

	// ARN of the parameter.
	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Data type of the parameter. Valid values: text, aws:ssm:integration and aws:ec2:image for AMI format, see the Native parameter support for Amazon Machine Image IDs.
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Description of the parameter.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Value of the parameter. This argument is not valid with a type of SecureString.
	// +kubebuilder:validation:Optional
	InsecureValue *string `json:"insecureValue,omitempty" tf:"insecure_value,omitempty"`

	// KMS key ID or ARN for encrypting a SecureString.
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Overwrite an existing parameter. Lifecycle rules should be used to manage non-standard update behavior.
	// +kubebuilder:validation:Optional
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Parameter tier to assign to the parameter. If not specified, will use the default parameter tier for the region. Valid tiers are Standard, Advanced, and Intelligent-Tiering. Downgrading an Advanced tier parameter to Standard will recreate the resource. For more information on parameter tiers, see the AWS SSM Parameter tier comparison and guide.
	// +kubebuilder:validation:Optional
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// Type of the parameter. Valid types are String, StringList and SecureString.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Value of the parameter.15 and later, this may require additional configuration handling for certain scenarios.15 Upgrade Guide.
	// +kubebuilder:validation:Optional
	ValueSecretRef *v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`

	// Value of the parameter. Additionally, write-only values are never stored to state. value_wo_version can be used to trigger an update and is required with this argument.15 and later, this may require additional configuration handling for certain scenarios.15 Upgrade Guide.
	// +kubebuilder:validation:Optional
	ValueWoSecretRef *v1.SecretKeySelector `json:"valueWoSecretRef,omitempty" tf:"-"`

	// Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	// +kubebuilder:validation:Optional
	ValueWoVersion *float64 `json:"valueWoVersion,omitempty" tf:"value_wo_version,omitempty"`
}

// ParameterSpec defines the desired state of Parameter
type ParameterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ParameterParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ParameterInitParameters_2 `json:"initProvider,omitempty"`
}

// ParameterStatus defines the observed state of Parameter.
type ParameterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ParameterObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Parameter is the Schema for the Parameters API. Provides a SSM Parameter resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Parameter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   ParameterSpec   `json:"spec"`
	Status ParameterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ParameterList contains a list of Parameters
type ParameterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Parameter `json:"items"`
}

// Repository type metadata.
var (
	Parameter_Kind             = "Parameter"
	Parameter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Parameter_Kind}.String()
	Parameter_KindAPIVersion   = Parameter_Kind + "." + CRDGroupVersion.String()
	Parameter_GroupVersionKind = CRDGroupVersion.WithKind(Parameter_Kind)
)

func init() {
	SchemeBuilder.Register(&Parameter{}, &ParameterList{})
}
