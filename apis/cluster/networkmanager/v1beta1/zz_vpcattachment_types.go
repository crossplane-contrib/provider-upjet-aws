// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type VPCAttachmentInitParameters struct {

	// ID of a core network for the VPC attachment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/networkmanager/v1beta1.CoreNetwork
	CoreNetworkID *string `json:"coreNetworkId,omitempty" tf:"core_network_id,omitempty"`

	// Reference to a CoreNetwork in networkmanager to populate coreNetworkId.
	// +kubebuilder:validation:Optional
	CoreNetworkIDRef *v1.Reference `json:"coreNetworkIdRef,omitempty" tf:"-"`

	// Selector for a CoreNetwork in networkmanager to populate coreNetworkId.
	// +kubebuilder:validation:Optional
	CoreNetworkIDSelector *v1.Selector `json:"coreNetworkIdSelector,omitempty" tf:"-"`

	// Options for the VPC attachment. See below.
	Options []VPCAttachmentOptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// Subnet ARNs of the VPC attachment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	// +listType=set
	SubnetArns []*string `json:"subnetArns,omitempty" tf:"subnet_arns,omitempty"`

	// References to Subnet in ec2 to populate subnetArns.
	// +kubebuilder:validation:Optional
	SubnetArnsRefs []v1.Reference `json:"subnetArnsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in ec2 to populate subnetArns.
	// +kubebuilder:validation:Optional
	SubnetArnsSelector *v1.Selector `json:"subnetArnsSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ARN of the VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	VPCArn *string `json:"vpcArn,omitempty" tf:"vpc_arn,omitempty"`

	// Reference to a VPC in ec2 to populate vpcArn.
	// +kubebuilder:validation:Optional
	VPCArnRef *v1.Reference `json:"vpcArnRef,omitempty" tf:"-"`

	// Selector for a VPC in ec2 to populate vpcArn.
	// +kubebuilder:validation:Optional
	VPCArnSelector *v1.Selector `json:"vpcArnSelector,omitempty" tf:"-"`
}

type VPCAttachmentObservation struct {

	// ARN of the attachment.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber *float64 `json:"attachmentPolicyRuleNumber,omitempty" tf:"attachment_policy_rule_number,omitempty"`

	// Type of attachment.
	AttachmentType *string `json:"attachmentType,omitempty" tf:"attachment_type,omitempty"`

	// ARN of a core network.
	CoreNetworkArn *string `json:"coreNetworkArn,omitempty" tf:"core_network_arn,omitempty"`

	// ID of a core network for the VPC attachment.
	CoreNetworkID *string `json:"coreNetworkId,omitempty" tf:"core_network_id,omitempty"`

	// Region where the edge is located.
	EdgeLocation *string `json:"edgeLocation,omitempty" tf:"edge_location,omitempty"`

	// ID of the attachment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Options for the VPC attachment. See below.
	Options []VPCAttachmentOptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// ID of the attachment account owner.
	OwnerAccountID *string `json:"ownerAccountId,omitempty" tf:"owner_account_id,omitempty"`

	// Attachment resource ARN.
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn,omitempty"`

	// Name of the segment attachment.
	SegmentName *string `json:"segmentName,omitempty" tf:"segment_name,omitempty"`

	// State of the attachment.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Subnet ARNs of the VPC attachment.
	// +listType=set
	SubnetArns []*string `json:"subnetArns,omitempty" tf:"subnet_arns,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// ARN of the VPC.
	VPCArn *string `json:"vpcArn,omitempty" tf:"vpc_arn,omitempty"`
}

type VPCAttachmentOptionsInitParameters struct {

	// Whether to enable appliance mode support. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	ApplianceModeSupport *bool `json:"applianceModeSupport,omitempty" tf:"appliance_mode_support,omitempty"`

	// Whether to enable DNS support. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	DNSSupport *bool `json:"dnsSupport,omitempty" tf:"dns_support,omitempty"`

	// Whether to enable IPv6 support. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	IPv6Support *bool `json:"ipv6Support,omitempty" tf:"ipv6_support,omitempty"`

	// Whether to enable security group referencing support for this VPC attachment. The default is true. However, at the core network policy-level the default is set to false. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	SecurityGroupReferencingSupport *bool `json:"securityGroupReferencingSupport,omitempty" tf:"security_group_referencing_support,omitempty"`
}

type VPCAttachmentOptionsObservation struct {

	// Whether to enable appliance mode support. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	ApplianceModeSupport *bool `json:"applianceModeSupport,omitempty" tf:"appliance_mode_support,omitempty"`

	// Whether to enable DNS support. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	DNSSupport *bool `json:"dnsSupport,omitempty" tf:"dns_support,omitempty"`

	// Whether to enable IPv6 support. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	IPv6Support *bool `json:"ipv6Support,omitempty" tf:"ipv6_support,omitempty"`

	// Whether to enable security group referencing support for this VPC attachment. The default is true. However, at the core network policy-level the default is set to false. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	SecurityGroupReferencingSupport *bool `json:"securityGroupReferencingSupport,omitempty" tf:"security_group_referencing_support,omitempty"`
}

type VPCAttachmentOptionsParameters struct {

	// Whether to enable appliance mode support. If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	// +kubebuilder:validation:Optional
	ApplianceModeSupport *bool `json:"applianceModeSupport,omitempty" tf:"appliance_mode_support,omitempty"`

	// Whether to enable DNS support. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	// +kubebuilder:validation:Optional
	DNSSupport *bool `json:"dnsSupport,omitempty" tf:"dns_support,omitempty"`

	// Whether to enable IPv6 support. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	// +kubebuilder:validation:Optional
	IPv6Support *bool `json:"ipv6Support,omitempty" tf:"ipv6_support,omitempty"`

	// Whether to enable security group referencing support for this VPC attachment. The default is true. However, at the core network policy-level the default is set to false. If the VPC attachment is pending acceptance, changing this value will recreate the resource.
	// +kubebuilder:validation:Optional
	SecurityGroupReferencingSupport *bool `json:"securityGroupReferencingSupport,omitempty" tf:"security_group_referencing_support,omitempty"`
}

type VPCAttachmentParameters struct {

	// ID of a core network for the VPC attachment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/networkmanager/v1beta1.CoreNetwork
	// +kubebuilder:validation:Optional
	CoreNetworkID *string `json:"coreNetworkId,omitempty" tf:"core_network_id,omitempty"`

	// Reference to a CoreNetwork in networkmanager to populate coreNetworkId.
	// +kubebuilder:validation:Optional
	CoreNetworkIDRef *v1.Reference `json:"coreNetworkIdRef,omitempty" tf:"-"`

	// Selector for a CoreNetwork in networkmanager to populate coreNetworkId.
	// +kubebuilder:validation:Optional
	CoreNetworkIDSelector *v1.Selector `json:"coreNetworkIdSelector,omitempty" tf:"-"`

	// Options for the VPC attachment. See below.
	// +kubebuilder:validation:Optional
	Options []VPCAttachmentOptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// Subnet ARNs of the VPC attachment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetArns []*string `json:"subnetArns,omitempty" tf:"subnet_arns,omitempty"`

	// References to Subnet in ec2 to populate subnetArns.
	// +kubebuilder:validation:Optional
	SubnetArnsRefs []v1.Reference `json:"subnetArnsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in ec2 to populate subnetArns.
	// +kubebuilder:validation:Optional
	SubnetArnsSelector *v1.Selector `json:"subnetArnsSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ARN of the VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cluster/ec2/v1beta1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	VPCArn *string `json:"vpcArn,omitempty" tf:"vpc_arn,omitempty"`

	// Reference to a VPC in ec2 to populate vpcArn.
	// +kubebuilder:validation:Optional
	VPCArnRef *v1.Reference `json:"vpcArnRef,omitempty" tf:"-"`

	// Selector for a VPC in ec2 to populate vpcArn.
	// +kubebuilder:validation:Optional
	VPCArnSelector *v1.Selector `json:"vpcArnSelector,omitempty" tf:"-"`
}

// VPCAttachmentSpec defines the desired state of VPCAttachment
type VPCAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCAttachmentInitParameters `json:"initProvider,omitempty"`
}

// VPCAttachmentStatus defines the observed state of VPCAttachment.
type VPCAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPCAttachment is the Schema for the VPCAttachments API. Manages a Network Manager VPC attachment.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VPCAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCAttachmentSpec   `json:"spec"`
	Status            VPCAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCAttachmentList contains a list of VPCAttachments
type VPCAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCAttachment `json:"items"`
}

// Repository type metadata.
var (
	VPCAttachment_Kind             = "VPCAttachment"
	VPCAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCAttachment_Kind}.String()
	VPCAttachment_KindAPIVersion   = VPCAttachment_Kind + "." + CRDGroupVersion.String()
	VPCAttachment_GroupVersionKind = CRDGroupVersion.WithKind(VPCAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCAttachment{}, &VPCAttachmentList{})
}
