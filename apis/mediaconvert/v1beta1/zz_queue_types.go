// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueueInitParameters struct {

	// A description of the queue
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are ON_DEMAND or RESERVED. Default to ON_DEMAND.
	PricingPlan *string `json:"pricingPlan,omitempty" tf:"pricing_plan,omitempty"`

	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings []ReservationPlanSettingsInitParameters `json:"reservationPlanSettings,omitempty" tf:"reservation_plan_settings,omitempty"`

	// A status of the queue. Valid values are ACTIVE or RESERVED. Default to PAUSED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type QueueObservation struct {

	// The Arn of the queue
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// A description of the queue
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The same as name
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are ON_DEMAND or RESERVED. Default to ON_DEMAND.
	PricingPlan *string `json:"pricingPlan,omitempty" tf:"pricing_plan,omitempty"`

	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings []ReservationPlanSettingsObservation `json:"reservationPlanSettings,omitempty" tf:"reservation_plan_settings,omitempty"`

	// A status of the queue. Valid values are ACTIVE or RESERVED. Default to PAUSED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type QueueParameters struct {

	// A description of the queue
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are ON_DEMAND or RESERVED. Default to ON_DEMAND.
	// +kubebuilder:validation:Optional
	PricingPlan *string `json:"pricingPlan,omitempty" tf:"pricing_plan,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// A detail pricing plan of the  reserved queue. See below.
	// +kubebuilder:validation:Optional
	ReservationPlanSettings []ReservationPlanSettingsParameters `json:"reservationPlanSettings,omitempty" tf:"reservation_plan_settings,omitempty"`

	// A status of the queue. Valid values are ACTIVE or RESERVED. Default to PAUSED.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReservationPlanSettingsInitParameters struct {

	// The length of the term of your reserved queue pricing plan commitment. Valid value is ONE_YEAR.
	Commitment *string `json:"commitment,omitempty" tf:"commitment,omitempty"`

	// Specifies whether the term of your reserved queue pricing plan. Valid values are AUTO_RENEW or EXPIRE.
	RenewalType *string `json:"renewalType,omitempty" tf:"renewal_type,omitempty"`

	// Specifies the number of reserved transcode slots (RTS) for queue.
	ReservedSlots *float64 `json:"reservedSlots,omitempty" tf:"reserved_slots,omitempty"`
}

type ReservationPlanSettingsObservation struct {

	// The length of the term of your reserved queue pricing plan commitment. Valid value is ONE_YEAR.
	Commitment *string `json:"commitment,omitempty" tf:"commitment,omitempty"`

	// Specifies whether the term of your reserved queue pricing plan. Valid values are AUTO_RENEW or EXPIRE.
	RenewalType *string `json:"renewalType,omitempty" tf:"renewal_type,omitempty"`

	// Specifies the number of reserved transcode slots (RTS) for queue.
	ReservedSlots *float64 `json:"reservedSlots,omitempty" tf:"reserved_slots,omitempty"`
}

type ReservationPlanSettingsParameters struct {

	// The length of the term of your reserved queue pricing plan commitment. Valid value is ONE_YEAR.
	// +kubebuilder:validation:Optional
	Commitment *string `json:"commitment" tf:"commitment,omitempty"`

	// Specifies whether the term of your reserved queue pricing plan. Valid values are AUTO_RENEW or EXPIRE.
	// +kubebuilder:validation:Optional
	RenewalType *string `json:"renewalType" tf:"renewal_type,omitempty"`

	// Specifies the number of reserved transcode slots (RTS) for queue.
	// +kubebuilder:validation:Optional
	ReservedSlots *float64 `json:"reservedSlots" tf:"reserved_slots,omitempty"`
}

// QueueSpec defines the desired state of Queue
type QueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueueInitParameters `json:"initProvider,omitempty"`
}

// QueueStatus defines the observed state of Queue.
type QueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Queue is the Schema for the Queues API. Provides an AWS Elemental MediaConvert Queue.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Queue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueueSpec   `json:"spec"`
	Status            QueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueList contains a list of Queues
type QueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Queue `json:"items"`
}

// Repository type metadata.
var (
	Queue_Kind             = "Queue"
	Queue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Queue_Kind}.String()
	Queue_KindAPIVersion   = Queue_Kind + "." + CRDGroupVersion.String()
	Queue_GroupVersionKind = CRDGroupVersion.WithKind(Queue_Kind)
)

func init() {
	SchemeBuilder.Register(&Queue{}, &QueueList{})
}
