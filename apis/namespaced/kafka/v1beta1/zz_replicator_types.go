// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AmazonMskClusterInitParameters struct {

	// The ARN of an Amazon MSK cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/kafka/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	MskClusterArn *string `json:"mskClusterArn,omitempty" tf:"msk_cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate mskClusterArn.
	// +kubebuilder:validation:Optional
	MskClusterArnRef *v1.NamespacedReference `json:"mskClusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate mskClusterArn.
	// +kubebuilder:validation:Optional
	MskClusterArnSelector *v1.NamespacedSelector `json:"mskClusterArnSelector,omitempty" tf:"-"`
}

type AmazonMskClusterObservation struct {

	// The ARN of an Amazon MSK cluster.
	MskClusterArn *string `json:"mskClusterArn,omitempty" tf:"msk_cluster_arn,omitempty"`
}

type AmazonMskClusterParameters struct {

	// The ARN of an Amazon MSK cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/kafka/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	MskClusterArn *string `json:"mskClusterArn,omitempty" tf:"msk_cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate mskClusterArn.
	// +kubebuilder:validation:Optional
	MskClusterArnRef *v1.NamespacedReference `json:"mskClusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate mskClusterArn.
	// +kubebuilder:validation:Optional
	MskClusterArnSelector *v1.NamespacedSelector `json:"mskClusterArnSelector,omitempty" tf:"-"`
}

type ConsumerGroupReplicationInitParameters struct {

	// List of regular expression patterns indicating the consumer groups that should not be replicated.
	// +listType=set
	ConsumerGroupsToExclude []*string `json:"consumerGroupsToExclude,omitempty" tf:"consumer_groups_to_exclude,omitempty"`

	// List of regular expression patterns indicating the consumer groups to copy.
	// +listType=set
	ConsumerGroupsToReplicate []*string `json:"consumerGroupsToReplicate,omitempty" tf:"consumer_groups_to_replicate,omitempty"`

	// Whether to periodically check for new consumer groups.
	DetectAndCopyNewConsumerGroups *bool `json:"detectAndCopyNewConsumerGroups,omitempty" tf:"detect_and_copy_new_consumer_groups,omitempty"`

	// Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
	SynchroniseConsumerGroupOffsets *bool `json:"synchroniseConsumerGroupOffsets,omitempty" tf:"synchronise_consumer_group_offsets,omitempty"`
}

type ConsumerGroupReplicationObservation struct {

	// List of regular expression patterns indicating the consumer groups that should not be replicated.
	// +listType=set
	ConsumerGroupsToExclude []*string `json:"consumerGroupsToExclude,omitempty" tf:"consumer_groups_to_exclude,omitempty"`

	// List of regular expression patterns indicating the consumer groups to copy.
	// +listType=set
	ConsumerGroupsToReplicate []*string `json:"consumerGroupsToReplicate,omitempty" tf:"consumer_groups_to_replicate,omitempty"`

	// Whether to periodically check for new consumer groups.
	DetectAndCopyNewConsumerGroups *bool `json:"detectAndCopyNewConsumerGroups,omitempty" tf:"detect_and_copy_new_consumer_groups,omitempty"`

	// Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
	SynchroniseConsumerGroupOffsets *bool `json:"synchroniseConsumerGroupOffsets,omitempty" tf:"synchronise_consumer_group_offsets,omitempty"`
}

type ConsumerGroupReplicationParameters struct {

	// List of regular expression patterns indicating the consumer groups that should not be replicated.
	// +kubebuilder:validation:Optional
	// +listType=set
	ConsumerGroupsToExclude []*string `json:"consumerGroupsToExclude,omitempty" tf:"consumer_groups_to_exclude,omitempty"`

	// List of regular expression patterns indicating the consumer groups to copy.
	// +kubebuilder:validation:Optional
	// +listType=set
	ConsumerGroupsToReplicate []*string `json:"consumerGroupsToReplicate" tf:"consumer_groups_to_replicate,omitempty"`

	// Whether to periodically check for new consumer groups.
	// +kubebuilder:validation:Optional
	DetectAndCopyNewConsumerGroups *bool `json:"detectAndCopyNewConsumerGroups,omitempty" tf:"detect_and_copy_new_consumer_groups,omitempty"`

	// Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
	// +kubebuilder:validation:Optional
	SynchroniseConsumerGroupOffsets *bool `json:"synchroniseConsumerGroupOffsets,omitempty" tf:"synchronise_consumer_group_offsets,omitempty"`
}

type KafkaClusterInitParameters struct {

	// Details of an Amazon MSK cluster.
	AmazonMskCluster *AmazonMskClusterInitParameters `json:"amazonMskCluster,omitempty" tf:"amazon_msk_cluster,omitempty"`

	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	VPCConfig *VPCConfigInitParameters `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`
}

type KafkaClusterObservation struct {

	// Details of an Amazon MSK cluster.
	AmazonMskCluster *AmazonMskClusterObservation `json:"amazonMskCluster,omitempty" tf:"amazon_msk_cluster,omitempty"`

	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	VPCConfig *VPCConfigObservation `json:"vpcConfig,omitempty" tf:"vpc_config,omitempty"`
}

type KafkaClusterParameters struct {

	// Details of an Amazon MSK cluster.
	// +kubebuilder:validation:Optional
	AmazonMskCluster *AmazonMskClusterParameters `json:"amazonMskCluster" tf:"amazon_msk_cluster,omitempty"`

	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	// +kubebuilder:validation:Optional
	VPCConfig *VPCConfigParameters `json:"vpcConfig" tf:"vpc_config,omitempty"`
}

type ReplicationInfoListInitParameters struct {

	// Configuration relating to consumer group replication.
	ConsumerGroupReplication []ConsumerGroupReplicationInitParameters `json:"consumerGroupReplication,omitempty" tf:"consumer_group_replication,omitempty"`

	// The ARN of the source Kafka cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/kafka/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	SourceKafkaClusterArn *string `json:"sourceKafkaClusterArn,omitempty" tf:"source_kafka_cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate sourceKafkaClusterArn.
	// +kubebuilder:validation:Optional
	SourceKafkaClusterArnRef *v1.NamespacedReference `json:"sourceKafkaClusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate sourceKafkaClusterArn.
	// +kubebuilder:validation:Optional
	SourceKafkaClusterArnSelector *v1.NamespacedSelector `json:"sourceKafkaClusterArnSelector,omitempty" tf:"-"`

	// The type of compression to use writing records to target Kafka cluster.
	TargetCompressionType *string `json:"targetCompressionType,omitempty" tf:"target_compression_type,omitempty"`

	// The ARN of the target Kafka cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/kafka/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	TargetKafkaClusterArn *string `json:"targetKafkaClusterArn,omitempty" tf:"target_kafka_cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate targetKafkaClusterArn.
	// +kubebuilder:validation:Optional
	TargetKafkaClusterArnRef *v1.NamespacedReference `json:"targetKafkaClusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate targetKafkaClusterArn.
	// +kubebuilder:validation:Optional
	TargetKafkaClusterArnSelector *v1.NamespacedSelector `json:"targetKafkaClusterArnSelector,omitempty" tf:"-"`

	// Configuration relating to topic replication.
	TopicReplication []TopicReplicationInitParameters `json:"topicReplication,omitempty" tf:"topic_replication,omitempty"`
}

type ReplicationInfoListObservation struct {

	// Configuration relating to consumer group replication.
	ConsumerGroupReplication []ConsumerGroupReplicationObservation `json:"consumerGroupReplication,omitempty" tf:"consumer_group_replication,omitempty"`

	SourceKafkaClusterAlias *string `json:"sourceKafkaClusterAlias,omitempty" tf:"source_kafka_cluster_alias,omitempty"`

	// The ARN of the source Kafka cluster.
	SourceKafkaClusterArn *string `json:"sourceKafkaClusterArn,omitempty" tf:"source_kafka_cluster_arn,omitempty"`

	// The type of compression to use writing records to target Kafka cluster.
	TargetCompressionType *string `json:"targetCompressionType,omitempty" tf:"target_compression_type,omitempty"`

	TargetKafkaClusterAlias *string `json:"targetKafkaClusterAlias,omitempty" tf:"target_kafka_cluster_alias,omitempty"`

	// The ARN of the target Kafka cluster.
	TargetKafkaClusterArn *string `json:"targetKafkaClusterArn,omitempty" tf:"target_kafka_cluster_arn,omitempty"`

	// Configuration relating to topic replication.
	TopicReplication []TopicReplicationObservation `json:"topicReplication,omitempty" tf:"topic_replication,omitempty"`
}

type ReplicationInfoListParameters struct {

	// Configuration relating to consumer group replication.
	// +kubebuilder:validation:Optional
	ConsumerGroupReplication []ConsumerGroupReplicationParameters `json:"consumerGroupReplication" tf:"consumer_group_replication,omitempty"`

	// The ARN of the source Kafka cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/kafka/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	SourceKafkaClusterArn *string `json:"sourceKafkaClusterArn,omitempty" tf:"source_kafka_cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate sourceKafkaClusterArn.
	// +kubebuilder:validation:Optional
	SourceKafkaClusterArnRef *v1.NamespacedReference `json:"sourceKafkaClusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate sourceKafkaClusterArn.
	// +kubebuilder:validation:Optional
	SourceKafkaClusterArnSelector *v1.NamespacedSelector `json:"sourceKafkaClusterArnSelector,omitempty" tf:"-"`

	// The type of compression to use writing records to target Kafka cluster.
	// +kubebuilder:validation:Optional
	TargetCompressionType *string `json:"targetCompressionType" tf:"target_compression_type,omitempty"`

	// The ARN of the target Kafka cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/kafka/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	TargetKafkaClusterArn *string `json:"targetKafkaClusterArn,omitempty" tf:"target_kafka_cluster_arn,omitempty"`

	// Reference to a Cluster in kafka to populate targetKafkaClusterArn.
	// +kubebuilder:validation:Optional
	TargetKafkaClusterArnRef *v1.NamespacedReference `json:"targetKafkaClusterArnRef,omitempty" tf:"-"`

	// Selector for a Cluster in kafka to populate targetKafkaClusterArn.
	// +kubebuilder:validation:Optional
	TargetKafkaClusterArnSelector *v1.NamespacedSelector `json:"targetKafkaClusterArnSelector,omitempty" tf:"-"`

	// Configuration relating to topic replication.
	// +kubebuilder:validation:Optional
	TopicReplication []TopicReplicationParameters `json:"topicReplication" tf:"topic_replication,omitempty"`
}

type ReplicatorInitParameters struct {

	// A summary description of the replicator.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of Kafka clusters which are targets of the replicator.
	KafkaCluster []KafkaClusterInitParameters `json:"kafkaCluster,omitempty" tf:"kafka_cluster,omitempty"`

	// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
	ReplicationInfoList *ReplicationInfoListInitParameters `json:"replicationInfoList,omitempty" tf:"replication_info_list,omitempty"`

	// The name of the replicator.
	ReplicatorName *string `json:"replicatorName,omitempty" tf:"replicator_name,omitempty"`

	// The ARN of the IAM role used by the replicator to access resources in the customer's account (e.g source and target clusters).
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	ServiceExecutionRoleArn *string `json:"serviceExecutionRoleArn,omitempty" tf:"service_execution_role_arn,omitempty"`

	// Reference to a Role in iam to populate serviceExecutionRoleArn.
	// +kubebuilder:validation:Optional
	ServiceExecutionRoleArnRef *v1.NamespacedReference `json:"serviceExecutionRoleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate serviceExecutionRoleArn.
	// +kubebuilder:validation:Optional
	ServiceExecutionRoleArnSelector *v1.NamespacedSelector `json:"serviceExecutionRoleArnSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReplicatorObservation struct {

	// ARN of the Replicator.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CurrentVersion *string `json:"currentVersion,omitempty" tf:"current_version,omitempty"`

	// A summary description of the replicator.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of Kafka clusters which are targets of the replicator.
	KafkaCluster []KafkaClusterObservation `json:"kafkaCluster,omitempty" tf:"kafka_cluster,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
	ReplicationInfoList *ReplicationInfoListObservation `json:"replicationInfoList,omitempty" tf:"replication_info_list,omitempty"`

	// The name of the replicator.
	ReplicatorName *string `json:"replicatorName,omitempty" tf:"replicator_name,omitempty"`

	// The ARN of the IAM role used by the replicator to access resources in the customer's account (e.g source and target clusters).
	ServiceExecutionRoleArn *string `json:"serviceExecutionRoleArn,omitempty" tf:"service_execution_role_arn,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ReplicatorParameters struct {

	// A summary description of the replicator.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of Kafka clusters which are targets of the replicator.
	// +kubebuilder:validation:Optional
	KafkaCluster []KafkaClusterParameters `json:"kafkaCluster,omitempty" tf:"kafka_cluster,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
	// +kubebuilder:validation:Optional
	ReplicationInfoList *ReplicationInfoListParameters `json:"replicationInfoList,omitempty" tf:"replication_info_list,omitempty"`

	// The name of the replicator.
	// +kubebuilder:validation:Optional
	ReplicatorName *string `json:"replicatorName,omitempty" tf:"replicator_name,omitempty"`

	// The ARN of the IAM role used by the replicator to access resources in the customer's account (e.g source and target clusters).
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	ServiceExecutionRoleArn *string `json:"serviceExecutionRoleArn,omitempty" tf:"service_execution_role_arn,omitempty"`

	// Reference to a Role in iam to populate serviceExecutionRoleArn.
	// +kubebuilder:validation:Optional
	ServiceExecutionRoleArnRef *v1.NamespacedReference `json:"serviceExecutionRoleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate serviceExecutionRoleArn.
	// +kubebuilder:validation:Optional
	ServiceExecutionRoleArnSelector *v1.NamespacedSelector `json:"serviceExecutionRoleArnSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type StartingPositionInitParameters struct {

	// The type of topic configuration name. Supports PREFIXED_WITH_SOURCE_CLUSTER_ALIAS and IDENTICAL.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StartingPositionObservation struct {

	// The type of topic configuration name. Supports PREFIXED_WITH_SOURCE_CLUSTER_ALIAS and IDENTICAL.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StartingPositionParameters struct {

	// The type of topic configuration name. Supports PREFIXED_WITH_SOURCE_CLUSTER_ALIAS and IDENTICAL.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TopicNameConfigurationInitParameters struct {

	// The type of topic configuration name. Supports PREFIXED_WITH_SOURCE_CLUSTER_ALIAS and IDENTICAL.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TopicNameConfigurationObservation struct {

	// The type of topic configuration name. Supports PREFIXED_WITH_SOURCE_CLUSTER_ALIAS and IDENTICAL.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TopicNameConfigurationParameters struct {

	// The type of topic configuration name. Supports PREFIXED_WITH_SOURCE_CLUSTER_ALIAS and IDENTICAL.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TopicReplicationInitParameters struct {

	// Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
	CopyAccessControlListsForTopics *bool `json:"copyAccessControlListsForTopics,omitempty" tf:"copy_access_control_lists_for_topics,omitempty"`

	// Whether to periodically configure remote topics to match their corresponding upstream topics.
	CopyTopicConfigurations *bool `json:"copyTopicConfigurations,omitempty" tf:"copy_topic_configurations,omitempty"`

	// Whether to periodically check for new topics and partitions.
	DetectAndCopyNewTopics *bool `json:"detectAndCopyNewTopics,omitempty" tf:"detect_and_copy_new_topics,omitempty"`

	// Configuration for specifying the position in the topics to start replicating from.
	StartingPosition *StartingPositionInitParameters `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// Configuration for specifying replicated topic names should be the same as their corresponding upstream topics or prefixed with source cluster alias.
	TopicNameConfiguration *TopicNameConfigurationInitParameters `json:"topicNameConfiguration,omitempty" tf:"topic_name_configuration,omitempty"`

	// List of regular expression patterns indicating the topics that should not be replica.
	// +listType=set
	TopicsToExclude []*string `json:"topicsToExclude,omitempty" tf:"topics_to_exclude,omitempty"`

	// List of regular expression patterns indicating the topics to copy.
	// +listType=set
	TopicsToReplicate []*string `json:"topicsToReplicate,omitempty" tf:"topics_to_replicate,omitempty"`
}

type TopicReplicationObservation struct {

	// Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
	CopyAccessControlListsForTopics *bool `json:"copyAccessControlListsForTopics,omitempty" tf:"copy_access_control_lists_for_topics,omitempty"`

	// Whether to periodically configure remote topics to match their corresponding upstream topics.
	CopyTopicConfigurations *bool `json:"copyTopicConfigurations,omitempty" tf:"copy_topic_configurations,omitempty"`

	// Whether to periodically check for new topics and partitions.
	DetectAndCopyNewTopics *bool `json:"detectAndCopyNewTopics,omitempty" tf:"detect_and_copy_new_topics,omitempty"`

	// Configuration for specifying the position in the topics to start replicating from.
	StartingPosition *StartingPositionObservation `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// Configuration for specifying replicated topic names should be the same as their corresponding upstream topics or prefixed with source cluster alias.
	TopicNameConfiguration *TopicNameConfigurationObservation `json:"topicNameConfiguration,omitempty" tf:"topic_name_configuration,omitempty"`

	// List of regular expression patterns indicating the topics that should not be replica.
	// +listType=set
	TopicsToExclude []*string `json:"topicsToExclude,omitempty" tf:"topics_to_exclude,omitempty"`

	// List of regular expression patterns indicating the topics to copy.
	// +listType=set
	TopicsToReplicate []*string `json:"topicsToReplicate,omitempty" tf:"topics_to_replicate,omitempty"`
}

type TopicReplicationParameters struct {

	// Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
	// +kubebuilder:validation:Optional
	CopyAccessControlListsForTopics *bool `json:"copyAccessControlListsForTopics,omitempty" tf:"copy_access_control_lists_for_topics,omitempty"`

	// Whether to periodically configure remote topics to match their corresponding upstream topics.
	// +kubebuilder:validation:Optional
	CopyTopicConfigurations *bool `json:"copyTopicConfigurations,omitempty" tf:"copy_topic_configurations,omitempty"`

	// Whether to periodically check for new topics and partitions.
	// +kubebuilder:validation:Optional
	DetectAndCopyNewTopics *bool `json:"detectAndCopyNewTopics,omitempty" tf:"detect_and_copy_new_topics,omitempty"`

	// Configuration for specifying the position in the topics to start replicating from.
	// +kubebuilder:validation:Optional
	StartingPosition *StartingPositionParameters `json:"startingPosition,omitempty" tf:"starting_position,omitempty"`

	// Configuration for specifying replicated topic names should be the same as their corresponding upstream topics or prefixed with source cluster alias.
	// +kubebuilder:validation:Optional
	TopicNameConfiguration *TopicNameConfigurationParameters `json:"topicNameConfiguration,omitempty" tf:"topic_name_configuration,omitempty"`

	// List of regular expression patterns indicating the topics that should not be replica.
	// +kubebuilder:validation:Optional
	// +listType=set
	TopicsToExclude []*string `json:"topicsToExclude,omitempty" tf:"topics_to_exclude,omitempty"`

	// List of regular expression patterns indicating the topics to copy.
	// +kubebuilder:validation:Optional
	// +listType=set
	TopicsToReplicate []*string `json:"topicsToReplicate" tf:"topics_to_replicate,omitempty"`
}

type VPCConfigInitParameters struct {

	// The AWS security groups to associate with the ENIs used by the replicator. If a security group is not specified, the default security group associated with the VPC is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// References to SecurityGroup in ec2 to populate securityGroupsIds.
	// +kubebuilder:validation:Optional
	SecurityGroupsIdsRefs []v1.NamespacedReference `json:"securityGroupsIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in ec2 to populate securityGroupsIds.
	// +kubebuilder:validation:Optional
	SecurityGroupsIdsSelector *v1.NamespacedSelector `json:"securityGroupsIdsSelector,omitempty" tf:"-"`

	// The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets to allow communication between your Kafka Cluster and the replicator.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/ec2/v1beta1.Subnet
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.NamespacedReference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.NamespacedSelector `json:"subnetIdsSelector,omitempty" tf:"-"`
}

type VPCConfigObservation struct {

	// The AWS security groups to associate with the ENIs used by the replicator. If a security group is not specified, the default security group associated with the VPC is used.
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets to allow communication between your Kafka Cluster and the replicator.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type VPCConfigParameters struct {

	// The AWS security groups to associate with the ENIs used by the replicator. If a security group is not specified, the default security group associated with the VPC is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupsIds []*string `json:"securityGroupsIds,omitempty" tf:"security_groups_ids,omitempty"`

	// References to SecurityGroup in ec2 to populate securityGroupsIds.
	// +kubebuilder:validation:Optional
	SecurityGroupsIdsRefs []v1.NamespacedReference `json:"securityGroupsIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in ec2 to populate securityGroupsIds.
	// +kubebuilder:validation:Optional
	SecurityGroupsIdsSelector *v1.NamespacedSelector `json:"securityGroupsIdsSelector,omitempty" tf:"-"`

	// The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets to allow communication between your Kafka Cluster and the replicator.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.NamespacedReference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in ec2 to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.NamespacedSelector `json:"subnetIdsSelector,omitempty" tf:"-"`
}

// ReplicatorSpec defines the desired state of Replicator
type ReplicatorSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ReplicatorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReplicatorInitParameters `json:"initProvider,omitempty"`
}

// ReplicatorStatus defines the observed state of Replicator.
type ReplicatorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicatorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Replicator is the Schema for the Replicators API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type Replicator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kafkaCluster) || (has(self.initProvider) && has(self.initProvider.kafkaCluster))",message="spec.forProvider.kafkaCluster is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.replicationInfoList) || (has(self.initProvider) && has(self.initProvider.replicationInfoList))",message="spec.forProvider.replicationInfoList is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.replicatorName) || (has(self.initProvider) && has(self.initProvider.replicatorName))",message="spec.forProvider.replicatorName is a required parameter"
	Spec   ReplicatorSpec   `json:"spec"`
	Status ReplicatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicatorList contains a list of Replicators
type ReplicatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Replicator `json:"items"`
}

// Repository type metadata.
var (
	Replicator_Kind             = "Replicator"
	Replicator_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Replicator_Kind}.String()
	Replicator_KindAPIVersion   = Replicator_Kind + "." + CRDGroupVersion.String()
	Replicator_GroupVersionKind = CRDGroupVersion.WithKind(Replicator_Kind)
)

func init() {
	SchemeBuilder.Register(&Replicator{}, &ReplicatorList{})
}
