// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Domain) ResolveReferences( // ResolveReferences of this Domain.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.EncryptAtRest != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.m.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EncryptAtRest.KMSKeyID),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.EncryptAtRest.KMSKeyIDRef,
				Selector:     mg.Spec.ForProvider.EncryptAtRest.KMSKeyIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EncryptAtRest.KMSKeyID")
		}
		mg.Spec.ForProvider.EncryptAtRest.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EncryptAtRest.KMSKeyIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LogPublishingOptions); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogPublishingOptions[i3].CloudwatchLogGroupArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LogPublishingOptions[i3].CloudwatchLogGroupArnRef,
				Selector:     mg.Spec.ForProvider.LogPublishingOptions[i3].CloudwatchLogGroupArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LogPublishingOptions[i3].CloudwatchLogGroupArn")
		}
		mg.Spec.ForProvider.LogPublishingOptions[i3].CloudwatchLogGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LogPublishingOptions[i3].CloudwatchLogGroupArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.VPCOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCOptions.SecurityGroupIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.VPCOptions.SecurityGroupIDRefs,
				Selector:      mg.Spec.ForProvider.VPCOptions.SecurityGroupIDSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCOptions.SecurityGroupIds")
		}
		mg.Spec.ForProvider.VPCOptions.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCOptions.SecurityGroupIDRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.VPCOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCOptions.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.VPCOptions.SubnetIDRefs,
				Selector:      mg.Spec.ForProvider.VPCOptions.SubnetIDSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCOptions.SubnetIds")
		}
		mg.Spec.ForProvider.VPCOptions.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCOptions.SubnetIDRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.EncryptAtRest != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.m.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EncryptAtRest.KMSKeyID),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.EncryptAtRest.KMSKeyIDRef,
				Selector:     mg.Spec.InitProvider.EncryptAtRest.KMSKeyIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EncryptAtRest.KMSKeyID")
		}
		mg.Spec.InitProvider.EncryptAtRest.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EncryptAtRest.KMSKeyIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LogPublishingOptions); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogPublishingOptions[i3].CloudwatchLogGroupArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LogPublishingOptions[i3].CloudwatchLogGroupArnRef,
				Selector:     mg.Spec.InitProvider.LogPublishingOptions[i3].CloudwatchLogGroupArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LogPublishingOptions[i3].CloudwatchLogGroupArn")
		}
		mg.Spec.InitProvider.LogPublishingOptions[i3].CloudwatchLogGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LogPublishingOptions[i3].CloudwatchLogGroupArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.VPCOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCOptions.SecurityGroupIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.VPCOptions.SecurityGroupIDRefs,
				Selector:      mg.Spec.InitProvider.VPCOptions.SecurityGroupIDSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCOptions.SecurityGroupIds")
		}
		mg.Spec.InitProvider.VPCOptions.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCOptions.SecurityGroupIDRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.VPCOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCOptions.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.VPCOptions.SubnetIDRefs,
				Selector:      mg.Spec.InitProvider.VPCOptions.SubnetIDSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCOptions.SubnetIds")
		}
		mg.Spec.InitProvider.VPCOptions.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCOptions.SubnetIDRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this DomainPolicy.
func (mg *DomainPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("opensearch.aws.m.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainName),
			Extract:      resource.ExtractParamPath("domain_name", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DomainNameRef,
			Selector:     mg.Spec.ForProvider.DomainNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainName")
	}
	mg.Spec.ForProvider.DomainName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("opensearch.aws.m.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainName),
			Extract:      resource.ExtractParamPath("domain_name", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DomainNameRef,
			Selector:     mg.Spec.InitProvider.DomainNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainName")
	}
	mg.Spec.InitProvider.DomainName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DomainSAMLOptions.
func (mg *DomainSAMLOptions) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("opensearch.aws.m.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainName),
			Extract:      resource.ExtractParamPath("domain_name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DomainNameRef,
			Selector:     mg.Spec.ForProvider.DomainNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainName")
	}
	mg.Spec.ForProvider.DomainName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("opensearch.aws.m.upbound.io", "v1beta1", "Domain", "DomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainName),
			Extract:      resource.ExtractParamPath("domain_name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DomainNameRef,
			Selector:     mg.Spec.InitProvider.DomainNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainName")
	}
	mg.Spec.InitProvider.DomainName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainNameRef = rsp.ResolvedReference

	return nil
}
