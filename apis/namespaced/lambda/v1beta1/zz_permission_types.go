// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type PermissionInitParameters struct {

	// Lambda action to allow in this statement (e.g., lambda:InvokeFunction)
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Event Source Token for Alexa Skills
	EventSourceToken *string `json:"eventSourceToken,omitempty" tf:"event_source_token,omitempty"`

	// Name or ARN of the Lambda function
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/lambda/v1beta1.Function
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in lambda to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.NamespacedReference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in lambda to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.NamespacedSelector `json:"functionNameSelector,omitempty" tf:"-"`

	// Lambda Function URL authentication type. Valid values: AWS_IAM or NONE. Only valid with lambda:InvokeFunctionUrl action
	FunctionURLAuthType *string `json:"functionUrlAuthType,omitempty" tf:"function_url_auth_type,omitempty"`

	// AWS service or account that invokes the function (e.g., s3.amazonaws.com, sns.amazonaws.com, AWS account ID, or AWS IAM principal)
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgID *string `json:"principalOrgId,omitempty" tf:"principal_org_id,omitempty"`

	// Lambda function version or alias name
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/lambda/v1beta1.Alias
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Reference to a Alias in lambda to populate qualifier.
	// +kubebuilder:validation:Optional
	QualifierRef *v1.NamespacedReference `json:"qualifierRef,omitempty" tf:"-"`

	// Selector for a Alias in lambda to populate qualifier.
	// +kubebuilder:validation:Optional
	QualifierSelector *v1.NamespacedSelector `json:"qualifierSelector,omitempty" tf:"-"`

	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount *string `json:"sourceAccount,omitempty" tf:"source_account,omitempty"`

	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// Statement identifier
	StatementID *string `json:"statementId,omitempty" tf:"statement_id,omitempty"`

	// Statement identifier prefix. Conflicts with statement_id
	StatementIDPrefix *string `json:"statementIdPrefix,omitempty" tf:"statement_id_prefix,omitempty"`
}

type PermissionObservation struct {

	// Lambda action to allow in this statement (e.g., lambda:InvokeFunction)
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Event Source Token for Alexa Skills
	EventSourceToken *string `json:"eventSourceToken,omitempty" tf:"event_source_token,omitempty"`

	// Name or ARN of the Lambda function
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Lambda Function URL authentication type. Valid values: AWS_IAM or NONE. Only valid with lambda:InvokeFunctionUrl action
	FunctionURLAuthType *string `json:"functionUrlAuthType,omitempty" tf:"function_url_auth_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// AWS service or account that invokes the function (e.g., s3.amazonaws.com, sns.amazonaws.com, AWS account ID, or AWS IAM principal)
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgID *string `json:"principalOrgId,omitempty" tf:"principal_org_id,omitempty"`

	// Lambda function version or alias name
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount *string `json:"sourceAccount,omitempty" tf:"source_account,omitempty"`

	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// Statement identifier
	StatementID *string `json:"statementId,omitempty" tf:"statement_id,omitempty"`

	// Statement identifier prefix. Conflicts with statement_id
	StatementIDPrefix *string `json:"statementIdPrefix,omitempty" tf:"statement_id_prefix,omitempty"`
}

type PermissionParameters struct {

	// Lambda action to allow in this statement (e.g., lambda:InvokeFunction)
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Event Source Token for Alexa Skills
	// +kubebuilder:validation:Optional
	EventSourceToken *string `json:"eventSourceToken,omitempty" tf:"event_source_token,omitempty"`

	// Name or ARN of the Lambda function
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/lambda/v1beta1.Function
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// Reference to a Function in lambda to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.NamespacedReference `json:"functionNameRef,omitempty" tf:"-"`

	// Selector for a Function in lambda to populate functionName.
	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.NamespacedSelector `json:"functionNameSelector,omitempty" tf:"-"`

	// Lambda Function URL authentication type. Valid values: AWS_IAM or NONE. Only valid with lambda:InvokeFunctionUrl action
	// +kubebuilder:validation:Optional
	FunctionURLAuthType *string `json:"functionUrlAuthType,omitempty" tf:"function_url_auth_type,omitempty"`

	// AWS service or account that invokes the function (e.g., s3.amazonaws.com, sns.amazonaws.com, AWS account ID, or AWS IAM principal)
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// AWS Organizations ID to grant permission to all accounts under this organization
	// +kubebuilder:validation:Optional
	PrincipalOrgID *string `json:"principalOrgId,omitempty" tf:"principal_org_id,omitempty"`

	// Lambda function version or alias name
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/lambda/v1beta1.Alias
	// +kubebuilder:validation:Optional
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Reference to a Alias in lambda to populate qualifier.
	// +kubebuilder:validation:Optional
	QualifierRef *v1.NamespacedReference `json:"qualifierRef,omitempty" tf:"-"`

	// Selector for a Alias in lambda to populate qualifier.
	// +kubebuilder:validation:Optional
	QualifierSelector *v1.NamespacedSelector `json:"qualifierSelector,omitempty" tf:"-"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// AWS account ID of the source owner for cross-account access, S3, or SES
	// +kubebuilder:validation:Optional
	SourceAccount *string `json:"sourceAccount,omitempty" tf:"source_account,omitempty"`

	// ARN of the source resource granting permission to invoke the Lambda function
	// +kubebuilder:validation:Optional
	SourceArn *string `json:"sourceArn,omitempty" tf:"source_arn,omitempty"`

	// Statement identifier
	// +kubebuilder:validation:Optional
	StatementID *string `json:"statementId,omitempty" tf:"statement_id,omitempty"`

	// Statement identifier prefix. Conflicts with statement_id
	// +kubebuilder:validation:Optional
	StatementIDPrefix *string `json:"statementIdPrefix,omitempty" tf:"statement_id_prefix,omitempty"`
}

// PermissionSpec defines the desired state of Permission
type PermissionSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            PermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PermissionInitParameters `json:"initProvider,omitempty"`
}

// PermissionStatus defines the observed state of Permission.
type PermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Permission is the Schema for the Permissions API. Manages an AWS Lambda permission.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type Permission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	Spec   PermissionSpec   `json:"spec"`
	Status PermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionList contains a list of Permissions
type PermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permission `json:"items"`
}

// Repository type metadata.
var (
	Permission_Kind             = "Permission"
	Permission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permission_Kind}.String()
	Permission_KindAPIVersion   = Permission_Kind + "." + CRDGroupVersion.String()
	Permission_GroupVersionKind = CRDGroupVersion.WithKind(Permission_Kind)
)

func init() {
	SchemeBuilder.Register(&Permission{}, &PermissionList{})
}
