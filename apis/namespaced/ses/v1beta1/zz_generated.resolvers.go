// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *DomainMailFrom) ResolveReferences( // ResolveReferences of this DomainMailFrom.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "DomainIdentity", "DomainIdentityList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Domain),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DomainRef,
			Selector:     mg.Spec.ForProvider.DomainSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Domain")
	}
	mg.Spec.ForProvider.Domain = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "DomainIdentity", "DomainIdentityList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Domain),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DomainRef,
			Selector:     mg.Spec.InitProvider.DomainSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Domain")
	}
	mg.Spec.InitProvider.Domain = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EventDestination.
func (mg *EventDestination) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "ConfigurationSet", "ConfigurationSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConfigurationSetName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ConfigurationSetNameRef,
			Selector:     mg.Spec.ForProvider.ConfigurationSetNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConfigurationSetName")
	}
	mg.Spec.ForProvider.ConfigurationSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConfigurationSetNameRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.KinesisDestination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KinesisDestination.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.KinesisDestination.RoleArnRef,
				Selector:     mg.Spec.ForProvider.KinesisDestination.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KinesisDestination.RoleArn")
		}
		mg.Spec.ForProvider.KinesisDestination.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KinesisDestination.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.KinesisDestination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KinesisDestination.StreamArn),
				Extract:      resource.ExtractParamPath("arn", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.KinesisDestination.StreamArnRef,
				Selector:     mg.Spec.ForProvider.KinesisDestination.StreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KinesisDestination.StreamArn")
		}
		mg.Spec.ForProvider.KinesisDestination.StreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KinesisDestination.StreamArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.SnsDestination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("sns.aws.m.upbound.io", "v1beta1", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnsDestination.TopicArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.SnsDestination.TopicArnRef,
				Selector:     mg.Spec.ForProvider.SnsDestination.TopicArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SnsDestination.TopicArn")
		}
		mg.Spec.ForProvider.SnsDestination.TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SnsDestination.TopicArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "ConfigurationSet", "ConfigurationSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConfigurationSetName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ConfigurationSetNameRef,
			Selector:     mg.Spec.InitProvider.ConfigurationSetNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConfigurationSetName")
	}
	mg.Spec.InitProvider.ConfigurationSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConfigurationSetNameRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.KinesisDestination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KinesisDestination.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.KinesisDestination.RoleArnRef,
				Selector:     mg.Spec.InitProvider.KinesisDestination.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KinesisDestination.RoleArn")
		}
		mg.Spec.InitProvider.KinesisDestination.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KinesisDestination.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.KinesisDestination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KinesisDestination.StreamArn),
				Extract:      resource.ExtractParamPath("arn", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.KinesisDestination.StreamArnRef,
				Selector:     mg.Spec.InitProvider.KinesisDestination.StreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KinesisDestination.StreamArn")
		}
		mg.Spec.InitProvider.KinesisDestination.StreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KinesisDestination.StreamArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.SnsDestination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("sns.aws.m.upbound.io", "v1beta1", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnsDestination.TopicArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.SnsDestination.TopicArnRef,
				Selector:     mg.Spec.InitProvider.SnsDestination.TopicArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SnsDestination.TopicArn")
		}
		mg.Spec.InitProvider.SnsDestination.TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SnsDestination.TopicArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IdentityNotificationTopic.
func (mg *IdentityNotificationTopic) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "DomainIdentity", "DomainIdentityList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Identity),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.IdentityRef,
			Selector:     mg.Spec.ForProvider.IdentitySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Identity")
	}
	mg.Spec.ForProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IdentityRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sns.aws.m.upbound.io", "v1beta1", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TopicArnRef,
			Selector:     mg.Spec.ForProvider.TopicArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicArn")
	}
	mg.Spec.ForProvider.TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "DomainIdentity", "DomainIdentityList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Identity),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.IdentityRef,
			Selector:     mg.Spec.InitProvider.IdentitySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Identity")
	}
	mg.Spec.InitProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IdentityRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sns.aws.m.upbound.io", "v1beta1", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TopicArnRef,
			Selector:     mg.Spec.InitProvider.TopicArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicArn")
	}
	mg.Spec.InitProvider.TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityPolicy.
func (mg *IdentityPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "DomainIdentity", "DomainIdentityList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Identity),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.IdentityRef,
			Selector:     mg.Spec.ForProvider.IdentitySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Identity")
	}
	mg.Spec.ForProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IdentityRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("ses.aws.m.upbound.io", "v1beta1", "DomainIdentity", "DomainIdentityList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Identity),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.IdentityRef,
			Selector:     mg.Spec.InitProvider.IdentitySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Identity")
	}
	mg.Spec.InitProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IdentityRef = rsp.ResolvedReference

	return nil
}
