// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AccessPoint) ResolveReferences( // ResolveReferences of this AccessPoint.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Bucket),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BucketRef,
			Selector:     mg.Spec.ForProvider.BucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Bucket")
	}
	mg.Spec.ForProvider.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BucketRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "VPC", "VPCList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCConfiguration.VPCID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.VPCConfiguration.VPCIDRef,
				Selector:     mg.Spec.ForProvider.VPCConfiguration.VPCIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCConfiguration.VPCID")
		}
		mg.Spec.ForProvider.VPCConfiguration.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VPCConfiguration.VPCIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Bucket),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BucketRef,
			Selector:     mg.Spec.InitProvider.BucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Bucket")
	}
	mg.Spec.InitProvider.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BucketRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.VPCConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "VPC", "VPCList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCConfiguration.VPCID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.VPCConfiguration.VPCIDRef,
				Selector:     mg.Spec.InitProvider.VPCConfiguration.VPCIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCConfiguration.VPCID")
		}
		mg.Spec.InitProvider.VPCConfiguration.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VPCConfiguration.VPCIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this AccessPointPolicy.
func (mg *AccessPointPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("s3control.aws.m.upbound.io", "v1beta1", "AccessPoint", "AccessPointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessPointArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.AccessPointArnRef,
			Selector:     mg.Spec.ForProvider.AccessPointArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AccessPointArn")
	}
	mg.Spec.ForProvider.AccessPointArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccessPointArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("s3control.aws.m.upbound.io", "v1beta1", "AccessPoint", "AccessPointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessPointArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.AccessPointArnRef,
			Selector:     mg.Spec.InitProvider.AccessPointArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AccessPointArn")
	}
	mg.Spec.InitProvider.AccessPointArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AccessPointArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MultiRegionAccessPoint.
func (mg *MultiRegionAccessPoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Details != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Details.Region); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Details.Region[i4].Bucket),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Details.Region[i4].BucketRef,
					Selector:     mg.Spec.ForProvider.Details.Region[i4].BucketSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Details.Region[i4].Bucket")
			}
			mg.Spec.ForProvider.Details.Region[i4].Bucket = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Details.Region[i4].BucketRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this ObjectLambdaAccessPoint.
func (mg *ObjectLambdaAccessPoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Configuration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3control.aws.m.upbound.io", "v1beta1", "AccessPoint", "AccessPointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Configuration.SupportingAccessPoint),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Configuration.SupportingAccessPointRef,
				Selector:     mg.Spec.ForProvider.Configuration.SupportingAccessPointSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Configuration.SupportingAccessPoint")
		}
		mg.Spec.ForProvider.Configuration.SupportingAccessPoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Configuration.SupportingAccessPointRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Configuration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Configuration.TransformationConfiguration); i4++ {
			if mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation != nil {
				if mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda != nil {
					{
						m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArn),
							Extract:      resource.ExtractParamPath("arn", true),
							Namespace:    mg.GetNamespace(),
							Reference:    mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArnRef,
							Selector:     mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArn")
					}
					mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.Configuration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3control.aws.m.upbound.io", "v1beta1", "AccessPoint", "AccessPointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Configuration.SupportingAccessPoint),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Configuration.SupportingAccessPointRef,
				Selector:     mg.Spec.InitProvider.Configuration.SupportingAccessPointSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Configuration.SupportingAccessPoint")
		}
		mg.Spec.InitProvider.Configuration.SupportingAccessPoint = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Configuration.SupportingAccessPointRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Configuration != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Configuration.TransformationConfiguration); i4++ {
			if mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation != nil {
				if mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda != nil {
					{
						m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArn),
							Extract:      resource.ExtractParamPath("arn", true),
							Namespace:    mg.GetNamespace(),
							Reference:    mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArnRef,
							Selector:     mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArnSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArn")
					}
					mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Configuration.TransformationConfiguration[i4].ContentTransformation.AwsLambda.FunctionArnRef = rsp.ResolvedReference

				}
			}
		}
	}

	return nil
}

// ResolveReferences of this ObjectLambdaAccessPointPolicy.
func (mg *ObjectLambdaAccessPointPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("s3control.aws.m.upbound.io", "v1beta1", "ObjectLambdaAccessPoint", "ObjectLambdaAccessPointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("s3control.aws.m.upbound.io", "v1beta1", "ObjectLambdaAccessPoint", "ObjectLambdaAccessPointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StorageLensConfiguration.
func (mg *StorageLensConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.StorageLensConfiguration != nil {
		if mg.Spec.ForProvider.StorageLensConfiguration.DataExport != nil {
			if mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination.Arn),
						Extract:      resource.ExtractParamPath("arn", true),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination.ArnRef,
						Selector:     mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination.ArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination.Arn")
				}
				mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination.Arn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.StorageLensConfiguration.DataExport.S3BucketDestination.ArnRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.StorageLensConfiguration != nil {
		if mg.Spec.ForProvider.StorageLensConfiguration.Exclude != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.StorageLensConfiguration.Exclude.Buckets),
					Extract:       resource.ExtractParamPath("arn", true),
					Namespace:     mg.GetNamespace(),
					References:    mg.Spec.ForProvider.StorageLensConfiguration.Exclude.BucketsRefs,
					Selector:      mg.Spec.ForProvider.StorageLensConfiguration.Exclude.BucketsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.StorageLensConfiguration.Exclude.Buckets")
			}
			mg.Spec.ForProvider.StorageLensConfiguration.Exclude.Buckets = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.StorageLensConfiguration.Exclude.BucketsRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.InitProvider.StorageLensConfiguration != nil {
		if mg.Spec.InitProvider.StorageLensConfiguration.DataExport != nil {
			if mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination.Arn),
						Extract:      resource.ExtractParamPath("arn", true),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination.ArnRef,
						Selector:     mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination.ArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination.Arn")
				}
				mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination.Arn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.StorageLensConfiguration.DataExport.S3BucketDestination.ArnRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.StorageLensConfiguration != nil {
		if mg.Spec.InitProvider.StorageLensConfiguration.Exclude != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.StorageLensConfiguration.Exclude.Buckets),
					Extract:       resource.ExtractParamPath("arn", true),
					Namespace:     mg.GetNamespace(),
					References:    mg.Spec.InitProvider.StorageLensConfiguration.Exclude.BucketsRefs,
					Selector:      mg.Spec.InitProvider.StorageLensConfiguration.Exclude.BucketsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.StorageLensConfiguration.Exclude.Buckets")
			}
			mg.Spec.InitProvider.StorageLensConfiguration.Exclude.Buckets = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.StorageLensConfiguration.Exclude.BucketsRefs = mrsp.ResolvedReferences

		}
	}

	return nil
}
