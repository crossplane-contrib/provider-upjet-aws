// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Application) ResolveReferences( // ResolveReferences of this Application.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.CloudwatchLoggingOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Stream", "StreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArnRef,
				Selector:     mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArn")
		}
		mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudwatchLoggingOptions.LogStreamArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.CloudwatchLoggingOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudwatchLoggingOptions.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.CloudwatchLoggingOptions.RoleArnRef,
				Selector:     mg.Spec.ForProvider.CloudwatchLoggingOptions.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudwatchLoggingOptions.RoleArn")
		}
		mg.Spec.ForProvider.CloudwatchLoggingOptions.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudwatchLoggingOptions.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Inputs != nil {
		if mg.Spec.ForProvider.Inputs.KinesisStream != nil {
			{
				m, l, err = apisresolver.GetManagedResource("kinesis.aws.m.upbound.io", "v1beta1", "Stream", "StreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Inputs.KinesisStream.ResourceArn),
					Extract:      common.TerraformID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Inputs.KinesisStream.ResourceArnRef,
					Selector:     mg.Spec.ForProvider.Inputs.KinesisStream.ResourceArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Inputs.KinesisStream.ResourceArn")
			}
			mg.Spec.ForProvider.Inputs.KinesisStream.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Inputs.KinesisStream.ResourceArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Inputs != nil {
		if mg.Spec.ForProvider.Inputs.KinesisStream != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Inputs.KinesisStream.RoleArn),
					Extract:      common.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Inputs.KinesisStream.RoleArnRef,
					Selector:     mg.Spec.ForProvider.Inputs.KinesisStream.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Inputs.KinesisStream.RoleArn")
			}
			mg.Spec.ForProvider.Inputs.KinesisStream.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Inputs.KinesisStream.RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Outputs); i3++ {
		if mg.Spec.ForProvider.Outputs[i3].KinesisFirehose != nil {
			{
				m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.ResourceArn),
					Extract:      resource.ExtractParamPath("arn", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.ResourceArnRef,
					Selector:     mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.ResourceArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.ResourceArn")
			}
			mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.ResourceArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Outputs); i3++ {
		if mg.Spec.ForProvider.Outputs[i3].KinesisFirehose != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.RoleArnRef,
					Selector:     mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.RoleArn")
			}
			mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Outputs[i3].KinesisFirehose.RoleArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.CloudwatchLoggingOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Stream", "StreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArnRef,
				Selector:     mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArn")
		}
		mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudwatchLoggingOptions.LogStreamArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.CloudwatchLoggingOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudwatchLoggingOptions.RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.CloudwatchLoggingOptions.RoleArnRef,
				Selector:     mg.Spec.InitProvider.CloudwatchLoggingOptions.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudwatchLoggingOptions.RoleArn")
		}
		mg.Spec.InitProvider.CloudwatchLoggingOptions.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudwatchLoggingOptions.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Inputs != nil {
		if mg.Spec.InitProvider.Inputs.KinesisStream != nil {
			{
				m, l, err = apisresolver.GetManagedResource("kinesis.aws.m.upbound.io", "v1beta1", "Stream", "StreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Inputs.KinesisStream.ResourceArn),
					Extract:      common.TerraformID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Inputs.KinesisStream.ResourceArnRef,
					Selector:     mg.Spec.InitProvider.Inputs.KinesisStream.ResourceArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Inputs.KinesisStream.ResourceArn")
			}
			mg.Spec.InitProvider.Inputs.KinesisStream.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Inputs.KinesisStream.ResourceArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Inputs != nil {
		if mg.Spec.InitProvider.Inputs.KinesisStream != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Inputs.KinesisStream.RoleArn),
					Extract:      common.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Inputs.KinesisStream.RoleArnRef,
					Selector:     mg.Spec.InitProvider.Inputs.KinesisStream.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Inputs.KinesisStream.RoleArn")
			}
			mg.Spec.InitProvider.Inputs.KinesisStream.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Inputs.KinesisStream.RoleArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Outputs); i3++ {
		if mg.Spec.InitProvider.Outputs[i3].KinesisFirehose != nil {
			{
				m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.ResourceArn),
					Extract:      resource.ExtractParamPath("arn", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.ResourceArnRef,
					Selector:     mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.ResourceArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.ResourceArn")
			}
			mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.ResourceArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.ResourceArnRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Outputs); i3++ {
		if mg.Spec.InitProvider.Outputs[i3].KinesisFirehose != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.RoleArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.RoleArnRef,
					Selector:     mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.RoleArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.RoleArn")
			}
			mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Outputs[i3].KinesisFirehose.RoleArnRef = rsp.ResolvedReference

		}
	}

	return nil
}
