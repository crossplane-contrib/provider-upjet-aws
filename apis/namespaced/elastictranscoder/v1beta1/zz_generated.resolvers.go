// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Pipeline) ResolveReferences( // ResolveReferences of this Pipeline.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.ContentConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ContentConfig.Bucket),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.ContentConfig.BucketRef,
				Selector:     mg.Spec.ForProvider.ContentConfig.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ContentConfig.Bucket")
		}
		mg.Spec.ForProvider.ContentConfig.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ContentConfig.BucketRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InputBucket),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.InputBucketRef,
			Selector:     mg.Spec.ForProvider.InputBucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InputBucket")
	}
	mg.Spec.ForProvider.InputBucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InputBucketRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Role),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RoleRef,
			Selector:     mg.Spec.ForProvider.RoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Role")
	}
	mg.Spec.ForProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.ThumbnailConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ThumbnailConfig.Bucket),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.ThumbnailConfig.BucketRef,
				Selector:     mg.Spec.ForProvider.ThumbnailConfig.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ThumbnailConfig.Bucket")
		}
		mg.Spec.ForProvider.ThumbnailConfig.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ThumbnailConfig.BucketRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ContentConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ContentConfig.Bucket),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.ContentConfig.BucketRef,
				Selector:     mg.Spec.InitProvider.ContentConfig.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ContentConfig.Bucket")
		}
		mg.Spec.InitProvider.ContentConfig.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ContentConfig.BucketRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InputBucket),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.InputBucketRef,
			Selector:     mg.Spec.InitProvider.InputBucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InputBucket")
	}
	mg.Spec.InitProvider.InputBucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InputBucketRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Role),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RoleRef,
			Selector:     mg.Spec.InitProvider.RoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Role")
	}
	mg.Spec.InitProvider.Role = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.ThumbnailConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ThumbnailConfig.Bucket),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.ThumbnailConfig.BucketRef,
				Selector:     mg.Spec.InitProvider.ThumbnailConfig.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ThumbnailConfig.Bucket")
		}
		mg.Spec.InitProvider.ThumbnailConfig.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ThumbnailConfig.BucketRef = rsp.ResolvedReference

	}

	return nil
}
