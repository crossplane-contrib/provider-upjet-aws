// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/cluster/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ExperimentTemplate) ResolveReferences( // ResolveReferences of this ExperimentTemplate.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.ExperimentReportConfiguration != nil {
		if mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("cloudwatch.aws.m.upbound.io", "v1beta1", "Dashboard", "DashboardList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArn),
						Extract:      resource.ExtractParamPath("dashboard_arn", true),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArnRef,
						Selector:     mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArn")
				}
				mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArnRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.ExperimentReportConfiguration != nil {
		if mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs != nil {
			if mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketName),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketNameRef,
						Selector:     mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketName")
				}
				mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketNameRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.ExperimentReportConfiguration != nil {
		if mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("cloudwatch.aws.m.upbound.io", "v1beta1", "Dashboard", "DashboardList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArn),
						Extract:      resource.ExtractParamPath("dashboard_arn", true),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArnRef,
						Selector:     mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArnSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArn")
				}
				mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArn = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ExperimentReportConfiguration.DataSources.CloudwatchDashboard[i5].DashboardArnRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.ExperimentReportConfiguration != nil {
		if mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs != nil {
			if mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketName),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketNameRef,
						Selector:     mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketNameSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketName")
				}
				mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.ExperimentReportConfiguration.Outputs.S3Configuration.BucketNameRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}
