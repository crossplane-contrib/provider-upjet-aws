// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type QueryLogInitParameters struct {

	// CloudWatch log group ARN to send query logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/cloudwatchlogs/v1beta1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	CloudwatchLogGroupArn *string `json:"cloudwatchLogGroupArn,omitempty" tf:"cloudwatch_log_group_arn,omitempty"`

	// Reference to a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
	// +kubebuilder:validation:Optional
	CloudwatchLogGroupArnRef *v1.NamespacedReference `json:"cloudwatchLogGroupArnRef,omitempty" tf:"-"`

	// Selector for a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
	// +kubebuilder:validation:Optional
	CloudwatchLogGroupArnSelector *v1.NamespacedSelector `json:"cloudwatchLogGroupArnSelector,omitempty" tf:"-"`

	// Route53 hosted zone ID to enable query logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/route53/v1beta1.Zone
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("zone_id",true)
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in route53 to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.NamespacedReference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in route53 to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.NamespacedSelector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type QueryLogObservation struct {

	// The Amazon Resource Name (ARN) of the Query Logging Config.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// CloudWatch log group ARN to send query logs.
	CloudwatchLogGroupArn *string `json:"cloudwatchLogGroupArn,omitempty" tf:"cloudwatch_log_group_arn,omitempty"`

	// The query logging configuration ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Route53 hosted zone ID to enable query logs.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type QueryLogParameters struct {

	// CloudWatch log group ARN to send query logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/cloudwatchlogs/v1beta1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	CloudwatchLogGroupArn *string `json:"cloudwatchLogGroupArn,omitempty" tf:"cloudwatch_log_group_arn,omitempty"`

	// Reference to a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
	// +kubebuilder:validation:Optional
	CloudwatchLogGroupArnRef *v1.NamespacedReference `json:"cloudwatchLogGroupArnRef,omitempty" tf:"-"`

	// Selector for a Group in cloudwatchlogs to populate cloudwatchLogGroupArn.
	// +kubebuilder:validation:Optional
	CloudwatchLogGroupArnSelector *v1.NamespacedSelector `json:"cloudwatchLogGroupArnSelector,omitempty" tf:"-"`

	// Route53 hosted zone ID to enable query logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/route53/v1beta1.Zone
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("zone_id",true)
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in route53 to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.NamespacedReference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in route53 to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.NamespacedSelector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// QueryLogSpec defines the desired state of QueryLog
type QueryLogSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            QueryLogParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueryLogInitParameters `json:"initProvider,omitempty"`
}

// QueryLogStatus defines the observed state of QueryLog.
type QueryLogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueryLogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// QueryLog is the Schema for the QueryLogs API. Provides a Route53 query logging configuration resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type QueryLog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueryLogSpec   `json:"spec"`
	Status            QueryLogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueryLogList contains a list of QueryLogs
type QueryLogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueryLog `json:"items"`
}

// Repository type metadata.
var (
	QueryLog_Kind             = "QueryLog"
	QueryLog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueryLog_Kind}.String()
	QueryLog_KindAPIVersion   = QueryLog_Kind + "." + CRDGroupVersion.String()
	QueryLog_GroupVersionKind = CRDGroupVersion.WithKind(QueryLog_Kind)
)

func init() {
	SchemeBuilder.Register(&QueryLog{}, &QueryLogList{})
}
