// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AccountAssignment) ResolveReferences( // ResolveReferences of this AccountAssignment.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ssoadmin.aws.m.upbound.io", "v1beta1", "PermissionSet", "PermissionSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PermissionSetArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PermissionSetArnRef,
			Selector:     mg.Spec.ForProvider.PermissionSetArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PermissionSetArn")
	}
	mg.Spec.ForProvider.PermissionSetArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PermissionSetArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("identitystore.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrincipalID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PrincipalIDFromGroupRef,
			Selector:     mg.Spec.ForProvider.PrincipalIDFromGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrincipalID")
	}
	mg.Spec.ForProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrincipalIDFromGroupRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CustomerManagedPolicyAttachment.
func (mg *CustomerManagedPolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.CustomerManagedPolicyReference != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Policy", "PolicyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomerManagedPolicyReference.Name),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.CustomerManagedPolicyReference.PolicyNameRef,
				Selector:     mg.Spec.ForProvider.CustomerManagedPolicyReference.PolicyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomerManagedPolicyReference.Name")
		}
		mg.Spec.ForProvider.CustomerManagedPolicyReference.Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomerManagedPolicyReference.PolicyNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("ssoadmin.aws.m.upbound.io", "v1beta1", "PermissionSet", "PermissionSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PermissionSetArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PermissionSetArnRef,
			Selector:     mg.Spec.ForProvider.PermissionSetArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PermissionSetArn")
	}
	mg.Spec.ForProvider.PermissionSetArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PermissionSetArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.CustomerManagedPolicyReference != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Policy", "PolicyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CustomerManagedPolicyReference.Name),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.CustomerManagedPolicyReference.PolicyNameRef,
				Selector:     mg.Spec.InitProvider.CustomerManagedPolicyReference.PolicyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CustomerManagedPolicyReference.Name")
		}
		mg.Spec.InitProvider.CustomerManagedPolicyReference.Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CustomerManagedPolicyReference.PolicyNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedPolicyAttachment.
func (mg *ManagedPolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ssoadmin.aws.m.upbound.io", "v1beta1", "PermissionSet", "PermissionSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PermissionSetArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PermissionSetArnRef,
			Selector:     mg.Spec.ForProvider.PermissionSetArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PermissionSetArn")
	}
	mg.Spec.ForProvider.PermissionSetArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PermissionSetArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PermissionSetInlinePolicy.
func (mg *PermissionSetInlinePolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ssoadmin.aws.m.upbound.io", "v1beta1", "PermissionSet", "PermissionSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PermissionSetArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PermissionSetArnRef,
			Selector:     mg.Spec.ForProvider.PermissionSetArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PermissionSetArn")
	}
	mg.Spec.ForProvider.PermissionSetArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PermissionSetArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PermissionsBoundaryAttachment.
func (mg *PermissionsBoundaryAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("ssoadmin.aws.m.upbound.io", "v1beta1", "PermissionSet", "PermissionSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PermissionSetArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PermissionSetArnRef,
			Selector:     mg.Spec.ForProvider.PermissionSetArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PermissionSetArn")
	}
	mg.Spec.ForProvider.PermissionSetArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PermissionSetArnRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.PermissionsBoundary != nil {
		if mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Policy", "PolicyList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference.Name),
					Extract:      reference.ExternalName(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference.NameRef,
					Selector:     mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference.NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference.Name")
			}
			mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PermissionsBoundary.CustomerManagedPolicyReference.NameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.PermissionsBoundary != nil {
		if mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference != nil {
			{
				m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Policy", "PolicyList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference.Name),
					Extract:      reference.ExternalName(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference.NameRef,
					Selector:     mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference.NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference.Name")
			}
			mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PermissionsBoundary.CustomerManagedPolicyReference.NameRef = rsp.ResolvedReference

		}
	}

	return nil
}
