// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/cluster/common"
	common1 "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *IdentityProvider) ResolveReferences( // ResolveReferences of this IdentityProvider.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ResourceServer.
func (mg *ResourceServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RiskConfiguration.
func (mg *RiskConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this User.
func (mg *User) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserGroup.
func (mg *UserGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserInGroup.
func (mg *UserInGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserGroup", "UserGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.GroupNameRef,
			Selector:     mg.Spec.ForProvider.GroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupName")
	}
	mg.Spec.ForProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Username),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UsernameRef,
			Selector:     mg.Spec.ForProvider.UsernameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Username")
	}
	mg.Spec.ForProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsernameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserGroup", "UserGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.GroupNameRef,
			Selector:     mg.Spec.InitProvider.GroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupName")
	}
	mg.Spec.InitProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Username),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UsernameRef,
			Selector:     mg.Spec.InitProvider.UsernameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Username")
	}
	mg.Spec.InitProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UsernameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPool.
func (mg *UserPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.CreateAuthChallenge),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.CreateAuthChallengeRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.CreateAuthChallengeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.CreateAuthChallenge")
		}
		mg.Spec.ForProvider.LambdaConfig.CreateAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.CreateAuthChallengeRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		if mg.Spec.ForProvider.LambdaConfig.CustomEmailSender != nil {
			{
				m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaArn),
					Extract:      common1.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaArnRef,
					Selector:     mg.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaArn")
			}
			mg.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.CustomMessage),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.CustomMessageRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.CustomMessageSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.CustomMessage")
		}
		mg.Spec.ForProvider.LambdaConfig.CustomMessage = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.CustomMessageRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		if mg.Spec.ForProvider.LambdaConfig.CustomSMSSender != nil {
			{
				m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaArn),
					Extract:      common1.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaArnRef,
					Selector:     mg.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaArn")
			}
			mg.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.DefineAuthChallenge),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.DefineAuthChallengeRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.DefineAuthChallengeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.DefineAuthChallenge")
		}
		mg.Spec.ForProvider.LambdaConfig.DefineAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.DefineAuthChallengeRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.m.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.KMSKeyID),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.KMSKeyIDRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.KMSKeyIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.KMSKeyID")
		}
		mg.Spec.ForProvider.LambdaConfig.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.KMSKeyIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.PostAuthentication),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.PostAuthenticationRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.PostAuthenticationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.PostAuthentication")
		}
		mg.Spec.ForProvider.LambdaConfig.PostAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.PostAuthenticationRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.PostConfirmation),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.PostConfirmationRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.PostConfirmationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.PostConfirmation")
		}
		mg.Spec.ForProvider.LambdaConfig.PostConfirmation = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.PostConfirmationRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.PreAuthentication),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.PreAuthenticationRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.PreAuthenticationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.PreAuthentication")
		}
		mg.Spec.ForProvider.LambdaConfig.PreAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.PreAuthenticationRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.PreSignUp),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.PreSignUpRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.PreSignUpSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.PreSignUp")
		}
		mg.Spec.ForProvider.LambdaConfig.PreSignUp = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.PreSignUpRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.PreTokenGeneration),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.PreTokenGenerationRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.PreTokenGenerationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.PreTokenGeneration")
		}
		mg.Spec.ForProvider.LambdaConfig.PreTokenGeneration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.PreTokenGenerationRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.UserMigration),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.UserMigrationRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.UserMigrationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.UserMigration")
		}
		mg.Spec.ForProvider.LambdaConfig.UserMigration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.UserMigrationRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponseRef,
				Selector:     mg.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponseSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse")
		}
		mg.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponseRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.SMSConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SMSConfiguration.SnsCallerArn),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.SMSConfiguration.SnsCallerArnRef,
				Selector:     mg.Spec.ForProvider.SMSConfiguration.SnsCallerArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SMSConfiguration.SnsCallerArn")
		}
		mg.Spec.ForProvider.SMSConfiguration.SnsCallerArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SMSConfiguration.SnsCallerArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.CreateAuthChallenge),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.CreateAuthChallengeRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.CreateAuthChallengeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.CreateAuthChallenge")
		}
		mg.Spec.InitProvider.LambdaConfig.CreateAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.CreateAuthChallengeRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		if mg.Spec.InitProvider.LambdaConfig.CustomEmailSender != nil {
			{
				m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.CustomEmailSender.LambdaArn),
					Extract:      common1.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.LambdaConfig.CustomEmailSender.LambdaArnRef,
					Selector:     mg.Spec.InitProvider.LambdaConfig.CustomEmailSender.LambdaArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.CustomEmailSender.LambdaArn")
			}
			mg.Spec.InitProvider.LambdaConfig.CustomEmailSender.LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LambdaConfig.CustomEmailSender.LambdaArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.CustomMessage),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.CustomMessageRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.CustomMessageSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.CustomMessage")
		}
		mg.Spec.InitProvider.LambdaConfig.CustomMessage = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.CustomMessageRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		if mg.Spec.InitProvider.LambdaConfig.CustomSMSSender != nil {
			{
				m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.CustomSMSSender.LambdaArn),
					Extract:      common1.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.LambdaConfig.CustomSMSSender.LambdaArnRef,
					Selector:     mg.Spec.InitProvider.LambdaConfig.CustomSMSSender.LambdaArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.CustomSMSSender.LambdaArn")
			}
			mg.Spec.InitProvider.LambdaConfig.CustomSMSSender.LambdaArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LambdaConfig.CustomSMSSender.LambdaArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.DefineAuthChallenge),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.DefineAuthChallengeRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.DefineAuthChallengeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.DefineAuthChallenge")
		}
		mg.Spec.InitProvider.LambdaConfig.DefineAuthChallenge = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.DefineAuthChallengeRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.m.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.KMSKeyID),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.KMSKeyIDRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.KMSKeyIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.KMSKeyID")
		}
		mg.Spec.InitProvider.LambdaConfig.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.KMSKeyIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.PostAuthentication),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.PostAuthenticationRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.PostAuthenticationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.PostAuthentication")
		}
		mg.Spec.InitProvider.LambdaConfig.PostAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.PostAuthenticationRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.PostConfirmation),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.PostConfirmationRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.PostConfirmationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.PostConfirmation")
		}
		mg.Spec.InitProvider.LambdaConfig.PostConfirmation = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.PostConfirmationRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.PreAuthentication),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.PreAuthenticationRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.PreAuthenticationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.PreAuthentication")
		}
		mg.Spec.InitProvider.LambdaConfig.PreAuthentication = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.PreAuthenticationRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.PreSignUp),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.PreSignUpRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.PreSignUpSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.PreSignUp")
		}
		mg.Spec.InitProvider.LambdaConfig.PreSignUp = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.PreSignUpRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.PreTokenGeneration),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.PreTokenGenerationRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.PreTokenGenerationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.PreTokenGeneration")
		}
		mg.Spec.InitProvider.LambdaConfig.PreTokenGeneration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.PreTokenGenerationRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.UserMigration),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.UserMigrationRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.UserMigrationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.UserMigration")
		}
		mg.Spec.InitProvider.LambdaConfig.UserMigration = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.UserMigrationRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LambdaConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("lambda.aws.m.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LambdaConfig.VerifyAuthChallengeResponse),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LambdaConfig.VerifyAuthChallengeResponseRef,
				Selector:     mg.Spec.InitProvider.LambdaConfig.VerifyAuthChallengeResponseSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LambdaConfig.VerifyAuthChallengeResponse")
		}
		mg.Spec.InitProvider.LambdaConfig.VerifyAuthChallengeResponse = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LambdaConfig.VerifyAuthChallengeResponseRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.SMSConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SMSConfiguration.SnsCallerArn),
				Extract:      common1.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.SMSConfiguration.SnsCallerArnRef,
				Selector:     mg.Spec.InitProvider.SMSConfiguration.SnsCallerArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SMSConfiguration.SnsCallerArn")
		}
		mg.Spec.InitProvider.SMSConfiguration.SnsCallerArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SMSConfiguration.SnsCallerArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this UserPoolClient.
func (mg *UserPoolClient) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AnalyticsConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("pinpoint.aws.m.upbound.io", "v1beta1", "App", "AppList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationID),
				Extract:      resource.ExtractParamPath("application_id", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationIDRef,
				Selector:     mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationID")
		}
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].ApplicationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.AnalyticsConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArn")
		}
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AnalyticsConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.AnalyticsConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("pinpoint.aws.m.upbound.io", "v1beta1", "App", "AppList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationID),
				Extract:      resource.ExtractParamPath("application_id", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationIDRef,
				Selector:     mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationID")
		}
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].ApplicationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AnalyticsConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArnRef,
				Selector:     mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArn")
		}
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AnalyticsConfiguration[i3].RoleArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPoolDomain.
func (mg *UserPoolDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("acm.aws.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CertificateArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CertificateArnRef,
			Selector:     mg.Spec.ForProvider.CertificateArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CertificateArn")
	}
	mg.Spec.ForProvider.CertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CertificateArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("acm.aws.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CertificateArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CertificateArnRef,
			Selector:     mg.Spec.InitProvider.CertificateArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CertificateArn")
	}
	mg.Spec.InitProvider.CertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CertificateArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPoolUICustomization.
func (mg *UserPoolUICustomization) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPoolClient", "UserPoolClientList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClientID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ClientIDRef,
			Selector:     mg.Spec.ForProvider.ClientIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClientID")
	}
	mg.Spec.ForProvider.ClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClientIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.UserPoolIDRef,
			Selector:     mg.Spec.ForProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolID")
	}
	mg.Spec.ForProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPoolClient", "UserPoolClientList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClientID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ClientIDRef,
			Selector:     mg.Spec.InitProvider.ClientIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClientID")
	}
	mg.Spec.InitProvider.ClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClientIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.m.upbound.io", "v1beta1", "UserPool", "UserPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.UserPoolIDRef,
			Selector:     mg.Spec.InitProvider.UserPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolID")
	}
	mg.Spec.InitProvider.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserPoolIDRef = rsp.ResolvedReference

	return nil
}
