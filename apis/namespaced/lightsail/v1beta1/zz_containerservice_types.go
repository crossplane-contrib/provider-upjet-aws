// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ContainerServiceInitParameters struct {

	// Whether to disable the container service. Defaults to false.
	IsDisabled *bool `json:"isDisabled,omitempty" tf:"is_disabled,omitempty"`

	// Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: nano, micro, small, medium, large, xlarge.
	Power *string `json:"power,omitempty" tf:"power,omitempty"`

	// Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
	PrivateRegistryAccess *PrivateRegistryAccessInitParameters `json:"privateRegistryAccess,omitempty" tf:"private_registry_access,omitempty"`

	// Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. See below.
	PublicDomainNames *PublicDomainNamesInitParameters `json:"publicDomainNames,omitempty" tf:"public_domain_names,omitempty"`

	// Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ContainerServiceObservation struct {

	// ARN of the container service.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Availability Zone. Follows the format us-east-2a (case-sensitive).
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Date and time when the container service was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Same as name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether to disable the container service. Defaults to false.
	IsDisabled *bool `json:"isDisabled,omitempty" tf:"is_disabled,omitempty"`

	// Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: nano, micro, small, medium, large, xlarge.
	Power *string `json:"power,omitempty" tf:"power,omitempty"`

	// Power ID of the container service.
	PowerID *string `json:"powerId,omitempty" tf:"power_id,omitempty"`

	// Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service. This allows you to give your service permission to access resources in your standard AWS account.
	PrincipalArn *string `json:"principalArn,omitempty" tf:"principal_arn,omitempty"`

	// Private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
	PrivateDomainName *string `json:"privateDomainName,omitempty" tf:"private_domain_name,omitempty"`

	// Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
	PrivateRegistryAccess *PrivateRegistryAccessObservation `json:"privateRegistryAccess,omitempty" tf:"private_registry_access,omitempty"`

	// Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. See below.
	PublicDomainNames *PublicDomainNamesObservation `json:"publicDomainNames,omitempty" tf:"public_domain_names,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Lightsail resource type of the container service (i.e., ContainerService).
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`

	// Current state of the container service.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ContainerServiceParameters struct {

	// Whether to disable the container service. Defaults to false.
	// +kubebuilder:validation:Optional
	IsDisabled *bool `json:"isDisabled,omitempty" tf:"is_disabled,omitempty"`

	// Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: nano, micro, small, medium, large, xlarge.
	// +kubebuilder:validation:Optional
	Power *string `json:"power,omitempty" tf:"power,omitempty"`

	// Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
	// +kubebuilder:validation:Optional
	PrivateRegistryAccess *PrivateRegistryAccessParameters `json:"privateRegistryAccess,omitempty" tf:"private_registry_access,omitempty"`

	// Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. See below.
	// +kubebuilder:validation:Optional
	PublicDomainNames *PublicDomainNamesParameters `json:"publicDomainNames,omitempty" tf:"public_domain_names,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.
	// +kubebuilder:validation:Optional
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type EcrImagePullerRoleInitParameters struct {

	// Whether to activate the role. Defaults to false.
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`
}

type EcrImagePullerRoleObservation struct {

	// Whether to activate the role. Defaults to false.
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service. This allows you to give your service permission to access resources in your standard AWS account.
	PrincipalArn *string `json:"principalArn,omitempty" tf:"principal_arn,omitempty"`
}

type EcrImagePullerRoleParameters struct {

	// Whether to activate the role. Defaults to false.
	// +kubebuilder:validation:Optional
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`
}

type PrivateRegistryAccessInitParameters struct {

	// Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
	EcrImagePullerRole *EcrImagePullerRoleInitParameters `json:"ecrImagePullerRole,omitempty" tf:"ecr_image_puller_role,omitempty"`
}

type PrivateRegistryAccessObservation struct {

	// Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
	EcrImagePullerRole *EcrImagePullerRoleObservation `json:"ecrImagePullerRole,omitempty" tf:"ecr_image_puller_role,omitempty"`
}

type PrivateRegistryAccessParameters struct {

	// Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
	// +kubebuilder:validation:Optional
	EcrImagePullerRole *EcrImagePullerRoleParameters `json:"ecrImagePullerRole,omitempty" tf:"ecr_image_puller_role,omitempty"`
}

type PublicDomainNamesCertificateInitParameters struct {

	// Name of the certificate.
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// List of domain names for the certificate.
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`
}

type PublicDomainNamesCertificateObservation struct {

	// Name of the certificate.
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// List of domain names for the certificate.
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`
}

type PublicDomainNamesCertificateParameters struct {

	// Name of the certificate.
	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName" tf:"certificate_name,omitempty"`

	// List of domain names for the certificate.
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames" tf:"domain_names,omitempty"`
}

type PublicDomainNamesInitParameters struct {

	// Set of certificate configurations for the public domain names. Each element contains the following attributes:
	Certificate []PublicDomainNamesCertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`
}

type PublicDomainNamesObservation struct {

	// Set of certificate configurations for the public domain names. Each element contains the following attributes:
	Certificate []PublicDomainNamesCertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`
}

type PublicDomainNamesParameters struct {

	// Set of certificate configurations for the public domain names. Each element contains the following attributes:
	// +kubebuilder:validation:Optional
	Certificate []PublicDomainNamesCertificateParameters `json:"certificate" tf:"certificate,omitempty"`
}

// ContainerServiceSpec defines the desired state of ContainerService
type ContainerServiceSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ContainerServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerServiceInitParameters `json:"initProvider,omitempty"`
}

// ContainerServiceStatus defines the observed state of ContainerService.
type ContainerServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContainerService is the Schema for the ContainerServices API. Manages a Lightsail container service for running containerized applications.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type ContainerService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.power) || (has(self.initProvider) && has(self.initProvider.power))",message="spec.forProvider.power is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scale) || (has(self.initProvider) && has(self.initProvider.scale))",message="spec.forProvider.scale is a required parameter"
	Spec   ContainerServiceSpec   `json:"spec"`
	Status ContainerServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerServiceList contains a list of ContainerServices
type ContainerServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerService `json:"items"`
}

// Repository type metadata.
var (
	ContainerService_Kind             = "ContainerService"
	ContainerService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerService_Kind}.String()
	ContainerService_KindAPIVersion   = ContainerService_Kind + "." + CRDGroupVersion.String()
	ContainerService_GroupVersionKind = CRDGroupVersion.WithKind(ContainerService_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerService{}, &ContainerServiceList{})
}
