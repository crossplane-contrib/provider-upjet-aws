// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common1 "github.com/upbound/provider-aws/config/cluster/common"
	common "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Build) ResolveReferences( // ResolveReferences of this Build.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation.Bucket),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.StorageLocation.BucketRef,
				Selector:     mg.Spec.ForProvider.StorageLocation.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation.Bucket")
		}
		mg.Spec.ForProvider.StorageLocation.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageLocation.BucketRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Object", "ObjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation.Key),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.StorageLocation.KeyRef,
				Selector:     mg.Spec.ForProvider.StorageLocation.KeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation.Key")
		}
		mg.Spec.ForProvider.StorageLocation.Key = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageLocation.KeyRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation.RoleArn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.StorageLocation.RoleArnRef,
				Selector:     mg.Spec.ForProvider.StorageLocation.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation.RoleArn")
		}
		mg.Spec.ForProvider.StorageLocation.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageLocation.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation.Bucket),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.StorageLocation.BucketRef,
				Selector:     mg.Spec.InitProvider.StorageLocation.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation.Bucket")
		}
		mg.Spec.InitProvider.StorageLocation.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageLocation.BucketRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Object", "ObjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation.Key),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.StorageLocation.KeyRef,
				Selector:     mg.Spec.InitProvider.StorageLocation.KeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation.Key")
		}
		mg.Spec.InitProvider.StorageLocation.Key = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageLocation.KeyRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation.RoleArn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.StorageLocation.RoleArnRef,
				Selector:     mg.Spec.InitProvider.StorageLocation.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation.RoleArn")
		}
		mg.Spec.InitProvider.StorageLocation.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageLocation.RoleArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Fleet.
func (mg *Fleet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("gamelift.aws.m.upbound.io", "v1beta1", "Build", "BuildList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BuildID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BuildIDRef,
			Selector:     mg.Spec.ForProvider.BuildIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BuildID")
	}
	mg.Spec.ForProvider.BuildID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BuildIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceRoleArn),
			Extract:      common1.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.InstanceRoleArnRef,
			Selector:     mg.Spec.ForProvider.InstanceRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceRoleArn")
	}
	mg.Spec.ForProvider.InstanceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceRoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("gamelift.aws.m.upbound.io", "v1beta1", "Build", "BuildList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BuildID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BuildIDRef,
			Selector:     mg.Spec.InitProvider.BuildIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BuildID")
	}
	mg.Spec.InitProvider.BuildID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BuildIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceRoleArn),
			Extract:      common1.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.InstanceRoleArnRef,
			Selector:     mg.Spec.InitProvider.InstanceRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceRoleArn")
	}
	mg.Spec.InitProvider.InstanceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceRoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GameSessionQueue.
func (mg *GameSessionQueue) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("gamelift.aws.m.upbound.io", "v1beta1", "Fleet", "FleetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Destinations),
			Extract:       resource.ExtractParamPath("arn", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.DestinationsRefs,
			Selector:      mg.Spec.ForProvider.DestinationsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Destinations")
	}
	mg.Spec.ForProvider.Destinations = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.DestinationsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("sns.aws.m.upbound.io", "v1beta1", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NotificationTarget),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NotificationTargetRef,
			Selector:     mg.Spec.ForProvider.NotificationTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NotificationTarget")
	}
	mg.Spec.ForProvider.NotificationTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NotificationTargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("gamelift.aws.m.upbound.io", "v1beta1", "Fleet", "FleetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Destinations),
			Extract:       resource.ExtractParamPath("arn", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.DestinationsRefs,
			Selector:      mg.Spec.InitProvider.DestinationsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Destinations")
	}
	mg.Spec.InitProvider.Destinations = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.DestinationsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("sns.aws.m.upbound.io", "v1beta1", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NotificationTarget),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NotificationTargetRef,
			Selector:     mg.Spec.InitProvider.NotificationTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NotificationTarget")
	}
	mg.Spec.InitProvider.NotificationTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NotificationTargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Script.
func (mg *Script) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation.Bucket),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.StorageLocation.BucketRef,
				Selector:     mg.Spec.ForProvider.StorageLocation.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation.Bucket")
		}
		mg.Spec.ForProvider.StorageLocation.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageLocation.BucketRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Object", "ObjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation.Key),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.StorageLocation.KeyRef,
				Selector:     mg.Spec.ForProvider.StorageLocation.KeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation.Key")
		}
		mg.Spec.ForProvider.StorageLocation.Key = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageLocation.KeyRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation.RoleArn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.StorageLocation.RoleArnRef,
				Selector:     mg.Spec.ForProvider.StorageLocation.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation.RoleArn")
		}
		mg.Spec.ForProvider.StorageLocation.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageLocation.RoleArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation.Bucket),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.StorageLocation.BucketRef,
				Selector:     mg.Spec.InitProvider.StorageLocation.BucketSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation.Bucket")
		}
		mg.Spec.InitProvider.StorageLocation.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageLocation.BucketRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Object", "ObjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation.Key),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.StorageLocation.KeyRef,
				Selector:     mg.Spec.InitProvider.StorageLocation.KeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation.Key")
		}
		mg.Spec.InitProvider.StorageLocation.Key = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageLocation.KeyRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageLocation != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation.RoleArn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.StorageLocation.RoleArnRef,
				Selector:     mg.Spec.InitProvider.StorageLocation.RoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation.RoleArn")
		}
		mg.Spec.InitProvider.StorageLocation.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageLocation.RoleArnRef = rsp.ResolvedReference

	}

	return nil
}
