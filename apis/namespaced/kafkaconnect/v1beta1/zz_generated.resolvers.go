// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common1 "github.com/upbound/provider-aws/config/cluster/common"
	common "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Connector) ResolveReferences( // ResolveReferences of this Connector.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.KafkaCluster != nil {
		if mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster != nil {
			if mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC != nil {
				{
					m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroups),
						Extract:       reference.ExternalName(),
						Namespace:     mg.GetNamespace(),
						References:    mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroupRefs,
						Selector:      mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroupSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroups")
				}
				mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroupRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.ForProvider.KafkaCluster != nil {
		if mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster != nil {
			if mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC != nil {
				{
					m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.Subnets),
						Extract:       reference.ExternalName(),
						Namespace:     mg.GetNamespace(),
						References:    mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SubnetRefs,
						Selector:      mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SubnetSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.Subnets")
				}
				mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.Subnets = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.ForProvider.KafkaCluster.ApacheKafkaCluster.VPC.SubnetRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.ForProvider.LogDelivery != nil {
		if mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery != nil {
			if mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs != nil {
				{
					m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroup),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroupRef,
						Selector:     mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroupSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroup")
				}
				mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroup = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroupRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.LogDelivery != nil {
		if mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery != nil {
			if mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose != nil {
				{
					m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStream),
						Extract:      resource.ExtractParamPath("name", true),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStreamRef,
						Selector:     mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStreamSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStream")
				}
				mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStream = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStreamRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.LogDelivery != nil {
		if mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery != nil {
			if mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3.Bucket),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3.BucketRef,
						Selector:     mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3.BucketSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3.Bucket")
				}
				mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.LogDelivery.WorkerLogDelivery.S3.BucketRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Plugin); i3++ {
		if mg.Spec.ForProvider.Plugin[i3].CustomPlugin != nil {
			{
				m, l, err = apisresolver.GetManagedResource("kafkaconnect.aws.m.upbound.io", "v1beta1", "CustomPlugin", "CustomPluginList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Plugin[i3].CustomPlugin.Arn),
					Extract:      common.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Plugin[i3].CustomPlugin.ArnRef,
					Selector:     mg.Spec.ForProvider.Plugin[i3].CustomPlugin.ArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Plugin[i3].CustomPlugin.Arn")
			}
			mg.Spec.ForProvider.Plugin[i3].CustomPlugin.Arn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Plugin[i3].CustomPlugin.ArnRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceExecutionRoleArn),
			Extract:      common1.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ServiceExecutionRoleArnRef,
			Selector:     mg.Spec.ForProvider.ServiceExecutionRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceExecutionRoleArn")
	}
	mg.Spec.ForProvider.ServiceExecutionRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceExecutionRoleArnRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.WorkerConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kafkaconnect.aws.m.upbound.io", "v1beta1", "WorkerConfiguration", "WorkerConfigurationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WorkerConfiguration.Arn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.WorkerConfiguration.ArnRef,
				Selector:     mg.Spec.ForProvider.WorkerConfiguration.ArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.WorkerConfiguration.Arn")
		}
		mg.Spec.ForProvider.WorkerConfiguration.Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.WorkerConfiguration.ArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.KafkaCluster != nil {
		if mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster != nil {
			if mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC != nil {
				{
					m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroups),
						Extract:       reference.ExternalName(),
						Namespace:     mg.GetNamespace(),
						References:    mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroupRefs,
						Selector:      mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroupSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroups")
				}
				mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SecurityGroupRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.InitProvider.KafkaCluster != nil {
		if mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster != nil {
			if mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC != nil {
				{
					m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.Subnets),
						Extract:       reference.ExternalName(),
						Namespace:     mg.GetNamespace(),
						References:    mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SubnetRefs,
						Selector:      mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SubnetSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.Subnets")
				}
				mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.Subnets = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.InitProvider.KafkaCluster.ApacheKafkaCluster.VPC.SubnetRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.InitProvider.LogDelivery != nil {
		if mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery != nil {
			if mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs != nil {
				{
					m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroup),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroupRef,
						Selector:     mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroupSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroup")
				}
				mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroup = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.CloudwatchLogs.LogGroupRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.LogDelivery != nil {
		if mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery != nil {
			if mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose != nil {
				{
					m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStream),
						Extract:      resource.ExtractParamPath("name", true),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStreamRef,
						Selector:     mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStreamSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStream")
				}
				mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStream = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.Firehose.DeliveryStreamRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.LogDelivery != nil {
		if mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery != nil {
			if mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3 != nil {
				{
					m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3.Bucket),
						Extract:      reference.ExternalName(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3.BucketRef,
						Selector:     mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3.BucketSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3.Bucket")
				}
				mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.LogDelivery.WorkerLogDelivery.S3.BucketRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Plugin); i3++ {
		if mg.Spec.InitProvider.Plugin[i3].CustomPlugin != nil {
			{
				m, l, err = apisresolver.GetManagedResource("kafkaconnect.aws.m.upbound.io", "v1beta1", "CustomPlugin", "CustomPluginList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Plugin[i3].CustomPlugin.Arn),
					Extract:      common.ARNExtractor(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Plugin[i3].CustomPlugin.ArnRef,
					Selector:     mg.Spec.InitProvider.Plugin[i3].CustomPlugin.ArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Plugin[i3].CustomPlugin.Arn")
			}
			mg.Spec.InitProvider.Plugin[i3].CustomPlugin.Arn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Plugin[i3].CustomPlugin.ArnRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceExecutionRoleArn),
			Extract:      common1.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ServiceExecutionRoleArnRef,
			Selector:     mg.Spec.InitProvider.ServiceExecutionRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceExecutionRoleArn")
	}
	mg.Spec.InitProvider.ServiceExecutionRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceExecutionRoleArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.WorkerConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kafkaconnect.aws.m.upbound.io", "v1beta1", "WorkerConfiguration", "WorkerConfigurationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WorkerConfiguration.Arn),
				Extract:      common.ARNExtractor(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.WorkerConfiguration.ArnRef,
				Selector:     mg.Spec.InitProvider.WorkerConfiguration.ArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.WorkerConfiguration.Arn")
		}
		mg.Spec.InitProvider.WorkerConfiguration.Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.WorkerConfiguration.ArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this CustomPlugin.
func (mg *CustomPlugin) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Location != nil {
		if mg.Spec.ForProvider.Location.S3 != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Location.S3.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Location.S3.BucketArnRef,
					Selector:     mg.Spec.ForProvider.Location.S3.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Location.S3.BucketArn")
			}
			mg.Spec.ForProvider.Location.S3.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Location.S3.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Location != nil {
		if mg.Spec.ForProvider.Location.S3 != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Object", "ObjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Location.S3.FileKey),
					Extract:      resource.ExtractParamPath("key", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Location.S3.FileKeyRef,
					Selector:     mg.Spec.ForProvider.Location.S3.FileKeySelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Location.S3.FileKey")
			}
			mg.Spec.ForProvider.Location.S3.FileKey = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Location.S3.FileKeyRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Location != nil {
		if mg.Spec.InitProvider.Location.S3 != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Location.S3.BucketArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Location.S3.BucketArnRef,
					Selector:     mg.Spec.InitProvider.Location.S3.BucketArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Location.S3.BucketArn")
			}
			mg.Spec.InitProvider.Location.S3.BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Location.S3.BucketArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Location != nil {
		if mg.Spec.InitProvider.Location.S3 != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Object", "ObjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Location.S3.FileKey),
					Extract:      resource.ExtractParamPath("key", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Location.S3.FileKeyRef,
					Selector:     mg.Spec.InitProvider.Location.S3.FileKeySelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Location.S3.FileKey")
			}
			mg.Spec.InitProvider.Location.S3.FileKey = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Location.S3.FileKeyRef = rsp.ResolvedReference

		}
	}

	return nil
}
