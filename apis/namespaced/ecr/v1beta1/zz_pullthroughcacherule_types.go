// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type PullThroughCacheRuleInitParameters struct {

	// ARN of the Secret which will be used to authenticate against the registry.
	CredentialArn *string `json:"credentialArn,omitempty" tf:"credential_arn,omitempty"`

	// The ARN of the IAM role associated with the pull through cache rule. Must be specified if the upstream registry is a cross-account ECR private registry. See AWS Document - Setting up permissions for cross-account ECR to ECR PTC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	CustomRoleArn *string `json:"customRoleArn,omitempty" tf:"custom_role_arn,omitempty"`

	// Reference to a Role in iam to populate customRoleArn.
	// +kubebuilder:validation:Optional
	CustomRoleArnRef *v1.NamespacedReference `json:"customRoleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate customRoleArn.
	// +kubebuilder:validation:Optional
	CustomRoleArnSelector *v1.NamespacedSelector `json:"customRoleArnSelector,omitempty" tf:"-"`

	// The repository name prefix to use when caching images from the source registry. Use ROOT as the prefix to apply a template to all repositories in your registry that don't have an associated pull through cache rule.
	EcrRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty" tf:"ecr_repository_prefix,omitempty"`

	// The registry URL of the upstream registry to use as the source.
	UpstreamRegistryURL *string `json:"upstreamRegistryUrl,omitempty" tf:"upstream_registry_url,omitempty"`

	// The upstream repository prefix associated with the pull through cache rule. Used if the upstream registry is an ECR private registry. If not specified, it's set to ROOT, which allows matching with any upstream repository. See AWS Document - Customizing repository prefixes for ECR to ECR pull through cache.
	UpstreamRepositoryPrefix *string `json:"upstreamRepositoryPrefix,omitempty" tf:"upstream_repository_prefix,omitempty"`
}

type PullThroughCacheRuleObservation struct {

	// ARN of the Secret which will be used to authenticate against the registry.
	CredentialArn *string `json:"credentialArn,omitempty" tf:"credential_arn,omitempty"`

	// The ARN of the IAM role associated with the pull through cache rule. Must be specified if the upstream registry is a cross-account ECR private registry. See AWS Document - Setting up permissions for cross-account ECR to ECR PTC.
	CustomRoleArn *string `json:"customRoleArn,omitempty" tf:"custom_role_arn,omitempty"`

	// The repository name prefix to use when caching images from the source registry. Use ROOT as the prefix to apply a template to all repositories in your registry that don't have an associated pull through cache rule.
	EcrRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty" tf:"ecr_repository_prefix,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The registry ID where the repository was created.
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// The registry URL of the upstream registry to use as the source.
	UpstreamRegistryURL *string `json:"upstreamRegistryUrl,omitempty" tf:"upstream_registry_url,omitempty"`

	// The upstream repository prefix associated with the pull through cache rule. Used if the upstream registry is an ECR private registry. If not specified, it's set to ROOT, which allows matching with any upstream repository. See AWS Document - Customizing repository prefixes for ECR to ECR pull through cache.
	UpstreamRepositoryPrefix *string `json:"upstreamRepositoryPrefix,omitempty" tf:"upstream_repository_prefix,omitempty"`
}

type PullThroughCacheRuleParameters struct {

	// ARN of the Secret which will be used to authenticate against the registry.
	// +kubebuilder:validation:Optional
	CredentialArn *string `json:"credentialArn,omitempty" tf:"credential_arn,omitempty"`

	// The ARN of the IAM role associated with the pull through cache rule. Must be specified if the upstream registry is a cross-account ECR private registry. See AWS Document - Setting up permissions for cross-account ECR to ECR PTC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/cluster/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	CustomRoleArn *string `json:"customRoleArn,omitempty" tf:"custom_role_arn,omitempty"`

	// Reference to a Role in iam to populate customRoleArn.
	// +kubebuilder:validation:Optional
	CustomRoleArnRef *v1.NamespacedReference `json:"customRoleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate customRoleArn.
	// +kubebuilder:validation:Optional
	CustomRoleArnSelector *v1.NamespacedSelector `json:"customRoleArnSelector,omitempty" tf:"-"`

	// The repository name prefix to use when caching images from the source registry. Use ROOT as the prefix to apply a template to all repositories in your registry that don't have an associated pull through cache rule.
	// +kubebuilder:validation:Optional
	EcrRepositoryPrefix *string `json:"ecrRepositoryPrefix,omitempty" tf:"ecr_repository_prefix,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The registry URL of the upstream registry to use as the source.
	// +kubebuilder:validation:Optional
	UpstreamRegistryURL *string `json:"upstreamRegistryUrl,omitempty" tf:"upstream_registry_url,omitempty"`

	// The upstream repository prefix associated with the pull through cache rule. Used if the upstream registry is an ECR private registry. If not specified, it's set to ROOT, which allows matching with any upstream repository. See AWS Document - Customizing repository prefixes for ECR to ECR pull through cache.
	// +kubebuilder:validation:Optional
	UpstreamRepositoryPrefix *string `json:"upstreamRepositoryPrefix,omitempty" tf:"upstream_repository_prefix,omitempty"`
}

// PullThroughCacheRuleSpec defines the desired state of PullThroughCacheRule
type PullThroughCacheRuleSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            PullThroughCacheRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PullThroughCacheRuleInitParameters `json:"initProvider,omitempty"`
}

// PullThroughCacheRuleStatus defines the observed state of PullThroughCacheRule.
type PullThroughCacheRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PullThroughCacheRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PullThroughCacheRule is the Schema for the PullThroughCacheRules API. Provides an Elastic Container Registry Pull Through Cache Rule.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type PullThroughCacheRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ecrRepositoryPrefix) || (has(self.initProvider) && has(self.initProvider.ecrRepositoryPrefix))",message="spec.forProvider.ecrRepositoryPrefix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.upstreamRegistryUrl) || (has(self.initProvider) && has(self.initProvider.upstreamRegistryUrl))",message="spec.forProvider.upstreamRegistryUrl is a required parameter"
	Spec   PullThroughCacheRuleSpec   `json:"spec"`
	Status PullThroughCacheRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PullThroughCacheRuleList contains a list of PullThroughCacheRules
type PullThroughCacheRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PullThroughCacheRule `json:"items"`
}

// Repository type metadata.
var (
	PullThroughCacheRule_Kind             = "PullThroughCacheRule"
	PullThroughCacheRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PullThroughCacheRule_Kind}.String()
	PullThroughCacheRule_KindAPIVersion   = PullThroughCacheRule_Kind + "." + CRDGroupVersion.String()
	PullThroughCacheRule_GroupVersionKind = CRDGroupVersion.WithKind(PullThroughCacheRule_Kind)
)

func init() {
	SchemeBuilder.Register(&PullThroughCacheRule{}, &PullThroughCacheRuleList{})
}
