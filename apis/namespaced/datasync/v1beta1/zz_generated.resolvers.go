// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/namespaced/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *LocationS3) ResolveReferences( // ResolveReferences of this LocationS3.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3BucketArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.S3BucketArnRef,
			Selector:     mg.Spec.ForProvider.S3BucketArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.S3BucketArn")
	}
	mg.Spec.ForProvider.S3BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.S3BucketArnRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.S3Config != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3Config.BucketAccessRoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.S3Config.BucketAccessRoleArnRef,
				Selector:     mg.Spec.ForProvider.S3Config.BucketAccessRoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3Config.BucketAccessRoleArn")
		}
		mg.Spec.ForProvider.S3Config.BucketAccessRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3Config.BucketAccessRoleArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.S3BucketArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.S3BucketArnRef,
			Selector:     mg.Spec.InitProvider.S3BucketArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.S3BucketArn")
	}
	mg.Spec.InitProvider.S3BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.S3BucketArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.S3Config != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.S3Config.BucketAccessRoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.S3Config.BucketAccessRoleArnRef,
				Selector:     mg.Spec.InitProvider.S3Config.BucketAccessRoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.S3Config.BucketAccessRoleArn")
		}
		mg.Spec.InitProvider.S3Config.BucketAccessRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.S3Config.BucketAccessRoleArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Task.
func (mg *Task) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudwatchLogGroupArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CloudwatchLogGroupArnRef,
			Selector:     mg.Spec.ForProvider.CloudwatchLogGroupArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudwatchLogGroupArn")
	}
	mg.Spec.ForProvider.CloudwatchLogGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudwatchLogGroupArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datasync.aws.m.upbound.io", "v1beta1", "LocationS3", "LocationS3List")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationLocationArn),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DestinationLocationArnRef,
			Selector:     mg.Spec.ForProvider.DestinationLocationArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DestinationLocationArn")
	}
	mg.Spec.ForProvider.DestinationLocationArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DestinationLocationArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datasync.aws.m.upbound.io", "v1beta1", "LocationS3", "LocationS3List")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceLocationArn),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SourceLocationArnRef,
			Selector:     mg.Spec.ForProvider.SourceLocationArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceLocationArn")
	}
	mg.Spec.ForProvider.SourceLocationArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceLocationArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudwatchLogGroupArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CloudwatchLogGroupArnRef,
			Selector:     mg.Spec.InitProvider.CloudwatchLogGroupArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudwatchLogGroupArn")
	}
	mg.Spec.InitProvider.CloudwatchLogGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudwatchLogGroupArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datasync.aws.m.upbound.io", "v1beta1", "LocationS3", "LocationS3List")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DestinationLocationArn),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DestinationLocationArnRef,
			Selector:     mg.Spec.InitProvider.DestinationLocationArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DestinationLocationArn")
	}
	mg.Spec.InitProvider.DestinationLocationArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DestinationLocationArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datasync.aws.m.upbound.io", "v1beta1", "LocationS3", "LocationS3List")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceLocationArn),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SourceLocationArnRef,
			Selector:     mg.Spec.InitProvider.SourceLocationArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceLocationArn")
	}
	mg.Spec.InitProvider.SourceLocationArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceLocationArnRef = rsp.ResolvedReference

	return nil
}
