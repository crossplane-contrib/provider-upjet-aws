// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/cluster/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Pipe) ResolveReferences( // ResolveReferences of this Pipe.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudwatchevents.aws.m.upbound.io", "v1beta1", "APIDestination", "APIDestinationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Enrichment),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.EnrichmentRef,
			Selector:     mg.Spec.ForProvider.EnrichmentSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Enrichment")
	}
	mg.Spec.ForProvider.Enrichment = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EnrichmentRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.LogConfiguration != nil {
		if mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArnRef,
					Selector:     mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArn")
			}
			mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArnRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sqs.aws.m.upbound.io", "v1beta1", "Queue", "QueueList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SourceRef,
			Selector:     mg.Spec.ForProvider.SourceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Source")
	}
	mg.Spec.ForProvider.Source = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sqs.aws.m.upbound.io", "v1beta1", "Queue", "QueueList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudwatchevents.aws.m.upbound.io", "v1beta1", "APIDestination", "APIDestinationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Enrichment),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.EnrichmentRef,
			Selector:     mg.Spec.InitProvider.EnrichmentSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Enrichment")
	}
	mg.Spec.InitProvider.Enrichment = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EnrichmentRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.LogConfiguration != nil {
		if mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArn),
					Extract:      resource.ExtractParamPath("arn", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArnRef,
					Selector:     mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArnSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArn")
			}
			mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LogConfiguration.CloudwatchLogsLogDestination.LogGroupArnRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.m.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sqs.aws.m.upbound.io", "v1beta1", "Queue", "QueueList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SourceRef,
			Selector:     mg.Spec.InitProvider.SourceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Source")
	}
	mg.Spec.InitProvider.Source = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sqs.aws.m.upbound.io", "v1beta1", "Queue", "QueueList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}
