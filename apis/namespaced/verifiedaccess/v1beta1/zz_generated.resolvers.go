// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Endpoint) ResolveReferences( // ResolveReferences of this Endpoint.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.CidrOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CidrOptions.Cidr),
				Extract:      resource.ExtractParamPath("cidr_block", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.CidrOptions.CidrRef,
				Selector:     mg.Spec.ForProvider.CidrOptions.CidrSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CidrOptions.Cidr")
		}
		mg.Spec.ForProvider.CidrOptions.Cidr = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CidrOptions.CidrRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.CidrOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CidrOptions.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.CidrOptions.SubnetIdsRefs,
				Selector:      mg.Spec.ForProvider.CidrOptions.SubnetIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CidrOptions.SubnetIds")
		}
		mg.Spec.ForProvider.CidrOptions.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.CidrOptions.SubnetIdsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("acm.aws.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DomainCertificateArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DomainCertificateArnRef,
			Selector:     mg.Spec.ForProvider.DomainCertificateArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DomainCertificateArn")
	}
	mg.Spec.ForProvider.DomainCertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainCertificateArnRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.LoadBalancerOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("elbv2.aws.m.upbound.io", "v1beta1", "LB", "LBList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerOptions.LoadBalancerArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LoadBalancerOptions.LoadBalancerArnRef,
				Selector:     mg.Spec.ForProvider.LoadBalancerOptions.LoadBalancerArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerOptions.LoadBalancerArn")
		}
		mg.Spec.ForProvider.LoadBalancerOptions.LoadBalancerArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LoadBalancerOptions.LoadBalancerArnRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.LoadBalancerOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.LoadBalancerOptions.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.LoadBalancerOptions.SubnetIdsRefs,
				Selector:      mg.Spec.ForProvider.LoadBalancerOptions.SubnetIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerOptions.SubnetIds")
		}
		mg.Spec.ForProvider.LoadBalancerOptions.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.LoadBalancerOptions.SubnetIdsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.NetworkInterfaceOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "NetworkInterface", "NetworkInterfaceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaceOptions.NetworkInterfaceID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.NetworkInterfaceOptions.NetworkInterfaceIDRef,
				Selector:     mg.Spec.ForProvider.NetworkInterfaceOptions.NetworkInterfaceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaceOptions.NetworkInterfaceID")
		}
		mg.Spec.ForProvider.NetworkInterfaceOptions.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterfaceOptions.NetworkInterfaceIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroupIds),
			Extract:       reference.ExternalName(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.SecurityGroupIDRefs,
			Selector:      mg.Spec.ForProvider.SecurityGroupIDSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupIds")
	}
	mg.Spec.ForProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VerifiedAccessGroupID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VerifiedAccessGroupIDRef,
			Selector:     mg.Spec.ForProvider.VerifiedAccessGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VerifiedAccessGroupID")
	}
	mg.Spec.ForProvider.VerifiedAccessGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VerifiedAccessGroupIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.CidrOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CidrOptions.Cidr),
				Extract:      resource.ExtractParamPath("cidr_block", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.CidrOptions.CidrRef,
				Selector:     mg.Spec.InitProvider.CidrOptions.CidrSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CidrOptions.Cidr")
		}
		mg.Spec.InitProvider.CidrOptions.Cidr = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CidrOptions.CidrRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.CidrOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.CidrOptions.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.CidrOptions.SubnetIdsRefs,
				Selector:      mg.Spec.InitProvider.CidrOptions.SubnetIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CidrOptions.SubnetIds")
		}
		mg.Spec.InitProvider.CidrOptions.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.CidrOptions.SubnetIdsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("acm.aws.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DomainCertificateArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DomainCertificateArnRef,
			Selector:     mg.Spec.InitProvider.DomainCertificateArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DomainCertificateArn")
	}
	mg.Spec.InitProvider.DomainCertificateArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainCertificateArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.LoadBalancerOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("elbv2.aws.m.upbound.io", "v1beta1", "LB", "LBList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadBalancerOptions.LoadBalancerArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LoadBalancerOptions.LoadBalancerArnRef,
				Selector:     mg.Spec.InitProvider.LoadBalancerOptions.LoadBalancerArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerOptions.LoadBalancerArn")
		}
		mg.Spec.InitProvider.LoadBalancerOptions.LoadBalancerArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LoadBalancerOptions.LoadBalancerArnRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LoadBalancerOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.LoadBalancerOptions.SubnetIds),
				Extract:       reference.ExternalName(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.LoadBalancerOptions.SubnetIdsRefs,
				Selector:      mg.Spec.InitProvider.LoadBalancerOptions.SubnetIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LoadBalancerOptions.SubnetIds")
		}
		mg.Spec.InitProvider.LoadBalancerOptions.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.LoadBalancerOptions.SubnetIdsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.NetworkInterfaceOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "NetworkInterface", "NetworkInterfaceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterfaceOptions.NetworkInterfaceID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.NetworkInterfaceOptions.NetworkInterfaceIDRef,
				Selector:     mg.Spec.InitProvider.NetworkInterfaceOptions.NetworkInterfaceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterfaceOptions.NetworkInterfaceID")
		}
		mg.Spec.InitProvider.NetworkInterfaceOptions.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterfaceOptions.NetworkInterfaceIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("ec2.aws.m.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SecurityGroupIds),
			Extract:       reference.ExternalName(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.SecurityGroupIDRefs,
			Selector:      mg.Spec.InitProvider.SecurityGroupIDSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupIds")
	}
	mg.Spec.InitProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VerifiedAccessGroupID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VerifiedAccessGroupIDRef,
			Selector:     mg.Spec.InitProvider.VerifiedAccessGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VerifiedAccessGroupID")
	}
	mg.Spec.InitProvider.VerifiedAccessGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VerifiedAccessGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Group.
func (mg *Group) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.SseConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.m.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SseConfiguration.KMSKeyArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.SseConfiguration.KMSKeyArnRef,
				Selector:     mg.Spec.ForProvider.SseConfiguration.KMSKeyArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SseConfiguration.KMSKeyArn")
		}
		mg.Spec.ForProvider.SseConfiguration.KMSKeyArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SseConfiguration.KMSKeyArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VerifiedaccessInstanceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VerifiedaccessInstanceIDRef,
			Selector:     mg.Spec.ForProvider.VerifiedaccessInstanceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VerifiedaccessInstanceID")
	}
	mg.Spec.ForProvider.VerifiedaccessInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VerifiedaccessInstanceIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.SseConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.aws.m.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SseConfiguration.KMSKeyArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.SseConfiguration.KMSKeyArnRef,
				Selector:     mg.Spec.InitProvider.SseConfiguration.KMSKeyArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SseConfiguration.KMSKeyArn")
		}
		mg.Spec.InitProvider.SseConfiguration.KMSKeyArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SseConfiguration.KMSKeyArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VerifiedaccessInstanceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VerifiedaccessInstanceIDRef,
			Selector:     mg.Spec.InitProvider.VerifiedaccessInstanceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VerifiedaccessInstanceID")
	}
	mg.Spec.InitProvider.VerifiedaccessInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VerifiedaccessInstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceLoggingConfiguration.
func (mg *InstanceLoggingConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.AccessLogs != nil {
		if mg.Spec.ForProvider.AccessLogs.CloudwatchLogs != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessLogs.CloudwatchLogs.LogGroup),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.AccessLogs.CloudwatchLogs.LogGroupRef,
					Selector:     mg.Spec.ForProvider.AccessLogs.CloudwatchLogs.LogGroupSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.AccessLogs.CloudwatchLogs.LogGroup")
			}
			mg.Spec.ForProvider.AccessLogs.CloudwatchLogs.LogGroup = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.AccessLogs.CloudwatchLogs.LogGroupRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.AccessLogs != nil {
		if mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose != nil {
			{
				m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose.DeliveryStream),
					Extract:      resource.ExtractParamPath("name", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose.DeliveryStreamRef,
					Selector:     mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose.DeliveryStreamSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose.DeliveryStream")
			}
			mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose.DeliveryStream = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.AccessLogs.KinesisDataFirehose.DeliveryStreamRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.AccessLogs != nil {
		if mg.Spec.ForProvider.AccessLogs.S3 != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessLogs.S3.BucketName),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.AccessLogs.S3.BucketNameRef,
					Selector:     mg.Spec.ForProvider.AccessLogs.S3.BucketNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.AccessLogs.S3.BucketName")
			}
			mg.Spec.ForProvider.AccessLogs.S3.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.AccessLogs.S3.BucketNameRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VerifiedaccessInstanceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VerifiedaccessInstanceIDRef,
			Selector:     mg.Spec.ForProvider.VerifiedaccessInstanceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VerifiedaccessInstanceID")
	}
	mg.Spec.ForProvider.VerifiedaccessInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VerifiedaccessInstanceIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.AccessLogs != nil {
		if mg.Spec.InitProvider.AccessLogs.CloudwatchLogs != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudwatchlogs.aws.m.upbound.io", "v1beta1", "Group", "GroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessLogs.CloudwatchLogs.LogGroup),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.AccessLogs.CloudwatchLogs.LogGroupRef,
					Selector:     mg.Spec.InitProvider.AccessLogs.CloudwatchLogs.LogGroupSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.AccessLogs.CloudwatchLogs.LogGroup")
			}
			mg.Spec.InitProvider.AccessLogs.CloudwatchLogs.LogGroup = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.AccessLogs.CloudwatchLogs.LogGroupRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.AccessLogs != nil {
		if mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose != nil {
			{
				m, l, err = apisresolver.GetManagedResource("firehose.aws.m.upbound.io", "v1beta1", "DeliveryStream", "DeliveryStreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose.DeliveryStream),
					Extract:      resource.ExtractParamPath("name", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose.DeliveryStreamRef,
					Selector:     mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose.DeliveryStreamSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose.DeliveryStream")
			}
			mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose.DeliveryStream = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.AccessLogs.KinesisDataFirehose.DeliveryStreamRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.AccessLogs != nil {
		if mg.Spec.InitProvider.AccessLogs.S3 != nil {
			{
				m, l, err = apisresolver.GetManagedResource("s3.aws.m.upbound.io", "v1beta1", "Bucket", "BucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessLogs.S3.BucketName),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.AccessLogs.S3.BucketNameRef,
					Selector:     mg.Spec.InitProvider.AccessLogs.S3.BucketNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.AccessLogs.S3.BucketName")
			}
			mg.Spec.InitProvider.AccessLogs.S3.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.AccessLogs.S3.BucketNameRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VerifiedaccessInstanceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VerifiedaccessInstanceIDRef,
			Selector:     mg.Spec.InitProvider.VerifiedaccessInstanceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VerifiedaccessInstanceID")
	}
	mg.Spec.InitProvider.VerifiedaccessInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VerifiedaccessInstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceTrustProviderAttachment.
func (mg *InstanceTrustProviderAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VerifiedaccessInstanceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VerifiedaccessInstanceIDRef,
			Selector:     mg.Spec.ForProvider.VerifiedaccessInstanceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VerifiedaccessInstanceID")
	}
	mg.Spec.ForProvider.VerifiedaccessInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VerifiedaccessInstanceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "TrustProvider", "TrustProviderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VerifiedaccessTrustProviderID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VerifiedaccessTrustProviderIDRef,
			Selector:     mg.Spec.ForProvider.VerifiedaccessTrustProviderIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VerifiedaccessTrustProviderID")
	}
	mg.Spec.ForProvider.VerifiedaccessTrustProviderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VerifiedaccessTrustProviderIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VerifiedaccessInstanceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VerifiedaccessInstanceIDRef,
			Selector:     mg.Spec.InitProvider.VerifiedaccessInstanceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VerifiedaccessInstanceID")
	}
	mg.Spec.InitProvider.VerifiedaccessInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VerifiedaccessInstanceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("verifiedaccess.aws.m.upbound.io", "v1beta1", "TrustProvider", "TrustProviderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VerifiedaccessTrustProviderID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VerifiedaccessTrustProviderIDRef,
			Selector:     mg.Spec.InitProvider.VerifiedaccessTrustProviderIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VerifiedaccessTrustProviderID")
	}
	mg.Spec.InitProvider.VerifiedaccessTrustProviderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VerifiedaccessTrustProviderIDRef = rsp.ResolvedReference

	return nil
}
