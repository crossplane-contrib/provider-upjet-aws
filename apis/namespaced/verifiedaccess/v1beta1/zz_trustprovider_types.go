// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type DeviceOptionsInitParameters struct {

	// The ID of the AWS Verified Access trust provider.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type DeviceOptionsObservation struct {

	// The ID of the AWS Verified Access trust provider.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type DeviceOptionsParameters struct {

	// The ID of the AWS Verified Access trust provider.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type NativeApplicationOidcOptionsInitParameters struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	PublicSigningKeyEndpoint *string `json:"publicSigningKeyEndpoint,omitempty" tf:"public_signing_key_endpoint,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type NativeApplicationOidcOptionsObservation struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	PublicSigningKeyEndpoint *string `json:"publicSigningKeyEndpoint,omitempty" tf:"public_signing_key_endpoint,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type NativeApplicationOidcOptionsParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Optional
	PublicSigningKeyEndpoint *string `json:"publicSigningKeyEndpoint,omitempty" tf:"public_signing_key_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type OidcOptionsInitParameters struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type OidcOptionsObservation struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type OidcOptionsParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty" tf:"user_info_endpoint,omitempty"`
}

type TrustProviderInitParameters struct {

	// A description for the AWS Verified Access trust provider.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A block of options for device identity based trust providers.
	DeviceOptions *DeviceOptionsInitParameters `json:"deviceOptions,omitempty" tf:"device_options,omitempty"`

	// based trust provider.
	DeviceTrustProviderType *string `json:"deviceTrustProviderType,omitempty" tf:"device_trust_provider_type,omitempty"`

	// The OpenID Connect details for an Native Application OIDC, user-identity based trust provider.
	NativeApplicationOidcOptions *NativeApplicationOidcOptionsInitParameters `json:"nativeApplicationOidcOptions,omitempty" tf:"native_application_oidc_options,omitempty"`

	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions *OidcOptionsInitParameters `json:"oidcOptions,omitempty" tf:"oidc_options,omitempty"`

	// The identifier to be used when working with policy rules.
	PolicyReferenceName *string `json:"policyReferenceName,omitempty" tf:"policy_reference_name,omitempty"`

	SseSpecification *TrustProviderSseSpecificationInitParameters `json:"sseSpecification,omitempty" tf:"sse_specification,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of trust provider can be either user or device-based.
	TrustProviderType *string `json:"trustProviderType,omitempty" tf:"trust_provider_type,omitempty"`

	// The type of user-based trust provider.
	UserTrustProviderType *string `json:"userTrustProviderType,omitempty" tf:"user_trust_provider_type,omitempty"`
}

type TrustProviderObservation struct {

	// A description for the AWS Verified Access trust provider.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A block of options for device identity based trust providers.
	DeviceOptions *DeviceOptionsObservation `json:"deviceOptions,omitempty" tf:"device_options,omitempty"`

	// based trust provider.
	DeviceTrustProviderType *string `json:"deviceTrustProviderType,omitempty" tf:"device_trust_provider_type,omitempty"`

	// The ID of the AWS Verified Access trust provider.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The OpenID Connect details for an Native Application OIDC, user-identity based trust provider.
	NativeApplicationOidcOptions *NativeApplicationOidcOptionsObservation `json:"nativeApplicationOidcOptions,omitempty" tf:"native_application_oidc_options,omitempty"`

	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions *OidcOptionsObservation `json:"oidcOptions,omitempty" tf:"oidc_options,omitempty"`

	// The identifier to be used when working with policy rules.
	PolicyReferenceName *string `json:"policyReferenceName,omitempty" tf:"policy_reference_name,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	SseSpecification *TrustProviderSseSpecificationObservation `json:"sseSpecification,omitempty" tf:"sse_specification,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The type of trust provider can be either user or device-based.
	TrustProviderType *string `json:"trustProviderType,omitempty" tf:"trust_provider_type,omitempty"`

	// The type of user-based trust provider.
	UserTrustProviderType *string `json:"userTrustProviderType,omitempty" tf:"user_trust_provider_type,omitempty"`
}

type TrustProviderParameters struct {

	// A description for the AWS Verified Access trust provider.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A block of options for device identity based trust providers.
	// +kubebuilder:validation:Optional
	DeviceOptions *DeviceOptionsParameters `json:"deviceOptions,omitempty" tf:"device_options,omitempty"`

	// based trust provider.
	// +kubebuilder:validation:Optional
	DeviceTrustProviderType *string `json:"deviceTrustProviderType,omitempty" tf:"device_trust_provider_type,omitempty"`

	// The OpenID Connect details for an Native Application OIDC, user-identity based trust provider.
	// +kubebuilder:validation:Optional
	NativeApplicationOidcOptions *NativeApplicationOidcOptionsParameters `json:"nativeApplicationOidcOptions,omitempty" tf:"native_application_oidc_options,omitempty"`

	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	// +kubebuilder:validation:Optional
	OidcOptions *OidcOptionsParameters `json:"oidcOptions,omitempty" tf:"oidc_options,omitempty"`

	// The identifier to be used when working with policy rules.
	// +kubebuilder:validation:Optional
	PolicyReferenceName *string `json:"policyReferenceName,omitempty" tf:"policy_reference_name,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SseSpecification *TrustProviderSseSpecificationParameters `json:"sseSpecification,omitempty" tf:"sse_specification,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of trust provider can be either user or device-based.
	// +kubebuilder:validation:Optional
	TrustProviderType *string `json:"trustProviderType,omitempty" tf:"trust_provider_type,omitempty"`

	// The type of user-based trust provider.
	// +kubebuilder:validation:Optional
	UserTrustProviderType *string `json:"userTrustProviderType,omitempty" tf:"user_trust_provider_type,omitempty"`
}

type TrustProviderSseSpecificationInitParameters struct {
	CustomerManagedKeyEnabled *bool `json:"customerManagedKeyEnabled,omitempty" tf:"customer_managed_key_enabled,omitempty"`

	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`
}

type TrustProviderSseSpecificationObservation struct {
	CustomerManagedKeyEnabled *bool `json:"customerManagedKeyEnabled,omitempty" tf:"customer_managed_key_enabled,omitempty"`

	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`
}

type TrustProviderSseSpecificationParameters struct {

	// +kubebuilder:validation:Optional
	CustomerManagedKeyEnabled *bool `json:"customerManagedKeyEnabled,omitempty" tf:"customer_managed_key_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`
}

// TrustProviderSpec defines the desired state of TrustProvider
type TrustProviderSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            TrustProviderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustProviderInitParameters `json:"initProvider,omitempty"`
}

// TrustProviderStatus defines the observed state of TrustProvider.
type TrustProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustProvider is the Schema for the TrustProviders API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type TrustProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyReferenceName) || (has(self.initProvider) && has(self.initProvider.policyReferenceName))",message="spec.forProvider.policyReferenceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trustProviderType) || (has(self.initProvider) && has(self.initProvider.trustProviderType))",message="spec.forProvider.trustProviderType is a required parameter"
	Spec   TrustProviderSpec   `json:"spec"`
	Status TrustProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustProviderList contains a list of TrustProviders
type TrustProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustProvider `json:"items"`
}

// Repository type metadata.
var (
	TrustProvider_Kind             = "TrustProvider"
	TrustProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustProvider_Kind}.String()
	TrustProvider_KindAPIVersion   = TrustProvider_Kind + "." + CRDGroupVersion.String()
	TrustProvider_GroupVersionKind = CRDGroupVersion.WithKind(TrustProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustProvider{}, &TrustProviderList{})
}
