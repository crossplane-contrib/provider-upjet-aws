// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type InstanceInitParameters struct {

	// The custom subdomain for the CIDR endpoints.
	CidrEndpointsCustomSubdomain *string `json:"cidrEndpointsCustomSubdomain,omitempty" tf:"cidr_endpoints_custom_subdomain,omitempty"`

	// A description for the AWS Verified Access Instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable or disable support for Federal Information Processing Standards (FIPS) on the AWS Verified Access Instance.
	FipsEnabled *bool `json:"fipsEnabled,omitempty" tf:"fips_enabled,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type InstanceObservation struct {

	// The custom subdomain for the CIDR endpoints.
	CidrEndpointsCustomSubdomain *string `json:"cidrEndpointsCustomSubdomain,omitempty" tf:"cidr_endpoints_custom_subdomain,omitempty"`

	// The time that the Verified Access Instance was created.
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// A description for the AWS Verified Access Instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable or disable support for Federal Information Processing Standards (FIPS) on the AWS Verified Access Instance.
	FipsEnabled *bool `json:"fipsEnabled,omitempty" tf:"fips_enabled,omitempty"`

	// The ID of the AWS Verified Access Instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time that the Verified Access Instance was last updated.
	LastUpdatedTime *string `json:"lastUpdatedTime,omitempty" tf:"last_updated_time,omitempty"`

	// +listType=set
	NameServers []*string `json:"nameServers,omitempty" tf:"name_servers,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// One or more blocks of providing information about the AWS Verified Access Trust Providers. See verified_access_trust_providers below for details.One or more blocks
	VerifiedAccessTrustProviders []VerifiedAccessTrustProvidersObservation `json:"verifiedAccessTrustProviders,omitempty" tf:"verified_access_trust_providers,omitempty"`
}

type InstanceParameters struct {

	// The custom subdomain for the CIDR endpoints.
	// +kubebuilder:validation:Optional
	CidrEndpointsCustomSubdomain *string `json:"cidrEndpointsCustomSubdomain,omitempty" tf:"cidr_endpoints_custom_subdomain,omitempty"`

	// A description for the AWS Verified Access Instance.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable or disable support for Federal Information Processing Standards (FIPS) on the AWS Verified Access Instance.
	// +kubebuilder:validation:Optional
	FipsEnabled *bool `json:"fipsEnabled,omitempty" tf:"fips_enabled,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VerifiedAccessTrustProvidersInitParameters struct {
}

type VerifiedAccessTrustProvidersObservation struct {

	// The description of trust provider.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The type of device-based trust provider.
	DeviceTrustProviderType *string `json:"deviceTrustProviderType,omitempty" tf:"device_trust_provider_type,omitempty"`

	// The type of trust provider (user- or device-based).
	TrustProviderType *string `json:"trustProviderType,omitempty" tf:"trust_provider_type,omitempty"`

	// The type of user-based trust provider.
	UserTrustProviderType *string `json:"userTrustProviderType,omitempty" tf:"user_trust_provider_type,omitempty"`

	// The ID of the trust provider.
	VerifiedAccessTrustProviderID *string `json:"verifiedAccessTrustProviderId,omitempty" tf:"verified_access_trust_provider_id,omitempty"`
}

type VerifiedAccessTrustProvidersParameters struct {
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
