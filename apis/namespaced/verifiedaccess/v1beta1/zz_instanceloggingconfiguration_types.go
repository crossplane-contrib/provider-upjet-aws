// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AccessLogsInitParameters struct {

	// A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
	CloudwatchLogs *CloudwatchLogsInitParameters `json:"cloudwatchLogs,omitempty" tf:"cloudwatch_logs,omitempty"`

	// Include trust data sent by trust providers into the logs.
	IncludeTrustContext *bool `json:"includeTrustContext,omitempty" tf:"include_trust_context,omitempty"`

	// A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
	KinesisDataFirehose *KinesisDataFirehoseInitParameters `json:"kinesisDataFirehose,omitempty" tf:"kinesis_data_firehose,omitempty"`

	// The logging version to use. Refer to VerifiedAccessLogOptions for the allowed values.
	LogVersion *string `json:"logVersion,omitempty" tf:"log_version,omitempty"`

	// A block that specifies configures sending Verified Access logs to S3. Detailed below.
	S3 *S3InitParameters `json:"s3,omitempty" tf:"s3,omitempty"`
}

type AccessLogsObservation struct {

	// A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
	CloudwatchLogs *CloudwatchLogsObservation `json:"cloudwatchLogs,omitempty" tf:"cloudwatch_logs,omitempty"`

	// Include trust data sent by trust providers into the logs.
	IncludeTrustContext *bool `json:"includeTrustContext,omitempty" tf:"include_trust_context,omitempty"`

	// A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
	KinesisDataFirehose *KinesisDataFirehoseObservation `json:"kinesisDataFirehose,omitempty" tf:"kinesis_data_firehose,omitempty"`

	// The logging version to use. Refer to VerifiedAccessLogOptions for the allowed values.
	LogVersion *string `json:"logVersion,omitempty" tf:"log_version,omitempty"`

	// A block that specifies configures sending Verified Access logs to S3. Detailed below.
	S3 *S3Observation `json:"s3,omitempty" tf:"s3,omitempty"`
}

type AccessLogsParameters struct {

	// A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
	// +kubebuilder:validation:Optional
	CloudwatchLogs *CloudwatchLogsParameters `json:"cloudwatchLogs,omitempty" tf:"cloudwatch_logs,omitempty"`

	// Include trust data sent by trust providers into the logs.
	// +kubebuilder:validation:Optional
	IncludeTrustContext *bool `json:"includeTrustContext,omitempty" tf:"include_trust_context,omitempty"`

	// A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
	// +kubebuilder:validation:Optional
	KinesisDataFirehose *KinesisDataFirehoseParameters `json:"kinesisDataFirehose,omitempty" tf:"kinesis_data_firehose,omitempty"`

	// The logging version to use. Refer to VerifiedAccessLogOptions for the allowed values.
	// +kubebuilder:validation:Optional
	LogVersion *string `json:"logVersion,omitempty" tf:"log_version,omitempty"`

	// A block that specifies configures sending Verified Access logs to S3. Detailed below.
	// +kubebuilder:validation:Optional
	S3 *S3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`
}

type CloudwatchLogsInitParameters struct {

	// Indicates whether logging is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of the CloudWatch Logs Log Group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/cloudwatchlogs/v1beta1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`

	// Reference to a Group in cloudwatchlogs to populate logGroup.
	// +kubebuilder:validation:Optional
	LogGroupRef *v1.NamespacedReference `json:"logGroupRef,omitempty" tf:"-"`

	// Selector for a Group in cloudwatchlogs to populate logGroup.
	// +kubebuilder:validation:Optional
	LogGroupSelector *v1.NamespacedSelector `json:"logGroupSelector,omitempty" tf:"-"`
}

type CloudwatchLogsObservation struct {

	// Indicates whether logging is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of the CloudWatch Logs Log Group.
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`
}

type CloudwatchLogsParameters struct {

	// Indicates whether logging is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// The name of the CloudWatch Logs Log Group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/cloudwatchlogs/v1beta1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	LogGroup *string `json:"logGroup,omitempty" tf:"log_group,omitempty"`

	// Reference to a Group in cloudwatchlogs to populate logGroup.
	// +kubebuilder:validation:Optional
	LogGroupRef *v1.NamespacedReference `json:"logGroupRef,omitempty" tf:"-"`

	// Selector for a Group in cloudwatchlogs to populate logGroup.
	// +kubebuilder:validation:Optional
	LogGroupSelector *v1.NamespacedSelector `json:"logGroupSelector,omitempty" tf:"-"`
}

type InstanceLoggingConfigurationInitParameters struct {

	// A block that specifies the configuration options for Verified Access instances. Detailed below.
	AccessLogs *AccessLogsInitParameters `json:"accessLogs,omitempty" tf:"access_logs,omitempty"`

	// The ID of the Verified Access instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/verifiedaccess/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	VerifiedaccessInstanceID *string `json:"verifiedaccessInstanceId,omitempty" tf:"verifiedaccess_instance_id,omitempty"`

	// Reference to a Instance in verifiedaccess to populate verifiedaccessInstanceId.
	// +kubebuilder:validation:Optional
	VerifiedaccessInstanceIDRef *v1.NamespacedReference `json:"verifiedaccessInstanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in verifiedaccess to populate verifiedaccessInstanceId.
	// +kubebuilder:validation:Optional
	VerifiedaccessInstanceIDSelector *v1.NamespacedSelector `json:"verifiedaccessInstanceIdSelector,omitempty" tf:"-"`
}

type InstanceLoggingConfigurationObservation struct {

	// A block that specifies the configuration options for Verified Access instances. Detailed below.
	AccessLogs *AccessLogsObservation `json:"accessLogs,omitempty" tf:"access_logs,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of the Verified Access instance.
	VerifiedaccessInstanceID *string `json:"verifiedaccessInstanceId,omitempty" tf:"verifiedaccess_instance_id,omitempty"`
}

type InstanceLoggingConfigurationParameters struct {

	// A block that specifies the configuration options for Verified Access instances. Detailed below.
	// +kubebuilder:validation:Optional
	AccessLogs *AccessLogsParameters `json:"accessLogs,omitempty" tf:"access_logs,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The ID of the Verified Access instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/verifiedaccess/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VerifiedaccessInstanceID *string `json:"verifiedaccessInstanceId,omitempty" tf:"verifiedaccess_instance_id,omitempty"`

	// Reference to a Instance in verifiedaccess to populate verifiedaccessInstanceId.
	// +kubebuilder:validation:Optional
	VerifiedaccessInstanceIDRef *v1.NamespacedReference `json:"verifiedaccessInstanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in verifiedaccess to populate verifiedaccessInstanceId.
	// +kubebuilder:validation:Optional
	VerifiedaccessInstanceIDSelector *v1.NamespacedSelector `json:"verifiedaccessInstanceIdSelector,omitempty" tf:"-"`
}

type KinesisDataFirehoseInitParameters struct {

	// The name of the delivery stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("name",false)
	DeliveryStream *string `json:"deliveryStream,omitempty" tf:"delivery_stream,omitempty"`

	// Reference to a DeliveryStream in firehose to populate deliveryStream.
	// +kubebuilder:validation:Optional
	DeliveryStreamRef *v1.NamespacedReference `json:"deliveryStreamRef,omitempty" tf:"-"`

	// Selector for a DeliveryStream in firehose to populate deliveryStream.
	// +kubebuilder:validation:Optional
	DeliveryStreamSelector *v1.NamespacedSelector `json:"deliveryStreamSelector,omitempty" tf:"-"`

	// Indicates whether logging is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type KinesisDataFirehoseObservation struct {

	// The name of the delivery stream.
	DeliveryStream *string `json:"deliveryStream,omitempty" tf:"delivery_stream,omitempty"`

	// Indicates whether logging is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type KinesisDataFirehoseParameters struct {

	// The name of the delivery stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	DeliveryStream *string `json:"deliveryStream,omitempty" tf:"delivery_stream,omitempty"`

	// Reference to a DeliveryStream in firehose to populate deliveryStream.
	// +kubebuilder:validation:Optional
	DeliveryStreamRef *v1.NamespacedReference `json:"deliveryStreamRef,omitempty" tf:"-"`

	// Selector for a DeliveryStream in firehose to populate deliveryStream.
	// +kubebuilder:validation:Optional
	DeliveryStreamSelector *v1.NamespacedSelector `json:"deliveryStreamSelector,omitempty" tf:"-"`

	// Indicates whether logging is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type S3InitParameters struct {

	// The name of S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.NamespacedReference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.NamespacedSelector `json:"bucketNameSelector,omitempty" tf:"-"`

	// The ID of the AWS account that owns the Amazon S3 bucket.
	BucketOwner *string `json:"bucketOwner,omitempty" tf:"bucket_owner,omitempty"`

	// Indicates whether logging is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The bucket prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type S3Observation struct {

	// The name of S3 bucket.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The ID of the AWS account that owns the Amazon S3 bucket.
	BucketOwner *string `json:"bucketOwner,omitempty" tf:"bucket_owner,omitempty"`

	// Indicates whether logging is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The bucket prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type S3Parameters struct {

	// The name of S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/namespaced/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.NamespacedReference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.NamespacedSelector `json:"bucketNameSelector,omitempty" tf:"-"`

	// The ID of the AWS account that owns the Amazon S3 bucket.
	// +kubebuilder:validation:Optional
	BucketOwner *string `json:"bucketOwner,omitempty" tf:"bucket_owner,omitempty"`

	// Indicates whether logging is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// The bucket prefix.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

// InstanceLoggingConfigurationSpec defines the desired state of InstanceLoggingConfiguration
type InstanceLoggingConfigurationSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            InstanceLoggingConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceLoggingConfigurationInitParameters `json:"initProvider,omitempty"`
}

// InstanceLoggingConfigurationStatus defines the observed state of InstanceLoggingConfiguration.
type InstanceLoggingConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceLoggingConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceLoggingConfiguration is the Schema for the InstanceLoggingConfigurations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,aws}
type InstanceLoggingConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessLogs) || (has(self.initProvider) && has(self.initProvider.accessLogs))",message="spec.forProvider.accessLogs is a required parameter"
	Spec   InstanceLoggingConfigurationSpec   `json:"spec"`
	Status InstanceLoggingConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceLoggingConfigurationList contains a list of InstanceLoggingConfigurations
type InstanceLoggingConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceLoggingConfiguration `json:"items"`
}

// Repository type metadata.
var (
	InstanceLoggingConfiguration_Kind             = "InstanceLoggingConfiguration"
	InstanceLoggingConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceLoggingConfiguration_Kind}.String()
	InstanceLoggingConfiguration_KindAPIVersion   = InstanceLoggingConfiguration_Kind + "." + CRDGroupVersion.String()
	InstanceLoggingConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(InstanceLoggingConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceLoggingConfiguration{}, &InstanceLoggingConfigurationList{})
}
