/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AMIObservation struct {

	// The ARN of the AMI.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The hypervisor type of the image.
	Hypervisor *string `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// The ID of the created AMI.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
	ImageOwnerAlias *string `json:"imageOwnerAlias,omitempty" tf:"image_owner_alias,omitempty"`

	// The type of image.
	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	ManageEBSSnapshots *bool `json:"manageEbsSnapshots,omitempty" tf:"manage_ebs_snapshots,omitempty"`

	// The AWS account ID of the image owner.
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// This value is set to windows for Windows AMIs; otherwise, it is blank.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// The platform details associated with the billing code of the AMI.
	PlatformDetails *string `json:"platformDetails,omitempty" tf:"platform_details,omitempty"`

	// Indicates whether the image has public launch permissions.
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// The Snapshot ID for the root volume (for EBS-backed AMIs)
	RootSnapshotID *string `json:"rootSnapshotId,omitempty" tf:"root_snapshot_id,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// The operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
	UsageOperation *string `json:"usageOperation,omitempty" tf:"usage_operation,omitempty"`
}

type AMIParameters struct {

	// Machine architecture for created instances. Defaults to "x86_64".
	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.
	// +kubebuilder:validation:Optional
	BootMode *string `json:"bootMode,omitempty" tf:"boot_mode,omitempty"`

	// The date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
	// +kubebuilder:validation:Optional
	DeprecationTime *string `json:"deprecationTime,omitempty" tf:"deprecation_time,omitempty"`

	// A longer, human-readable description for the AMI.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	EBSBlockDevice []EBSBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device,omitempty"`

	// Specifies whether enhanced networking with ENA is enabled. Defaults to false.
	// +kubebuilder:validation:Optional
	EnaSupport *bool `json:"enaSupport,omitempty" tf:"ena_support,omitempty"`

	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	// +kubebuilder:validation:Optional
	EphemeralBlockDevice []EphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device,omitempty"`

	// Path to an S3 object containing an image manifest, e.g., created
	// by the ec2-upload-bundle command in the EC2 command line tools.
	// +kubebuilder:validation:Optional
	ImageLocation *string `json:"imageLocation,omitempty" tf:"image_location,omitempty"`

	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	// +kubebuilder:validation:Optional
	KernelID *string `json:"kernelId,omitempty" tf:"kernel_id,omitempty"`

	// A region-unique name for the AMI.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	// +kubebuilder:validation:Optional
	RamdiskID *string `json:"ramdiskId,omitempty" tf:"ramdisk_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The name of the root device (for example, /dev/sda1, or /dev/xvda).
	// +kubebuilder:validation:Optional
	RootDeviceName *string `json:"rootDeviceName,omitempty" tf:"root_device_name,omitempty"`

	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	// +kubebuilder:validation:Optional
	SriovNetSupport *string `json:"sriovNetSupport,omitempty" tf:"sriov_net_support,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	// +kubebuilder:validation:Optional
	VirtualizationType *string `json:"virtualizationType,omitempty" tf:"virtualization_type,omitempty"`
}

type EBSBlockDeviceObservation struct {
}

type EBSBlockDeviceParameters struct {

	// Boolean controlling whether the EBS volumes created to
	// support each created instance will be deleted once that instance is terminated.
	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// The path at which the device is exposed to created instances.
	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with snapshot_id.
	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// Number of I/O operations per second the
	// created volumes will support.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The ARN of the Outpost on which the snapshot is stored.
	// +kubebuilder:validation:Optional
	OutpostArn *string `json:"outpostArn,omitempty" tf:"outpost_arn,omitempty"`

	// The id of an EBS snapshot that will be used to initialize the created
	// EBS volumes. If set, the volume_size attribute must be at least as large as the referenced
	// snapshot.
	// +crossplane:generate:reference:type=EBSSnapshot
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a EBSSnapshot to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a EBSSnapshot to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`

	// The throughput that the EBS volume supports, in MiB/s. Only valid for volume_type of gp3.
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// The size of created volumes in GiB.
	// If snapshot_id is set and volume_size is omitted then the volume will have the same size
	// as the selected snapshot.
	// +kubebuilder:validation:Optional
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// The type of EBS volume to create. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: standard).
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type EphemeralBlockDeviceObservation struct {
}

type EphemeralBlockDeviceParameters struct {

	// The path at which the device is exposed to created instances.
	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// A name for the ephemeral device, of the form "ephemeralN" where
	// N is a volume number starting from zero.
	// +kubebuilder:validation:Required
	VirtualName *string `json:"virtualName" tf:"virtual_name,omitempty"`
}

// AMISpec defines the desired state of AMI
type AMISpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AMIParameters `json:"forProvider"`
}

// AMIStatus defines the observed state of AMI.
type AMIStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AMIObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AMI is the Schema for the AMIs API. Creates and manages a custom Amazon Machine Image (AMI).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AMI struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AMISpec   `json:"spec"`
	Status            AMIStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AMIList contains a list of AMIs
type AMIList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AMI `json:"items"`
}

// Repository type metadata.
var (
	AMI_Kind             = "AMI"
	AMI_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AMI_Kind}.String()
	AMI_KindAPIVersion   = AMI_Kind + "." + CRDGroupVersion.String()
	AMI_GroupVersionKind = CRDGroupVersion.WithKind(AMI_Kind)
)

func init() {
	SchemeBuilder.Register(&AMI{}, &AMIList{})
}
