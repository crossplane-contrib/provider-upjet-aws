/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta12 "github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1"
	v1beta11 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta1 "github.com/upbound/provider-aws/apis/kms/v1beta1"
	v1beta13 "github.com/upbound/provider-aws/apis/sns/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AMI.
func (mg *AMI) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.EBSBlockDevice); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EBSBlockDevice[i3].SnapshotID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EBSBlockDevice[i3].SnapshotIDRef,
			Selector:     mg.Spec.ForProvider.EBSBlockDevice[i3].SnapshotIDSelector,
			To: reference.To{
				List:    &EBSSnapshotList{},
				Managed: &EBSSnapshot{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EBSBlockDevice[i3].SnapshotID")
		}
		mg.Spec.ForProvider.EBSBlockDevice[i3].SnapshotID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EBSBlockDevice[i3].SnapshotIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this AMICopy.
func (mg *AMICopy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
		Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
		To: reference.To{
			List:    &v1beta1.KeyList{},
			Managed: &v1beta1.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceAMIID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SourceAMIIDRef,
		Selector:     mg.Spec.ForProvider.SourceAMIIDSelector,
		To: reference.To{
			List:    &AMIList{},
			Managed: &AMI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceAMIID")
	}
	mg.Spec.ForProvider.SourceAMIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceAMIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AMILaunchPermission.
func (mg *AMILaunchPermission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ImageID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ImageIDRef,
		Selector:     mg.Spec.ForProvider.ImageIDSelector,
		To: reference.To{
			List:    &AMIList{},
			Managed: &AMI{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ImageID")
	}
	mg.Spec.ForProvider.ImageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ImageIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CarrierGateway.
func (mg *CarrierGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DefaultNetworkACL.
func (mg *DefaultNetworkACL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultNetworkACLID),
		Extract:      resource.ExtractParamPath("default_network_acl_id", true),
		Reference:    mg.Spec.ForProvider.DefaultNetworkACLIDRef,
		Selector:     mg.Spec.ForProvider.DefaultNetworkACLIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultNetworkACLID")
	}
	mg.Spec.ForProvider.DefaultNetworkACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultNetworkACLIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SubnetIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SubnetIDRefs,
		Selector:      mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetIds")
	}
	mg.Spec.ForProvider.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SubnetIDRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this DefaultRouteTable.
func (mg *DefaultRouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteTableID),
		Extract:      resource.ExtractParamPath("default_route_table_id", true),
		Reference:    mg.Spec.ForProvider.DefaultRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.DefaultRouteTableIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteTableID")
	}
	mg.Spec.ForProvider.DefaultRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultRouteTableIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Route); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Route[i3].EgressOnlyGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Route[i3].EgressOnlyGatewayIDRef,
			Selector:     mg.Spec.ForProvider.Route[i3].EgressOnlyGatewayIDSelector,
			To: reference.To{
				List:    &EgressOnlyInternetGatewayList{},
				Managed: &EgressOnlyInternetGateway{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Route[i3].EgressOnlyGatewayID")
		}
		mg.Spec.ForProvider.Route[i3].EgressOnlyGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Route[i3].EgressOnlyGatewayIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Route); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Route[i3].GatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Route[i3].GatewayIDRef,
			Selector:     mg.Spec.ForProvider.Route[i3].GatewayIDSelector,
			To: reference.To{
				List:    &InternetGatewayList{},
				Managed: &InternetGateway{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Route[i3].GatewayID")
		}
		mg.Spec.ForProvider.Route[i3].GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Route[i3].GatewayIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DefaultSecurityGroup.
func (mg *DefaultSecurityGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EBSDefaultKMSKey.
func (mg *EBSDefaultKMSKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.KeyArnRef,
		Selector:     mg.Spec.ForProvider.KeyArnSelector,
		To: reference.To{
			List:    &v1beta1.KeyList{},
			Managed: &v1beta1.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyArn")
	}
	mg.Spec.ForProvider.KeyArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EBSSnapshot.
func (mg *EBSSnapshot) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VolumeIDRef,
		Selector:     mg.Spec.ForProvider.VolumeIDSelector,
		To: reference.To{
			List:    &EBSVolumeList{},
			Managed: &EBSVolume{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeID")
	}
	mg.Spec.ForProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EBSSnapshotCopy.
func (mg *EBSSnapshotCopy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
		Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
		To: reference.To{
			List:    &v1beta1.KeyList{},
			Managed: &v1beta1.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceSnapshotID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SourceSnapshotIDRef,
		Selector:     mg.Spec.ForProvider.SourceSnapshotIDSelector,
		To: reference.To{
			List:    &EBSSnapshotList{},
			Managed: &EBSSnapshot{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceSnapshotID")
	}
	mg.Spec.ForProvider.SourceSnapshotID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceSnapshotIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EBSSnapshotImport.
func (mg *EBSSnapshotImport) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
		Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
		To: reference.To{
			List:    &v1beta1.KeyList{},
			Managed: &v1beta1.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EBSVolume.
func (mg *EBSVolume) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKeyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KMSKeyIDRef,
		Selector:     mg.Spec.ForProvider.KMSKeyIDSelector,
		To: reference.To{
			List:    &v1beta1.KeyList{},
			Managed: &v1beta1.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKeyID")
	}
	mg.Spec.ForProvider.KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EIP.
func (mg *EIP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Instance),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.InstanceRef,
		Selector:     mg.Spec.ForProvider.InstanceSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Instance")
	}
	mg.Spec.ForProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkInterfaceRef,
		Selector:     mg.Spec.ForProvider.NetworkInterfaceSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface")
	}
	mg.Spec.ForProvider.NetworkInterface = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInterfaceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EIPAssociation.
func (mg *EIPAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AllocationID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AllocationIDRef,
		Selector:     mg.Spec.ForProvider.AllocationIDSelector,
		To: reference.To{
			List:    &EIPList{},
			Managed: &EIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AllocationID")
	}
	mg.Spec.ForProvider.AllocationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AllocationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EgressOnlyInternetGateway.
func (mg *EgressOnlyInternetGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FlowLog.
func (mg *FlowLog) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IAMRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.IAMRoleArnRef,
		Selector:     mg.Spec.ForProvider.IAMRoleArnSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IAMRoleArn")
	}
	mg.Spec.ForProvider.IAMRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IAMRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogDestination),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.LogDestinationRef,
		Selector:     mg.Spec.ForProvider.LogDestinationSelector,
		To: reference.To{
			List:    &v1beta12.GroupList{},
			Managed: &v1beta12.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogDestination")
	}
	mg.Spec.ForProvider.LogDestination = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogDestinationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.EBSBlockDevice); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EBSBlockDevice[i3].KMSKeyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EBSBlockDevice[i3].KMSKeyIDRef,
			Selector:     mg.Spec.ForProvider.EBSBlockDevice[i3].KMSKeyIDSelector,
			To: reference.To{
				List:    &v1beta1.KeyList{},
				Managed: &v1beta1.Key{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EBSBlockDevice[i3].KMSKeyID")
		}
		mg.Spec.ForProvider.EBSBlockDevice[i3].KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EBSBlockDevice[i3].KMSKeyIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].NetworkInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkInterfaceIDRef,
			Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkInterfaceIDSelector,
			To: reference.To{
				List:    &NetworkInterfaceList{},
				Managed: &NetworkInterface{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].NetworkInterfaceID")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkInterfaceIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RootBlockDevice); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RootBlockDevice[i3].KMSKeyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RootBlockDevice[i3].KMSKeyIDRef,
			Selector:     mg.Spec.ForProvider.RootBlockDevice[i3].KMSKeyIDSelector,
			To: reference.To{
				List:    &v1beta1.KeyList{},
				Managed: &v1beta1.Key{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RootBlockDevice[i3].KMSKeyID")
		}
		mg.Spec.ForProvider.RootBlockDevice[i3].KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RootBlockDevice[i3].KMSKeyIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VPCSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.VPCSecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCSecurityGroupIds")
	}
	mg.Spec.ForProvider.VPCSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VPCSecurityGroupIDRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this InstanceState.
func (mg *InstanceState) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InternetGateway.
func (mg *InternetGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LaunchTemplate.
func (mg *LaunchTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BlockDeviceMappings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS[i4].KMSKeyID),
				Extract:      common.ARNExtractor(),
				Reference:    mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS[i4].KMSKeyIDRef,
				Selector:     mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS[i4].KMSKeyIDSelector,
				To: reference.To{
					List:    &v1beta1.KeyList{},
					Managed: &v1beta1.Key{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS[i4].KMSKeyID")
			}
			mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS[i4].KMSKeyID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.BlockDeviceMappings[i3].EBS[i4].KMSKeyIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IAMInstanceProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IAMInstanceProfile[i3].Arn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.IAMInstanceProfile[i3].ArnRef,
			Selector:     mg.Spec.ForProvider.IAMInstanceProfile[i3].ArnSelector,
			To: reference.To{
				List:    &v1beta11.InstanceProfileList{},
				Managed: &v1beta11.InstanceProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IAMInstanceProfile[i3].Arn")
		}
		mg.Spec.ForProvider.IAMInstanceProfile[i3].Arn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.IAMInstanceProfile[i3].ArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.IAMInstanceProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IAMInstanceProfile[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.IAMInstanceProfile[i3].NameRef,
			Selector:     mg.Spec.ForProvider.IAMInstanceProfile[i3].NameSelector,
			To: reference.To{
				List:    &v1beta11.InstanceProfileList{},
				Managed: &v1beta11.InstanceProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IAMInstanceProfile[i3].Name")
		}
		mg.Spec.ForProvider.IAMInstanceProfile[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.IAMInstanceProfile[i3].NameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterfaces); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaces[i3].NetworkInterfaceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkInterfaces[i3].NetworkInterfaceIDRef,
			Selector:     mg.Spec.ForProvider.NetworkInterfaces[i3].NetworkInterfaceIDSelector,
			To: reference.To{
				List:    &NetworkInterfaceList{},
				Managed: &NetworkInterface{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaces[i3].NetworkInterfaceID")
		}
		mg.Spec.ForProvider.NetworkInterfaces[i3].NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterfaces[i3].NetworkInterfaceIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterfaces); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.NetworkInterfaces[i3].SecurityGroups),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.NetworkInterfaces[i3].SecurityGroupRefs,
			Selector:      mg.Spec.ForProvider.NetworkInterfaces[i3].SecurityGroupSelector,
			To: reference.To{
				List:    &SecurityGroupList{},
				Managed: &SecurityGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaces[i3].SecurityGroups")
		}
		mg.Spec.ForProvider.NetworkInterfaces[i3].SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.NetworkInterfaces[i3].SecurityGroupRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterfaces); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaces[i3].SubnetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkInterfaces[i3].SubnetIDRef,
			Selector:     mg.Spec.ForProvider.NetworkInterfaces[i3].SubnetIDSelector,
			To: reference.To{
				List:    &SubnetList{},
				Managed: &Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaces[i3].SubnetID")
		}
		mg.Spec.ForProvider.NetworkInterfaces[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterfaces[i3].SubnetIDRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroupNames),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupNameRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupNameSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupNames")
	}
	mg.Spec.ForProvider.SecurityGroupNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupNameRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VPCSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.VPCSecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCSecurityGroupIds")
	}
	mg.Spec.ForProvider.VPCSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VPCSecurityGroupIDRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MainRouteTableAssociation.
func (mg *MainRouteTableAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RouteTableIDRef,
		Selector:     mg.Spec.ForProvider.RouteTableIDSelector,
		To: reference.To{
			List:    &RouteTableList{},
			Managed: &RouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouteTableID")
	}
	mg.Spec.ForProvider.RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedPrefixList.
func (mg *ManagedPrefixList) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Entry); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Entry[i3].Cidr),
			Extract:      resource.ExtractParamPath("cidr_block", false),
			Reference:    mg.Spec.ForProvider.Entry[i3].CidrRef,
			Selector:     mg.Spec.ForProvider.Entry[i3].CidrSelector,
			To: reference.To{
				List:    &VPCIPv4CidrBlockAssociationList{},
				Managed: &VPCIPv4CidrBlockAssociation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Entry[i3].Cidr")
		}
		mg.Spec.ForProvider.Entry[i3].Cidr = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Entry[i3].CidrRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedPrefixListEntry.
func (mg *ManagedPrefixListEntry) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Cidr),
		Extract:      resource.ExtractParamPath("cidr_block", false),
		Reference:    mg.Spec.ForProvider.CidrRef,
		Selector:     mg.Spec.ForProvider.CidrSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Cidr")
	}
	mg.Spec.ForProvider.Cidr = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CidrRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrefixListID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PrefixListIDRef,
		Selector:     mg.Spec.ForProvider.PrefixListIDSelector,
		To: reference.To{
			List:    &ManagedPrefixListList{},
			Managed: &ManagedPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrefixListID")
	}
	mg.Spec.ForProvider.PrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrefixListIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NATGateway.
func (mg *NATGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AllocationID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AllocationIDRef,
		Selector:     mg.Spec.ForProvider.AllocationIDSelector,
		To: reference.To{
			List:    &EIPList{},
			Managed: &EIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AllocationID")
	}
	mg.Spec.ForProvider.AllocationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AllocationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkACL.
func (mg *NetworkACL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SubnetIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SubnetIDRefs,
		Selector:      mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetIds")
	}
	mg.Spec.ForProvider.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SubnetIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkACLRule.
func (mg *NetworkACLRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkACLID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkACLIDRef,
		Selector:     mg.Spec.ForProvider.NetworkACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkACLID")
	}
	mg.Spec.ForProvider.NetworkACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkACLIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkInsightsAnalysis.
func (mg *NetworkInsightsAnalysis) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInsightsPathID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkInsightsPathIDRef,
		Selector:     mg.Spec.ForProvider.NetworkInsightsPathIDSelector,
		To: reference.To{
			List:    &NetworkInsightsPathList{},
			Managed: &NetworkInsightsPath{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInsightsPathID")
	}
	mg.Spec.ForProvider.NetworkInsightsPathID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInsightsPathIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkInsightsPath.
func (mg *NetworkInsightsPath) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DestinationRef,
		Selector:     mg.Spec.ForProvider.DestinationSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Destination")
	}
	mg.Spec.ForProvider.Destination = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DestinationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SourceRef,
		Selector:     mg.Spec.ForProvider.SourceSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Source")
	}
	mg.Spec.ForProvider.Source = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkInterface.
func (mg *NetworkInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroups),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroups")
	}
	mg.Spec.ForProvider.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkInterfaceAttachment.
func (mg *NetworkInterfaceAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkInterfaceIDRef,
		Selector:     mg.Spec.ForProvider.NetworkInterfaceIDSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaceID")
	}
	mg.Spec.ForProvider.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInterfaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkInterfaceSgAttachment.
func (mg *NetworkInterfaceSgAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaceID),
		Extract:      resource.ExtractParamPath("primary_network_interface_id", true),
		Reference:    mg.Spec.ForProvider.NetworkInterfaceIDRef,
		Selector:     mg.Spec.ForProvider.NetworkInterfaceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaceID")
	}
	mg.Spec.ForProvider.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInterfaceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Route.
func (mg *Route) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationPrefixListID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DestinationPrefixListIDRef,
		Selector:     mg.Spec.ForProvider.DestinationPrefixListIDSelector,
		To: reference.To{
			List:    &ManagedPrefixListList{},
			Managed: &ManagedPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DestinationPrefixListID")
	}
	mg.Spec.ForProvider.DestinationPrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DestinationPrefixListIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EgressOnlyGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.EgressOnlyGatewayIDRef,
		Selector:     mg.Spec.ForProvider.EgressOnlyGatewayIDSelector,
		To: reference.To{
			List:    &EgressOnlyInternetGatewayList{},
			Managed: &EgressOnlyInternetGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EgressOnlyGatewayID")
	}
	mg.Spec.ForProvider.EgressOnlyGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EgressOnlyGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &InternetGatewayList{},
			Managed: &InternetGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NATGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NATGatewayIDRef,
		Selector:     mg.Spec.ForProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &NATGatewayList{},
			Managed: &NATGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATGatewayID")
	}
	mg.Spec.ForProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkInterfaceIDRef,
		Selector:     mg.Spec.ForProvider.NetworkInterfaceIDSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaceID")
	}
	mg.Spec.ForProvider.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInterfaceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RouteTableIDRef,
		Selector:     mg.Spec.ForProvider.RouteTableIDSelector,
		To: reference.To{
			List:    &RouteTableList{},
			Managed: &RouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouteTableID")
	}
	mg.Spec.ForProvider.RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCEndpointID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCEndpointIDRef,
		Selector:     mg.Spec.ForProvider.VPCEndpointIDSelector,
		To: reference.To{
			List:    &VPCEndpointList{},
			Managed: &VPCEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpointID")
	}
	mg.Spec.ForProvider.VPCEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCEndpointIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCPeeringConnectionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCPeeringConnectionIDRef,
		Selector:     mg.Spec.ForProvider.VPCPeeringConnectionIDSelector,
		To: reference.To{
			List:    &VPCPeeringConnectionList{},
			Managed: &VPCPeeringConnection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCPeeringConnectionID")
	}
	mg.Spec.ForProvider.VPCPeeringConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCPeeringConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouteTable.
func (mg *RouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouteTableAssociation.
func (mg *RouteTableAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &InternetGatewayList{},
			Managed: &InternetGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RouteTableIDRef,
		Selector:     mg.Spec.ForProvider.RouteTableIDSelector,
		To: reference.To{
			List:    &RouteTableList{},
			Managed: &RouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouteTableID")
	}
	mg.Spec.ForProvider.RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityGroup.
func (mg *SecurityGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityGroupEgressRule.
func (mg *SecurityGroupEgressRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrefixListID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PrefixListIDRef,
		Selector:     mg.Spec.ForProvider.PrefixListIDSelector,
		To: reference.To{
			List:    &ManagedPrefixListList{},
			Managed: &ManagedPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrefixListID")
	}
	mg.Spec.ForProvider.PrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrefixListIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ReferencedSecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ReferencedSecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.ReferencedSecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ReferencedSecurityGroupID")
	}
	mg.Spec.ForProvider.ReferencedSecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ReferencedSecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityGroupIngressRule.
func (mg *SecurityGroupIngressRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrefixListID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PrefixListIDRef,
		Selector:     mg.Spec.ForProvider.PrefixListIDSelector,
		To: reference.To{
			List:    &ManagedPrefixListList{},
			Managed: &ManagedPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrefixListID")
	}
	mg.Spec.ForProvider.PrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrefixListIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ReferencedSecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ReferencedSecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.ReferencedSecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ReferencedSecurityGroupID")
	}
	mg.Spec.ForProvider.ReferencedSecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ReferencedSecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityGroupRule.
func (mg *SecurityGroupRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.PrefixListIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.PrefixListIDRefs,
		Selector:      mg.Spec.ForProvider.PrefixListIDSelector,
		To: reference.To{
			List:    &ManagedPrefixListList{},
			Managed: &ManagedPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrefixListIds")
	}
	mg.Spec.ForProvider.PrefixListIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.PrefixListIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceSecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SourceSecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SourceSecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceSecurityGroupID")
	}
	mg.Spec.ForProvider.SourceSecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceSecurityGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SnapshotCreateVolumePermission.
func (mg *SnapshotCreateVolumePermission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnapshotID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SnapshotIDRef,
		Selector:     mg.Spec.ForProvider.SnapshotIDSelector,
		To: reference.To{
			List:    &EBSSnapshotList{},
			Managed: &EBSSnapshot{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SnapshotID")
	}
	mg.Spec.ForProvider.SnapshotID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnapshotIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpotFleetRequest.
func (mg *SpotFleetRequest) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LaunchSpecification); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LaunchSpecification[i3].IAMInstanceProfileArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.LaunchSpecification[i3].IAMInstanceProfileArnRef,
			Selector:     mg.Spec.ForProvider.LaunchSpecification[i3].IAMInstanceProfileArnSelector,
			To: reference.To{
				List:    &v1beta11.InstanceProfileList{},
				Managed: &v1beta11.InstanceProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LaunchSpecification[i3].IAMInstanceProfileArn")
		}
		mg.Spec.ForProvider.LaunchSpecification[i3].IAMInstanceProfileArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LaunchSpecification[i3].IAMInstanceProfileArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LaunchTemplateConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].ID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].IDRef,
				Selector:     mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].IDSelector,
				To: reference.To{
					List:    &LaunchTemplateList{},
					Managed: &LaunchTemplate{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].ID")
			}
			mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LaunchTemplateConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].Version),
				Extract:      resource.ExtractParamPath("latest_version", true),
				Reference:    mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].VersionRef,
				Selector:     mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].VersionSelector,
				To: reference.To{
					List:    &LaunchTemplateList{},
					Managed: &LaunchTemplate{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].Version")
			}
			mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].Version = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LaunchTemplateConfig[i3].LaunchTemplateSpecification[i4].VersionRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this SpotInstanceRequest.
func (mg *SpotInstanceRequest) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.VPCSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.VPCSecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCSecurityGroupIds")
	}
	mg.Spec.ForProvider.VPCSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VPCSecurityGroupIDRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Subnet.
func (mg *Subnet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SubnetCidrReservation.
func (mg *SubnetCidrReservation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TrafficMirrorFilterRule.
func (mg *TrafficMirrorFilterRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TrafficMirrorFilterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TrafficMirrorFilterIDRef,
		Selector:     mg.Spec.ForProvider.TrafficMirrorFilterIDSelector,
		To: reference.To{
			List:    &TrafficMirrorFilterList{},
			Managed: &TrafficMirrorFilter{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TrafficMirrorFilterID")
	}
	mg.Spec.ForProvider.TrafficMirrorFilterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TrafficMirrorFilterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayConnect.
func (mg *TransitGatewayConnect) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransportAttachmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransportAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransportAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransportAttachmentID")
	}
	mg.Spec.ForProvider.TransportAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransportAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayConnectPeer.
func (mg *TransitGatewayConnectPeer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayConnectList{},
			Managed: &TransitGatewayConnect{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayMulticastDomain.
func (mg *TransitGatewayMulticastDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayMulticastDomainAssociation.
func (mg *TransitGatewayMulticastDomainAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayMulticastDomainID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayMulticastDomainIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayMulticastDomainIDSelector,
		To: reference.To{
			List:    &TransitGatewayMulticastDomainList{},
			Managed: &TransitGatewayMulticastDomain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayMulticastDomainID")
	}
	mg.Spec.ForProvider.TransitGatewayMulticastDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayMulticastDomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayMulticastGroupMember.
func (mg *TransitGatewayMulticastGroupMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkInterfaceIDRef,
		Selector:     mg.Spec.ForProvider.NetworkInterfaceIDSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaceID")
	}
	mg.Spec.ForProvider.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInterfaceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayMulticastDomainID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayMulticastDomainIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayMulticastDomainIDSelector,
		To: reference.To{
			List:    &TransitGatewayMulticastDomainList{},
			Managed: &TransitGatewayMulticastDomain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayMulticastDomainID")
	}
	mg.Spec.ForProvider.TransitGatewayMulticastDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayMulticastDomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayMulticastGroupSource.
func (mg *TransitGatewayMulticastGroupSource) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterfaceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkInterfaceIDRef,
		Selector:     mg.Spec.ForProvider.NetworkInterfaceIDSelector,
		To: reference.To{
			List:    &NetworkInterfaceList{},
			Managed: &NetworkInterface{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterfaceID")
	}
	mg.Spec.ForProvider.NetworkInterfaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkInterfaceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayMulticastDomainID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayMulticastDomainIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayMulticastDomainIDSelector,
		To: reference.To{
			List:    &TransitGatewayMulticastDomainList{},
			Managed: &TransitGatewayMulticastDomain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayMulticastDomainID")
	}
	mg.Spec.ForProvider.TransitGatewayMulticastDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayMulticastDomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayPeeringAttachment.
func (mg *TransitGatewayPeeringAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerTransitGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PeerTransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.PeerTransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerTransitGatewayID")
	}
	mg.Spec.ForProvider.PeerTransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerTransitGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayPeeringAttachmentAccepter.
func (mg *TransitGatewayPeeringAttachmentAccepter) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayPeeringAttachmentList{},
			Managed: &TransitGatewayPeeringAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayPolicyTable.
func (mg *TransitGatewayPolicyTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayPrefixListReference.
func (mg *TransitGatewayPrefixListReference) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrefixListID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PrefixListIDRef,
		Selector:     mg.Spec.ForProvider.PrefixListIDSelector,
		To: reference.To{
			List:    &ManagedPrefixListList{},
			Managed: &ManagedPrefixList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrefixListID")
	}
	mg.Spec.ForProvider.PrefixListID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrefixListIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayRouteTableID),
		Extract:      resource.ExtractParamPath("association_default_route_table_id", true),
		Reference:    mg.Spec.ForProvider.TransitGatewayRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayRouteTableIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayRouteTableID")
	}
	mg.Spec.ForProvider.TransitGatewayRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayRouteTableIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayRouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayRouteTableIDSelector,
		To: reference.To{
			List:    &TransitGatewayRouteTableList{},
			Managed: &TransitGatewayRouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayRouteTableID")
	}
	mg.Spec.ForProvider.TransitGatewayRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayRouteTableIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayRouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayRouteTableIDSelector,
		To: reference.To{
			List:    &TransitGatewayRouteTableList{},
			Managed: &TransitGatewayRouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayRouteTableID")
	}
	mg.Spec.ForProvider.TransitGatewayRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayRouteTableIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayRouteTablePropagation.
func (mg *TransitGatewayRouteTablePropagation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayRouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayRouteTableIDSelector,
		To: reference.To{
			List:    &TransitGatewayRouteTableList{},
			Managed: &TransitGatewayRouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayRouteTableID")
	}
	mg.Spec.ForProvider.TransitGatewayRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayRouteTableIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayVPCAttachment.
func (mg *TransitGatewayVPCAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SubnetIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SubnetIDRefs,
		Selector:      mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetIds")
	}
	mg.Spec.ForProvider.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SubnetIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransitGatewayVPCAttachmentAccepter.
func (mg *TransitGatewayVPCAttachmentAccepter) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayAttachmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransitGatewayAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayAttachmentIDSelector,
		To: reference.To{
			List:    &TransitGatewayVPCAttachmentList{},
			Managed: &TransitGatewayVPCAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayAttachmentID")
	}
	mg.Spec.ForProvider.TransitGatewayAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPC.
func (mg *VPC) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPv4IpamPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IPv4IpamPoolIDRef,
		Selector:     mg.Spec.ForProvider.IPv4IpamPoolIDSelector,
		To: reference.To{
			List:    &VPCIpamPoolList{},
			Managed: &VPCIpamPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPv4IpamPoolID")
	}
	mg.Spec.ForProvider.IPv4IpamPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPv4IpamPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCDHCPOptionsAssociation.
func (mg *VPCDHCPOptionsAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DHCPOptionsID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DHCPOptionsIDRef,
		Selector:     mg.Spec.ForProvider.DHCPOptionsIDSelector,
		To: reference.To{
			List:    &VPCDHCPOptionsList{},
			Managed: &VPCDHCPOptions{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DHCPOptionsID")
	}
	mg.Spec.ForProvider.DHCPOptionsID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DHCPOptionsIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCEndpoint.
func (mg *VPCEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceName),
		Extract:      resource.ExtractParamPath("service_name", true),
		Reference:    mg.Spec.ForProvider.ServiceNameRef,
		Selector:     mg.Spec.ForProvider.ServiceNameSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceName")
	}
	mg.Spec.ForProvider.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCEndpointConnectionNotification.
func (mg *VPCEndpointConnectionNotification) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionNotificationArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.ConnectionNotificationArnRef,
		Selector:     mg.Spec.ForProvider.ConnectionNotificationArnSelector,
		To: reference.To{
			List:    &v1beta13.TopicList{},
			Managed: &v1beta13.Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionNotificationArn")
	}
	mg.Spec.ForProvider.ConnectionNotificationArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionNotificationArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCEndpointServiceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCEndpointServiceIDRef,
		Selector:     mg.Spec.ForProvider.VPCEndpointServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpointServiceID")
	}
	mg.Spec.ForProvider.VPCEndpointServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCEndpointServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCEndpointRouteTableAssociation.
func (mg *VPCEndpointRouteTableAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteTableID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RouteTableIDRef,
		Selector:     mg.Spec.ForProvider.RouteTableIDSelector,
		To: reference.To{
			List:    &RouteTableList{},
			Managed: &RouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouteTableID")
	}
	mg.Spec.ForProvider.RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCEndpointID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCEndpointIDRef,
		Selector:     mg.Spec.ForProvider.VPCEndpointIDSelector,
		To: reference.To{
			List:    &VPCEndpointList{},
			Managed: &VPCEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpointID")
	}
	mg.Spec.ForProvider.VPCEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCEndpointIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCEndpointSecurityGroupAssociation.
func (mg *VPCEndpointSecurityGroupAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCEndpointID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCEndpointIDRef,
		Selector:     mg.Spec.ForProvider.VPCEndpointIDSelector,
		To: reference.To{
			List:    &VPCEndpointList{},
			Managed: &VPCEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpointID")
	}
	mg.Spec.ForProvider.VPCEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCEndpointIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCEndpointServiceAllowedPrincipal.
func (mg *VPCEndpointServiceAllowedPrincipal) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCEndpointServiceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCEndpointServiceIDRef,
		Selector:     mg.Spec.ForProvider.VPCEndpointServiceIDSelector,
		To: reference.To{
			List:    &VPCEndpointServiceList{},
			Managed: &VPCEndpointService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpointServiceID")
	}
	mg.Spec.ForProvider.VPCEndpointServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCEndpointServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCEndpointSubnetAssociation.
func (mg *VPCEndpointSubnetAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &SubnetList{},
			Managed: &Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCEndpointID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCEndpointIDRef,
		Selector:     mg.Spec.ForProvider.VPCEndpointIDSelector,
		To: reference.To{
			List:    &VPCEndpointList{},
			Managed: &VPCEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpointID")
	}
	mg.Spec.ForProvider.VPCEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCEndpointIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCIPv4CidrBlockAssociation.
func (mg *VPCIPv4CidrBlockAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCIpamPool.
func (mg *VPCIpamPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IpamScopeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IpamScopeIDRef,
		Selector:     mg.Spec.ForProvider.IpamScopeIDSelector,
		To: reference.To{
			List:    &VPCIpamScopeList{},
			Managed: &VPCIpamScope{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpamScopeID")
	}
	mg.Spec.ForProvider.IpamScopeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IpamScopeIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceIpamPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SourceIpamPoolIDRef,
		Selector:     mg.Spec.ForProvider.SourceIpamPoolIDSelector,
		To: reference.To{
			List:    &VPCIpamPoolList{},
			Managed: &VPCIpamPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceIpamPoolID")
	}
	mg.Spec.ForProvider.SourceIpamPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceIpamPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCIpamPoolCidr.
func (mg *VPCIpamPoolCidr) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IpamPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IpamPoolIDRef,
		Selector:     mg.Spec.ForProvider.IpamPoolIDSelector,
		To: reference.To{
			List:    &VPCIpamPoolList{},
			Managed: &VPCIpamPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpamPoolID")
	}
	mg.Spec.ForProvider.IpamPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IpamPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCIpamPoolCidrAllocation.
func (mg *VPCIpamPoolCidrAllocation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IpamPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IpamPoolIDRef,
		Selector:     mg.Spec.ForProvider.IpamPoolIDSelector,
		To: reference.To{
			List:    &VPCIpamPoolList{},
			Managed: &VPCIpamPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpamPoolID")
	}
	mg.Spec.ForProvider.IpamPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IpamPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCIpamScope.
func (mg *VPCIpamScope) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IpamID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IpamIDRef,
		Selector:     mg.Spec.ForProvider.IpamIDSelector,
		To: reference.To{
			List:    &VPCIpamList{},
			Managed: &VPCIpam{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpamID")
	}
	mg.Spec.ForProvider.IpamID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IpamIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCPeeringConnection.
func (mg *VPCPeeringConnection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerVPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PeerVPCIDRef,
		Selector:     mg.Spec.ForProvider.PeerVPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerVPCID")
	}
	mg.Spec.ForProvider.PeerVPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerVPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCPeeringConnectionAccepter.
func (mg *VPCPeeringConnectionAccepter) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCPeeringConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCPeeringConnectionIDRef,
		Selector:     mg.Spec.ForProvider.VPCPeeringConnectionIDSelector,
		To: reference.To{
			List:    &VPCPeeringConnectionList{},
			Managed: &VPCPeeringConnection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCPeeringConnectionID")
	}
	mg.Spec.ForProvider.VPCPeeringConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCPeeringConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPCPeeringConnectionOptions.
func (mg *VPCPeeringConnectionOptions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCPeeringConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCPeeringConnectionIDRef,
		Selector:     mg.Spec.ForProvider.VPCPeeringConnectionIDSelector,
		To: reference.To{
			List:    &VPCPeeringConnectionList{},
			Managed: &VPCPeeringConnection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCPeeringConnectionID")
	}
	mg.Spec.ForProvider.VPCPeeringConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCPeeringConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNConnection.
func (mg *VPNConnection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomerGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CustomerGatewayIDRef,
		Selector:     mg.Spec.ForProvider.CustomerGatewayIDSelector,
		To: reference.To{
			List:    &CustomerGatewayList{},
			Managed: &CustomerGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomerGatewayID")
	}
	mg.Spec.ForProvider.CustomerGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomerGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitGatewayIDRef,
		Selector:     mg.Spec.ForProvider.TransitGatewayIDSelector,
		To: reference.To{
			List:    &TransitGatewayList{},
			Managed: &TransitGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitGatewayID")
	}
	mg.Spec.ForProvider.TransitGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Type),
		Extract:      resource.ExtractParamPath("type", false),
		Reference:    mg.Spec.ForProvider.TypeRef,
		Selector:     mg.Spec.ForProvider.TypeSelector,
		To: reference.To{
			List:    &CustomerGatewayList{},
			Managed: &CustomerGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Type")
	}
	mg.Spec.ForProvider.Type = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TypeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
		Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
		To: reference.To{
			List:    &VPNGatewayList{},
			Managed: &VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNConnectionRoute.
func (mg *VPNConnectionRoute) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPNConnectionIDRef,
		Selector:     mg.Spec.ForProvider.VPNConnectionIDSelector,
		To: reference.To{
			List:    &VPNConnectionList{},
			Managed: &VPNConnection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNConnectionID")
	}
	mg.Spec.ForProvider.VPNConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNConnectionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNGateway.
func (mg *VPNGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNGatewayAttachment.
func (mg *VPNGatewayAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
		Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
		To: reference.To{
			List:    &VPNGatewayList{},
			Managed: &VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNGatewayRoutePropagation.
func (mg *VPNGatewayRoutePropagation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteTableID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RouteTableIDRef,
		Selector:     mg.Spec.ForProvider.RouteTableIDSelector,
		To: reference.To{
			List:    &RouteTableList{},
			Managed: &RouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouteTableID")
	}
	mg.Spec.ForProvider.RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
		Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
		To: reference.To{
			List:    &VPNGatewayList{},
			Managed: &VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VolumeAttachment.
func (mg *VolumeAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VolumeIDRef,
		Selector:     mg.Spec.ForProvider.VolumeIDSelector,
		To: reference.To{
			List:    &EBSVolumeList{},
			Managed: &EBSVolume{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeID")
	}
	mg.Spec.ForProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeIDRef = rsp.ResolvedReference

	return nil
}
