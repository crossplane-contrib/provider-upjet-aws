/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCEndpointPolicyObservation struct {

	// The ID of the VPC endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPCEndpointPolicyParameters struct {

	// A policy to attach to the endpoint that controls access to the service. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The VPC Endpoint ID.
	// +crossplane:generate:reference:type=VPCEndpoint
	// +kubebuilder:validation:Optional
	VPCEndpointID *string `json:"vpcEndpointId,omitempty" tf:"vpc_endpoint_id,omitempty"`

	// Reference to a VPCEndpoint to populate vpcEndpointId.
	// +kubebuilder:validation:Optional
	VPCEndpointIDRef *v1.Reference `json:"vpcEndpointIdRef,omitempty" tf:"-"`

	// Selector for a VPCEndpoint to populate vpcEndpointId.
	// +kubebuilder:validation:Optional
	VPCEndpointIDSelector *v1.Selector `json:"vpcEndpointIdSelector,omitempty" tf:"-"`
}

// VPCEndpointPolicySpec defines the desired state of VPCEndpointPolicy
type VPCEndpointPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCEndpointPolicyParameters `json:"forProvider"`
}

// VPCEndpointPolicyStatus defines the observed state of VPCEndpointPolicy.
type VPCEndpointPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCEndpointPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointPolicy is the Schema for the VPCEndpointPolicys API. Provides a VPC Endpoint Policy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VPCEndpointPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEndpointPolicySpec   `json:"spec"`
	Status            VPCEndpointPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointPolicyList contains a list of VPCEndpointPolicys
type VPCEndpointPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEndpointPolicy `json:"items"`
}

// Repository type metadata.
var (
	VPCEndpointPolicy_Kind             = "VPCEndpointPolicy"
	VPCEndpointPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCEndpointPolicy_Kind}.String()
	VPCEndpointPolicy_KindAPIVersion   = VPCEndpointPolicy_Kind + "." + CRDGroupVersion.String()
	VPCEndpointPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VPCEndpointPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCEndpointPolicy{}, &VPCEndpointPolicyList{})
}
