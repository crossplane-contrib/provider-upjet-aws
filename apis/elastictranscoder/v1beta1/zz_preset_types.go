// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AudioCodecOptionsInitParameters struct {

	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are 16 and 24. (FLAC/PCM Only)
	BitDepth *string `json:"bitDepth,omitempty" tf:"bit_depth,omitempty"`

	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `json:"bitOrder,omitempty" tf:"bit_order,omitempty"`

	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `json:"signed,omitempty" tf:"signed,omitempty"`
}

type AudioCodecOptionsObservation struct {

	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are 16 and 24. (FLAC/PCM Only)
	BitDepth *string `json:"bitDepth,omitempty" tf:"bit_depth,omitempty"`

	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	BitOrder *string `json:"bitOrder,omitempty" tf:"bit_order,omitempty"`

	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	Signed *string `json:"signed,omitempty" tf:"signed,omitempty"`
}

type AudioCodecOptionsParameters struct {

	// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are 16 and 24. (FLAC/PCM Only)
	// +kubebuilder:validation:Optional
	BitDepth *string `json:"bitDepth,omitempty" tf:"bit_depth,omitempty"`

	// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
	// +kubebuilder:validation:Optional
	BitOrder *string `json:"bitOrder,omitempty" tf:"bit_order,omitempty"`

	// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
	// +kubebuilder:validation:Optional
	Signed *string `json:"signed,omitempty" tf:"signed,omitempty"`
}

type AudioInitParameters struct {

	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `json:"audioPackingMode,omitempty" tf:"audio_packing_mode,omitempty"`

	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate,omitempty"`

	// The number of audio channels in the output file
	Channels *string `json:"channels,omitempty" tf:"channels,omitempty"`

	// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// The sample rate of the audio stream in the output file, in hertz. Valid values are: auto, 22050, 32000, 44100, 48000, 96000
	SampleRate *string `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type AudioObservation struct {

	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	AudioPackingMode *string `json:"audioPackingMode,omitempty" tf:"audio_packing_mode,omitempty"`

	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate,omitempty"`

	// The number of audio channels in the output file
	Channels *string `json:"channels,omitempty" tf:"channels,omitempty"`

	// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// The sample rate of the audio stream in the output file, in hertz. Valid values are: auto, 22050, 32000, 44100, 48000, 96000
	SampleRate *string `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type AudioParameters struct {

	// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
	// +kubebuilder:validation:Optional
	AudioPackingMode *string `json:"audioPackingMode,omitempty" tf:"audio_packing_mode,omitempty"`

	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	// +kubebuilder:validation:Optional
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate,omitempty"`

	// The number of audio channels in the output file
	// +kubebuilder:validation:Optional
	Channels *string `json:"channels,omitempty" tf:"channels,omitempty"`

	// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
	// +kubebuilder:validation:Optional
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// The sample rate of the audio stream in the output file, in hertz. Valid values are: auto, 22050, 32000, 44100, 48000, 96000
	// +kubebuilder:validation:Optional
	SampleRate *string `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type PresetInitParameters struct {

	// Audio parameters object (documented below).
	Audio []AudioInitParameters `json:"audio,omitempty" tf:"audio,omitempty"`

	// Codec options for the audio parameters (documented below)
	AudioCodecOptions []AudioCodecOptionsInitParameters `json:"audioCodecOptions,omitempty" tf:"audio_codec_options,omitempty"`

	// The container type for the output file. Valid values are flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// A description of the preset (maximum 255 characters)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the preset. (maximum 40 characters)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Thumbnail parameters object (documented below)
	Thumbnails []ThumbnailsInitParameters `json:"thumbnails,omitempty" tf:"thumbnails,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Video parameters object (documented below)
	Video []VideoInitParameters `json:"video,omitempty" tf:"video,omitempty"`

	// Codec options for the video parameters
	// +mapType:granular
	VideoCodecOptions map[string]*string `json:"videoCodecOptions,omitempty" tf:"video_codec_options,omitempty"`

	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks []VideoWatermarksInitParameters `json:"videoWatermarks,omitempty" tf:"video_watermarks,omitempty"`
}

type PresetObservation struct {

	// Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Audio parameters object (documented below).
	Audio []AudioObservation `json:"audio,omitempty" tf:"audio,omitempty"`

	// Codec options for the audio parameters (documented below)
	AudioCodecOptions []AudioCodecOptionsObservation `json:"audioCodecOptions,omitempty" tf:"audio_codec_options,omitempty"`

	// The container type for the output file. Valid values are flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// A description of the preset (maximum 255 characters)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the preset. (maximum 40 characters)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Thumbnail parameters object (documented below)
	Thumbnails []ThumbnailsObservation `json:"thumbnails,omitempty" tf:"thumbnails,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Video parameters object (documented below)
	Video []VideoObservation `json:"video,omitempty" tf:"video,omitempty"`

	// Codec options for the video parameters
	// +mapType:granular
	VideoCodecOptions map[string]*string `json:"videoCodecOptions,omitempty" tf:"video_codec_options,omitempty"`

	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks []VideoWatermarksObservation `json:"videoWatermarks,omitempty" tf:"video_watermarks,omitempty"`
}

type PresetParameters struct {

	// Audio parameters object (documented below).
	// +kubebuilder:validation:Optional
	Audio []AudioParameters `json:"audio,omitempty" tf:"audio,omitempty"`

	// Codec options for the audio parameters (documented below)
	// +kubebuilder:validation:Optional
	AudioCodecOptions []AudioCodecOptionsParameters `json:"audioCodecOptions,omitempty" tf:"audio_codec_options,omitempty"`

	// The container type for the output file. Valid values are flac, flv, fmp4, gif, mp3, mp4, mpg, mxf, oga, ogg, ts, and webm.
	// +kubebuilder:validation:Optional
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// A description of the preset (maximum 255 characters)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the preset. (maximum 40 characters)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Thumbnail parameters object (documented below)
	// +kubebuilder:validation:Optional
	Thumbnails []ThumbnailsParameters `json:"thumbnails,omitempty" tf:"thumbnails,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Video parameters object (documented below)
	// +kubebuilder:validation:Optional
	Video []VideoParameters `json:"video,omitempty" tf:"video,omitempty"`

	// Codec options for the video parameters
	// +kubebuilder:validation:Optional
	// +mapType:granular
	VideoCodecOptions map[string]*string `json:"videoCodecOptions,omitempty" tf:"video_codec_options,omitempty"`

	// Watermark parameters for the video parameters (documented below)
	// +kubebuilder:validation:Optional
	VideoWatermarks []VideoWatermarksParameters `json:"videoWatermarks,omitempty" tf:"video_watermarks,omitempty"`
}

type ThumbnailsInitParameters struct {

	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio,omitempty"`

	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy,omitempty"`

	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`
}

type ThumbnailsObservation struct {

	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio,omitempty"`

	// The format of thumbnails, if any. Valid formats are jpg and png.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy,omitempty"`

	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`
}

type ThumbnailsParameters struct {

	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	// +kubebuilder:validation:Optional
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio,omitempty"`

	// The format of thumbnails, if any. Valid formats are jpg and png.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	// +kubebuilder:validation:Optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	// +kubebuilder:validation:Optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	// +kubebuilder:validation:Optional
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy,omitempty"`

	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	// +kubebuilder:validation:Optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`
}

type VideoInitParameters struct {

	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio,omitempty"`

	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate,omitempty"`

	// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio *string `json:"displayAspectRatio,omitempty" tf:"display_aspect_ratio,omitempty"`

	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop *string `json:"fixedGop,omitempty" tf:"fixed_gop,omitempty"`

	// The frames per second for the video stream in the output file. The following values are valid: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 50, 60.
	FrameRate *string `json:"frameRate,omitempty" tf:"frame_rate,omitempty"`

	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist *string `json:"keyframesMaxDist,omitempty" tf:"keyframes_max_dist,omitempty"`

	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate *string `json:"maxFrameRate,omitempty" tf:"max_frame_rate,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy,omitempty"`

	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`
}

type VideoObservation struct {

	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio,omitempty"`

	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate,omitempty"`

	// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	DisplayAspectRatio *string `json:"displayAspectRatio,omitempty" tf:"display_aspect_ratio,omitempty"`

	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	FixedGop *string `json:"fixedGop,omitempty" tf:"fixed_gop,omitempty"`

	// The frames per second for the video stream in the output file. The following values are valid: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 50, 60.
	FrameRate *string `json:"frameRate,omitempty" tf:"frame_rate,omitempty"`

	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	KeyframesMaxDist *string `json:"keyframesMaxDist,omitempty" tf:"keyframes_max_dist,omitempty"`

	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	MaxFrameRate *string `json:"maxFrameRate,omitempty" tf:"max_frame_rate,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy,omitempty"`

	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`
}

type VideoParameters struct {

	// The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
	// +kubebuilder:validation:Optional
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio,omitempty"`

	// The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
	// +kubebuilder:validation:Optional
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate,omitempty"`

	// The audio codec for the output file. Valid values are AAC, flac, mp2, mp3, pcm, and vorbis.
	// +kubebuilder:validation:Optional
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
	// +kubebuilder:validation:Optional
	DisplayAspectRatio *string `json:"displayAspectRatio,omitempty" tf:"display_aspect_ratio,omitempty"`

	// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
	// +kubebuilder:validation:Optional
	FixedGop *string `json:"fixedGop,omitempty" tf:"fixed_gop,omitempty"`

	// The frames per second for the video stream in the output file. The following values are valid: auto, 10, 15, 23.97, 24, 25, 29.97, 30, 50, 60.
	// +kubebuilder:validation:Optional
	FrameRate *string `json:"frameRate,omitempty" tf:"frame_rate,omitempty"`

	// The maximum number of frames between key frames. Not applicable for containers of type gif.
	// +kubebuilder:validation:Optional
	KeyframesMaxDist *string `json:"keyframesMaxDist,omitempty" tf:"keyframes_max_dist,omitempty"`

	// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
	// +kubebuilder:validation:Optional
	MaxFrameRate *string `json:"maxFrameRate,omitempty" tf:"max_frame_rate,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	// +kubebuilder:validation:Optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	// +kubebuilder:validation:Optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
	// +kubebuilder:validation:Optional
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy,omitempty"`

	// The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values max_width, max_height, sizing_policy, and padding_policy instead of resolution and aspect_ratio. The two groups of settings are mutually exclusive. Do not use them together)
	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	// +kubebuilder:validation:Optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`
}

type VideoWatermarksInitParameters struct {

	// The horizontal position of the watermark unless you specify a nonzero value for horzontal_offset.
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by horizontal_align.
	HorizontalOffset *string `json:"horizontalOffset,omitempty" tf:"horizontal_offset,omitempty"`

	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `json:"opacity,omitempty" tf:"opacity,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`

	// A value that determines how Elastic Transcoder interprets values that you specified for video_watermarks.horizontal_offset, video_watermarks.vertical_offset, video_watermarks.max_width, and video_watermarks.max_height. Valid values are Content and Frame.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The vertical position of the watermark unless you specify a nonzero value for vertical_align. Valid values are Top, Bottom, Center.
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`

	// The amount by which you want the vertical position of the watermark to be offset from the position specified by vertical_align
	VerticalOffset *string `json:"verticalOffset,omitempty" tf:"vertical_offset,omitempty"`
}

type VideoWatermarksObservation struct {

	// The horizontal position of the watermark unless you specify a nonzero value for horzontal_offset.
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by horizontal_align.
	HorizontalOffset *string `json:"horizontalOffset,omitempty" tf:"horizontal_offset,omitempty"`

	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	Opacity *string `json:"opacity,omitempty" tf:"opacity,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`

	// A value that determines how Elastic Transcoder interprets values that you specified for video_watermarks.horizontal_offset, video_watermarks.vertical_offset, video_watermarks.max_width, and video_watermarks.max_height. Valid values are Content and Frame.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The vertical position of the watermark unless you specify a nonzero value for vertical_align. Valid values are Top, Bottom, Center.
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`

	// The amount by which you want the vertical position of the watermark to be offset from the position specified by vertical_align
	VerticalOffset *string `json:"verticalOffset,omitempty" tf:"vertical_offset,omitempty"`
}

type VideoWatermarksParameters struct {

	// The horizontal position of the watermark unless you specify a nonzero value for horzontal_offset.
	// +kubebuilder:validation:Optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align,omitempty"`

	// The amount by which you want the horizontal position of the watermark to be offset from the position specified by horizontal_align.
	// +kubebuilder:validation:Optional
	HorizontalOffset *string `json:"horizontalOffset,omitempty" tf:"horizontal_offset,omitempty"`

	// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
	// +kubebuilder:validation:Optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height,omitempty"`

	// The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
	// +kubebuilder:validation:Optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width,omitempty"`

	// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
	// +kubebuilder:validation:Optional
	Opacity *string `json:"opacity,omitempty" tf:"opacity,omitempty"`

	// A value that controls scaling of thumbnails. Valid values are: Fit, Fill, Stretch, Keep, ShrinkToFit, and ShrinkToFill.
	// +kubebuilder:validation:Optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy,omitempty"`

	// A value that determines how Elastic Transcoder interprets values that you specified for video_watermarks.horizontal_offset, video_watermarks.vertical_offset, video_watermarks.max_width, and video_watermarks.max_height. Valid values are Content and Frame.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The vertical position of the watermark unless you specify a nonzero value for vertical_align. Valid values are Top, Bottom, Center.
	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align,omitempty"`

	// The amount by which you want the vertical position of the watermark to be offset from the position specified by vertical_align
	// +kubebuilder:validation:Optional
	VerticalOffset *string `json:"verticalOffset,omitempty" tf:"vertical_offset,omitempty"`
}

// PresetSpec defines the desired state of Preset
type PresetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PresetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PresetInitParameters `json:"initProvider,omitempty"`
}

// PresetStatus defines the observed state of Preset.
type PresetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PresetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Preset is the Schema for the Presets API. Provides an Elastic Transcoder preset resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Preset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.container) || (has(self.initProvider) && has(self.initProvider.container))",message="spec.forProvider.container is a required parameter"
	Spec   PresetSpec   `json:"spec"`
	Status PresetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PresetList contains a list of Presets
type PresetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Preset `json:"items"`
}

// Repository type metadata.
var (
	Preset_Kind             = "Preset"
	Preset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Preset_Kind}.String()
	Preset_KindAPIVersion   = Preset_Kind + "." + CRDGroupVersion.String()
	Preset_GroupVersionKind = CRDGroupVersion.WithKind(Preset_Kind)
)

func init() {
	SchemeBuilder.Register(&Preset{}, &PresetList{})
}
