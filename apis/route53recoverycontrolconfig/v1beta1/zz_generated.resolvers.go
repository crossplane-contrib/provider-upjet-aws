/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ControlPanel.
func (mg *ControlPanel) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.ForProvider.ClusterArnRef,
		Selector:     mg.Spec.ForProvider.ClusterArnSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterArn")
	}
	mg.Spec.ForProvider.ClusterArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.InitProvider.ClusterArnRef,
		Selector:     mg.Spec.InitProvider.ClusterArnSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterArn")
	}
	mg.Spec.InitProvider.ClusterArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RoutingControl.
func (mg *RoutingControl) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.ForProvider.ClusterArnRef,
		Selector:     mg.Spec.ForProvider.ClusterArnSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterArn")
	}
	mg.Spec.ForProvider.ClusterArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ControlPanelArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.ForProvider.ControlPanelArnRef,
		Selector:     mg.Spec.ForProvider.ControlPanelArnSelector,
		To: reference.To{
			List:    &ControlPanelList{},
			Managed: &ControlPanel{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ControlPanelArn")
	}
	mg.Spec.ForProvider.ControlPanelArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ControlPanelArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.InitProvider.ClusterArnRef,
		Selector:     mg.Spec.InitProvider.ClusterArnSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterArn")
	}
	mg.Spec.InitProvider.ClusterArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ControlPanelArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.InitProvider.ControlPanelArnRef,
		Selector:     mg.Spec.InitProvider.ControlPanelArnSelector,
		To: reference.To{
			List:    &ControlPanelList{},
			Managed: &ControlPanel{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ControlPanelArn")
	}
	mg.Spec.InitProvider.ControlPanelArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ControlPanelArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SafetyRule.
func (mg *SafetyRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.AssertedControls),
		Extract:       common.TerraformID(),
		References:    mg.Spec.ForProvider.AssertedControlsRefs,
		Selector:      mg.Spec.ForProvider.AssertedControlsSelector,
		To: reference.To{
			List:    &RoutingControlList{},
			Managed: &RoutingControl{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssertedControls")
	}
	mg.Spec.ForProvider.AssertedControls = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.AssertedControlsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ControlPanelArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.ForProvider.ControlPanelArnRef,
		Selector:     mg.Spec.ForProvider.ControlPanelArnSelector,
		To: reference.To{
			List:    &ControlPanelList{},
			Managed: &ControlPanel{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ControlPanelArn")
	}
	mg.Spec.ForProvider.ControlPanelArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ControlPanelArnRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.AssertedControls),
		Extract:       common.TerraformID(),
		References:    mg.Spec.InitProvider.AssertedControlsRefs,
		Selector:      mg.Spec.InitProvider.AssertedControlsSelector,
		To: reference.To{
			List:    &RoutingControlList{},
			Managed: &RoutingControl{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AssertedControls")
	}
	mg.Spec.InitProvider.AssertedControls = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.AssertedControlsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ControlPanelArn),
		Extract:      common.TerraformID(),
		Reference:    mg.Spec.InitProvider.ControlPanelArnRef,
		Selector:     mg.Spec.InitProvider.ControlPanelArnSelector,
		To: reference.To{
			List:    &ControlPanelList{},
			Managed: &ControlPanel{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ControlPanelArn")
	}
	mg.Spec.InitProvider.ControlPanelArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ControlPanelArnRef = rsp.ResolvedReference

	return nil
}
