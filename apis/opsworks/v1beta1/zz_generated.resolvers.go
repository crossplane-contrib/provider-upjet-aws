/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-aws/apis/ec2/v1beta1"
	v1beta11 "github.com/upbound/provider-aws/apis/ecs/v1beta1"
	v1beta12 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta13 "github.com/upbound/provider-aws/apis/rds/v1beta1"
	common "github.com/upbound/provider-aws/config/common"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CustomLayer.
func (mg *CustomLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EcsClusterLayer.
func (mg *EcsClusterLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EcsClusterArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.EcsClusterArnRef,
		Selector:     mg.Spec.ForProvider.EcsClusterArnSelector,
		To: reference.To{
			List:    &v1beta11.ClusterList{},
			Managed: &v1beta11.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EcsClusterArn")
	}
	mg.Spec.ForProvider.EcsClusterArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EcsClusterArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GangliaLayer.
func (mg *GangliaLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HAProxyLayer.
func (mg *HAProxyLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.LayerIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.LayerIdsRefs,
		Selector:      mg.Spec.ForProvider.LayerIdsSelector,
		To: reference.To{
			List:    &CustomLayerList{},
			Managed: &CustomLayer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LayerIds")
	}
	mg.Spec.ForProvider.LayerIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.LayerIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupIds")
	}
	mg.Spec.ForProvider.SecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1beta1.SubnetList{},
			Managed: &v1beta1.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this JavaAppLayer.
func (mg *JavaAppLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MemcachedLayer.
func (mg *MemcachedLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MySQLLayer.
func (mg *MySQLLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NodeJSAppLayer.
func (mg *NodeJSAppLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PHPAppLayer.
func (mg *PHPAppLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Permission.
func (mg *Permission) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.UserArnRef,
		Selector:     mg.Spec.ForProvider.UserArnSelector,
		To: reference.To{
			List:    &v1beta12.UserList{},
			Managed: &v1beta12.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserArn")
	}
	mg.Spec.ForProvider.UserArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RDSDBInstance.
func (mg *RDSDBInstance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RDSDBInstanceArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.RDSDBInstanceArnRef,
		Selector:     mg.Spec.ForProvider.RDSDBInstanceArnSelector,
		To: reference.To{
			List:    &v1beta13.InstanceList{},
			Managed: &v1beta13.Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RDSDBInstanceArn")
	}
	mg.Spec.ForProvider.RDSDBInstanceArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RDSDBInstanceArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RailsAppLayer.
func (mg *RailsAppLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Stack.
func (mg *Stack) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultInstanceProfileArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.DefaultInstanceProfileArnRef,
		Selector:     mg.Spec.ForProvider.DefaultInstanceProfileArnSelector,
		To: reference.To{
			List:    &v1beta12.InstanceProfileList{},
			Managed: &v1beta12.InstanceProfile{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultInstanceProfileArn")
	}
	mg.Spec.ForProvider.DefaultInstanceProfileArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultInstanceProfileArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultSubnetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DefaultSubnetIDRef,
		Selector:     mg.Spec.ForProvider.DefaultSubnetIDSelector,
		To: reference.To{
			List:    &v1beta1.SubnetList{},
			Managed: &v1beta1.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultSubnetID")
	}
	mg.Spec.ForProvider.DefaultSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultSubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRoleArn),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.ServiceRoleArnRef,
		Selector:     mg.Spec.ForProvider.ServiceRoleArnSelector,
		To: reference.To{
			List:    &v1beta12.RoleList{},
			Managed: &v1beta12.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRoleArn")
	}
	mg.Spec.ForProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1beta1.VPCList{},
			Managed: &v1beta1.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StaticWebLayer.
func (mg *StaticWebLayer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomSecurityGroupIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomSecurityGroupIDRefs,
		Selector:      mg.Spec.ForProvider.CustomSecurityGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.SecurityGroupList{},
			Managed: &v1beta1.SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityGroupIds")
	}
	mg.Spec.ForProvider.CustomSecurityGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomSecurityGroupIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StackID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StackIDRef,
		Selector:     mg.Spec.ForProvider.StackIDSelector,
		To: reference.To{
			List:    &StackList{},
			Managed: &Stack{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StackID")
	}
	mg.Spec.ForProvider.StackID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StackIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserProfile.
func (mg *UserProfile) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.UserArnRef,
		Selector:     mg.Spec.ForProvider.UserArnSelector,
		To: reference.To{
			List:    &v1beta12.UserList{},
			Managed: &v1beta12.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserArn")
	}
	mg.Spec.ForProvider.UserArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserArnRef = rsp.ResolvedReference

	return nil
}
