//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AliasInitParameters) DeepCopyInto(out *AliasInitParameters) {
	*out = *in
	if in.EvaluateTargetHealth != nil {
		in, out := &in.EvaluateTargetHealth, &out.EvaluateTargetHealth
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AliasInitParameters.
func (in *AliasInitParameters) DeepCopy() *AliasInitParameters {
	if in == nil {
		return nil
	}
	out := new(AliasInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AliasObservation) DeepCopyInto(out *AliasObservation) {
	*out = *in
	if in.EvaluateTargetHealth != nil {
		in, out := &in.EvaluateTargetHealth, &out.EvaluateTargetHealth
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AliasObservation.
func (in *AliasObservation) DeepCopy() *AliasObservation {
	if in == nil {
		return nil
	}
	out := new(AliasObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AliasParameters) DeepCopyInto(out *AliasParameters) {
	*out = *in
	if in.EvaluateTargetHealth != nil {
		in, out := &in.EvaluateTargetHealth, &out.EvaluateTargetHealth
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AliasParameters.
func (in *AliasParameters) DeepCopy() *AliasParameters {
	if in == nil {
		return nil
	}
	out := new(AliasParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CidrRoutingPolicyInitParameters) DeepCopyInto(out *CidrRoutingPolicyInitParameters) {
	*out = *in
	if in.CollectionID != nil {
		in, out := &in.CollectionID, &out.CollectionID
		*out = new(string)
		**out = **in
	}
	if in.LocationName != nil {
		in, out := &in.LocationName, &out.LocationName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CidrRoutingPolicyInitParameters.
func (in *CidrRoutingPolicyInitParameters) DeepCopy() *CidrRoutingPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(CidrRoutingPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CidrRoutingPolicyObservation) DeepCopyInto(out *CidrRoutingPolicyObservation) {
	*out = *in
	if in.CollectionID != nil {
		in, out := &in.CollectionID, &out.CollectionID
		*out = new(string)
		**out = **in
	}
	if in.LocationName != nil {
		in, out := &in.LocationName, &out.LocationName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CidrRoutingPolicyObservation.
func (in *CidrRoutingPolicyObservation) DeepCopy() *CidrRoutingPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(CidrRoutingPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CidrRoutingPolicyParameters) DeepCopyInto(out *CidrRoutingPolicyParameters) {
	*out = *in
	if in.CollectionID != nil {
		in, out := &in.CollectionID, &out.CollectionID
		*out = new(string)
		**out = **in
	}
	if in.LocationName != nil {
		in, out := &in.LocationName, &out.LocationName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CidrRoutingPolicyParameters.
func (in *CidrRoutingPolicyParameters) DeepCopy() *CidrRoutingPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(CidrRoutingPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSet) DeepCopyInto(out *DelegationSet) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSet.
func (in *DelegationSet) DeepCopy() *DelegationSet {
	if in == nil {
		return nil
	}
	out := new(DelegationSet)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DelegationSet) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSetInitParameters) DeepCopyInto(out *DelegationSetInitParameters) {
	*out = *in
	if in.ReferenceName != nil {
		in, out := &in.ReferenceName, &out.ReferenceName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSetInitParameters.
func (in *DelegationSetInitParameters) DeepCopy() *DelegationSetInitParameters {
	if in == nil {
		return nil
	}
	out := new(DelegationSetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSetList) DeepCopyInto(out *DelegationSetList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DelegationSet, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSetList.
func (in *DelegationSetList) DeepCopy() *DelegationSetList {
	if in == nil {
		return nil
	}
	out := new(DelegationSetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DelegationSetList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSetObservation) DeepCopyInto(out *DelegationSetObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NameServers != nil {
		in, out := &in.NameServers, &out.NameServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ReferenceName != nil {
		in, out := &in.ReferenceName, &out.ReferenceName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSetObservation.
func (in *DelegationSetObservation) DeepCopy() *DelegationSetObservation {
	if in == nil {
		return nil
	}
	out := new(DelegationSetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSetParameters) DeepCopyInto(out *DelegationSetParameters) {
	*out = *in
	if in.ReferenceName != nil {
		in, out := &in.ReferenceName, &out.ReferenceName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSetParameters.
func (in *DelegationSetParameters) DeepCopy() *DelegationSetParameters {
	if in == nil {
		return nil
	}
	out := new(DelegationSetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSetSpec) DeepCopyInto(out *DelegationSetSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSetSpec.
func (in *DelegationSetSpec) DeepCopy() *DelegationSetSpec {
	if in == nil {
		return nil
	}
	out := new(DelegationSetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DelegationSetStatus) DeepCopyInto(out *DelegationSetStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DelegationSetStatus.
func (in *DelegationSetStatus) DeepCopy() *DelegationSetStatus {
	if in == nil {
		return nil
	}
	out := new(DelegationSetStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FailoverRoutingPolicyInitParameters) DeepCopyInto(out *FailoverRoutingPolicyInitParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailoverRoutingPolicyInitParameters.
func (in *FailoverRoutingPolicyInitParameters) DeepCopy() *FailoverRoutingPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(FailoverRoutingPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FailoverRoutingPolicyObservation) DeepCopyInto(out *FailoverRoutingPolicyObservation) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailoverRoutingPolicyObservation.
func (in *FailoverRoutingPolicyObservation) DeepCopy() *FailoverRoutingPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(FailoverRoutingPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FailoverRoutingPolicyParameters) DeepCopyInto(out *FailoverRoutingPolicyParameters) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailoverRoutingPolicyParameters.
func (in *FailoverRoutingPolicyParameters) DeepCopy() *FailoverRoutingPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(FailoverRoutingPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeolocationRoutingPolicyInitParameters) DeepCopyInto(out *GeolocationRoutingPolicyInitParameters) {
	*out = *in
	if in.Continent != nil {
		in, out := &in.Continent, &out.Continent
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Subdivision != nil {
		in, out := &in.Subdivision, &out.Subdivision
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeolocationRoutingPolicyInitParameters.
func (in *GeolocationRoutingPolicyInitParameters) DeepCopy() *GeolocationRoutingPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(GeolocationRoutingPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeolocationRoutingPolicyObservation) DeepCopyInto(out *GeolocationRoutingPolicyObservation) {
	*out = *in
	if in.Continent != nil {
		in, out := &in.Continent, &out.Continent
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Subdivision != nil {
		in, out := &in.Subdivision, &out.Subdivision
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeolocationRoutingPolicyObservation.
func (in *GeolocationRoutingPolicyObservation) DeepCopy() *GeolocationRoutingPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(GeolocationRoutingPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeolocationRoutingPolicyParameters) DeepCopyInto(out *GeolocationRoutingPolicyParameters) {
	*out = *in
	if in.Continent != nil {
		in, out := &in.Continent, &out.Continent
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Subdivision != nil {
		in, out := &in.Subdivision, &out.Subdivision
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeolocationRoutingPolicyParameters.
func (in *GeolocationRoutingPolicyParameters) DeepCopy() *GeolocationRoutingPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(GeolocationRoutingPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheck) DeepCopyInto(out *HealthCheck) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheck.
func (in *HealthCheck) DeepCopy() *HealthCheck {
	if in == nil {
		return nil
	}
	out := new(HealthCheck)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HealthCheck) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckInitParameters) DeepCopyInto(out *HealthCheckInitParameters) {
	*out = *in
	if in.ChildHealthThreshold != nil {
		in, out := &in.ChildHealthThreshold, &out.ChildHealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ChildHealthchecks != nil {
		in, out := &in.ChildHealthchecks, &out.ChildHealthchecks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CloudwatchAlarmName != nil {
		in, out := &in.CloudwatchAlarmName, &out.CloudwatchAlarmName
		*out = new(string)
		**out = **in
	}
	if in.CloudwatchAlarmRegion != nil {
		in, out := &in.CloudwatchAlarmRegion, &out.CloudwatchAlarmRegion
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableSni != nil {
		in, out := &in.EnableSni, &out.EnableSni
		*out = new(bool)
		**out = **in
	}
	if in.FailureThreshold != nil {
		in, out := &in.FailureThreshold, &out.FailureThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.InsufficientDataHealthStatus != nil {
		in, out := &in.InsufficientDataHealthStatus, &out.InsufficientDataHealthStatus
		*out = new(string)
		**out = **in
	}
	if in.InvertHealthcheck != nil {
		in, out := &in.InvertHealthcheck, &out.InvertHealthcheck
		*out = new(bool)
		**out = **in
	}
	if in.MeasureLatency != nil {
		in, out := &in.MeasureLatency, &out.MeasureLatency
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ReferenceName != nil {
		in, out := &in.ReferenceName, &out.ReferenceName
		*out = new(string)
		**out = **in
	}
	if in.Regions != nil {
		in, out := &in.Regions, &out.Regions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequestInterval != nil {
		in, out := &in.RequestInterval, &out.RequestInterval
		*out = new(float64)
		**out = **in
	}
	if in.ResourcePath != nil {
		in, out := &in.ResourcePath, &out.ResourcePath
		*out = new(string)
		**out = **in
	}
	if in.RoutingControlArn != nil {
		in, out := &in.RoutingControlArn, &out.RoutingControlArn
		*out = new(string)
		**out = **in
	}
	if in.SearchString != nil {
		in, out := &in.SearchString, &out.SearchString
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckInitParameters.
func (in *HealthCheckInitParameters) DeepCopy() *HealthCheckInitParameters {
	if in == nil {
		return nil
	}
	out := new(HealthCheckInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckList) DeepCopyInto(out *HealthCheckList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HealthCheck, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckList.
func (in *HealthCheckList) DeepCopy() *HealthCheckList {
	if in == nil {
		return nil
	}
	out := new(HealthCheckList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HealthCheckList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckObservation) DeepCopyInto(out *HealthCheckObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.ChildHealthThreshold != nil {
		in, out := &in.ChildHealthThreshold, &out.ChildHealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ChildHealthchecks != nil {
		in, out := &in.ChildHealthchecks, &out.ChildHealthchecks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CloudwatchAlarmName != nil {
		in, out := &in.CloudwatchAlarmName, &out.CloudwatchAlarmName
		*out = new(string)
		**out = **in
	}
	if in.CloudwatchAlarmRegion != nil {
		in, out := &in.CloudwatchAlarmRegion, &out.CloudwatchAlarmRegion
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableSni != nil {
		in, out := &in.EnableSni, &out.EnableSni
		*out = new(bool)
		**out = **in
	}
	if in.FailureThreshold != nil {
		in, out := &in.FailureThreshold, &out.FailureThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.InsufficientDataHealthStatus != nil {
		in, out := &in.InsufficientDataHealthStatus, &out.InsufficientDataHealthStatus
		*out = new(string)
		**out = **in
	}
	if in.InvertHealthcheck != nil {
		in, out := &in.InvertHealthcheck, &out.InvertHealthcheck
		*out = new(bool)
		**out = **in
	}
	if in.MeasureLatency != nil {
		in, out := &in.MeasureLatency, &out.MeasureLatency
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ReferenceName != nil {
		in, out := &in.ReferenceName, &out.ReferenceName
		*out = new(string)
		**out = **in
	}
	if in.Regions != nil {
		in, out := &in.Regions, &out.Regions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequestInterval != nil {
		in, out := &in.RequestInterval, &out.RequestInterval
		*out = new(float64)
		**out = **in
	}
	if in.ResourcePath != nil {
		in, out := &in.ResourcePath, &out.ResourcePath
		*out = new(string)
		**out = **in
	}
	if in.RoutingControlArn != nil {
		in, out := &in.RoutingControlArn, &out.RoutingControlArn
		*out = new(string)
		**out = **in
	}
	if in.SearchString != nil {
		in, out := &in.SearchString, &out.SearchString
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckObservation.
func (in *HealthCheckObservation) DeepCopy() *HealthCheckObservation {
	if in == nil {
		return nil
	}
	out := new(HealthCheckObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckParameters) DeepCopyInto(out *HealthCheckParameters) {
	*out = *in
	if in.ChildHealthThreshold != nil {
		in, out := &in.ChildHealthThreshold, &out.ChildHealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ChildHealthchecks != nil {
		in, out := &in.ChildHealthchecks, &out.ChildHealthchecks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CloudwatchAlarmName != nil {
		in, out := &in.CloudwatchAlarmName, &out.CloudwatchAlarmName
		*out = new(string)
		**out = **in
	}
	if in.CloudwatchAlarmRegion != nil {
		in, out := &in.CloudwatchAlarmRegion, &out.CloudwatchAlarmRegion
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableSni != nil {
		in, out := &in.EnableSni, &out.EnableSni
		*out = new(bool)
		**out = **in
	}
	if in.FailureThreshold != nil {
		in, out := &in.FailureThreshold, &out.FailureThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.InsufficientDataHealthStatus != nil {
		in, out := &in.InsufficientDataHealthStatus, &out.InsufficientDataHealthStatus
		*out = new(string)
		**out = **in
	}
	if in.InvertHealthcheck != nil {
		in, out := &in.InvertHealthcheck, &out.InvertHealthcheck
		*out = new(bool)
		**out = **in
	}
	if in.MeasureLatency != nil {
		in, out := &in.MeasureLatency, &out.MeasureLatency
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ReferenceName != nil {
		in, out := &in.ReferenceName, &out.ReferenceName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Regions != nil {
		in, out := &in.Regions, &out.Regions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequestInterval != nil {
		in, out := &in.RequestInterval, &out.RequestInterval
		*out = new(float64)
		**out = **in
	}
	if in.ResourcePath != nil {
		in, out := &in.ResourcePath, &out.ResourcePath
		*out = new(string)
		**out = **in
	}
	if in.RoutingControlArn != nil {
		in, out := &in.RoutingControlArn, &out.RoutingControlArn
		*out = new(string)
		**out = **in
	}
	if in.SearchString != nil {
		in, out := &in.SearchString, &out.SearchString
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckParameters.
func (in *HealthCheckParameters) DeepCopy() *HealthCheckParameters {
	if in == nil {
		return nil
	}
	out := new(HealthCheckParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckSpec) DeepCopyInto(out *HealthCheckSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckSpec.
func (in *HealthCheckSpec) DeepCopy() *HealthCheckSpec {
	if in == nil {
		return nil
	}
	out := new(HealthCheckSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckStatus) DeepCopyInto(out *HealthCheckStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckStatus.
func (in *HealthCheckStatus) DeepCopy() *HealthCheckStatus {
	if in == nil {
		return nil
	}
	out := new(HealthCheckStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LatencyRoutingPolicyInitParameters) DeepCopyInto(out *LatencyRoutingPolicyInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LatencyRoutingPolicyInitParameters.
func (in *LatencyRoutingPolicyInitParameters) DeepCopy() *LatencyRoutingPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(LatencyRoutingPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LatencyRoutingPolicyObservation) DeepCopyInto(out *LatencyRoutingPolicyObservation) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LatencyRoutingPolicyObservation.
func (in *LatencyRoutingPolicyObservation) DeepCopy() *LatencyRoutingPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(LatencyRoutingPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LatencyRoutingPolicyParameters) DeepCopyInto(out *LatencyRoutingPolicyParameters) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LatencyRoutingPolicyParameters.
func (in *LatencyRoutingPolicyParameters) DeepCopy() *LatencyRoutingPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(LatencyRoutingPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Record) DeepCopyInto(out *Record) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Record.
func (in *Record) DeepCopy() *Record {
	if in == nil {
		return nil
	}
	out := new(Record)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Record) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordInitParameters) DeepCopyInto(out *RecordInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = make([]AliasInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowOverwrite != nil {
		in, out := &in.AllowOverwrite, &out.AllowOverwrite
		*out = new(bool)
		**out = **in
	}
	if in.CidrRoutingPolicy != nil {
		in, out := &in.CidrRoutingPolicy, &out.CidrRoutingPolicy
		*out = make([]CidrRoutingPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FailoverRoutingPolicy != nil {
		in, out := &in.FailoverRoutingPolicy, &out.FailoverRoutingPolicy
		*out = make([]FailoverRoutingPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GeolocationRoutingPolicy != nil {
		in, out := &in.GeolocationRoutingPolicy, &out.GeolocationRoutingPolicy
		*out = make([]GeolocationRoutingPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LatencyRoutingPolicy != nil {
		in, out := &in.LatencyRoutingPolicy, &out.LatencyRoutingPolicy
		*out = make([]LatencyRoutingPolicyInitParameters, len(*in))
		copy(*out, *in)
	}
	if in.MultivalueAnswerRoutingPolicy != nil {
		in, out := &in.MultivalueAnswerRoutingPolicy, &out.MultivalueAnswerRoutingPolicy
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Records != nil {
		in, out := &in.Records, &out.Records
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SetIdentifier != nil {
		in, out := &in.SetIdentifier, &out.SetIdentifier
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WeightedRoutingPolicy != nil {
		in, out := &in.WeightedRoutingPolicy, &out.WeightedRoutingPolicy
		*out = make([]WeightedRoutingPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordInitParameters.
func (in *RecordInitParameters) DeepCopy() *RecordInitParameters {
	if in == nil {
		return nil
	}
	out := new(RecordInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordList) DeepCopyInto(out *RecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Record, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordList.
func (in *RecordList) DeepCopy() *RecordList {
	if in == nil {
		return nil
	}
	out := new(RecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordObservation) DeepCopyInto(out *RecordObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = make([]AliasObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowOverwrite != nil {
		in, out := &in.AllowOverwrite, &out.AllowOverwrite
		*out = new(bool)
		**out = **in
	}
	if in.CidrRoutingPolicy != nil {
		in, out := &in.CidrRoutingPolicy, &out.CidrRoutingPolicy
		*out = make([]CidrRoutingPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FailoverRoutingPolicy != nil {
		in, out := &in.FailoverRoutingPolicy, &out.FailoverRoutingPolicy
		*out = make([]FailoverRoutingPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.GeolocationRoutingPolicy != nil {
		in, out := &in.GeolocationRoutingPolicy, &out.GeolocationRoutingPolicy
		*out = make([]GeolocationRoutingPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HealthCheckID != nil {
		in, out := &in.HealthCheckID, &out.HealthCheckID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LatencyRoutingPolicy != nil {
		in, out := &in.LatencyRoutingPolicy, &out.LatencyRoutingPolicy
		*out = make([]LatencyRoutingPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultivalueAnswerRoutingPolicy != nil {
		in, out := &in.MultivalueAnswerRoutingPolicy, &out.MultivalueAnswerRoutingPolicy
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Records != nil {
		in, out := &in.Records, &out.Records
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SetIdentifier != nil {
		in, out := &in.SetIdentifier, &out.SetIdentifier
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WeightedRoutingPolicy != nil {
		in, out := &in.WeightedRoutingPolicy, &out.WeightedRoutingPolicy
		*out = make([]WeightedRoutingPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordObservation.
func (in *RecordObservation) DeepCopy() *RecordObservation {
	if in == nil {
		return nil
	}
	out := new(RecordObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordParameters) DeepCopyInto(out *RecordParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = make([]AliasParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowOverwrite != nil {
		in, out := &in.AllowOverwrite, &out.AllowOverwrite
		*out = new(bool)
		**out = **in
	}
	if in.CidrRoutingPolicy != nil {
		in, out := &in.CidrRoutingPolicy, &out.CidrRoutingPolicy
		*out = make([]CidrRoutingPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FailoverRoutingPolicy != nil {
		in, out := &in.FailoverRoutingPolicy, &out.FailoverRoutingPolicy
		*out = make([]FailoverRoutingPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GeolocationRoutingPolicy != nil {
		in, out := &in.GeolocationRoutingPolicy, &out.GeolocationRoutingPolicy
		*out = make([]GeolocationRoutingPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HealthCheckID != nil {
		in, out := &in.HealthCheckID, &out.HealthCheckID
		*out = new(string)
		**out = **in
	}
	if in.HealthCheckIDRef != nil {
		in, out := &in.HealthCheckIDRef, &out.HealthCheckIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.HealthCheckIDSelector != nil {
		in, out := &in.HealthCheckIDSelector, &out.HealthCheckIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LatencyRoutingPolicy != nil {
		in, out := &in.LatencyRoutingPolicy, &out.LatencyRoutingPolicy
		*out = make([]LatencyRoutingPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultivalueAnswerRoutingPolicy != nil {
		in, out := &in.MultivalueAnswerRoutingPolicy, &out.MultivalueAnswerRoutingPolicy
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Records != nil {
		in, out := &in.Records, &out.Records
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SetIdentifier != nil {
		in, out := &in.SetIdentifier, &out.SetIdentifier
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WeightedRoutingPolicy != nil {
		in, out := &in.WeightedRoutingPolicy, &out.WeightedRoutingPolicy
		*out = make([]WeightedRoutingPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
	if in.ZoneIDRef != nil {
		in, out := &in.ZoneIDRef, &out.ZoneIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneIDSelector != nil {
		in, out := &in.ZoneIDSelector, &out.ZoneIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordParameters.
func (in *RecordParameters) DeepCopy() *RecordParameters {
	if in == nil {
		return nil
	}
	out := new(RecordParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordSpec) DeepCopyInto(out *RecordSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordSpec.
func (in *RecordSpec) DeepCopy() *RecordSpec {
	if in == nil {
		return nil
	}
	out := new(RecordSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordStatus) DeepCopyInto(out *RecordStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordStatus.
func (in *RecordStatus) DeepCopy() *RecordStatus {
	if in == nil {
		return nil
	}
	out := new(RecordStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VPCInitParameters) DeepCopyInto(out *VPCInitParameters) {
	*out = *in
	if in.VPCRegion != nil {
		in, out := &in.VPCRegion, &out.VPCRegion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VPCInitParameters.
func (in *VPCInitParameters) DeepCopy() *VPCInitParameters {
	if in == nil {
		return nil
	}
	out := new(VPCInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VPCObservation) DeepCopyInto(out *VPCObservation) {
	*out = *in
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCRegion != nil {
		in, out := &in.VPCRegion, &out.VPCRegion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VPCObservation.
func (in *VPCObservation) DeepCopy() *VPCObservation {
	if in == nil {
		return nil
	}
	out := new(VPCObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VPCParameters) DeepCopyInto(out *VPCParameters) {
	*out = *in
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCRegion != nil {
		in, out := &in.VPCRegion, &out.VPCRegion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VPCParameters.
func (in *VPCParameters) DeepCopy() *VPCParameters {
	if in == nil {
		return nil
	}
	out := new(VPCParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeightedRoutingPolicyInitParameters) DeepCopyInto(out *WeightedRoutingPolicyInitParameters) {
	*out = *in
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeightedRoutingPolicyInitParameters.
func (in *WeightedRoutingPolicyInitParameters) DeepCopy() *WeightedRoutingPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(WeightedRoutingPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeightedRoutingPolicyObservation) DeepCopyInto(out *WeightedRoutingPolicyObservation) {
	*out = *in
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeightedRoutingPolicyObservation.
func (in *WeightedRoutingPolicyObservation) DeepCopy() *WeightedRoutingPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(WeightedRoutingPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeightedRoutingPolicyParameters) DeepCopyInto(out *WeightedRoutingPolicyParameters) {
	*out = *in
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeightedRoutingPolicyParameters.
func (in *WeightedRoutingPolicyParameters) DeepCopy() *WeightedRoutingPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(WeightedRoutingPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Zone) DeepCopyInto(out *Zone) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Zone.
func (in *Zone) DeepCopy() *Zone {
	if in == nil {
		return nil
	}
	out := new(Zone)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Zone) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZoneInitParameters) DeepCopyInto(out *ZoneInitParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPC != nil {
		in, out := &in.VPC, &out.VPC
		*out = make([]VPCInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZoneInitParameters.
func (in *ZoneInitParameters) DeepCopy() *ZoneInitParameters {
	if in == nil {
		return nil
	}
	out := new(ZoneInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZoneList) DeepCopyInto(out *ZoneList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Zone, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZoneList.
func (in *ZoneList) DeepCopy() *ZoneList {
	if in == nil {
		return nil
	}
	out := new(ZoneList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ZoneList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZoneObservation) DeepCopyInto(out *ZoneObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DelegationSetID != nil {
		in, out := &in.DelegationSetID, &out.DelegationSetID
		*out = new(string)
		**out = **in
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameServers != nil {
		in, out := &in.NameServers, &out.NameServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrimaryNameServer != nil {
		in, out := &in.PrimaryNameServer, &out.PrimaryNameServer
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPC != nil {
		in, out := &in.VPC, &out.VPC
		*out = make([]VPCObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZoneObservation.
func (in *ZoneObservation) DeepCopy() *ZoneObservation {
	if in == nil {
		return nil
	}
	out := new(ZoneObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZoneParameters) DeepCopyInto(out *ZoneParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DelegationSetID != nil {
		in, out := &in.DelegationSetID, &out.DelegationSetID
		*out = new(string)
		**out = **in
	}
	if in.DelegationSetIDRef != nil {
		in, out := &in.DelegationSetIDRef, &out.DelegationSetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DelegationSetIDSelector != nil {
		in, out := &in.DelegationSetIDSelector, &out.DelegationSetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ForceDestroy != nil {
		in, out := &in.ForceDestroy, &out.ForceDestroy
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPC != nil {
		in, out := &in.VPC, &out.VPC
		*out = make([]VPCParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZoneParameters.
func (in *ZoneParameters) DeepCopy() *ZoneParameters {
	if in == nil {
		return nil
	}
	out := new(ZoneParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZoneSpec) DeepCopyInto(out *ZoneSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZoneSpec.
func (in *ZoneSpec) DeepCopy() *ZoneSpec {
	if in == nil {
		return nil
	}
	out := new(ZoneSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZoneStatus) DeepCopyInto(out *ZoneStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZoneStatus.
func (in *ZoneStatus) DeepCopy() *ZoneStatus {
	if in == nil {
		return nil
	}
	out := new(ZoneStatus)
	in.DeepCopyInto(out)
	return out
}
