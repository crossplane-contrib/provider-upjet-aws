// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	apisresolver "github.com/upbound/provider-aws/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Datasource) ResolveReferences( // ResolveReferences of this Datasource.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "GraphQLAPI", "GraphQLAPIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.APIID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIIDRef,
			Selector:     mg.Spec.ForProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.DynamodbConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("dynamodb.aws.upbound.io", "v1beta2", "Table", "TableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DynamodbConfig.TableName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.DynamodbConfig.TableNameRef,
				Selector:     mg.Spec.ForProvider.DynamodbConfig.TableNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DynamodbConfig.TableName")
		}
		mg.Spec.ForProvider.DynamodbConfig.TableName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.DynamodbConfig.TableNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.ServiceRoleArnRef,
			Selector:     mg.Spec.ForProvider.ServiceRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRoleArn")
	}
	mg.Spec.ForProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.DynamodbConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("dynamodb.aws.upbound.io", "v1beta2", "Table", "TableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DynamodbConfig.TableName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.DynamodbConfig.TableNameRef,
				Selector:     mg.Spec.InitProvider.DynamodbConfig.TableNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.DynamodbConfig.TableName")
		}
		mg.Spec.InitProvider.DynamodbConfig.TableName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.DynamodbConfig.TableNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.ServiceRoleArnRef,
			Selector:     mg.Spec.InitProvider.ServiceRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceRoleArn")
	}
	mg.Spec.InitProvider.ServiceRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRoleArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Function.
func (mg *Function) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "GraphQLAPI", "GraphQLAPIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.APIID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIIDRef,
			Selector:     mg.Spec.ForProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "Datasource", "DatasourceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataSource),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DataSourceRef,
			Selector:     mg.Spec.ForProvider.DataSourceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataSource")
	}
	mg.Spec.ForProvider.DataSource = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "GraphQLAPI", "GraphQLAPIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.APIID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.APIIDRef,
			Selector:     mg.Spec.InitProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIID")
	}
	mg.Spec.InitProvider.APIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "Datasource", "DatasourceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DataSource),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DataSourceRef,
			Selector:     mg.Spec.InitProvider.DataSourceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataSource")
	}
	mg.Spec.InitProvider.DataSource = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GraphQLAPI.
func (mg *GraphQLAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.LogConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogConfig.CloudwatchLogsRoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.LogConfig.CloudwatchLogsRoleArnRef,
				Selector:     mg.Spec.ForProvider.LogConfig.CloudwatchLogsRoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LogConfig.CloudwatchLogsRoleArn")
		}
		mg.Spec.ForProvider.LogConfig.CloudwatchLogsRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LogConfig.CloudwatchLogsRoleArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MergedAPIExecutionRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.MergedAPIExecutionRoleArnRef,
			Selector:     mg.Spec.ForProvider.MergedAPIExecutionRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MergedAPIExecutionRoleArn")
	}
	mg.Spec.ForProvider.MergedAPIExecutionRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MergedAPIExecutionRoleArnRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.UserPoolConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta2", "UserPool", "UserPoolList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserPoolConfig.UserPoolID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.UserPoolConfig.UserPoolIDRef,
				Selector:     mg.Spec.ForProvider.UserPoolConfig.UserPoolIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.UserPoolConfig.UserPoolID")
		}
		mg.Spec.ForProvider.UserPoolConfig.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.UserPoolConfig.UserPoolIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LogConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogConfig.CloudwatchLogsRoleArn),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.LogConfig.CloudwatchLogsRoleArnRef,
				Selector:     mg.Spec.InitProvider.LogConfig.CloudwatchLogsRoleArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LogConfig.CloudwatchLogsRoleArn")
		}
		mg.Spec.InitProvider.LogConfig.CloudwatchLogsRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LogConfig.CloudwatchLogsRoleArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MergedAPIExecutionRoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.MergedAPIExecutionRoleArnRef,
			Selector:     mg.Spec.InitProvider.MergedAPIExecutionRoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MergedAPIExecutionRoleArn")
	}
	mg.Spec.InitProvider.MergedAPIExecutionRoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MergedAPIExecutionRoleArnRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.UserPoolConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cognitoidp.aws.upbound.io", "v1beta2", "UserPool", "UserPoolList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserPoolConfig.UserPoolID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.UserPoolConfig.UserPoolIDRef,
				Selector:     mg.Spec.InitProvider.UserPoolConfig.UserPoolIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.UserPoolConfig.UserPoolID")
		}
		mg.Spec.InitProvider.UserPoolConfig.UserPoolID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.UserPoolConfig.UserPoolIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Resolver.
func (mg *Resolver) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "GraphQLAPI", "GraphQLAPIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.APIID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIIDRef,
			Selector:     mg.Spec.ForProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "Datasource", "DatasourceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataSource),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DataSourceRef,
			Selector:     mg.Spec.ForProvider.DataSourceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataSource")
	}
	mg.Spec.ForProvider.DataSource = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.PipelineConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.PipelineConfig.Functions),
				Extract:       resource.ExtractParamPath("function_id", true),
				References:    mg.Spec.ForProvider.PipelineConfig.FunctionsRefs,
				Selector:      mg.Spec.ForProvider.PipelineConfig.FunctionsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PipelineConfig.Functions")
		}
		mg.Spec.ForProvider.PipelineConfig.Functions = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.PipelineConfig.FunctionsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "Datasource", "DatasourceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DataSource),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DataSourceRef,
			Selector:     mg.Spec.InitProvider.DataSourceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataSource")
	}
	mg.Spec.InitProvider.DataSource = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.PipelineConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("appsync.aws.upbound.io", "v1beta2", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.PipelineConfig.Functions),
				Extract:       resource.ExtractParamPath("function_id", true),
				References:    mg.Spec.InitProvider.PipelineConfig.FunctionsRefs,
				Selector:      mg.Spec.InitProvider.PipelineConfig.FunctionsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PipelineConfig.Functions")
		}
		mg.Spec.InitProvider.PipelineConfig.Functions = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.PipelineConfig.FunctionsRefs = mrsp.ResolvedReferences

	}

	return nil
}
