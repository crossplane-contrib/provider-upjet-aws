// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoTerminationPolicyInitParameters struct {

	// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days).
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`
}

type AutoTerminationPolicyObservation struct {

	// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days).
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`
}

type AutoTerminationPolicyParameters struct {

	// Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days).
	// +kubebuilder:validation:Optional
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`
}

type BootstrapActionInitParameters struct {

	// List of command line arguments to pass to the bootstrap action script.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Name of the bootstrap action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type BootstrapActionObservation struct {

	// List of command line arguments to pass to the bootstrap action script.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Name of the bootstrap action.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type BootstrapActionParameters struct {

	// List of command line arguments to pass to the bootstrap action script.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Name of the bootstrap action.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type ClusterInitParameters struct {

	// JSON string for selecting additional features such as adding proxy information.
	AdditionalInfo *string `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the Amazon EMR Release Guide.
	// +listType=set
	Applications []*string `json:"applications,omitempty" tf:"applications,omitempty"`

	// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. See Auto Termination Policy Below.
	AutoTerminationPolicy *AutoTerminationPolicyInitParameters `json:"autoTerminationPolicy,omitempty" tf:"auto_termination_policy,omitempty"`

	// IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
	AutoscalingRole *string `json:"autoscalingRole,omitempty" tf:"autoscaling_role,omitempty"`

	// Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. See below.
	BootstrapAction []BootstrapActionInitParameters `json:"bootstrapAction,omitempty" tf:"bootstrap_action,omitempty"`

	// List of configurations supplied for the EMR cluster you are creating. Supply a configuration object for applications to override their default configuration. See AWS Documentation for more information.
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// JSON string for supplying list of configurations for the EMR cluster.
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// Configuration block to use an Instance Fleet for the core node type. Cannot be specified if any core_instance_group configuration blocks are set. Detailed below.
	CoreInstanceFleet *CoreInstanceFleetInitParameters `json:"coreInstanceFleet,omitempty" tf:"core_instance_fleet,omitempty"`

	// Configuration block to use an Instance Group for the core node type.
	CoreInstanceGroup *CoreInstanceGroupInitParameters `json:"coreInstanceGroup,omitempty" tf:"core_instance_group,omitempty"`

	// Custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
	CustomAMIID *string `json:"customAmiId,omitempty" tf:"custom_ami_id,omitempty"`

	// Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
	EBSRootVolumeSize *float64 `json:"ebsRootVolumeSize,omitempty" tf:"ebs_root_volume_size,omitempty"`

	// Attributes for the EC2 instances running the job flow. See below.
	EC2Attributes *EC2AttributesInitParameters `json:"ec2Attributes,omitempty" tf:"ec2_attributes,omitempty"`

	// Switch on/off run cluster with no steps or when all steps are complete (default is on)
	KeepJobFlowAliveWhenNoSteps *bool `json:"keepJobFlowAliveWhenNoSteps,omitempty" tf:"keep_job_flow_alive_when_no_steps,omitempty"`

	// Kerberos configuration for the cluster. See below.
	KerberosAttributes *KerberosAttributesInitParameters `json:"kerberosAttributes,omitempty" tf:"kerberos_attributes,omitempty"`

	// List of step states used to filter returned steps
	// +listType=set
	ListStepsStates []*string `json:"listStepsStates,omitempty" tf:"list_steps_states,omitempty"`

	// AWS KMS customer master key (CMK) key ID or arn used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
	LogEncryptionKMSKeyID *string `json:"logEncryptionKmsKeyId,omitempty" tf:"log_encryption_kms_key_id,omitempty"`

	// S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta2.Bucket
	LogURI *string `json:"logUri,omitempty" tf:"log_uri,omitempty"`

	// Reference to a Bucket in s3 to populate logUri.
	// +kubebuilder:validation:Optional
	LogURIRef *v1.Reference `json:"logUriRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate logUri.
	// +kubebuilder:validation:Optional
	LogURISelector *v1.Selector `json:"logUriSelector,omitempty" tf:"-"`

	// Configuration block to use an Instance Fleet for the master node type. Cannot be specified if any master_instance_group configuration blocks are set. Detailed below.
	MasterInstanceFleet *MasterInstanceFleetInitParameters `json:"masterInstanceFleet,omitempty" tf:"master_instance_fleet,omitempty"`

	// Configuration block to use an Instance Group for the master node type.
	MasterInstanceGroup *MasterInstanceGroupInitParameters `json:"masterInstanceGroup,omitempty" tf:"master_instance_group,omitempty"`

	// Name of the job flow.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The specified placement group configuration for an Amazon EMR cluster.
	PlacementGroupConfig []PlacementGroupConfigInitParameters `json:"placementGroupConfig,omitempty" tf:"placement_group_config,omitempty"`

	// Release label for the Amazon EMR release.
	ReleaseLabel *string `json:"releaseLabel,omitempty" tf:"release_label,omitempty"`

	// Way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior *string `json:"scaleDownBehavior,omitempty" tf:"scale_down_behavior,omitempty"`

	// Security configuration name to attach to the EMR cluster. Only valid for EMR clusters with release_label 4.8.0 or greater.
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration,omitempty"`

	// IAM role that will be assumed by the Amazon EMR service to access AWS resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	ServiceRole *string `json:"serviceRole,omitempty" tf:"service_role,omitempty"`

	// Reference to a Role in iam to populate serviceRole.
	// +kubebuilder:validation:Optional
	ServiceRoleRef *v1.Reference `json:"serviceRoleRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate serviceRole.
	// +kubebuilder:validation:Optional
	ServiceRoleSelector *v1.Selector `json:"serviceRoleSelector,omitempty" tf:"-"`

	// List of steps to run when creating the cluster. See below. This argument is processed in attribute-as-blocks mode.
	Step []StepInitParameters `json:"step,omitempty" tf:"step,omitempty"`

	// Number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with release_label 5.28.0 or greater (default is 1).
	StepConcurrencyLevel *float64 `json:"stepConcurrencyLevel,omitempty" tf:"step_concurrency_level,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Switch on/off termination protection (default is false, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to false.
	TerminationProtection *bool `json:"terminationProtection,omitempty" tf:"termination_protection,omitempty"`

	// Whether whether Amazon EMR should gracefully replace core nodes that have degraded within the cluster. Default value is false.
	UnhealthyNodeReplacement *bool `json:"unhealthyNodeReplacement,omitempty" tf:"unhealthy_node_replacement,omitempty"`

	// Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default value is true.
	VisibleToAllUsers *bool `json:"visibleToAllUsers,omitempty" tf:"visible_to_all_users,omitempty"`
}

type ClusterObservation struct {

	// JSON string for selecting additional features such as adding proxy information.
	AdditionalInfo *string `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the Amazon EMR Release Guide.
	// +listType=set
	Applications []*string `json:"applications,omitempty" tf:"applications,omitempty"`

	// ARN of the cluster.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. See Auto Termination Policy Below.
	AutoTerminationPolicy *AutoTerminationPolicyObservation `json:"autoTerminationPolicy,omitempty" tf:"auto_termination_policy,omitempty"`

	// IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
	AutoscalingRole *string `json:"autoscalingRole,omitempty" tf:"autoscaling_role,omitempty"`

	// Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. See below.
	BootstrapAction []BootstrapActionObservation `json:"bootstrapAction,omitempty" tf:"bootstrap_action,omitempty"`

	ClusterState *string `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	// List of configurations supplied for the EMR cluster you are creating. Supply a configuration object for applications to override their default configuration. See AWS Documentation for more information.
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// JSON string for supplying list of configurations for the EMR cluster.
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// Configuration block to use an Instance Fleet for the core node type. Cannot be specified if any core_instance_group configuration blocks are set. Detailed below.
	CoreInstanceFleet *CoreInstanceFleetObservation `json:"coreInstanceFleet,omitempty" tf:"core_instance_fleet,omitempty"`

	// Configuration block to use an Instance Group for the core node type.
	CoreInstanceGroup *CoreInstanceGroupObservation `json:"coreInstanceGroup,omitempty" tf:"core_instance_group,omitempty"`

	// Custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
	CustomAMIID *string `json:"customAmiId,omitempty" tf:"custom_ami_id,omitempty"`

	// Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
	EBSRootVolumeSize *float64 `json:"ebsRootVolumeSize,omitempty" tf:"ebs_root_volume_size,omitempty"`

	// Attributes for the EC2 instances running the job flow. See below.
	EC2Attributes *EC2AttributesObservation `json:"ec2Attributes,omitempty" tf:"ec2_attributes,omitempty"`

	// ID of the cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Switch on/off run cluster with no steps or when all steps are complete (default is on)
	KeepJobFlowAliveWhenNoSteps *bool `json:"keepJobFlowAliveWhenNoSteps,omitempty" tf:"keep_job_flow_alive_when_no_steps,omitempty"`

	// Kerberos configuration for the cluster. See below.
	KerberosAttributes *KerberosAttributesObservation `json:"kerberosAttributes,omitempty" tf:"kerberos_attributes,omitempty"`

	// List of step states used to filter returned steps
	// +listType=set
	ListStepsStates []*string `json:"listStepsStates,omitempty" tf:"list_steps_states,omitempty"`

	// AWS KMS customer master key (CMK) key ID or arn used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
	LogEncryptionKMSKeyID *string `json:"logEncryptionKmsKeyId,omitempty" tf:"log_encryption_kms_key_id,omitempty"`

	// S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created.
	LogURI *string `json:"logUri,omitempty" tf:"log_uri,omitempty"`

	// Configuration block to use an Instance Fleet for the master node type. Cannot be specified if any master_instance_group configuration blocks are set. Detailed below.
	MasterInstanceFleet *MasterInstanceFleetObservation `json:"masterInstanceFleet,omitempty" tf:"master_instance_fleet,omitempty"`

	// Configuration block to use an Instance Group for the master node type.
	MasterInstanceGroup *MasterInstanceGroupObservation `json:"masterInstanceGroup,omitempty" tf:"master_instance_group,omitempty"`

	// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
	MasterPublicDNS *string `json:"masterPublicDns,omitempty" tf:"master_public_dns,omitempty"`

	// Name of the job flow.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The specified placement group configuration for an Amazon EMR cluster.
	PlacementGroupConfig []PlacementGroupConfigObservation `json:"placementGroupConfig,omitempty" tf:"placement_group_config,omitempty"`

	// Release label for the Amazon EMR release.
	ReleaseLabel *string `json:"releaseLabel,omitempty" tf:"release_label,omitempty"`

	// Way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	ScaleDownBehavior *string `json:"scaleDownBehavior,omitempty" tf:"scale_down_behavior,omitempty"`

	// Security configuration name to attach to the EMR cluster. Only valid for EMR clusters with release_label 4.8.0 or greater.
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration,omitempty"`

	// IAM role that will be assumed by the Amazon EMR service to access AWS resources.
	ServiceRole *string `json:"serviceRole,omitempty" tf:"service_role,omitempty"`

	// List of steps to run when creating the cluster. See below. This argument is processed in attribute-as-blocks mode.
	Step []StepObservation `json:"step,omitempty" tf:"step,omitempty"`

	// Number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with release_label 5.28.0 or greater (default is 1).
	StepConcurrencyLevel *float64 `json:"stepConcurrencyLevel,omitempty" tf:"step_concurrency_level,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Switch on/off termination protection (default is false, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to false.
	TerminationProtection *bool `json:"terminationProtection,omitempty" tf:"termination_protection,omitempty"`

	// Whether whether Amazon EMR should gracefully replace core nodes that have degraded within the cluster. Default value is false.
	UnhealthyNodeReplacement *bool `json:"unhealthyNodeReplacement,omitempty" tf:"unhealthy_node_replacement,omitempty"`

	// Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default value is true.
	VisibleToAllUsers *bool `json:"visibleToAllUsers,omitempty" tf:"visible_to_all_users,omitempty"`
}

type ClusterParameters struct {

	// JSON string for selecting additional features such as adding proxy information.
	// +kubebuilder:validation:Optional
	AdditionalInfo *string `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the Amazon EMR Release Guide.
	// +kubebuilder:validation:Optional
	// +listType=set
	Applications []*string `json:"applications,omitempty" tf:"applications,omitempty"`

	// An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. See Auto Termination Policy Below.
	// +kubebuilder:validation:Optional
	AutoTerminationPolicy *AutoTerminationPolicyParameters `json:"autoTerminationPolicy,omitempty" tf:"auto_termination_policy,omitempty"`

	// IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
	// +kubebuilder:validation:Optional
	AutoscalingRole *string `json:"autoscalingRole,omitempty" tf:"autoscaling_role,omitempty"`

	// Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. See below.
	// +kubebuilder:validation:Optional
	BootstrapAction []BootstrapActionParameters `json:"bootstrapAction,omitempty" tf:"bootstrap_action,omitempty"`

	// List of configurations supplied for the EMR cluster you are creating. Supply a configuration object for applications to override their default configuration. See AWS Documentation for more information.
	// +kubebuilder:validation:Optional
	Configurations *string `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// JSON string for supplying list of configurations for the EMR cluster.
	// +kubebuilder:validation:Optional
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// Configuration block to use an Instance Fleet for the core node type. Cannot be specified if any core_instance_group configuration blocks are set. Detailed below.
	// +kubebuilder:validation:Optional
	CoreInstanceFleet *CoreInstanceFleetParameters `json:"coreInstanceFleet,omitempty" tf:"core_instance_fleet,omitempty"`

	// Configuration block to use an Instance Group for the core node type.
	// +kubebuilder:validation:Optional
	CoreInstanceGroup *CoreInstanceGroupParameters `json:"coreInstanceGroup,omitempty" tf:"core_instance_group,omitempty"`

	// Custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
	// +kubebuilder:validation:Optional
	CustomAMIID *string `json:"customAmiId,omitempty" tf:"custom_ami_id,omitempty"`

	// Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
	// +kubebuilder:validation:Optional
	EBSRootVolumeSize *float64 `json:"ebsRootVolumeSize,omitempty" tf:"ebs_root_volume_size,omitempty"`

	// Attributes for the EC2 instances running the job flow. See below.
	// +kubebuilder:validation:Optional
	EC2Attributes *EC2AttributesParameters `json:"ec2Attributes,omitempty" tf:"ec2_attributes,omitempty"`

	// Switch on/off run cluster with no steps or when all steps are complete (default is on)
	// +kubebuilder:validation:Optional
	KeepJobFlowAliveWhenNoSteps *bool `json:"keepJobFlowAliveWhenNoSteps,omitempty" tf:"keep_job_flow_alive_when_no_steps,omitempty"`

	// Kerberos configuration for the cluster. See below.
	// +kubebuilder:validation:Optional
	KerberosAttributes *KerberosAttributesParameters `json:"kerberosAttributes,omitempty" tf:"kerberos_attributes,omitempty"`

	// List of step states used to filter returned steps
	// +kubebuilder:validation:Optional
	// +listType=set
	ListStepsStates []*string `json:"listStepsStates,omitempty" tf:"list_steps_states,omitempty"`

	// AWS KMS customer master key (CMK) key ID or arn used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
	// +kubebuilder:validation:Optional
	LogEncryptionKMSKeyID *string `json:"logEncryptionKmsKeyId,omitempty" tf:"log_encryption_kms_key_id,omitempty"`

	// S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta2.Bucket
	// +kubebuilder:validation:Optional
	LogURI *string `json:"logUri,omitempty" tf:"log_uri,omitempty"`

	// Reference to a Bucket in s3 to populate logUri.
	// +kubebuilder:validation:Optional
	LogURIRef *v1.Reference `json:"logUriRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate logUri.
	// +kubebuilder:validation:Optional
	LogURISelector *v1.Selector `json:"logUriSelector,omitempty" tf:"-"`

	// Configuration block to use an Instance Fleet for the master node type. Cannot be specified if any master_instance_group configuration blocks are set. Detailed below.
	// +kubebuilder:validation:Optional
	MasterInstanceFleet *MasterInstanceFleetParameters `json:"masterInstanceFleet,omitempty" tf:"master_instance_fleet,omitempty"`

	// Configuration block to use an Instance Group for the master node type.
	// +kubebuilder:validation:Optional
	MasterInstanceGroup *MasterInstanceGroupParameters `json:"masterInstanceGroup,omitempty" tf:"master_instance_group,omitempty"`

	// Name of the job flow.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The specified placement group configuration for an Amazon EMR cluster.
	// +kubebuilder:validation:Optional
	PlacementGroupConfig []PlacementGroupConfigParameters `json:"placementGroupConfig,omitempty" tf:"placement_group_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Release label for the Amazon EMR release.
	// +kubebuilder:validation:Optional
	ReleaseLabel *string `json:"releaseLabel,omitempty" tf:"release_label,omitempty"`

	// Way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized.
	// +kubebuilder:validation:Optional
	ScaleDownBehavior *string `json:"scaleDownBehavior,omitempty" tf:"scale_down_behavior,omitempty"`

	// Security configuration name to attach to the EMR cluster. Only valid for EMR clusters with release_label 4.8.0 or greater.
	// +kubebuilder:validation:Optional
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration,omitempty"`

	// IAM role that will be assumed by the Amazon EMR service to access AWS resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	ServiceRole *string `json:"serviceRole,omitempty" tf:"service_role,omitempty"`

	// Reference to a Role in iam to populate serviceRole.
	// +kubebuilder:validation:Optional
	ServiceRoleRef *v1.Reference `json:"serviceRoleRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate serviceRole.
	// +kubebuilder:validation:Optional
	ServiceRoleSelector *v1.Selector `json:"serviceRoleSelector,omitempty" tf:"-"`

	// List of steps to run when creating the cluster. See below. This argument is processed in attribute-as-blocks mode.
	// +kubebuilder:validation:Optional
	Step []StepParameters `json:"step,omitempty" tf:"step,omitempty"`

	// Number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with release_label 5.28.0 or greater (default is 1).
	// +kubebuilder:validation:Optional
	StepConcurrencyLevel *float64 `json:"stepConcurrencyLevel,omitempty" tf:"step_concurrency_level,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Switch on/off termination protection (default is false, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to false.
	// +kubebuilder:validation:Optional
	TerminationProtection *bool `json:"terminationProtection,omitempty" tf:"termination_protection,omitempty"`

	// Whether whether Amazon EMR should gracefully replace core nodes that have degraded within the cluster. Default value is false.
	// +kubebuilder:validation:Optional
	UnhealthyNodeReplacement *bool `json:"unhealthyNodeReplacement,omitempty" tf:"unhealthy_node_replacement,omitempty"`

	// Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default value is true.
	// +kubebuilder:validation:Optional
	VisibleToAllUsers *bool `json:"visibleToAllUsers,omitempty" tf:"visible_to_all_users,omitempty"`
}

type ConfigurationsInitParameters struct {

	// Classification within a configuration.
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type ConfigurationsObservation struct {

	// Classification within a configuration.
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type ConfigurationsParameters struct {

	// Classification within a configuration.
	// +kubebuilder:validation:Optional
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type CoreInstanceFleetInitParameters struct {

	// Configuration block for instance fleet.
	InstanceTypeConfigs []InstanceTypeConfigsInitParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification.
	LaunchSpecifications *LaunchSpecificationsInitParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type CoreInstanceFleetObservation struct {

	// Master node type Instance Group ID, if using Instance Group for this node type.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration block for instance fleet.
	InstanceTypeConfigs []InstanceTypeConfigsObservation `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification.
	LaunchSpecifications *LaunchSpecificationsObservation `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ProvisionedOnDemandCapacity *float64 `json:"provisionedOnDemandCapacity,omitempty" tf:"provisioned_on_demand_capacity,omitempty"`

	ProvisionedSpotCapacity *float64 `json:"provisionedSpotCapacity,omitempty" tf:"provisioned_spot_capacity,omitempty"`

	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type CoreInstanceFleetParameters struct {

	// Configuration block for instance fleet.
	// +kubebuilder:validation:Optional
	InstanceTypeConfigs []InstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification.
	// +kubebuilder:validation:Optional
	LaunchSpecifications *LaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	// +kubebuilder:validation:Optional
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	// +kubebuilder:validation:Optional
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type CoreInstanceGroupEBSConfigInitParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The throughput, in mebibyte per second (MiB/s).
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type CoreInstanceGroupEBSConfigObservation struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The throughput, in mebibyte per second (MiB/s).
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type CoreInstanceGroupEBSConfigParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// The throughput, in mebibyte per second (MiB/s).
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type CoreInstanceGroupInitParameters struct {

	// String containing the EMR Auto Scaling Policy JSON.
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []CoreInstanceGroupEBSConfigInitParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// Target number of instances for the instance group. Must be at least 1. Defaults to 1.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// EC2 instance type for all instances in the instance group.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Friendly name given to the instance group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CoreInstanceGroupObservation struct {

	// String containing the EMR Auto Scaling Policy JSON.
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []CoreInstanceGroupEBSConfigObservation `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// Master node type Instance Group ID, if using Instance Group for this node type.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target number of instances for the instance group. Must be at least 1. Defaults to 1.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// EC2 instance type for all instances in the instance group.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Friendly name given to the instance group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CoreInstanceGroupParameters struct {

	// String containing the EMR Auto Scaling Policy JSON.
	// +kubebuilder:validation:Optional
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	// +kubebuilder:validation:Optional
	EBSConfig []CoreInstanceGroupEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// Target number of instances for the instance group. Must be at least 1. Defaults to 1.
	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// EC2 instance type for all instances in the instance group.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Friendly name given to the instance group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EBSConfigInitParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type EBSConfigObservation struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type EBSConfigParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type EC2AttributesInitParameters struct {

	// String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	AdditionalMasterSecurityGroups *string `json:"additionalMasterSecurityGroups,omitempty" tf:"additional_master_security_groups,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate additionalMasterSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalMasterSecurityGroupsRef *v1.Reference `json:"additionalMasterSecurityGroupsRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate additionalMasterSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalMasterSecurityGroupsSelector *v1.Selector `json:"additionalMasterSecurityGroupsSelector,omitempty" tf:"-"`

	// String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	AdditionalSlaveSecurityGroups *string `json:"additionalSlaveSecurityGroups,omitempty" tf:"additional_slave_security_groups,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate additionalSlaveSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalSlaveSecurityGroupsRef *v1.Reference `json:"additionalSlaveSecurityGroupsRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate additionalSlaveSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalSlaveSecurityGroupsSelector *v1.Selector `json:"additionalSlaveSecurityGroupsSelector,omitempty" tf:"-"`

	// Identifier of the Amazon EC2 EMR-Managed security group for the master node.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	EmrManagedMasterSecurityGroup *string `json:"emrManagedMasterSecurityGroup,omitempty" tf:"emr_managed_master_security_group,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate emrManagedMasterSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedMasterSecurityGroupRef *v1.Reference `json:"emrManagedMasterSecurityGroupRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate emrManagedMasterSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedMasterSecurityGroupSelector *v1.Selector `json:"emrManagedMasterSecurityGroupSelector,omitempty" tf:"-"`

	// Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	EmrManagedSlaveSecurityGroup *string `json:"emrManagedSlaveSecurityGroup,omitempty" tf:"emr_managed_slave_security_group,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate emrManagedSlaveSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedSlaveSecurityGroupRef *v1.Reference `json:"emrManagedSlaveSecurityGroupRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate emrManagedSlaveSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedSlaveSecurityGroupSelector *v1.Selector `json:"emrManagedSlaveSecurityGroupSelector,omitempty" tf:"-"`

	// Instance Profile for EC2 instances of the cluster assume this role.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.InstanceProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	InstanceProfile *string `json:"instanceProfile,omitempty" tf:"instance_profile,omitempty"`

	// Reference to a InstanceProfile in iam to populate instanceProfile.
	// +kubebuilder:validation:Optional
	InstanceProfileRef *v1.Reference `json:"instanceProfileRef,omitempty" tf:"-"`

	// Selector for a InstanceProfile in iam to populate instanceProfile.
	// +kubebuilder:validation:Optional
	InstanceProfileSelector *v1.Selector `json:"instanceProfileSelector,omitempty" tf:"-"`

	// Amazon EC2 key pair that can be used to ssh to the master node as the user called hadoop.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.KeyPair
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// Reference to a KeyPair in ec2 to populate keyName.
	// +kubebuilder:validation:Optional
	KeyNameRef *v1.Reference `json:"keyNameRef,omitempty" tf:"-"`

	// Selector for a KeyPair in ec2 to populate keyName.
	// +kubebuilder:validation:Optional
	KeyNameSelector *v1.Selector `json:"keyNameSelector,omitempty" tf:"-"`

	// Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
	ServiceAccessSecurityGroup *string `json:"serviceAccessSecurityGroup,omitempty" tf:"service_access_security_group,omitempty"`

	// VPC subnet id where you want the job flow to launch. Cannot specify the cc1.4xlarge instance type for nodes of a job flow launched in an Amazon VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type EC2AttributesObservation struct {

	// String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
	AdditionalMasterSecurityGroups *string `json:"additionalMasterSecurityGroups,omitempty" tf:"additional_master_security_groups,omitempty"`

	// String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
	AdditionalSlaveSecurityGroups *string `json:"additionalSlaveSecurityGroups,omitempty" tf:"additional_slave_security_groups,omitempty"`

	// Identifier of the Amazon EC2 EMR-Managed security group for the master node.
	EmrManagedMasterSecurityGroup *string `json:"emrManagedMasterSecurityGroup,omitempty" tf:"emr_managed_master_security_group,omitempty"`

	// Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
	EmrManagedSlaveSecurityGroup *string `json:"emrManagedSlaveSecurityGroup,omitempty" tf:"emr_managed_slave_security_group,omitempty"`

	// Instance Profile for EC2 instances of the cluster assume this role.
	InstanceProfile *string `json:"instanceProfile,omitempty" tf:"instance_profile,omitempty"`

	// Amazon EC2 key pair that can be used to ssh to the master node as the user called hadoop.
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
	ServiceAccessSecurityGroup *string `json:"serviceAccessSecurityGroup,omitempty" tf:"service_access_security_group,omitempty"`

	// VPC subnet id where you want the job flow to launch. Cannot specify the cc1.4xlarge instance type for nodes of a job flow launched in an Amazon VPC.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type EC2AttributesParameters struct {

	// String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +kubebuilder:validation:Optional
	AdditionalMasterSecurityGroups *string `json:"additionalMasterSecurityGroups,omitempty" tf:"additional_master_security_groups,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate additionalMasterSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalMasterSecurityGroupsRef *v1.Reference `json:"additionalMasterSecurityGroupsRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate additionalMasterSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalMasterSecurityGroupsSelector *v1.Selector `json:"additionalMasterSecurityGroupsSelector,omitempty" tf:"-"`

	// String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +kubebuilder:validation:Optional
	AdditionalSlaveSecurityGroups *string `json:"additionalSlaveSecurityGroups,omitempty" tf:"additional_slave_security_groups,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate additionalSlaveSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalSlaveSecurityGroupsRef *v1.Reference `json:"additionalSlaveSecurityGroupsRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate additionalSlaveSecurityGroups.
	// +kubebuilder:validation:Optional
	AdditionalSlaveSecurityGroupsSelector *v1.Selector `json:"additionalSlaveSecurityGroupsSelector,omitempty" tf:"-"`

	// Identifier of the Amazon EC2 EMR-Managed security group for the master node.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EmrManagedMasterSecurityGroup *string `json:"emrManagedMasterSecurityGroup,omitempty" tf:"emr_managed_master_security_group,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate emrManagedMasterSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedMasterSecurityGroupRef *v1.Reference `json:"emrManagedMasterSecurityGroupRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate emrManagedMasterSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedMasterSecurityGroupSelector *v1.Selector `json:"emrManagedMasterSecurityGroupSelector,omitempty" tf:"-"`

	// Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EmrManagedSlaveSecurityGroup *string `json:"emrManagedSlaveSecurityGroup,omitempty" tf:"emr_managed_slave_security_group,omitempty"`

	// Reference to a SecurityGroup in ec2 to populate emrManagedSlaveSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedSlaveSecurityGroupRef *v1.Reference `json:"emrManagedSlaveSecurityGroupRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in ec2 to populate emrManagedSlaveSecurityGroup.
	// +kubebuilder:validation:Optional
	EmrManagedSlaveSecurityGroupSelector *v1.Selector `json:"emrManagedSlaveSecurityGroupSelector,omitempty" tf:"-"`

	// Instance Profile for EC2 instances of the cluster assume this role.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.InstanceProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	InstanceProfile *string `json:"instanceProfile,omitempty" tf:"instance_profile,omitempty"`

	// Reference to a InstanceProfile in iam to populate instanceProfile.
	// +kubebuilder:validation:Optional
	InstanceProfileRef *v1.Reference `json:"instanceProfileRef,omitempty" tf:"-"`

	// Selector for a InstanceProfile in iam to populate instanceProfile.
	// +kubebuilder:validation:Optional
	InstanceProfileSelector *v1.Selector `json:"instanceProfileSelector,omitempty" tf:"-"`

	// Amazon EC2 key pair that can be used to ssh to the master node as the user called hadoop.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.KeyPair
	// +kubebuilder:validation:Optional
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// Reference to a KeyPair in ec2 to populate keyName.
	// +kubebuilder:validation:Optional
	KeyNameRef *v1.Reference `json:"keyNameRef,omitempty" tf:"-"`

	// Selector for a KeyPair in ec2 to populate keyName.
	// +kubebuilder:validation:Optional
	KeyNameSelector *v1.Selector `json:"keyNameSelector,omitempty" tf:"-"`

	// Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
	// +kubebuilder:validation:Optional
	ServiceAccessSecurityGroup *string `json:"serviceAccessSecurityGroup,omitempty" tf:"service_access_security_group,omitempty"`

	// VPC subnet id where you want the job flow to launch. Cannot specify the cc1.4xlarge instance type for nodes of a job flow launched in an Amazon VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in ec2 to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type HadoopJarStepInitParameters struct {

	// List of command line arguments to pass to the bootstrap action script.
	Args []*string `json:"args,omitempty" tf:"args"`

	// Path to a JAR file run during the step.
	Jar *string `json:"jar,omitempty" tf:"jar"`

	// Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
	MainClass *string `json:"mainClass,omitempty" tf:"main_class"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties"`
}

type HadoopJarStepObservation struct {

	// List of command line arguments to pass to the bootstrap action script.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Path to a JAR file run during the step.
	Jar *string `json:"jar,omitempty" tf:"jar,omitempty"`

	// Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type HadoopJarStepParameters struct {

	// List of command line arguments to pass to the bootstrap action script.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args"`

	// Path to a JAR file run during the step.
	// +kubebuilder:validation:Optional
	Jar *string `json:"jar,omitempty" tf:"jar"`

	// Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
	// +kubebuilder:validation:Optional
	MainClass *string `json:"mainClass,omitempty" tf:"main_class"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties"`
}

type InstanceTypeConfigsConfigurationsInitParameters struct {

	// Classification within a configuration.
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceTypeConfigsConfigurationsObservation struct {

	// Classification within a configuration.
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceTypeConfigsConfigurationsParameters struct {

	// Classification within a configuration.
	// +kubebuilder:validation:Optional
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceTypeConfigsEBSConfigInitParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceTypeConfigsEBSConfigObservation struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceTypeConfigsEBSConfigParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceTypeConfigsInitParameters struct {

	// Bid price for each EC2 Spot instance type as defined by instance_type. Expressed in USD. If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	Configurations []ConfigurationsInitParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []EBSConfigInitParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// EC2 instance type, such as m4.xlarge.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type InstanceTypeConfigsObservation struct {

	// Bid price for each EC2 Spot instance type as defined by instance_type. Expressed in USD. If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	Configurations []ConfigurationsObservation `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []EBSConfigObservation `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// EC2 instance type, such as m4.xlarge.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type InstanceTypeConfigsParameters struct {

	// Bid price for each EC2 Spot instance type as defined by instance_type. Expressed in USD. If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	// +kubebuilder:validation:Optional
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	// +kubebuilder:validation:Optional
	Configurations []ConfigurationsParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	// +kubebuilder:validation:Optional
	EBSConfig []EBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// EC2 instance type, such as m4.xlarge.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	// +kubebuilder:validation:Optional
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type KerberosAttributesInitParameters struct {

	// Active Directory password for ad_domain_join_user.
	AdDomainJoinPasswordSecretRef *v1.SecretKeySelector `json:"adDomainJoinPasswordSecretRef,omitempty" tf:"-"`

	// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
	AdDomainJoinUser *string `json:"adDomainJoinUser,omitempty" tf:"ad_domain_join_user,omitempty"`

	// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.
	CrossRealmTrustPrincipalPasswordSecretRef *v1.SecretKeySelector `json:"crossRealmTrustPrincipalPasswordSecretRef,omitempty" tf:"-"`

	// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.
	KdcAdminPasswordSecretRef v1.SecretKeySelector `json:"kdcAdminPasswordSecretRef" tf:"-"`

	// Name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`
}

type KerberosAttributesObservation struct {

	// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
	AdDomainJoinUser *string `json:"adDomainJoinUser,omitempty" tf:"ad_domain_join_user,omitempty"`

	// Name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`
}

type KerberosAttributesParameters struct {

	// Active Directory password for ad_domain_join_user.
	// +kubebuilder:validation:Optional
	AdDomainJoinPasswordSecretRef *v1.SecretKeySelector `json:"adDomainJoinPasswordSecretRef,omitempty" tf:"-"`

	// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
	// +kubebuilder:validation:Optional
	AdDomainJoinUser *string `json:"adDomainJoinUser,omitempty" tf:"ad_domain_join_user,omitempty"`

	// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.
	// +kubebuilder:validation:Optional
	CrossRealmTrustPrincipalPasswordSecretRef *v1.SecretKeySelector `json:"crossRealmTrustPrincipalPasswordSecretRef,omitempty" tf:"-"`

	// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.
	// +kubebuilder:validation:Optional
	KdcAdminPasswordSecretRef v1.SecretKeySelector `json:"kdcAdminPasswordSecretRef" tf:"-"`

	// Name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL
	// +kubebuilder:validation:Optional
	Realm *string `json:"realm" tf:"realm,omitempty"`
}

type LaunchSpecificationsInitParameters struct {

	// Configuration block for on demand instances launch specifications.
	OnDemandSpecification []OnDemandSpecificationInitParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications.
	SpotSpecification []SpotSpecificationInitParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type LaunchSpecificationsObservation struct {

	// Configuration block for on demand instances launch specifications.
	OnDemandSpecification []OnDemandSpecificationObservation `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications.
	SpotSpecification []SpotSpecificationObservation `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type LaunchSpecificationsOnDemandSpecificationInitParameters struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`
}

type LaunchSpecificationsOnDemandSpecificationObservation struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`
}

type LaunchSpecificationsOnDemandSpecificationParameters struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`
}

type LaunchSpecificationsParameters struct {

	// Configuration block for on demand instances launch specifications.
	// +kubebuilder:validation:Optional
	OnDemandSpecification []OnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications.
	// +kubebuilder:validation:Optional
	SpotSpecification []SpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type LaunchSpecificationsSpotSpecificationInitParameters struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction *string `json:"timeoutAction,omitempty" tf:"timeout_action,omitempty"`

	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes,omitempty" tf:"timeout_duration_minutes,omitempty"`
}

type LaunchSpecificationsSpotSpecificationObservation struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction *string `json:"timeoutAction,omitempty" tf:"timeout_action,omitempty"`

	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes,omitempty" tf:"timeout_duration_minutes,omitempty"`
}

type LaunchSpecificationsSpotSpecificationParameters struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// +kubebuilder:validation:Optional
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	// +kubebuilder:validation:Optional
	TimeoutAction *string `json:"timeoutAction" tf:"timeout_action,omitempty"`

	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	// +kubebuilder:validation:Optional
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes,omitempty"`
}

type MasterInstanceFleetInitParameters struct {

	// Configuration block for instance fleet.
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigsInitParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification.
	LaunchSpecifications *MasterInstanceFleetLaunchSpecificationsInitParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type MasterInstanceFleetInstanceTypeConfigsInitParameters struct {

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	Configurations []InstanceTypeConfigsConfigurationsInitParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []InstanceTypeConfigsEBSConfigInitParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// EC2 instance type for all instances in the instance group.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type MasterInstanceFleetInstanceTypeConfigsObservation struct {

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	Configurations []InstanceTypeConfigsConfigurationsObservation `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []InstanceTypeConfigsEBSConfigObservation `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// EC2 instance type for all instances in the instance group.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type MasterInstanceFleetInstanceTypeConfigsParameters struct {

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	// +kubebuilder:validation:Optional
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	// +kubebuilder:validation:Optional
	Configurations []InstanceTypeConfigsConfigurationsParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	// +kubebuilder:validation:Optional
	EBSConfig []InstanceTypeConfigsEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// EC2 instance type for all instances in the instance group.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	// +kubebuilder:validation:Optional
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type MasterInstanceFleetLaunchSpecificationsInitParameters struct {

	// Configuration block for on demand instances launch specifications.
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationInitParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications.
	SpotSpecification []LaunchSpecificationsSpotSpecificationInitParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type MasterInstanceFleetLaunchSpecificationsObservation struct {

	// Configuration block for on demand instances launch specifications.
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationObservation `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications.
	SpotSpecification []LaunchSpecificationsSpotSpecificationObservation `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type MasterInstanceFleetLaunchSpecificationsParameters struct {

	// Configuration block for on demand instances launch specifications.
	// +kubebuilder:validation:Optional
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications.
	// +kubebuilder:validation:Optional
	SpotSpecification []LaunchSpecificationsSpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type MasterInstanceFleetObservation struct {

	// Master node type Instance Group ID, if using Instance Group for this node type.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration block for instance fleet.
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigsObservation `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification.
	LaunchSpecifications *MasterInstanceFleetLaunchSpecificationsObservation `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ProvisionedOnDemandCapacity *float64 `json:"provisionedOnDemandCapacity,omitempty" tf:"provisioned_on_demand_capacity,omitempty"`

	ProvisionedSpotCapacity *float64 `json:"provisionedSpotCapacity,omitempty" tf:"provisioned_spot_capacity,omitempty"`

	// Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type MasterInstanceFleetParameters struct {

	// Configuration block for instance fleet.
	// +kubebuilder:validation:Optional
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification.
	// +kubebuilder:validation:Optional
	LaunchSpecifications *MasterInstanceFleetLaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	// +kubebuilder:validation:Optional
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	// +kubebuilder:validation:Optional
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type MasterInstanceGroupEBSConfigInitParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The throughput, in mebibyte per second (MiB/s).
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type MasterInstanceGroupEBSConfigObservation struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The throughput, in mebibyte per second (MiB/s).
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type MasterInstanceGroupEBSConfigParameters struct {

	// Number of I/O operations per second (IOPS) that the volume supports.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Volume size, in gibibytes (GiB).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// The throughput, in mebibyte per second (MiB/s).
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Volume type. Valid options are gp3, gp2, io1, standard, st1 and sc1. See EBS Volume Types.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type MasterInstanceGroupInitParameters struct {

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []MasterInstanceGroupEBSConfigInitParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's core_instance_group to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// EC2 instance type for all instances in the instance group.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Friendly name given to the instance group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MasterInstanceGroupObservation struct {

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []MasterInstanceGroupEBSConfigObservation `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// Master node type Instance Group ID, if using Instance Group for this node type.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's core_instance_group to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// EC2 instance type for all instances in the instance group.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Friendly name given to the instance group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MasterInstanceGroupParameters struct {

	// Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	// +kubebuilder:validation:Optional
	EBSConfig []MasterInstanceGroupEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's core_instance_group to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled.
	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// EC2 instance type for all instances in the instance group.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Friendly name given to the instance group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnDemandSpecificationInitParameters struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`
}

type OnDemandSpecificationObservation struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`
}

type OnDemandSpecificationParameters struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`
}

type PlacementGroupConfigInitParameters struct {

	// Role of the instance in the cluster. Valid Values: MASTER, CORE, TASK.
	InstanceRole *string `json:"instanceRole,omitempty" tf:"instance_role"`

	// EC2 Placement Group strategy associated with instance role. Valid Values: SPREAD, PARTITION, CLUSTER, NONE.
	PlacementStrategy *string `json:"placementStrategy,omitempty" tf:"placement_strategy"`
}

type PlacementGroupConfigObservation struct {

	// Role of the instance in the cluster. Valid Values: MASTER, CORE, TASK.
	InstanceRole *string `json:"instanceRole,omitempty" tf:"instance_role,omitempty"`

	// EC2 Placement Group strategy associated with instance role. Valid Values: SPREAD, PARTITION, CLUSTER, NONE.
	PlacementStrategy *string `json:"placementStrategy,omitempty" tf:"placement_strategy,omitempty"`
}

type PlacementGroupConfigParameters struct {

	// Role of the instance in the cluster. Valid Values: MASTER, CORE, TASK.
	// +kubebuilder:validation:Optional
	InstanceRole *string `json:"instanceRole,omitempty" tf:"instance_role"`

	// EC2 Placement Group strategy associated with instance role. Valid Values: SPREAD, PARTITION, CLUSTER, NONE.
	// +kubebuilder:validation:Optional
	PlacementStrategy *string `json:"placementStrategy,omitempty" tf:"placement_strategy"`
}

type SpotSpecificationInitParameters struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction *string `json:"timeoutAction,omitempty" tf:"timeout_action,omitempty"`

	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes,omitempty" tf:"timeout_duration_minutes,omitempty"`
}

type SpotSpecificationObservation struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction *string `json:"timeoutAction,omitempty" tf:"timeout_action,omitempty"`

	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes,omitempty" tf:"timeout_duration_minutes,omitempty"`
}

type SpotSpecificationParameters struct {

	// Specifies the strategy to use in launching Spot instance fleets. Valid values include capacity-optimized, diversified, lowest-price, price-capacity-optimized. See the AWS documentation for details on each strategy type.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// +kubebuilder:validation:Optional
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	// +kubebuilder:validation:Optional
	TimeoutAction *string `json:"timeoutAction" tf:"timeout_action,omitempty"`

	// Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	// +kubebuilder:validation:Optional
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes,omitempty"`
}

type StepInitParameters struct {

	// Action to take if the step fails. Valid values: TERMINATE_JOB_FLOW, TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE
	ActionOnFailure *string `json:"actionOnFailure,omitempty" tf:"action_on_failure"`

	// JAR file used for the step. See below.
	HadoopJarStep *HadoopJarStepInitParameters `json:"hadoopJarStep,omitempty" tf:"hadoop_jar_step"`

	// Name of the job flow.
	Name *string `json:"name,omitempty" tf:"name"`
}

type StepObservation struct {

	// Action to take if the step fails. Valid values: TERMINATE_JOB_FLOW, TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE
	ActionOnFailure *string `json:"actionOnFailure,omitempty" tf:"action_on_failure,omitempty"`

	// JAR file used for the step. See below.
	HadoopJarStep *HadoopJarStepObservation `json:"hadoopJarStep,omitempty" tf:"hadoop_jar_step,omitempty"`

	// Name of the job flow.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type StepParameters struct {

	// Action to take if the step fails. Valid values: TERMINATE_JOB_FLOW, TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE
	// +kubebuilder:validation:Optional
	ActionOnFailure *string `json:"actionOnFailure,omitempty" tf:"action_on_failure"`

	// JAR file used for the step. See below.
	// +kubebuilder:validation:Optional
	HadoopJarStep *HadoopJarStepParameters `json:"hadoopJarStep,omitempty" tf:"hadoop_jar_step"`

	// Name of the job flow.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API. Provides an Elastic MapReduce Cluster
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.releaseLabel) || (has(self.initProvider) && has(self.initProvider.releaseLabel))",message="spec.forProvider.releaseLabel is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
