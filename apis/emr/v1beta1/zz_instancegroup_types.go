// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceGroupEBSConfigInitParameters struct {

	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The number of EBS Volumes to attach per instance.
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceGroupEBSConfigObservation struct {

	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The number of EBS Volumes to attach per instance.
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceGroupEBSConfigParameters struct {

	// The number of I/O operations per second (IOPS) that the volume supports.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// The volume type. Valid options are 'gp2', 'io1' and 'standard'.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// The number of EBS Volumes to attach per instance.
	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceGroupInitParameters struct {

	// The autoscaling policy document. This is a JSON formatted string. See EMR Auto Scaling
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// If set, the bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// ID of the EMR Cluster to attach to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/emr/v1beta1.Cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// A JSON string for supplying list of configurations specific to the EMR instance group. Note that this can only be changed when using EMR release 5.21 or later.
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// One or more ebs_config blocks as defined below. Changing this forces a new resource to be created.
	EBSConfig []InstanceGroupEBSConfigInitParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// optimized. Changing this forces a new resource to be created.
	EBSOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized,omitempty"`

	// target number of instances for the instance group. defaults to 0.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// The EC2 instance type for all instances in the instance group. Changing this forces a new resource to be created.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Human friendly name given to the instance group. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type InstanceGroupObservation struct {

	// The autoscaling policy document. This is a JSON formatted string. See EMR Auto Scaling
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// If set, the bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// ID of the EMR Cluster to attach to. Changing this forces a new resource to be created.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// A JSON string for supplying list of configurations specific to the EMR instance group. Note that this can only be changed when using EMR release 5.21 or later.
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// One or more ebs_config blocks as defined below. Changing this forces a new resource to be created.
	EBSConfig []InstanceGroupEBSConfigObservation `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// optimized. Changing this forces a new resource to be created.
	EBSOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized,omitempty"`

	// The EMR Instance ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// target number of instances for the instance group. defaults to 0.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// The EC2 instance type for all instances in the instance group. Changing this forces a new resource to be created.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Human friendly name given to the instance group. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of instances currently running in this instance group.
	RunningInstanceCount *float64 `json:"runningInstanceCount,omitempty" tf:"running_instance_count,omitempty"`

	// The current status of the instance group.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type InstanceGroupParameters struct {

	// The autoscaling policy document. This is a JSON formatted string. See EMR Auto Scaling
	// +kubebuilder:validation:Optional
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy,omitempty"`

	// If set, the bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// ID of the EMR Cluster to attach to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/emr/v1beta1.Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// A JSON string for supplying list of configurations specific to the EMR instance group. Note that this can only be changed when using EMR release 5.21 or later.
	// +kubebuilder:validation:Optional
	ConfigurationsJSON *string `json:"configurationsJson,omitempty" tf:"configurations_json,omitempty"`

	// One or more ebs_config blocks as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	EBSConfig []InstanceGroupEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// optimized. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	EBSOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized,omitempty"`

	// target number of instances for the instance group. defaults to 0.
	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// The EC2 instance type for all instances in the instance group. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Human friendly name given to the instance group. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// InstanceGroupSpec defines the desired state of InstanceGroup
type InstanceGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceGroupInitParameters `json:"initProvider,omitempty"`
}

// InstanceGroupStatus defines the observed state of InstanceGroup.
type InstanceGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceGroup is the Schema for the InstanceGroups API. Provides an Elastic MapReduce Cluster Instance Group
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type InstanceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceType) || (has(self.initProvider) && has(self.initProvider.instanceType))",message="spec.forProvider.instanceType is a required parameter"
	Spec   InstanceGroupSpec   `json:"spec"`
	Status InstanceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceGroupList contains a list of InstanceGroups
type InstanceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceGroup `json:"items"`
}

// Repository type metadata.
var (
	InstanceGroup_Kind             = "InstanceGroup"
	InstanceGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceGroup_Kind}.String()
	InstanceGroup_KindAPIVersion   = InstanceGroup_Kind + "." + CRDGroupVersion.String()
	InstanceGroup_GroupVersionKind = CRDGroupVersion.WithKind(InstanceGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceGroup{}, &InstanceGroupList{})
}
