// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Cluster.
	apisresolver "github.com/upbound/provider-aws/internal/apis"
)

func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.AdditionalMasterSecurityGroups),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EC2Attributes.AdditionalMasterSecurityGroupsRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.AdditionalMasterSecurityGroupsSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.AdditionalMasterSecurityGroups")
		}
		mg.Spec.ForProvider.EC2Attributes.AdditionalMasterSecurityGroups = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.AdditionalMasterSecurityGroupsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.AdditionalSlaveSecurityGroups),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EC2Attributes.AdditionalSlaveSecurityGroupsRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.AdditionalSlaveSecurityGroupsSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.AdditionalSlaveSecurityGroups")
		}
		mg.Spec.ForProvider.EC2Attributes.AdditionalSlaveSecurityGroups = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.AdditionalSlaveSecurityGroupsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.EmrManagedMasterSecurityGroup),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.EC2Attributes.EmrManagedMasterSecurityGroupRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.EmrManagedMasterSecurityGroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.EmrManagedMasterSecurityGroup")
		}
		mg.Spec.ForProvider.EC2Attributes.EmrManagedMasterSecurityGroup = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.EmrManagedMasterSecurityGroupRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.EmrManagedSlaveSecurityGroup),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.EC2Attributes.EmrManagedSlaveSecurityGroupRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.EmrManagedSlaveSecurityGroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.EmrManagedSlaveSecurityGroup")
		}
		mg.Spec.ForProvider.EC2Attributes.EmrManagedSlaveSecurityGroup = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.EmrManagedSlaveSecurityGroupRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "InstanceProfile", "InstanceProfileList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.InstanceProfile),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.ForProvider.EC2Attributes.InstanceProfileRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.InstanceProfileSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.InstanceProfile")
		}
		mg.Spec.ForProvider.EC2Attributes.InstanceProfile = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.InstanceProfileRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "KeyPair", "KeyPairList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.KeyName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EC2Attributes.KeyNameRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.KeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.KeyName")
		}
		mg.Spec.ForProvider.EC2Attributes.KeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.KeyNameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EC2Attributes.SubnetID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.EC2Attributes.SubnetIDRef,
				Selector:     mg.Spec.ForProvider.EC2Attributes.SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EC2Attributes.SubnetID")
		}
		mg.Spec.ForProvider.EC2Attributes.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EC2Attributes.SubnetIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogURI),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LogURIRef,
			Selector:     mg.Spec.ForProvider.LogURISelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogURI")
	}
	mg.Spec.ForProvider.LogURI = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogURIRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceRole),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.ServiceRoleRef,
			Selector:     mg.Spec.ForProvider.ServiceRoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceRole")
	}
	mg.Spec.ForProvider.ServiceRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRoleRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.AdditionalMasterSecurityGroups),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EC2Attributes.AdditionalMasterSecurityGroupsRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.AdditionalMasterSecurityGroupsSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.AdditionalMasterSecurityGroups")
		}
		mg.Spec.InitProvider.EC2Attributes.AdditionalMasterSecurityGroups = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.AdditionalMasterSecurityGroupsRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.AdditionalSlaveSecurityGroups),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EC2Attributes.AdditionalSlaveSecurityGroupsRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.AdditionalSlaveSecurityGroupsSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.AdditionalSlaveSecurityGroups")
		}
		mg.Spec.InitProvider.EC2Attributes.AdditionalSlaveSecurityGroups = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.AdditionalSlaveSecurityGroupsRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.EmrManagedMasterSecurityGroup),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.EC2Attributes.EmrManagedMasterSecurityGroupRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.EmrManagedMasterSecurityGroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.EmrManagedMasterSecurityGroup")
		}
		mg.Spec.InitProvider.EC2Attributes.EmrManagedMasterSecurityGroup = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.EmrManagedMasterSecurityGroupRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "SecurityGroup", "SecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.EmrManagedSlaveSecurityGroup),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.EC2Attributes.EmrManagedSlaveSecurityGroupRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.EmrManagedSlaveSecurityGroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.EmrManagedSlaveSecurityGroup")
		}
		mg.Spec.InitProvider.EC2Attributes.EmrManagedSlaveSecurityGroup = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.EmrManagedSlaveSecurityGroupRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "InstanceProfile", "InstanceProfileList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.InstanceProfile),
				Extract:      resource.ExtractParamPath("arn", true),
				Reference:    mg.Spec.InitProvider.EC2Attributes.InstanceProfileRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.InstanceProfileSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.InstanceProfile")
		}
		mg.Spec.InitProvider.EC2Attributes.InstanceProfile = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.InstanceProfileRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "KeyPair", "KeyPairList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.KeyName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EC2Attributes.KeyNameRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.KeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.KeyName")
		}
		mg.Spec.InitProvider.EC2Attributes.KeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.KeyNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.EC2Attributes != nil {
		{
			m, l, err = apisresolver.GetManagedResource("ec2.aws.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EC2Attributes.SubnetID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.EC2Attributes.SubnetIDRef,
				Selector:     mg.Spec.InitProvider.EC2Attributes.SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EC2Attributes.SubnetID")
		}
		mg.Spec.InitProvider.EC2Attributes.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EC2Attributes.SubnetIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("s3.aws.upbound.io", "v1beta2", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogURI),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LogURIRef,
			Selector:     mg.Spec.InitProvider.LogURISelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogURI")
	}
	mg.Spec.InitProvider.LogURI = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogURIRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceRole),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.ServiceRoleRef,
			Selector:     mg.Spec.InitProvider.ServiceRoleSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceRole")
	}
	mg.Spec.InitProvider.ServiceRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRoleRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceFleet.
func (mg *InstanceFleet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("emr.aws.upbound.io", "v1beta1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ClusterIDRef,
			Selector:     mg.Spec.ForProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("emr.aws.upbound.io", "v1beta1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ClusterIDRef,
			Selector:     mg.Spec.InitProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceGroup.
func (mg *InstanceGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("emr.aws.upbound.io", "v1beta1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ClusterIDRef,
			Selector:     mg.Spec.ForProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("emr.aws.upbound.io", "v1beta1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ClusterIDRef,
			Selector:     mg.Spec.InitProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference

	return nil
}
