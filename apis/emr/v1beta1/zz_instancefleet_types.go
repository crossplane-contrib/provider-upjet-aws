// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceFleetInitParameters struct {

	// ID of the EMR Cluster to attach to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/emr/v1beta1.Cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Configuration block for instance fleet
	InstanceTypeConfigs []InstanceFleetInstanceTypeConfigsInitParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification
	LaunchSpecifications *InstanceFleetLaunchSpecificationsInitParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type InstanceFleetInstanceTypeConfigsConfigurationsInitParameters struct {

	// The classification within a configuration.
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// A map of properties specified within a configuration classification
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceFleetInstanceTypeConfigsConfigurationsObservation struct {

	// The classification within a configuration.
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// A map of properties specified within a configuration classification
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceFleetInstanceTypeConfigsConfigurationsParameters struct {

	// The classification within a configuration.
	// +kubebuilder:validation:Optional
	Classification *string `json:"classification,omitempty" tf:"classification,omitempty"`

	// A map of properties specified within a configuration classification
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type InstanceFleetInstanceTypeConfigsEBSConfigInitParameters struct {

	// The number of I/O operations per second (IOPS) that the volume supports
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The volume type. Valid options are gp2, io1, standard and st1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceFleetInstanceTypeConfigsEBSConfigObservation struct {

	// The number of I/O operations per second (IOPS) that the volume supports
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The volume size, in gibibytes (GiB).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The volume type. Valid options are gp2, io1, standard and st1. See EBS Volume Types.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceFleetInstanceTypeConfigsEBSConfigParameters struct {

	// The number of I/O operations per second (IOPS) that the volume supports
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// The volume size, in gibibytes (GiB).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// The volume type. Valid options are gp2, io1, standard and st1. See EBS Volume Types.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
	// +kubebuilder:validation:Optional
	VolumesPerInstance *float64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance,omitempty"`
}

type InstanceFleetInstanceTypeConfigsInitParameters struct {

	// The bid price for each EC2 Spot instance type as defined by instance_type. Expressed in USD. If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	Configurations []InstanceFleetInstanceTypeConfigsConfigurationsInitParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []InstanceFleetInstanceTypeConfigsEBSConfigInitParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// An EC2 instance type, such as m4.xlarge.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type InstanceFleetInstanceTypeConfigsObservation struct {

	// The bid price for each EC2 Spot instance type as defined by instance_type. Expressed in USD. If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	Configurations []InstanceFleetInstanceTypeConfigsConfigurationsObservation `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	EBSConfig []InstanceFleetInstanceTypeConfigsEBSConfigObservation `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// An EC2 instance type, such as m4.xlarge.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type InstanceFleetInstanceTypeConfigsParameters struct {

	// The bid price for each EC2 Spot instance type as defined by instance_type. Expressed in USD. If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	// +kubebuilder:validation:Optional
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price,omitempty"`

	// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by instance_type. Expressed as a number (for example, 20 specifies 20%). If neither bid_price nor bid_price_as_percentage_of_on_demand_price is provided, bid_price_as_percentage_of_on_demand_price defaults to 100%.
	// +kubebuilder:validation:Optional
	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price,omitempty"`

	// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of configuration blocks.
	// +kubebuilder:validation:Optional
	Configurations []InstanceFleetInstanceTypeConfigsConfigurationsParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
	// +kubebuilder:validation:Optional
	EBSConfig []InstanceFleetInstanceTypeConfigsEBSConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config,omitempty"`

	// An EC2 instance type, such as m4.xlarge.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in aws_emr_instance_fleet.
	// +kubebuilder:validation:Optional
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type InstanceFleetLaunchSpecificationsInitParameters struct {

	// Configuration block for on demand instances launch specifications
	OnDemandSpecification []InstanceFleetLaunchSpecificationsOnDemandSpecificationInitParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications
	SpotSpecification []InstanceFleetLaunchSpecificationsSpotSpecificationInitParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type InstanceFleetLaunchSpecificationsObservation struct {

	// Configuration block for on demand instances launch specifications
	OnDemandSpecification []InstanceFleetLaunchSpecificationsOnDemandSpecificationObservation `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications
	SpotSpecification []InstanceFleetLaunchSpecificationsSpotSpecificationObservation `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type InstanceFleetLaunchSpecificationsOnDemandSpecificationInitParameters struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`
}

type InstanceFleetLaunchSpecificationsOnDemandSpecificationObservation struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`
}

type InstanceFleetLaunchSpecificationsOnDemandSpecificationParameters struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`
}

type InstanceFleetLaunchSpecificationsParameters struct {

	// Configuration block for on demand instances launch specifications
	// +kubebuilder:validation:Optional
	OnDemandSpecification []InstanceFleetLaunchSpecificationsOnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification,omitempty"`

	// Configuration block for spot instances launch specifications
	// +kubebuilder:validation:Optional
	SpotSpecification []InstanceFleetLaunchSpecificationsSpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification,omitempty"`
}

type InstanceFleetLaunchSpecificationsSpotSpecificationInitParameters struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction *string `json:"timeoutAction,omitempty" tf:"timeout_action,omitempty"`

	// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes,omitempty" tf:"timeout_duration_minutes,omitempty"`
}

type InstanceFleetLaunchSpecificationsSpotSpecificationObservation struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	TimeoutAction *string `json:"timeoutAction,omitempty" tf:"timeout_action,omitempty"`

	// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes,omitempty" tf:"timeout_duration_minutes,omitempty"`
}

type InstanceFleetLaunchSpecificationsSpotSpecificationParameters struct {

	// Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// +kubebuilder:validation:Optional
	BlockDurationMinutes *float64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes,omitempty"`

	// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
	// +kubebuilder:validation:Optional
	TimeoutAction *string `json:"timeoutAction" tf:"timeout_action,omitempty"`

	// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
	// +kubebuilder:validation:Optional
	TimeoutDurationMinutes *float64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes,omitempty"`
}

type InstanceFleetObservation struct {

	// ID of the EMR Cluster to attach to. Changing this forces a new resource to be created.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The unique identifier of the instance fleet.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration block for instance fleet
	InstanceTypeConfigs []InstanceFleetInstanceTypeConfigsObservation `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification
	LaunchSpecifications *InstanceFleetLaunchSpecificationsObservation `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Demand units that have been provisioned for the instance
	// fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
	ProvisionedOnDemandCapacity *float64 `json:"provisionedOnDemandCapacity,omitempty" tf:"provisioned_on_demand_capacity,omitempty"`

	// The number of Spot units that have been provisioned for this instance fleet
	// to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
	ProvisionedSpotCapacity *float64 `json:"provisionedSpotCapacity,omitempty" tf:"provisioned_spot_capacity,omitempty"`

	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

type InstanceFleetParameters struct {

	// ID of the EMR Cluster to attach to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/emr/v1beta1.Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in emr to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Configuration block for instance fleet
	// +kubebuilder:validation:Optional
	InstanceTypeConfigs []InstanceFleetInstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs,omitempty"`

	// Configuration block for launch specification
	// +kubebuilder:validation:Optional
	LaunchSpecifications *InstanceFleetLaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications,omitempty"`

	// Friendly name given to the instance fleet.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
	// +kubebuilder:validation:Optional
	TargetOnDemandCapacity *float64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity,omitempty"`

	// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
	// +kubebuilder:validation:Optional
	TargetSpotCapacity *float64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity,omitempty"`
}

// InstanceFleetSpec defines the desired state of InstanceFleet
type InstanceFleetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceFleetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceFleetInitParameters `json:"initProvider,omitempty"`
}

// InstanceFleetStatus defines the observed state of InstanceFleet.
type InstanceFleetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceFleetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstanceFleet is the Schema for the InstanceFleets API. Provides an Elastic MapReduce Cluster Instance Fleet
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type InstanceFleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceFleetSpec   `json:"spec"`
	Status            InstanceFleetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceFleetList contains a list of InstanceFleets
type InstanceFleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceFleet `json:"items"`
}

// Repository type metadata.
var (
	InstanceFleet_Kind             = "InstanceFleet"
	InstanceFleet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceFleet_Kind}.String()
	InstanceFleet_KindAPIVersion   = InstanceFleet_Kind + "." + CRDGroupVersion.String()
	InstanceFleet_GroupVersionKind = CRDGroupVersion.WithKind(InstanceFleet_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceFleet{}, &InstanceFleetList{})
}
