/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Ledger.
	apisresolver "github.com/upbound/provider-aws/internal/apis"
)

func (mg *Ledger) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KMSKey),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KMSKeyRef,
			Selector:     mg.Spec.ForProvider.KMSKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KMSKey")
	}
	mg.Spec.ForProvider.KMSKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KMSKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kms.aws.upbound.io", "v1beta1", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KMSKey),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.KMSKeyRef,
			Selector:     mg.Spec.InitProvider.KMSKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KMSKey")
	}
	mg.Spec.InitProvider.KMSKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KMSKeyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Stream.
func (mg *Stream) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KinesisConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("kinesis.aws.upbound.io", "v1beta1", "Stream", "StreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KinesisConfiguration[i3].StreamArn),
				Extract:      common.TerraformID(),
				Reference:    mg.Spec.ForProvider.KinesisConfiguration[i3].StreamArnRef,
				Selector:     mg.Spec.ForProvider.KinesisConfiguration[i3].StreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KinesisConfiguration[i3].StreamArn")
		}
		mg.Spec.ForProvider.KinesisConfiguration[i3].StreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KinesisConfiguration[i3].StreamArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("qldb.aws.upbound.io", "v1beta1", "Ledger", "LedgerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LedgerName),
			Extract:      common.TerraformID(),
			Reference:    mg.Spec.ForProvider.LedgerNameRef,
			Selector:     mg.Spec.ForProvider.LedgerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LedgerName")
	}
	mg.Spec.ForProvider.LedgerName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LedgerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.ForProvider.RoleArnRef,
			Selector:     mg.Spec.ForProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleArn")
	}
	mg.Spec.ForProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleArnRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.KinesisConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("kinesis.aws.upbound.io", "v1beta1", "Stream", "StreamList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KinesisConfiguration[i3].StreamArn),
				Extract:      common.TerraformID(),
				Reference:    mg.Spec.InitProvider.KinesisConfiguration[i3].StreamArnRef,
				Selector:     mg.Spec.InitProvider.KinesisConfiguration[i3].StreamArnSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KinesisConfiguration[i3].StreamArn")
		}
		mg.Spec.InitProvider.KinesisConfiguration[i3].StreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KinesisConfiguration[i3].StreamArnRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("qldb.aws.upbound.io", "v1beta1", "Ledger", "LedgerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LedgerName),
			Extract:      common.TerraformID(),
			Reference:    mg.Spec.InitProvider.LedgerNameRef,
			Selector:     mg.Spec.InitProvider.LedgerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LedgerName")
	}
	mg.Spec.InitProvider.LedgerName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LedgerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("iam.aws.upbound.io", "v1beta1", "Role", "RoleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleArn),
			Extract:      common.ARNExtractor(),
			Reference:    mg.Spec.InitProvider.RoleArnRef,
			Selector:     mg.Spec.InitProvider.RoleArnSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleArn")
	}
	mg.Spec.InitProvider.RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleArnRef = rsp.ResolvedReference

	return nil
}
