// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DirectoryBucketInitParameters struct {

	// Data redundancy. Valid values: SingleAvailabilityZone.
	DataRedundancy *string `json:"dataRedundancy,omitempty" tf:"data_redundancy,omitempty"`

	// Boolean that indicates all objects should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Bucket location. See Location below for more details.
	Location []LocationInitParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Bucket type. Valid values: Directory.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DirectoryBucketObservation struct {

	// ARN of the bucket.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Data redundancy. Valid values: SingleAvailabilityZone.
	DataRedundancy *string `json:"dataRedundancy,omitempty" tf:"data_redundancy,omitempty"`

	// Boolean that indicates all objects should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Name of the bucket.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Bucket location. See Location below for more details.
	Location []LocationObservation `json:"location,omitempty" tf:"location,omitempty"`

	// Bucket type. Valid values: Directory.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DirectoryBucketParameters struct {

	// Data redundancy. Valid values: SingleAvailabilityZone.
	// +kubebuilder:validation:Optional
	DataRedundancy *string `json:"dataRedundancy,omitempty" tf:"data_redundancy,omitempty"`

	// Boolean that indicates all objects should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Bucket location. See Location below for more details.
	// +kubebuilder:validation:Optional
	Location []LocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Bucket type. Valid values: Directory.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LocationInitParameters struct {

	// Availability Zone ID.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Location type. Valid values: AvailabilityZone.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LocationObservation struct {

	// Availability Zone ID.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Location type. Valid values: AvailabilityZone.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LocationParameters struct {

	// Availability Zone ID.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Location type. Valid values: AvailabilityZone.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// DirectoryBucketSpec defines the desired state of DirectoryBucket
type DirectoryBucketSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DirectoryBucketParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DirectoryBucketInitParameters `json:"initProvider,omitempty"`
}

// DirectoryBucketStatus defines the observed state of DirectoryBucket.
type DirectoryBucketStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DirectoryBucketObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DirectoryBucket is the Schema for the DirectoryBuckets API. Provides an Amazon S3 Express directory bucket resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DirectoryBucket struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DirectoryBucketSpec   `json:"spec"`
	Status            DirectoryBucketStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryBucketList contains a list of DirectoryBuckets
type DirectoryBucketList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DirectoryBucket `json:"items"`
}

// Repository type metadata.
var (
	DirectoryBucket_Kind             = "DirectoryBucket"
	DirectoryBucket_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DirectoryBucket_Kind}.String()
	DirectoryBucket_KindAPIVersion   = DirectoryBucket_Kind + "." + CRDGroupVersion.String()
	DirectoryBucket_GroupVersionKind = CRDGroupVersion.WithKind(DirectoryBucket_Kind)
)

func init() {
	SchemeBuilder.Register(&DirectoryBucket{}, &DirectoryBucketList{})
}
