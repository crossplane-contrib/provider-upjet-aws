// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketNotificationInitParameters struct {

	// Whether to enable Amazon EventBridge notifications.
	Eventbridge *bool `json:"eventbridge,omitempty" tf:"eventbridge,omitempty"`

	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunction []LambdaFunctionInitParameters `json:"lambdaFunction,omitempty" tf:"lambda_function,omitempty"`

	// Notification configuration to SQS Queue. See below.
	Queue []QueueInitParameters `json:"queue,omitempty" tf:"queue,omitempty"`

	// Notification configuration to SNS Topic. See below.
	Topic []TopicInitParameters `json:"topic,omitempty" tf:"topic,omitempty"`
}

type BucketNotificationObservation struct {

	// Name of the bucket for notification configuration.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Whether to enable Amazon EventBridge notifications.
	Eventbridge *bool `json:"eventbridge,omitempty" tf:"eventbridge,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunction []LambdaFunctionObservation `json:"lambdaFunction,omitempty" tf:"lambda_function,omitempty"`

	// Notification configuration to SQS Queue. See below.
	Queue []QueueObservation `json:"queue,omitempty" tf:"queue,omitempty"`

	// Notification configuration to SNS Topic. See below.
	Topic []TopicObservation `json:"topic,omitempty" tf:"topic,omitempty"`
}

type BucketNotificationParameters struct {

	// Name of the bucket for notification configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Whether to enable Amazon EventBridge notifications.
	// +kubebuilder:validation:Optional
	Eventbridge *bool `json:"eventbridge,omitempty" tf:"eventbridge,omitempty"`

	// Used to configure notifications to a Lambda Function. See below.
	// +kubebuilder:validation:Optional
	LambdaFunction []LambdaFunctionParameters `json:"lambdaFunction,omitempty" tf:"lambda_function,omitempty"`

	// Notification configuration to SQS Queue. See below.
	// +kubebuilder:validation:Optional
	Queue []QueueParameters `json:"queue,omitempty" tf:"queue,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Notification configuration to SNS Topic. See below.
	// +kubebuilder:validation:Optional
	Topic []TopicParameters `json:"topic,omitempty" tf:"topic,omitempty"`
}

type LambdaFunctionInitParameters struct {

	// Event for which to send notifications.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	// Object key name prefix.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Lambda function ARN.
	LambdaFunctionArn *string `json:"lambdaFunctionArn,omitempty" tf:"lambda_function_arn,omitempty"`
}

type LambdaFunctionObservation struct {

	// Event for which to send notifications.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	// Object key name prefix.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Lambda function ARN.
	LambdaFunctionArn *string `json:"lambdaFunctionArn,omitempty" tf:"lambda_function_arn,omitempty"`
}

type LambdaFunctionParameters struct {

	// Event for which to send notifications.
	// +kubebuilder:validation:Optional
	// +listType:set
	Events []*string `json:"events" tf:"events,omitempty"`

	// Object key name prefix.
	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Lambda function ARN.
	// +kubebuilder:validation:Optional
	LambdaFunctionArn *string `json:"lambdaFunctionArn,omitempty" tf:"lambda_function_arn,omitempty"`
}

type QueueInitParameters struct {

	// Specifies event for which to send notifications.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	// Object key name prefix.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QueueObservation struct {

	// Specifies event for which to send notifications.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	// Object key name prefix.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// SQS queue ARN.
	QueueArn *string `json:"queueArn,omitempty" tf:"queue_arn,omitempty"`
}

type QueueParameters struct {

	// Specifies event for which to send notifications.
	// +kubebuilder:validation:Optional
	// +listType:set
	Events []*string `json:"events" tf:"events,omitempty"`

	// Object key name prefix.
	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// SQS queue ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	QueueArn *string `json:"queueArn,omitempty" tf:"queue_arn,omitempty"`

	// Reference to a Queue in sqs to populate queueArn.
	// +kubebuilder:validation:Optional
	QueueArnRef *v1.Reference `json:"queueArnRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate queueArn.
	// +kubebuilder:validation:Optional
	QueueArnSelector *v1.Selector `json:"queueArnSelector,omitempty" tf:"-"`
}

type TopicInitParameters struct {

	// Event for which to send notifications.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	// Object key name prefix.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TopicObservation struct {

	// Event for which to send notifications.
	// +listType:set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	// Object key name prefix.
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// SNS topic ARN.
	TopicArn *string `json:"topicArn,omitempty" tf:"topic_arn,omitempty"`
}

type TopicParameters struct {

	// Event for which to send notifications.
	// +kubebuilder:validation:Optional
	// +listType:set
	Events []*string `json:"events" tf:"events,omitempty"`

	// Object key name prefix.
	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// Object key name suffix.
	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// Unique identifier for each of the notification configurations.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// SNS topic ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	TopicArn *string `json:"topicArn,omitempty" tf:"topic_arn,omitempty"`

	// Reference to a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	TopicArnRef *v1.Reference `json:"topicArnRef,omitempty" tf:"-"`

	// Selector for a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	TopicArnSelector *v1.Selector `json:"topicArnSelector,omitempty" tf:"-"`
}

// BucketNotificationSpec defines the desired state of BucketNotification
type BucketNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketNotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketNotificationInitParameters `json:"initProvider,omitempty"`
}

// BucketNotificationStatus defines the observed state of BucketNotification.
type BucketNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketNotification is the Schema for the BucketNotifications API. Manages a S3 Bucket Notification Configuration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type BucketNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketNotificationSpec   `json:"spec"`
	Status            BucketNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketNotificationList contains a list of BucketNotifications
type BucketNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketNotification `json:"items"`
}

// Repository type metadata.
var (
	BucketNotification_Kind             = "BucketNotification"
	BucketNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketNotification_Kind}.String()
	BucketNotification_KindAPIVersion   = BucketNotification_Kind + "." + CRDGroupVersion.String()
	BucketNotification_GroupVersionKind = CRDGroupVersion.WithKind(BucketNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketNotification{}, &BucketNotificationList{})
}
