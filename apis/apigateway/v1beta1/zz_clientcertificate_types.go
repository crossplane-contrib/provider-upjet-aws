// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientCertificateInitParameters struct {

	// Description of the client certificate.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ClientCertificateObservation struct {

	// ARN
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Date when the client certificate was created.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	// Description of the client certificate.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Date when the client certificate will expire.
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// Identifier of the client certificate.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The PEM-encoded public key of the client certificate.
	PemEncodedCertificate *string `json:"pemEncodedCertificate,omitempty" tf:"pem_encoded_certificate,omitempty"`

	// Key-value map of resource tags.
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType:granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ClientCertificateParameters struct {

	// Description of the client certificate.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType:granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ClientCertificateSpec defines the desired state of ClientCertificate
type ClientCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClientCertificateInitParameters `json:"initProvider,omitempty"`
}

// ClientCertificateStatus defines the observed state of ClientCertificate.
type ClientCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientCertificate is the Schema for the ClientCertificates API. Provides an API Gateway Client Certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ClientCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientCertificateSpec   `json:"spec"`
	Status            ClientCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientCertificateList contains a list of ClientCertificates
type ClientCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientCertificate `json:"items"`
}

// Repository type metadata.
var (
	ClientCertificate_Kind             = "ClientCertificate"
	ClientCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientCertificate_Kind}.String()
	ClientCertificate_KindAPIVersion   = ClientCertificate_Kind + "." + CRDGroupVersion.String()
	ClientCertificate_GroupVersionKind = CRDGroupVersion.WithKind(ClientCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientCertificate{}, &ClientCertificateList{})
}
