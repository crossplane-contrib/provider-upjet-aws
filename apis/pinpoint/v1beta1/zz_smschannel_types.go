// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SMSChannelInitParameters struct {

	// ID of the application.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/pinpoint/v1beta1.App
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("application_id",true)
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a App in pinpoint to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a App in pinpoint to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// Whether the channel is enabled or disabled. By default, it is set to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Identifier of the sender for your messages.
	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`

	// Short Code registered with the phone provider.
	ShortCode *string `json:"shortCode,omitempty" tf:"short_code,omitempty"`
}

type SMSChannelObservation struct {

	// ID of the application.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Whether the channel is enabled or disabled. By default, it is set to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond *float64 `json:"promotionalMessagesPerSecond,omitempty" tf:"promotional_messages_per_second,omitempty"`

	// Identifier of the sender for your messages.
	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`

	// Short Code registered with the phone provider.
	ShortCode *string `json:"shortCode,omitempty" tf:"short_code,omitempty"`

	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond *float64 `json:"transactionalMessagesPerSecond,omitempty" tf:"transactional_messages_per_second,omitempty"`
}

type SMSChannelParameters struct {

	// ID of the application.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/pinpoint/v1beta1.App
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("application_id",true)
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a App in pinpoint to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a App in pinpoint to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// Whether the channel is enabled or disabled. By default, it is set to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Identifier of the sender for your messages.
	// +kubebuilder:validation:Optional
	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`

	// Short Code registered with the phone provider.
	// +kubebuilder:validation:Optional
	ShortCode *string `json:"shortCode,omitempty" tf:"short_code,omitempty"`
}

// SMSChannelSpec defines the desired state of SMSChannel
type SMSChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SMSChannelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SMSChannelInitParameters `json:"initProvider,omitempty"`
}

// SMSChannelStatus defines the observed state of SMSChannel.
type SMSChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SMSChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SMSChannel is the Schema for the SMSChannels API. Use the
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SMSChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SMSChannelSpec   `json:"spec"`
	Status            SMSChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SMSChannelList contains a list of SMSChannels
type SMSChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SMSChannel `json:"items"`
}

// Repository type metadata.
var (
	SMSChannel_Kind             = "SMSChannel"
	SMSChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SMSChannel_Kind}.String()
	SMSChannel_KindAPIVersion   = SMSChannel_Kind + "." + CRDGroupVersion.String()
	SMSChannel_GroupVersionKind = CRDGroupVersion.WithKind(SMSChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&SMSChannel{}, &SMSChannelList{})
}
