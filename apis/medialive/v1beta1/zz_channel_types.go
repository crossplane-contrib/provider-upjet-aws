// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AacSettingsInitParameters struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	InputType *string `json:"inputType,omitempty" tf:"input_type,omitempty"`

	// AAC profile.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// The rate control mode.
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets LATM/LOAS AAC output for raw containers.
	RawFormat *string `json:"rawFormat,omitempty" tf:"raw_format,omitempty"`

	// Sample rate in Hz.
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`

	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// VBR Quality Level - Only used if rateControlMode is VBR.
	VbrQuality *string `json:"vbrQuality,omitempty" tf:"vbr_quality,omitempty"`
}

type AacSettingsObservation struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	InputType *string `json:"inputType,omitempty" tf:"input_type,omitempty"`

	// AAC profile.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// The rate control mode.
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets LATM/LOAS AAC output for raw containers.
	RawFormat *string `json:"rawFormat,omitempty" tf:"raw_format,omitempty"`

	// Sample rate in Hz.
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`

	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// VBR Quality Level - Only used if rateControlMode is VBR.
	VbrQuality *string `json:"vbrQuality,omitempty" tf:"vbr_quality,omitempty"`
}

type AacSettingsParameters struct {

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
	// +kubebuilder:validation:Optional
	InputType *string `json:"inputType,omitempty" tf:"input_type,omitempty"`

	// AAC profile.
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// The rate control mode.
	// +kubebuilder:validation:Optional
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets LATM/LOAS AAC output for raw containers.
	// +kubebuilder:validation:Optional
	RawFormat *string `json:"rawFormat,omitempty" tf:"raw_format,omitempty"`

	// Sample rate in Hz.
	// +kubebuilder:validation:Optional
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`

	// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	// +kubebuilder:validation:Optional
	Spec *string `json:"spec,omitempty" tf:"spec,omitempty"`

	// VBR Quality Level - Only used if rateControlMode is VBR.
	// +kubebuilder:validation:Optional
	VbrQuality *string `json:"vbrQuality,omitempty" tf:"vbr_quality,omitempty"`
}

type Ac3SettingsInitParameters struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode *string `json:"bitstreamMode,omitempty" tf:"bitstream_mode,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sets the dialnorm of the output.
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	DrcProfile *string `json:"drcProfile,omitempty" tf:"drc_profile,omitempty"`

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter *string `json:"lfeFilter,omitempty" tf:"lfe_filter,omitempty"`

	// Metadata control.
	MetadataControl *string `json:"metadataControl,omitempty" tf:"metadata_control,omitempty"`
}

type Ac3SettingsObservation struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode *string `json:"bitstreamMode,omitempty" tf:"bitstream_mode,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sets the dialnorm of the output.
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	DrcProfile *string `json:"drcProfile,omitempty" tf:"drc_profile,omitempty"`

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter *string `json:"lfeFilter,omitempty" tf:"lfe_filter,omitempty"`

	// Metadata control.
	MetadataControl *string `json:"metadataControl,omitempty" tf:"metadata_control,omitempty"`
}

type Ac3SettingsParameters struct {

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	// +kubebuilder:validation:Optional
	BitstreamMode *string `json:"bitstreamMode,omitempty" tf:"bitstream_mode,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sets the dialnorm of the output.
	// +kubebuilder:validation:Optional
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	// +kubebuilder:validation:Optional
	DrcProfile *string `json:"drcProfile,omitempty" tf:"drc_profile,omitempty"`

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	// +kubebuilder:validation:Optional
	LfeFilter *string `json:"lfeFilter,omitempty" tf:"lfe_filter,omitempty"`

	// Metadata control.
	// +kubebuilder:validation:Optional
	MetadataControl *string `json:"metadataControl,omitempty" tf:"metadata_control,omitempty"`
}

type AncillarySourceSettingsInitParameters struct {

	// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
	SourceAncillaryChannelNumber *float64 `json:"sourceAncillaryChannelNumber,omitempty" tf:"source_ancillary_channel_number,omitempty"`
}

type AncillarySourceSettingsObservation struct {

	// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
	SourceAncillaryChannelNumber *float64 `json:"sourceAncillaryChannelNumber,omitempty" tf:"source_ancillary_channel_number,omitempty"`
}

type AncillarySourceSettingsParameters struct {

	// Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
	// +kubebuilder:validation:Optional
	SourceAncillaryChannelNumber *float64 `json:"sourceAncillaryChannelNumber,omitempty" tf:"source_ancillary_channel_number,omitempty"`
}

type ArchiveCdnSettingsInitParameters struct {

	// Archive S3 Settings. See Archive S3 Settings for more details.
	ArchiveS3Settings []ArchiveS3SettingsInitParameters `json:"archiveS3Settings,omitempty" tf:"archive_s3_settings,omitempty"`
}

type ArchiveCdnSettingsObservation struct {

	// Archive S3 Settings. See Archive S3 Settings for more details.
	ArchiveS3Settings []ArchiveS3SettingsObservation `json:"archiveS3Settings,omitempty" tf:"archive_s3_settings,omitempty"`
}

type ArchiveCdnSettingsParameters struct {

	// Archive S3 Settings. See Archive S3 Settings for more details.
	// +kubebuilder:validation:Optional
	ArchiveS3Settings []ArchiveS3SettingsParameters `json:"archiveS3Settings,omitempty" tf:"archive_s3_settings,omitempty"`
}

type ArchiveGroupSettingsInitParameters struct {

	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	ArchiveCdnSettings []ArchiveCdnSettingsInitParameters `json:"archiveCdnSettings,omitempty" tf:"archive_cdn_settings,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []DestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Number of seconds to write to archive file before closing and starting a new one.
	RolloverInterval *float64 `json:"rolloverInterval,omitempty" tf:"rollover_interval,omitempty"`
}

type ArchiveGroupSettingsObservation struct {

	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	ArchiveCdnSettings []ArchiveCdnSettingsObservation `json:"archiveCdnSettings,omitempty" tf:"archive_cdn_settings,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []DestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// Number of seconds to write to archive file before closing and starting a new one.
	RolloverInterval *float64 `json:"rolloverInterval,omitempty" tf:"rollover_interval,omitempty"`
}

type ArchiveGroupSettingsParameters struct {

	// Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
	// +kubebuilder:validation:Optional
	ArchiveCdnSettings []ArchiveCdnSettingsParameters `json:"archiveCdnSettings,omitempty" tf:"archive_cdn_settings,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []DestinationParameters `json:"destination" tf:"destination,omitempty"`

	// Number of seconds to write to archive file before closing and starting a new one.
	// +kubebuilder:validation:Optional
	RolloverInterval *float64 `json:"rolloverInterval,omitempty" tf:"rollover_interval,omitempty"`
}

type ArchiveOutputSettingsInitParameters struct {

	// Settings specific to the container type of the file. See Container Settings for more details.
	ContainerSettings []ContainerSettingsInitParameters `json:"containerSettings,omitempty" tf:"container_settings,omitempty"`

	// Output file extension.
	Extension *string `json:"extension,omitempty" tf:"extension,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type ArchiveOutputSettingsObservation struct {

	// Settings specific to the container type of the file. See Container Settings for more details.
	ContainerSettings []ContainerSettingsObservation `json:"containerSettings,omitempty" tf:"container_settings,omitempty"`

	// Output file extension.
	Extension *string `json:"extension,omitempty" tf:"extension,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type ArchiveOutputSettingsParameters struct {

	// Settings specific to the container type of the file. See Container Settings for more details.
	// +kubebuilder:validation:Optional
	ContainerSettings []ContainerSettingsParameters `json:"containerSettings,omitempty" tf:"container_settings,omitempty"`

	// Output file extension.
	// +kubebuilder:validation:Optional
	Extension *string `json:"extension,omitempty" tf:"extension,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type ArchiveS3SettingsInitParameters struct {

	// Specify the canned ACL to apply to each S3 request.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type ArchiveS3SettingsObservation struct {

	// Specify the canned ACL to apply to each S3 request.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type ArchiveS3SettingsParameters struct {

	// Specify the canned ACL to apply to each S3 request.
	// +kubebuilder:validation:Optional
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type AribDestinationSettingsInitParameters struct {
}

type AribDestinationSettingsObservation struct {
}

type AribDestinationSettingsParameters struct {
}

type AribSourceSettingsInitParameters struct {
}

type AribSourceSettingsObservation struct {
}

type AribSourceSettingsParameters struct {
}

type AudioDescriptionsInitParameters struct {

	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	AudioNormalizationSettings []AudioNormalizationSettingsInitParameters `json:"audioNormalizationSettings,omitempty" tf:"audio_normalization_settings,omitempty"`

	// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
	AudioSelectorName *string `json:"audioSelectorName,omitempty" tf:"audio_selector_name,omitempty"`

	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	AudioType *string `json:"audioType,omitempty" tf:"audio_type,omitempty"`

	// Determined how audio type is determined.
	AudioTypeControl *string `json:"audioTypeControl,omitempty" tf:"audio_type_control,omitempty"`

	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	AudioWatermarkSettings []AudioWatermarkSettingsInitParameters `json:"audioWatermarkSettings,omitempty" tf:"audio_watermark_settings,omitempty"`

	// Audio codec settings. See Audio Codec Settings for more details.
	CodecSettings []CodecSettingsInitParameters `json:"codecSettings,omitempty" tf:"codec_settings,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	LanguageCodeControl *string `json:"languageCodeControl,omitempty" tf:"language_code_control,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	RemixSettings []RemixSettingsInitParameters `json:"remixSettings,omitempty" tf:"remix_settings,omitempty"`

	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type AudioDescriptionsObservation struct {

	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	AudioNormalizationSettings []AudioNormalizationSettingsObservation `json:"audioNormalizationSettings,omitempty" tf:"audio_normalization_settings,omitempty"`

	// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
	AudioSelectorName *string `json:"audioSelectorName,omitempty" tf:"audio_selector_name,omitempty"`

	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	AudioType *string `json:"audioType,omitempty" tf:"audio_type,omitempty"`

	// Determined how audio type is determined.
	AudioTypeControl *string `json:"audioTypeControl,omitempty" tf:"audio_type_control,omitempty"`

	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	AudioWatermarkSettings []AudioWatermarkSettingsObservation `json:"audioWatermarkSettings,omitempty" tf:"audio_watermark_settings,omitempty"`

	// Audio codec settings. See Audio Codec Settings for more details.
	CodecSettings []CodecSettingsObservation `json:"codecSettings,omitempty" tf:"codec_settings,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	LanguageCodeControl *string `json:"languageCodeControl,omitempty" tf:"language_code_control,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	RemixSettings []RemixSettingsObservation `json:"remixSettings,omitempty" tf:"remix_settings,omitempty"`

	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type AudioDescriptionsParameters struct {

	// Advanced audio normalization settings. See Audio Normalization Settings for more details.
	// +kubebuilder:validation:Optional
	AudioNormalizationSettings []AudioNormalizationSettingsParameters `json:"audioNormalizationSettings,omitempty" tf:"audio_normalization_settings,omitempty"`

	// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
	// +kubebuilder:validation:Optional
	AudioSelectorName *string `json:"audioSelectorName" tf:"audio_selector_name,omitempty"`

	// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
	// +kubebuilder:validation:Optional
	AudioType *string `json:"audioType,omitempty" tf:"audio_type,omitempty"`

	// Determined how audio type is determined.
	// +kubebuilder:validation:Optional
	AudioTypeControl *string `json:"audioTypeControl,omitempty" tf:"audio_type_control,omitempty"`

	// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
	// +kubebuilder:validation:Optional
	AudioWatermarkSettings []AudioWatermarkSettingsParameters `json:"audioWatermarkSettings,omitempty" tf:"audio_watermark_settings,omitempty"`

	// Audio codec settings. See Audio Codec Settings for more details.
	// +kubebuilder:validation:Optional
	CodecSettings []CodecSettingsParameters `json:"codecSettings,omitempty" tf:"codec_settings,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// +kubebuilder:validation:Optional
	LanguageCodeControl *string `json:"languageCodeControl,omitempty" tf:"language_code_control,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	RemixSettings []RemixSettingsParameters `json:"remixSettings,omitempty" tf:"remix_settings,omitempty"`

	// Stream name RTMP destinations (URLs of type rtmp://)
	// +kubebuilder:validation:Optional
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`
}

type AudioHlsRenditionSelectionInitParameters struct {

	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AudioHlsRenditionSelectionObservation struct {

	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AudioHlsRenditionSelectionParameters struct {

	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type AudioLanguageSelectionInitParameters struct {

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
	LanguageSelectionPolicy *string `json:"languageSelectionPolicy,omitempty" tf:"language_selection_policy,omitempty"`
}

type AudioLanguageSelectionObservation struct {

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
	LanguageSelectionPolicy *string `json:"languageSelectionPolicy,omitempty" tf:"language_selection_policy,omitempty"`
}

type AudioLanguageSelectionParameters struct {

	// Selects a specific three-letter language code from within an audio source.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode" tf:"language_code,omitempty"`

	// When set to “strict”, the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If “loose”, then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can’t find one with the same language.
	// +kubebuilder:validation:Optional
	LanguageSelectionPolicy *string `json:"languageSelectionPolicy,omitempty" tf:"language_selection_policy,omitempty"`
}

type AudioNormalizationSettingsInitParameters struct {

	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Algorithm control for the audio description.
	AlgorithmControl *string `json:"algorithmControl,omitempty" tf:"algorithm_control,omitempty"`

	// Target LKFS (loudness) to adjust volume to.
	TargetLkfs *float64 `json:"targetLkfs,omitempty" tf:"target_lkfs,omitempty"`
}

type AudioNormalizationSettingsObservation struct {

	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Algorithm control for the audio description.
	AlgorithmControl *string `json:"algorithmControl,omitempty" tf:"algorithm_control,omitempty"`

	// Target LKFS (loudness) to adjust volume to.
	TargetLkfs *float64 `json:"targetLkfs,omitempty" tf:"target_lkfs,omitempty"`
}

type AudioNormalizationSettingsParameters struct {

	// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Algorithm control for the audio description.
	// +kubebuilder:validation:Optional
	AlgorithmControl *string `json:"algorithmControl,omitempty" tf:"algorithm_control,omitempty"`

	// Target LKFS (loudness) to adjust volume to.
	// +kubebuilder:validation:Optional
	TargetLkfs *float64 `json:"targetLkfs,omitempty" tf:"target_lkfs,omitempty"`
}

type AudioOnlyHlsSettingsInitParameters struct {

	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	AudioGroupID *string `json:"audioGroupId,omitempty" tf:"audio_group_id,omitempty"`

	AudioOnlyImage []AudioOnlyImageInitParameters `json:"audioOnlyImage,omitempty" tf:"audio_only_image,omitempty"`

	AudioTrackType *string `json:"audioTrackType,omitempty" tf:"audio_track_type,omitempty"`

	SegmentType *string `json:"segmentType,omitempty" tf:"segment_type,omitempty"`
}

type AudioOnlyHlsSettingsObservation struct {

	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	AudioGroupID *string `json:"audioGroupId,omitempty" tf:"audio_group_id,omitempty"`

	AudioOnlyImage []AudioOnlyImageObservation `json:"audioOnlyImage,omitempty" tf:"audio_only_image,omitempty"`

	AudioTrackType *string `json:"audioTrackType,omitempty" tf:"audio_track_type,omitempty"`

	SegmentType *string `json:"segmentType,omitempty" tf:"segment_type,omitempty"`
}

type AudioOnlyHlsSettingsParameters struct {

	// Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
	// +kubebuilder:validation:Optional
	AudioGroupID *string `json:"audioGroupId,omitempty" tf:"audio_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	AudioOnlyImage []AudioOnlyImageParameters `json:"audioOnlyImage,omitempty" tf:"audio_only_image,omitempty"`

	// +kubebuilder:validation:Optional
	AudioTrackType *string `json:"audioTrackType,omitempty" tf:"audio_track_type,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentType *string `json:"segmentType,omitempty" tf:"segment_type,omitempty"`
}

type AudioOnlyImageInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AudioOnlyImageObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AudioOnlyImageParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AudioPidSelectionInitParameters struct {

	// Selects a specific PID from within a source.
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type AudioPidSelectionObservation struct {

	// Selects a specific PID from within a source.
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type AudioPidSelectionParameters struct {

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	Pid *float64 `json:"pid" tf:"pid,omitempty"`
}

type AudioSelectorInitParameters struct {

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings []SelectorSettingsInitParameters `json:"selectorSettings,omitempty" tf:"selector_settings,omitempty"`
}

type AudioSelectorObservation struct {

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings []SelectorSettingsObservation `json:"selectorSettings,omitempty" tf:"selector_settings,omitempty"`
}

type AudioSelectorParameters struct {

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The audio selector settings. See Audio Selector Settings for more details.
	// +kubebuilder:validation:Optional
	SelectorSettings []SelectorSettingsParameters `json:"selectorSettings,omitempty" tf:"selector_settings,omitempty"`
}

type AudioSilenceSettingsInitParameters struct {

	// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
	AudioSelectorName *string `json:"audioSelectorName,omitempty" tf:"audio_selector_name,omitempty"`

	// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
	AudioSilenceThresholdMsec *float64 `json:"audioSilenceThresholdMsec,omitempty" tf:"audio_silence_threshold_msec,omitempty"`
}

type AudioSilenceSettingsObservation struct {

	// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
	AudioSelectorName *string `json:"audioSelectorName,omitempty" tf:"audio_selector_name,omitempty"`

	// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
	AudioSilenceThresholdMsec *float64 `json:"audioSilenceThresholdMsec,omitempty" tf:"audio_silence_threshold_msec,omitempty"`
}

type AudioSilenceSettingsParameters struct {

	// The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
	// +kubebuilder:validation:Optional
	AudioSelectorName *string `json:"audioSelectorName" tf:"audio_selector_name,omitempty"`

	// The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
	// +kubebuilder:validation:Optional
	AudioSilenceThresholdMsec *float64 `json:"audioSilenceThresholdMsec,omitempty" tf:"audio_silence_threshold_msec,omitempty"`
}

type AudioTrackSelectionInitParameters struct {

	// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
	DolbyEDecode []DolbyEDecodeInitParameters `json:"dolbyEDecode,omitempty" tf:"dolby_e_decode,omitempty"`

	// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
	Tracks []TracksInitParameters `json:"tracks,omitempty" tf:"tracks,omitempty"`
}

type AudioTrackSelectionObservation struct {

	// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
	DolbyEDecode []DolbyEDecodeObservation `json:"dolbyEDecode,omitempty" tf:"dolby_e_decode,omitempty"`

	// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
	Tracks []TracksObservation `json:"tracks,omitempty" tf:"tracks,omitempty"`
}

type AudioTrackSelectionParameters struct {

	// Configure decoding options for Dolby E streams - these should be Dolby E frames carried in PCM streams tagged with SMPTE-337. See Dolby E Decode for more details.
	// +kubebuilder:validation:Optional
	DolbyEDecode []DolbyEDecodeParameters `json:"dolbyEDecode,omitempty" tf:"dolby_e_decode,omitempty"`

	// Selects one or more unique audio tracks from within a source. See Audio Tracks for more details.
	// +kubebuilder:validation:Optional
	Tracks []TracksParameters `json:"tracks" tf:"tracks,omitempty"`
}

type AudioWatermarkSettingsInitParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	NielsenWatermarksSettings []NielsenWatermarksSettingsInitParameters `json:"nielsenWatermarksSettings,omitempty" tf:"nielsen_watermarks_settings,omitempty"`
}

type AudioWatermarkSettingsObservation struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	NielsenWatermarksSettings []NielsenWatermarksSettingsObservation `json:"nielsenWatermarksSettings,omitempty" tf:"nielsen_watermarks_settings,omitempty"`
}

type AudioWatermarkSettingsParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	NielsenWatermarksSettings []NielsenWatermarksSettingsParameters `json:"nielsenWatermarksSettings,omitempty" tf:"nielsen_watermarks_settings,omitempty"`
}

type AutomaticInputFailoverSettingsInitParameters struct {

	// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
	ErrorClearTimeMsec *float64 `json:"errorClearTimeMsec,omitempty" tf:"error_clear_time_msec,omitempty"`

	// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input. See Failover Condition Block for more details.
	FailoverCondition []FailoverConditionInitParameters `json:"failoverCondition,omitempty" tf:"failover_condition,omitempty"`

	// Input preference when deciding which input to make active when a previously failed input has recovered.
	InputPreference *string `json:"inputPreference,omitempty" tf:"input_preference,omitempty"`

	// The input ID of the secondary input in the automatic input failover pair.
	SecondaryInputID *string `json:"secondaryInputId,omitempty" tf:"secondary_input_id,omitempty"`
}

type AutomaticInputFailoverSettingsObservation struct {

	// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
	ErrorClearTimeMsec *float64 `json:"errorClearTimeMsec,omitempty" tf:"error_clear_time_msec,omitempty"`

	// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input. See Failover Condition Block for more details.
	FailoverCondition []FailoverConditionObservation `json:"failoverCondition,omitempty" tf:"failover_condition,omitempty"`

	// Input preference when deciding which input to make active when a previously failed input has recovered.
	InputPreference *string `json:"inputPreference,omitempty" tf:"input_preference,omitempty"`

	// The input ID of the secondary input in the automatic input failover pair.
	SecondaryInputID *string `json:"secondaryInputId,omitempty" tf:"secondary_input_id,omitempty"`
}

type AutomaticInputFailoverSettingsParameters struct {

	// This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
	// +kubebuilder:validation:Optional
	ErrorClearTimeMsec *float64 `json:"errorClearTimeMsec,omitempty" tf:"error_clear_time_msec,omitempty"`

	// A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input. See Failover Condition Block for more details.
	// +kubebuilder:validation:Optional
	FailoverCondition []FailoverConditionParameters `json:"failoverCondition,omitempty" tf:"failover_condition,omitempty"`

	// Input preference when deciding which input to make active when a previously failed input has recovered.
	// +kubebuilder:validation:Optional
	InputPreference *string `json:"inputPreference,omitempty" tf:"input_preference,omitempty"`

	// The input ID of the secondary input in the automatic input failover pair.
	// +kubebuilder:validation:Optional
	SecondaryInputID *string `json:"secondaryInputId" tf:"secondary_input_id,omitempty"`
}

type AvailBlankingImageInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AvailBlankingImageObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AvailBlankingImageParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AvailBlankingInitParameters struct {

	// Blanking image to be used. See Avail Blanking Image for more details.
	AvailBlankingImage []AvailBlankingImageInitParameters `json:"availBlankingImage,omitempty" tf:"avail_blanking_image,omitempty"`

	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type AvailBlankingObservation struct {

	// Blanking image to be used. See Avail Blanking Image for more details.
	AvailBlankingImage []AvailBlankingImageObservation `json:"availBlankingImage,omitempty" tf:"avail_blanking_image,omitempty"`

	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type AvailBlankingParameters struct {

	// Blanking image to be used. See Avail Blanking Image for more details.
	// +kubebuilder:validation:Optional
	AvailBlankingImage []AvailBlankingImageParameters `json:"availBlankingImage,omitempty" tf:"avail_blanking_image,omitempty"`

	// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BurnInDestinationSettingsInitParameters struct {

	// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	Alignment *string `json:"alignment,omitempty" tf:"alignment,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundOpacity *float64 `json:"backgroundOpacity,omitempty" tf:"background_opacity,omitempty"`

	// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font []FontInitParameters `json:"font,omitempty" tf:"font,omitempty"`

	// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity *float64 `json:"fontOpacity,omitempty" tf:"font_opacity,omitempty"`

	// in and DVB-Sub font settings must match.
	FontResolution *float64 `json:"fontResolution,omitempty" tf:"font_resolution,omitempty"`

	// in and DVB-Sub font settings must match.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor *string `json:"outlineColor,omitempty" tf:"outline_color,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize *float64 `json:"outlineSize,omitempty" tf:"outline_size,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowColor *string `json:"shadowColor,omitempty" tf:"shadow_color,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowOpacity *float64 `json:"shadowOpacity,omitempty" tf:"shadow_opacity,omitempty"`

	// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset *float64 `json:"shadowXOffset,omitempty" tf:"shadow_x_offset,omitempty"`

	// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset *float64 `json:"shadowYOffset,omitempty" tf:"shadow_y_offset,omitempty"`

	// Sub/Burn-in outputs.
	TeletextGridControl *string `json:"teletextGridControl,omitempty" tf:"teletext_grid_control,omitempty"`

	// in and DVB-Sub font settings must match.
	XPosition *float64 `json:"xPosition,omitempty" tf:"x_position,omitempty"`

	// in and DVB-Sub font settings must match.
	YPosition *float64 `json:"yPosition,omitempty" tf:"y_position,omitempty"`
}

type BurnInDestinationSettingsObservation struct {

	// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	Alignment *string `json:"alignment,omitempty" tf:"alignment,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundOpacity *float64 `json:"backgroundOpacity,omitempty" tf:"background_opacity,omitempty"`

	// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font []FontObservation `json:"font,omitempty" tf:"font,omitempty"`

	// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity *float64 `json:"fontOpacity,omitempty" tf:"font_opacity,omitempty"`

	// in and DVB-Sub font settings must match.
	FontResolution *float64 `json:"fontResolution,omitempty" tf:"font_resolution,omitempty"`

	// in and DVB-Sub font settings must match.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor *string `json:"outlineColor,omitempty" tf:"outline_color,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize *float64 `json:"outlineSize,omitempty" tf:"outline_size,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowColor *string `json:"shadowColor,omitempty" tf:"shadow_color,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowOpacity *float64 `json:"shadowOpacity,omitempty" tf:"shadow_opacity,omitempty"`

	// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset *float64 `json:"shadowXOffset,omitempty" tf:"shadow_x_offset,omitempty"`

	// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset *float64 `json:"shadowYOffset,omitempty" tf:"shadow_y_offset,omitempty"`

	// Sub/Burn-in outputs.
	TeletextGridControl *string `json:"teletextGridControl,omitempty" tf:"teletext_grid_control,omitempty"`

	// in and DVB-Sub font settings must match.
	XPosition *float64 `json:"xPosition,omitempty" tf:"x_position,omitempty"`

	// in and DVB-Sub font settings must match.
	YPosition *float64 `json:"yPosition,omitempty" tf:"y_position,omitempty"`
}

type BurnInDestinationSettingsParameters struct {

	// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	Alignment *string `json:"alignment,omitempty" tf:"alignment,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	BackgroundOpacity *float64 `json:"backgroundOpacity,omitempty" tf:"background_opacity,omitempty"`

	// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	// +kubebuilder:validation:Optional
	Font []FontParameters `json:"font,omitempty" tf:"font,omitempty"`

	// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontOpacity *float64 `json:"fontOpacity,omitempty" tf:"font_opacity,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontResolution *float64 `json:"fontResolution,omitempty" tf:"font_resolution,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	OutlineColor *string `json:"outlineColor" tf:"outline_color,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	OutlineSize *float64 `json:"outlineSize,omitempty" tf:"outline_size,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowColor *string `json:"shadowColor,omitempty" tf:"shadow_color,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowOpacity *float64 `json:"shadowOpacity,omitempty" tf:"shadow_opacity,omitempty"`

	// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowXOffset *float64 `json:"shadowXOffset,omitempty" tf:"shadow_x_offset,omitempty"`

	// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowYOffset *float64 `json:"shadowYOffset,omitempty" tf:"shadow_y_offset,omitempty"`

	// Sub/Burn-in outputs.
	// +kubebuilder:validation:Optional
	TeletextGridControl *string `json:"teletextGridControl" tf:"teletext_grid_control,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	XPosition *float64 `json:"xPosition,omitempty" tf:"x_position,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	YPosition *float64 `json:"yPosition,omitempty" tf:"y_position,omitempty"`
}

type CaptionDescriptionsInitParameters struct {

	// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
	Accessibility *string `json:"accessibility,omitempty" tf:"accessibility,omitempty"`

	// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
	CaptionSelectorName *string `json:"captionSelectorName,omitempty" tf:"caption_selector_name,omitempty"`

	// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
	DestinationSettings []DestinationSettingsInitParameters `json:"destinationSettings,omitempty" tf:"destination_settings,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription *string `json:"languageDescription,omitempty" tf:"language_description,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CaptionDescriptionsObservation struct {

	// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
	Accessibility *string `json:"accessibility,omitempty" tf:"accessibility,omitempty"`

	// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
	CaptionSelectorName *string `json:"captionSelectorName,omitempty" tf:"caption_selector_name,omitempty"`

	// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
	DestinationSettings []DestinationSettingsObservation `json:"destinationSettings,omitempty" tf:"destination_settings,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription *string `json:"languageDescription,omitempty" tf:"language_description,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CaptionDescriptionsParameters struct {

	// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds.
	// +kubebuilder:validation:Optional
	Accessibility *string `json:"accessibility,omitempty" tf:"accessibility,omitempty"`

	// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
	// +kubebuilder:validation:Optional
	CaptionSelectorName *string `json:"captionSelectorName" tf:"caption_selector_name,omitempty"`

	// Additional settings for captions destination that depend on the destination type. See Destination Settings for more details.
	// +kubebuilder:validation:Optional
	DestinationSettings []DestinationSettingsParameters `json:"destinationSettings,omitempty" tf:"destination_settings,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	// +kubebuilder:validation:Optional
	LanguageDescription *string `json:"languageDescription,omitempty" tf:"language_description,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type CaptionLanguageMappingsInitParameters struct {
	CaptionChannel *float64 `json:"captionChannel,omitempty" tf:"caption_channel,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription *string `json:"languageDescription,omitempty" tf:"language_description,omitempty"`
}

type CaptionLanguageMappingsObservation struct {
	CaptionChannel *float64 `json:"captionChannel,omitempty" tf:"caption_channel,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	LanguageDescription *string `json:"languageDescription,omitempty" tf:"language_description,omitempty"`
}

type CaptionLanguageMappingsParameters struct {

	// +kubebuilder:validation:Optional
	CaptionChannel *float64 `json:"captionChannel" tf:"caption_channel,omitempty"`

	// Selects a specific three-letter language code from within an audio source.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode" tf:"language_code,omitempty"`

	// Human readable information to indicate captions available for players (eg. English, or Spanish).
	// +kubebuilder:validation:Optional
	LanguageDescription *string `json:"languageDescription" tf:"language_description,omitempty"`
}

type CaptionSelectorInitParameters struct {

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings []CaptionSelectorSelectorSettingsInitParameters `json:"selectorSettings,omitempty" tf:"selector_settings,omitempty"`
}

type CaptionSelectorObservation struct {

	// Selects a specific three-letter language code from within an audio source.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The audio selector settings. See Audio Selector Settings for more details.
	SelectorSettings []CaptionSelectorSelectorSettingsObservation `json:"selectorSettings,omitempty" tf:"selector_settings,omitempty"`
}

type CaptionSelectorParameters struct {

	// Selects a specific three-letter language code from within an audio source.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The audio selector settings. See Audio Selector Settings for more details.
	// +kubebuilder:validation:Optional
	SelectorSettings []CaptionSelectorSelectorSettingsParameters `json:"selectorSettings,omitempty" tf:"selector_settings,omitempty"`
}

type CaptionSelectorSelectorSettingsInitParameters struct {

	// Ancillary Source Settings. See Ancillary Source Settings for more details.
	AncillarySourceSettings []AncillarySourceSettingsInitParameters `json:"ancillarySourceSettings,omitempty" tf:"ancillary_source_settings,omitempty"`

	// ARIB Source Settings.
	AribSourceSettings []AribSourceSettingsInitParameters `json:"aribSourceSettings,omitempty" tf:"arib_source_settings,omitempty"`

	// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
	DvbSubSourceSettings []DvbSubSourceSettingsInitParameters `json:"dvbSubSourceSettings,omitempty" tf:"dvb_sub_source_settings,omitempty"`

	// Embedded Source Settings. See Embedded Source Settings for more details.
	EmbeddedSourceSettings []EmbeddedSourceSettingsInitParameters `json:"embeddedSourceSettings,omitempty" tf:"embedded_source_settings,omitempty"`

	// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
	Scte20SourceSettings []Scte20SourceSettingsInitParameters `json:"scte20SourceSettings,omitempty" tf:"scte20_source_settings,omitempty"`

	// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
	Scte27SourceSettings []Scte27SourceSettingsInitParameters `json:"scte27SourceSettings,omitempty" tf:"scte27_source_settings,omitempty"`

	// Teletext Source Settings. See Teletext Source Settings for more details.
	TeletextSourceSettings []TeletextSourceSettingsInitParameters `json:"teletextSourceSettings,omitempty" tf:"teletext_source_settings,omitempty"`
}

type CaptionSelectorSelectorSettingsObservation struct {

	// Ancillary Source Settings. See Ancillary Source Settings for more details.
	AncillarySourceSettings []AncillarySourceSettingsObservation `json:"ancillarySourceSettings,omitempty" tf:"ancillary_source_settings,omitempty"`

	// ARIB Source Settings.
	AribSourceSettings []AribSourceSettingsParameters `json:"aribSourceSettings,omitempty" tf:"arib_source_settings,omitempty"`

	// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
	DvbSubSourceSettings []DvbSubSourceSettingsObservation `json:"dvbSubSourceSettings,omitempty" tf:"dvb_sub_source_settings,omitempty"`

	// Embedded Source Settings. See Embedded Source Settings for more details.
	EmbeddedSourceSettings []EmbeddedSourceSettingsObservation `json:"embeddedSourceSettings,omitempty" tf:"embedded_source_settings,omitempty"`

	// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
	Scte20SourceSettings []Scte20SourceSettingsObservation `json:"scte20SourceSettings,omitempty" tf:"scte20_source_settings,omitempty"`

	// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
	Scte27SourceSettings []Scte27SourceSettingsObservation `json:"scte27SourceSettings,omitempty" tf:"scte27_source_settings,omitempty"`

	// Teletext Source Settings. See Teletext Source Settings for more details.
	TeletextSourceSettings []TeletextSourceSettingsObservation `json:"teletextSourceSettings,omitempty" tf:"teletext_source_settings,omitempty"`
}

type CaptionSelectorSelectorSettingsParameters struct {

	// Ancillary Source Settings. See Ancillary Source Settings for more details.
	// +kubebuilder:validation:Optional
	AncillarySourceSettings []AncillarySourceSettingsParameters `json:"ancillarySourceSettings,omitempty" tf:"ancillary_source_settings,omitempty"`

	// ARIB Source Settings.
	// +kubebuilder:validation:Optional
	AribSourceSettings []AribSourceSettingsParameters `json:"aribSourceSettings,omitempty" tf:"arib_source_settings,omitempty"`

	// DVB Sub Source Settings. See DVB Sub Source Settings for more details.
	// +kubebuilder:validation:Optional
	DvbSubSourceSettings []DvbSubSourceSettingsParameters `json:"dvbSubSourceSettings,omitempty" tf:"dvb_sub_source_settings,omitempty"`

	// Embedded Source Settings. See Embedded Source Settings for more details.
	// +kubebuilder:validation:Optional
	EmbeddedSourceSettings []EmbeddedSourceSettingsParameters `json:"embeddedSourceSettings,omitempty" tf:"embedded_source_settings,omitempty"`

	// SCTE20 Source Settings. See SCTE 20 Source Settings for more details.
	// +kubebuilder:validation:Optional
	Scte20SourceSettings []Scte20SourceSettingsParameters `json:"scte20SourceSettings,omitempty" tf:"scte20_source_settings,omitempty"`

	// SCTE27 Source Settings. See SCTE 27 Source Settings for more details.
	// +kubebuilder:validation:Optional
	Scte27SourceSettings []Scte27SourceSettingsParameters `json:"scte27SourceSettings,omitempty" tf:"scte27_source_settings,omitempty"`

	// Teletext Source Settings. See Teletext Source Settings for more details.
	// +kubebuilder:validation:Optional
	TeletextSourceSettings []TeletextSourceSettingsParameters `json:"teletextSourceSettings,omitempty" tf:"teletext_source_settings,omitempty"`
}

type CdiInputSpecificationInitParameters struct {

	// - Maximum CDI input resolution.
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`
}

type CdiInputSpecificationObservation struct {

	// - Maximum CDI input resolution.
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`
}

type CdiInputSpecificationParameters struct {

	// - Maximum CDI input resolution.
	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution" tf:"resolution,omitempty"`
}

type ChannelInitParameters struct {

	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification []CdiInputSpecificationInitParameters `json:"cdiInputSpecification,omitempty" tf:"cdi_input_specification,omitempty"`

	// Concise argument description.
	ChannelClass *string `json:"channelClass,omitempty" tf:"channel_class,omitempty"`

	// Destinations for channel. See Destinations for more details.
	Destinations []DestinationsInitParameters `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings []EncoderSettingsInitParameters `json:"encoderSettings,omitempty" tf:"encoder_settings,omitempty"`

	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments []InputAttachmentsInitParameters `json:"inputAttachments,omitempty" tf:"input_attachments,omitempty"`

	// Specification of network and file inputs for the channel.
	InputSpecification []InputSpecificationInitParameters `json:"inputSpecification,omitempty" tf:"input_specification,omitempty"`

	// The log level to write to Cloudwatch logs.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance []MaintenanceInitParameters `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Concise argument description.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Whether to start/stop channel. Default: false
	StartChannel *bool `json:"startChannel,omitempty" tf:"start_channel,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Settings for the VPC outputs. See VPC for more details.
	VPC []VPCInitParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type ChannelMappingsInitParameters struct {
	InputChannelLevels []InputChannelLevelsInitParameters `json:"inputChannelLevels,omitempty" tf:"input_channel_levels,omitempty"`

	OutputChannel *float64 `json:"outputChannel,omitempty" tf:"output_channel,omitempty"`
}

type ChannelMappingsObservation struct {
	InputChannelLevels []InputChannelLevelsObservation `json:"inputChannelLevels,omitempty" tf:"input_channel_levels,omitempty"`

	OutputChannel *float64 `json:"outputChannel,omitempty" tf:"output_channel,omitempty"`
}

type ChannelMappingsParameters struct {

	// +kubebuilder:validation:Optional
	InputChannelLevels []InputChannelLevelsParameters `json:"inputChannelLevels" tf:"input_channel_levels,omitempty"`

	// +kubebuilder:validation:Optional
	OutputChannel *float64 `json:"outputChannel" tf:"output_channel,omitempty"`
}

type ChannelObservation struct {

	// ARN of the Channel.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification []CdiInputSpecificationObservation `json:"cdiInputSpecification,omitempty" tf:"cdi_input_specification,omitempty"`

	// Concise argument description.
	ChannelClass *string `json:"channelClass,omitempty" tf:"channel_class,omitempty"`

	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// Destinations for channel. See Destinations for more details.
	Destinations []DestinationsObservation `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings []EncoderSettingsObservation `json:"encoderSettings,omitempty" tf:"encoder_settings,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments []InputAttachmentsObservation `json:"inputAttachments,omitempty" tf:"input_attachments,omitempty"`

	// Specification of network and file inputs for the channel.
	InputSpecification []InputSpecificationObservation `json:"inputSpecification,omitempty" tf:"input_specification,omitempty"`

	// The log level to write to Cloudwatch logs.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance []MaintenanceObservation `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Concise argument description.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Whether to start/stop channel. Default: false
	StartChannel *bool `json:"startChannel,omitempty" tf:"start_channel,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Settings for the VPC outputs. See VPC for more details.
	VPC []VPCObservation `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type ChannelParameters struct {

	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	// +kubebuilder:validation:Optional
	CdiInputSpecification []CdiInputSpecificationParameters `json:"cdiInputSpecification,omitempty" tf:"cdi_input_specification,omitempty"`

	// Concise argument description.
	// +kubebuilder:validation:Optional
	ChannelClass *string `json:"channelClass,omitempty" tf:"channel_class,omitempty"`

	// Destinations for channel. See Destinations for more details.
	// +kubebuilder:validation:Optional
	Destinations []DestinationsParameters `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// Encoder settings. See Encoder Settings for more details.
	// +kubebuilder:validation:Optional
	EncoderSettings []EncoderSettingsParameters `json:"encoderSettings,omitempty" tf:"encoder_settings,omitempty"`

	// Input attachments for the channel. See Input Attachments for more details.
	// +kubebuilder:validation:Optional
	InputAttachments []InputAttachmentsParameters `json:"inputAttachments,omitempty" tf:"input_attachments,omitempty"`

	// Specification of network and file inputs for the channel.
	// +kubebuilder:validation:Optional
	InputSpecification []InputSpecificationParameters `json:"inputSpecification,omitempty" tf:"input_specification,omitempty"`

	// The log level to write to Cloudwatch logs.
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Maintenance settings for this channel. See Maintenance for more details.
	// +kubebuilder:validation:Optional
	Maintenance []MaintenanceParameters `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Concise argument description.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Whether to start/stop channel. Default: false
	// +kubebuilder:validation:Optional
	StartChannel *bool `json:"startChannel,omitempty" tf:"start_channel,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Settings for the VPC outputs. See VPC for more details.
	// +kubebuilder:validation:Optional
	VPC []VPCParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type CodecSettingsInitParameters struct {

	// Aac Settings. See AAC Settings for more details.
	AacSettings []AacSettingsInitParameters `json:"aacSettings,omitempty" tf:"aac_settings,omitempty"`

	// Ac3 Settings. See AC3 Settings for more details.
	Ac3Settings []Ac3SettingsInitParameters `json:"ac3Settings,omitempty" tf:"ac3_settings,omitempty"`

	// - Eac3 Atmos Settings. See EAC3 Atmos Settings
	Eac3AtmosSettings []Eac3AtmosSettingsInitParameters `json:"eac3AtmosSettings,omitempty" tf:"eac3_atmos_settings,omitempty"`

	// - Eac3 Settings. See EAC3 Settings
	Eac3Settings []Eac3SettingsInitParameters `json:"eac3Settings,omitempty" tf:"eac3_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Mp2Settings []Mp2SettingsInitParameters `json:"mp2Settings,omitempty" tf:"mp2_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	PassThroughSettings []PassThroughSettingsInitParameters `json:"passThroughSettings,omitempty" tf:"pass_through_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	WavSettings []WavSettingsInitParameters `json:"wavSettings,omitempty" tf:"wav_settings,omitempty"`
}

type CodecSettingsObservation struct {

	// Aac Settings. See AAC Settings for more details.
	AacSettings []AacSettingsObservation `json:"aacSettings,omitempty" tf:"aac_settings,omitempty"`

	// Ac3 Settings. See AC3 Settings for more details.
	Ac3Settings []Ac3SettingsObservation `json:"ac3Settings,omitempty" tf:"ac3_settings,omitempty"`

	// - Eac3 Atmos Settings. See EAC3 Atmos Settings
	Eac3AtmosSettings []Eac3AtmosSettingsObservation `json:"eac3AtmosSettings,omitempty" tf:"eac3_atmos_settings,omitempty"`

	// - Eac3 Settings. See EAC3 Settings
	Eac3Settings []Eac3SettingsObservation `json:"eac3Settings,omitempty" tf:"eac3_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Mp2Settings []Mp2SettingsObservation `json:"mp2Settings,omitempty" tf:"mp2_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	PassThroughSettings []PassThroughSettingsParameters `json:"passThroughSettings,omitempty" tf:"pass_through_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	WavSettings []WavSettingsObservation `json:"wavSettings,omitempty" tf:"wav_settings,omitempty"`
}

type CodecSettingsParameters struct {

	// Aac Settings. See AAC Settings for more details.
	// +kubebuilder:validation:Optional
	AacSettings []AacSettingsParameters `json:"aacSettings,omitempty" tf:"aac_settings,omitempty"`

	// Ac3 Settings. See AC3 Settings for more details.
	// +kubebuilder:validation:Optional
	Ac3Settings []Ac3SettingsParameters `json:"ac3Settings,omitempty" tf:"ac3_settings,omitempty"`

	// - Eac3 Atmos Settings. See EAC3 Atmos Settings
	// +kubebuilder:validation:Optional
	Eac3AtmosSettings []Eac3AtmosSettingsParameters `json:"eac3AtmosSettings,omitempty" tf:"eac3_atmos_settings,omitempty"`

	// - Eac3 Settings. See EAC3 Settings
	// +kubebuilder:validation:Optional
	Eac3Settings []Eac3SettingsParameters `json:"eac3Settings,omitempty" tf:"eac3_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	Mp2Settings []Mp2SettingsParameters `json:"mp2Settings,omitempty" tf:"mp2_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	PassThroughSettings []PassThroughSettingsParameters `json:"passThroughSettings,omitempty" tf:"pass_through_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	WavSettings []WavSettingsParameters `json:"wavSettings,omitempty" tf:"wav_settings,omitempty"`
}

type ColorSpacePassthroughSettingsInitParameters struct {
}

type ColorSpacePassthroughSettingsObservation struct {
}

type ColorSpacePassthroughSettingsParameters struct {
}

type ColorSpaceSettingsInitParameters struct {

	// Sets the colorspace metadata to be passed through.
	ColorSpacePassthroughSettings []ColorSpacePassthroughSettingsInitParameters `json:"colorSpacePassthroughSettings,omitempty" tf:"color_space_passthrough_settings,omitempty"`

	// Set the colorspace to Dolby Vision81.
	DolbyVision81Settings []DolbyVision81SettingsInitParameters `json:"dolbyVision81Settings,omitempty" tf:"dolby_vision81_settings,omitempty"`

	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	Hdr10Settings []Hdr10SettingsInitParameters `json:"hdr10Settings,omitempty" tf:"hdr10_settings,omitempty"`

	// Set the colorspace to Rec. 601.
	Rec601Settings []Rec601SettingsInitParameters `json:"rec601Settings,omitempty" tf:"rec601_settings,omitempty"`

	// Set the colorspace to Rec. 709.
	Rec709Settings []Rec709SettingsInitParameters `json:"rec709Settings,omitempty" tf:"rec709_settings,omitempty"`
}

type ColorSpaceSettingsObservation struct {

	// Sets the colorspace metadata to be passed through.
	ColorSpacePassthroughSettings []ColorSpacePassthroughSettingsParameters `json:"colorSpacePassthroughSettings,omitempty" tf:"color_space_passthrough_settings,omitempty"`

	// Set the colorspace to Dolby Vision81.
	DolbyVision81Settings []DolbyVision81SettingsParameters `json:"dolbyVision81Settings,omitempty" tf:"dolby_vision81_settings,omitempty"`

	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	Hdr10Settings []Hdr10SettingsObservation `json:"hdr10Settings,omitempty" tf:"hdr10_settings,omitempty"`

	// Set the colorspace to Rec. 601.
	Rec601Settings []Rec601SettingsParameters `json:"rec601Settings,omitempty" tf:"rec601_settings,omitempty"`

	// Set the colorspace to Rec. 709.
	Rec709Settings []Rec709SettingsParameters `json:"rec709Settings,omitempty" tf:"rec709_settings,omitempty"`
}

type ColorSpaceSettingsParameters struct {

	// Sets the colorspace metadata to be passed through.
	// +kubebuilder:validation:Optional
	ColorSpacePassthroughSettings []ColorSpacePassthroughSettingsParameters `json:"colorSpacePassthroughSettings,omitempty" tf:"color_space_passthrough_settings,omitempty"`

	// Set the colorspace to Dolby Vision81.
	// +kubebuilder:validation:Optional
	DolbyVision81Settings []DolbyVision81SettingsParameters `json:"dolbyVision81Settings,omitempty" tf:"dolby_vision81_settings,omitempty"`

	// Set the colorspace to be HDR10. See H265 HDR10 Settings for more details.
	// +kubebuilder:validation:Optional
	Hdr10Settings []Hdr10SettingsParameters `json:"hdr10Settings,omitempty" tf:"hdr10_settings,omitempty"`

	// Set the colorspace to Rec. 601.
	// +kubebuilder:validation:Optional
	Rec601Settings []Rec601SettingsParameters `json:"rec601Settings,omitempty" tf:"rec601_settings,omitempty"`

	// Set the colorspace to Rec. 709.
	// +kubebuilder:validation:Optional
	Rec709Settings []Rec709SettingsParameters `json:"rec709Settings,omitempty" tf:"rec709_settings,omitempty"`
}

type ContainerSettingsInitParameters struct {

	// M2TS Settings. See M2TS Settings for more details.
	M2TsSettings []M2TsSettingsInitParameters `json:"m2tsSettings,omitempty" tf:"m2ts_settings,omitempty"`

	// Raw Settings. This can be set as an empty block.
	RawSettings []RawSettingsInitParameters `json:"rawSettings,omitempty" tf:"raw_settings,omitempty"`
}

type ContainerSettingsM2TsSettingsInitParameters struct {
	AbsentInputAudioBehavior *string `json:"absentInputAudioBehavior,omitempty" tf:"absent_input_audio_behavior,omitempty"`

	Arib *string `json:"arib,omitempty" tf:"arib,omitempty"`

	// Selects a specific PID from within a source.
	AribCaptionsPid *string `json:"aribCaptionsPid,omitempty" tf:"arib_captions_pid,omitempty"`

	AribCaptionsPidControl *string `json:"aribCaptionsPidControl,omitempty" tf:"arib_captions_pid_control,omitempty"`

	AudioBufferModel *string `json:"audioBufferModel,omitempty" tf:"audio_buffer_model,omitempty"`

	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	AudioStreamType *string `json:"audioStreamType,omitempty" tf:"audio_stream_type,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	BufferModel *string `json:"bufferModel,omitempty" tf:"buffer_model,omitempty"`

	CcDescriptor *string `json:"ccDescriptor,omitempty" tf:"cc_descriptor,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbNitSettings []M2TsSettingsDvbNitSettingsInitParameters `json:"dvbNitSettings,omitempty" tf:"dvb_nit_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbSdtSettings []M2TsSettingsDvbSdtSettingsInitParameters `json:"dvbSdtSettings,omitempty" tf:"dvb_sdt_settings,omitempty"`

	DvbSubPids *string `json:"dvbSubPids,omitempty" tf:"dvb_sub_pids,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbTdtSettings []M2TsSettingsDvbTdtSettingsInitParameters `json:"dvbTdtSettings,omitempty" tf:"dvb_tdt_settings,omitempty"`

	// Selects a specific PID from within a source.
	DvbTeletextPid *string `json:"dvbTeletextPid,omitempty" tf:"dvb_teletext_pid,omitempty"`

	Ebif *string `json:"ebif,omitempty" tf:"ebif,omitempty"`

	EbpAudioInterval *string `json:"ebpAudioInterval,omitempty" tf:"ebp_audio_interval,omitempty"`

	EbpLookaheadMs *float64 `json:"ebpLookaheadMs,omitempty" tf:"ebp_lookahead_ms,omitempty"`

	EbpPlacement *string `json:"ebpPlacement,omitempty" tf:"ebp_placement,omitempty"`

	// Selects a specific PID from within a source.
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	EsRateInPes *string `json:"esRateInPes,omitempty" tf:"es_rate_in_pes,omitempty"`

	// Selects a specific PID from within a source.
	EtvPlatformPid *string `json:"etvPlatformPid,omitempty" tf:"etv_platform_pid,omitempty"`

	// Selects a specific PID from within a source.
	EtvSignalPid *string `json:"etvSignalPid,omitempty" tf:"etv_signal_pid,omitempty"`

	FragmentTime *float64 `json:"fragmentTime,omitempty" tf:"fragment_time,omitempty"`

	Klv *string `json:"klv,omitempty" tf:"klv,omitempty"`

	KlvDataPids *string `json:"klvDataPids,omitempty" tf:"klv_data_pids,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// Average bitrate in bits/second.
	NullPacketBitrate *float64 `json:"nullPacketBitrate,omitempty" tf:"null_packet_bitrate,omitempty"`

	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	RateMode *string `json:"rateMode,omitempty" tf:"rate_mode,omitempty"`

	Scte27Pids *string `json:"scte27Pids,omitempty" tf:"scte27_pids,omitempty"`

	Scte35Control *string `json:"scte35Control,omitempty" tf:"scte35_control,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	SegmentationMarkers *string `json:"segmentationMarkers,omitempty" tf:"segmentation_markers,omitempty"`

	SegmentationStyle *string `json:"segmentationStyle,omitempty" tf:"segmentation_style,omitempty"`

	SegmentationTime *float64 `json:"segmentationTime,omitempty" tf:"segmentation_time,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type ContainerSettingsM2TsSettingsObservation struct {
	AbsentInputAudioBehavior *string `json:"absentInputAudioBehavior,omitempty" tf:"absent_input_audio_behavior,omitempty"`

	Arib *string `json:"arib,omitempty" tf:"arib,omitempty"`

	// Selects a specific PID from within a source.
	AribCaptionsPid *string `json:"aribCaptionsPid,omitempty" tf:"arib_captions_pid,omitempty"`

	AribCaptionsPidControl *string `json:"aribCaptionsPidControl,omitempty" tf:"arib_captions_pid_control,omitempty"`

	AudioBufferModel *string `json:"audioBufferModel,omitempty" tf:"audio_buffer_model,omitempty"`

	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	AudioStreamType *string `json:"audioStreamType,omitempty" tf:"audio_stream_type,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	BufferModel *string `json:"bufferModel,omitempty" tf:"buffer_model,omitempty"`

	CcDescriptor *string `json:"ccDescriptor,omitempty" tf:"cc_descriptor,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbNitSettings []M2TsSettingsDvbNitSettingsObservation `json:"dvbNitSettings,omitempty" tf:"dvb_nit_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbSdtSettings []M2TsSettingsDvbSdtSettingsObservation `json:"dvbSdtSettings,omitempty" tf:"dvb_sdt_settings,omitempty"`

	DvbSubPids *string `json:"dvbSubPids,omitempty" tf:"dvb_sub_pids,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbTdtSettings []M2TsSettingsDvbTdtSettingsObservation `json:"dvbTdtSettings,omitempty" tf:"dvb_tdt_settings,omitempty"`

	// Selects a specific PID from within a source.
	DvbTeletextPid *string `json:"dvbTeletextPid,omitempty" tf:"dvb_teletext_pid,omitempty"`

	Ebif *string `json:"ebif,omitempty" tf:"ebif,omitempty"`

	EbpAudioInterval *string `json:"ebpAudioInterval,omitempty" tf:"ebp_audio_interval,omitempty"`

	EbpLookaheadMs *float64 `json:"ebpLookaheadMs,omitempty" tf:"ebp_lookahead_ms,omitempty"`

	EbpPlacement *string `json:"ebpPlacement,omitempty" tf:"ebp_placement,omitempty"`

	// Selects a specific PID from within a source.
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	EsRateInPes *string `json:"esRateInPes,omitempty" tf:"es_rate_in_pes,omitempty"`

	// Selects a specific PID from within a source.
	EtvPlatformPid *string `json:"etvPlatformPid,omitempty" tf:"etv_platform_pid,omitempty"`

	// Selects a specific PID from within a source.
	EtvSignalPid *string `json:"etvSignalPid,omitempty" tf:"etv_signal_pid,omitempty"`

	FragmentTime *float64 `json:"fragmentTime,omitempty" tf:"fragment_time,omitempty"`

	Klv *string `json:"klv,omitempty" tf:"klv,omitempty"`

	KlvDataPids *string `json:"klvDataPids,omitempty" tf:"klv_data_pids,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// Average bitrate in bits/second.
	NullPacketBitrate *float64 `json:"nullPacketBitrate,omitempty" tf:"null_packet_bitrate,omitempty"`

	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	RateMode *string `json:"rateMode,omitempty" tf:"rate_mode,omitempty"`

	Scte27Pids *string `json:"scte27Pids,omitempty" tf:"scte27_pids,omitempty"`

	Scte35Control *string `json:"scte35Control,omitempty" tf:"scte35_control,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	SegmentationMarkers *string `json:"segmentationMarkers,omitempty" tf:"segmentation_markers,omitempty"`

	SegmentationStyle *string `json:"segmentationStyle,omitempty" tf:"segmentation_style,omitempty"`

	SegmentationTime *float64 `json:"segmentationTime,omitempty" tf:"segmentation_time,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type ContainerSettingsM2TsSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AbsentInputAudioBehavior *string `json:"absentInputAudioBehavior,omitempty" tf:"absent_input_audio_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	Arib *string `json:"arib,omitempty" tf:"arib,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	AribCaptionsPid *string `json:"aribCaptionsPid,omitempty" tf:"arib_captions_pid,omitempty"`

	// +kubebuilder:validation:Optional
	AribCaptionsPidControl *string `json:"aribCaptionsPidControl,omitempty" tf:"arib_captions_pid_control,omitempty"`

	// +kubebuilder:validation:Optional
	AudioBufferModel *string `json:"audioBufferModel,omitempty" tf:"audio_buffer_model,omitempty"`

	// +kubebuilder:validation:Optional
	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	// +kubebuilder:validation:Optional
	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	// +kubebuilder:validation:Optional
	AudioStreamType *string `json:"audioStreamType,omitempty" tf:"audio_stream_type,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	BufferModel *string `json:"bufferModel,omitempty" tf:"buffer_model,omitempty"`

	// +kubebuilder:validation:Optional
	CcDescriptor *string `json:"ccDescriptor,omitempty" tf:"cc_descriptor,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	DvbNitSettings []M2TsSettingsDvbNitSettingsParameters `json:"dvbNitSettings,omitempty" tf:"dvb_nit_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	DvbSdtSettings []M2TsSettingsDvbSdtSettingsParameters `json:"dvbSdtSettings,omitempty" tf:"dvb_sdt_settings,omitempty"`

	// +kubebuilder:validation:Optional
	DvbSubPids *string `json:"dvbSubPids,omitempty" tf:"dvb_sub_pids,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	DvbTdtSettings []M2TsSettingsDvbTdtSettingsParameters `json:"dvbTdtSettings,omitempty" tf:"dvb_tdt_settings,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	DvbTeletextPid *string `json:"dvbTeletextPid,omitempty" tf:"dvb_teletext_pid,omitempty"`

	// +kubebuilder:validation:Optional
	Ebif *string `json:"ebif,omitempty" tf:"ebif,omitempty"`

	// +kubebuilder:validation:Optional
	EbpAudioInterval *string `json:"ebpAudioInterval,omitempty" tf:"ebp_audio_interval,omitempty"`

	// +kubebuilder:validation:Optional
	EbpLookaheadMs *float64 `json:"ebpLookaheadMs,omitempty" tf:"ebp_lookahead_ms,omitempty"`

	// +kubebuilder:validation:Optional
	EbpPlacement *string `json:"ebpPlacement,omitempty" tf:"ebp_placement,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	// +kubebuilder:validation:Optional
	EsRateInPes *string `json:"esRateInPes,omitempty" tf:"es_rate_in_pes,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EtvPlatformPid *string `json:"etvPlatformPid,omitempty" tf:"etv_platform_pid,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EtvSignalPid *string `json:"etvSignalPid,omitempty" tf:"etv_signal_pid,omitempty"`

	// +kubebuilder:validation:Optional
	FragmentTime *float64 `json:"fragmentTime,omitempty" tf:"fragment_time,omitempty"`

	// +kubebuilder:validation:Optional
	Klv *string `json:"klv,omitempty" tf:"klv,omitempty"`

	// +kubebuilder:validation:Optional
	KlvDataPids *string `json:"klvDataPids,omitempty" tf:"klv_data_pids,omitempty"`

	// +kubebuilder:validation:Optional
	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	NullPacketBitrate *float64 `json:"nullPacketBitrate,omitempty" tf:"null_packet_bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	// +kubebuilder:validation:Optional
	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	// +kubebuilder:validation:Optional
	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	// +kubebuilder:validation:Optional
	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	// +kubebuilder:validation:Optional
	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	// +kubebuilder:validation:Optional
	RateMode *string `json:"rateMode,omitempty" tf:"rate_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Scte27Pids *string `json:"scte27Pids,omitempty" tf:"scte27_pids,omitempty"`

	// +kubebuilder:validation:Optional
	Scte35Control *string `json:"scte35Control,omitempty" tf:"scte35_control,omitempty"`

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationMarkers *string `json:"segmentationMarkers,omitempty" tf:"segmentation_markers,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationStyle *string `json:"segmentationStyle,omitempty" tf:"segmentation_style,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationTime *float64 `json:"segmentationTime,omitempty" tf:"segmentation_time,omitempty"`

	// +kubebuilder:validation:Optional
	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type ContainerSettingsObservation struct {

	// M2TS Settings. See M2TS Settings for more details.
	M2TsSettings []M2TsSettingsObservation `json:"m2tsSettings,omitempty" tf:"m2ts_settings,omitempty"`

	// Raw Settings. This can be set as an empty block.
	RawSettings []RawSettingsParameters `json:"rawSettings,omitempty" tf:"raw_settings,omitempty"`
}

type ContainerSettingsParameters struct {

	// M2TS Settings. See M2TS Settings for more details.
	// +kubebuilder:validation:Optional
	M2TsSettings []M2TsSettingsParameters `json:"m2tsSettings,omitempty" tf:"m2ts_settings,omitempty"`

	// Raw Settings. This can be set as an empty block.
	// +kubebuilder:validation:Optional
	RawSettings []RawSettingsParameters `json:"rawSettings,omitempty" tf:"raw_settings,omitempty"`
}

type DestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type DestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type DestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type DestinationSettingsInitParameters struct {

	// ARIB Destination Settings.
	AribDestinationSettings []AribDestinationSettingsInitParameters `json:"aribDestinationSettings,omitempty" tf:"arib_destination_settings,omitempty"`

	// Burn In Destination Settings. See Burn In Destination Settings for more details.
	BurnInDestinationSettings []BurnInDestinationSettingsInitParameters `json:"burnInDestinationSettings,omitempty" tf:"burn_in_destination_settings,omitempty"`

	// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
	DvbSubDestinationSettings []DvbSubDestinationSettingsInitParameters `json:"dvbSubDestinationSettings,omitempty" tf:"dvb_sub_destination_settings,omitempty"`

	// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
	EbuTtDDestinationSettings []EbuTtDDestinationSettingsInitParameters `json:"ebuTtDDestinationSettings,omitempty" tf:"ebu_tt_d_destination_settings,omitempty"`

	// Embedded Destination Settings.
	EmbeddedDestinationSettings []EmbeddedDestinationSettingsInitParameters `json:"embeddedDestinationSettings,omitempty" tf:"embedded_destination_settings,omitempty"`

	// Embedded Plus SCTE20 Destination Settings.
	EmbeddedPlusScte20DestinationSettings []EmbeddedPlusScte20DestinationSettingsInitParameters `json:"embeddedPlusScte20DestinationSettings,omitempty" tf:"embedded_plus_scte20_destination_settings,omitempty"`

	// RTMP Caption Info Destination Settings.
	RtmpCaptionInfoDestinationSettings []RtmpCaptionInfoDestinationSettingsInitParameters `json:"rtmpCaptionInfoDestinationSettings,omitempty" tf:"rtmp_caption_info_destination_settings,omitempty"`

	// SCTE20 Plus Embedded Destination Settings.
	Scte20PlusEmbeddedDestinationSettings []Scte20PlusEmbeddedDestinationSettingsInitParameters `json:"scte20PlusEmbeddedDestinationSettings,omitempty" tf:"scte20_plus_embedded_destination_settings,omitempty"`

	// –  SCTE27 Destination Settings.
	Scte27DestinationSettings []Scte27DestinationSettingsInitParameters `json:"scte27DestinationSettings,omitempty" tf:"scte27_destination_settings,omitempty"`

	// –  SMPTE TT Destination Settings.
	SmpteTtDestinationSettings []SmpteTtDestinationSettingsInitParameters `json:"smpteTtDestinationSettings,omitempty" tf:"smpte_tt_destination_settings,omitempty"`

	// –  Teletext Destination Settings.
	TeletextDestinationSettings []TeletextDestinationSettingsInitParameters `json:"teletextDestinationSettings,omitempty" tf:"teletext_destination_settings,omitempty"`

	// –  TTML Destination Settings. See TTML Destination Settings for more details.
	TtmlDestinationSettings []TtmlDestinationSettingsInitParameters `json:"ttmlDestinationSettings,omitempty" tf:"ttml_destination_settings,omitempty"`

	// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
	WebvttDestinationSettings []WebvttDestinationSettingsInitParameters `json:"webvttDestinationSettings,omitempty" tf:"webvtt_destination_settings,omitempty"`
}

type DestinationSettingsObservation struct {

	// ARIB Destination Settings.
	AribDestinationSettings []AribDestinationSettingsParameters `json:"aribDestinationSettings,omitempty" tf:"arib_destination_settings,omitempty"`

	// Burn In Destination Settings. See Burn In Destination Settings for more details.
	BurnInDestinationSettings []BurnInDestinationSettingsObservation `json:"burnInDestinationSettings,omitempty" tf:"burn_in_destination_settings,omitempty"`

	// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
	DvbSubDestinationSettings []DvbSubDestinationSettingsObservation `json:"dvbSubDestinationSettings,omitempty" tf:"dvb_sub_destination_settings,omitempty"`

	// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
	EbuTtDDestinationSettings []EbuTtDDestinationSettingsObservation `json:"ebuTtDDestinationSettings,omitempty" tf:"ebu_tt_d_destination_settings,omitempty"`

	// Embedded Destination Settings.
	EmbeddedDestinationSettings []EmbeddedDestinationSettingsParameters `json:"embeddedDestinationSettings,omitempty" tf:"embedded_destination_settings,omitempty"`

	// Embedded Plus SCTE20 Destination Settings.
	EmbeddedPlusScte20DestinationSettings []EmbeddedPlusScte20DestinationSettingsParameters `json:"embeddedPlusScte20DestinationSettings,omitempty" tf:"embedded_plus_scte20_destination_settings,omitempty"`

	// RTMP Caption Info Destination Settings.
	RtmpCaptionInfoDestinationSettings []RtmpCaptionInfoDestinationSettingsParameters `json:"rtmpCaptionInfoDestinationSettings,omitempty" tf:"rtmp_caption_info_destination_settings,omitempty"`

	// SCTE20 Plus Embedded Destination Settings.
	Scte20PlusEmbeddedDestinationSettings []Scte20PlusEmbeddedDestinationSettingsParameters `json:"scte20PlusEmbeddedDestinationSettings,omitempty" tf:"scte20_plus_embedded_destination_settings,omitempty"`

	// –  SCTE27 Destination Settings.
	Scte27DestinationSettings []Scte27DestinationSettingsParameters `json:"scte27DestinationSettings,omitempty" tf:"scte27_destination_settings,omitempty"`

	// –  SMPTE TT Destination Settings.
	SmpteTtDestinationSettings []SmpteTtDestinationSettingsParameters `json:"smpteTtDestinationSettings,omitempty" tf:"smpte_tt_destination_settings,omitempty"`

	// –  Teletext Destination Settings.
	TeletextDestinationSettings []TeletextDestinationSettingsParameters `json:"teletextDestinationSettings,omitempty" tf:"teletext_destination_settings,omitempty"`

	// –  TTML Destination Settings. See TTML Destination Settings for more details.
	TtmlDestinationSettings []TtmlDestinationSettingsObservation `json:"ttmlDestinationSettings,omitempty" tf:"ttml_destination_settings,omitempty"`

	// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
	WebvttDestinationSettings []WebvttDestinationSettingsObservation `json:"webvttDestinationSettings,omitempty" tf:"webvtt_destination_settings,omitempty"`
}

type DestinationSettingsParameters struct {

	// ARIB Destination Settings.
	// +kubebuilder:validation:Optional
	AribDestinationSettings []AribDestinationSettingsParameters `json:"aribDestinationSettings,omitempty" tf:"arib_destination_settings,omitempty"`

	// Burn In Destination Settings. See Burn In Destination Settings for more details.
	// +kubebuilder:validation:Optional
	BurnInDestinationSettings []BurnInDestinationSettingsParameters `json:"burnInDestinationSettings,omitempty" tf:"burn_in_destination_settings,omitempty"`

	// DVB Sub Destination Settings. See DVB Sub Destination Settings for more details.
	// +kubebuilder:validation:Optional
	DvbSubDestinationSettings []DvbSubDestinationSettingsParameters `json:"dvbSubDestinationSettings,omitempty" tf:"dvb_sub_destination_settings,omitempty"`

	// EBU TT D Destination Settings. See EBU TT D Destination Settings for more details.
	// +kubebuilder:validation:Optional
	EbuTtDDestinationSettings []EbuTtDDestinationSettingsParameters `json:"ebuTtDDestinationSettings,omitempty" tf:"ebu_tt_d_destination_settings,omitempty"`

	// Embedded Destination Settings.
	// +kubebuilder:validation:Optional
	EmbeddedDestinationSettings []EmbeddedDestinationSettingsParameters `json:"embeddedDestinationSettings,omitempty" tf:"embedded_destination_settings,omitempty"`

	// Embedded Plus SCTE20 Destination Settings.
	// +kubebuilder:validation:Optional
	EmbeddedPlusScte20DestinationSettings []EmbeddedPlusScte20DestinationSettingsParameters `json:"embeddedPlusScte20DestinationSettings,omitempty" tf:"embedded_plus_scte20_destination_settings,omitempty"`

	// RTMP Caption Info Destination Settings.
	// +kubebuilder:validation:Optional
	RtmpCaptionInfoDestinationSettings []RtmpCaptionInfoDestinationSettingsParameters `json:"rtmpCaptionInfoDestinationSettings,omitempty" tf:"rtmp_caption_info_destination_settings,omitempty"`

	// SCTE20 Plus Embedded Destination Settings.
	// +kubebuilder:validation:Optional
	Scte20PlusEmbeddedDestinationSettings []Scte20PlusEmbeddedDestinationSettingsParameters `json:"scte20PlusEmbeddedDestinationSettings,omitempty" tf:"scte20_plus_embedded_destination_settings,omitempty"`

	// –  SCTE27 Destination Settings.
	// +kubebuilder:validation:Optional
	Scte27DestinationSettings []Scte27DestinationSettingsParameters `json:"scte27DestinationSettings,omitempty" tf:"scte27_destination_settings,omitempty"`

	// –  SMPTE TT Destination Settings.
	// +kubebuilder:validation:Optional
	SmpteTtDestinationSettings []SmpteTtDestinationSettingsParameters `json:"smpteTtDestinationSettings,omitempty" tf:"smpte_tt_destination_settings,omitempty"`

	// –  Teletext Destination Settings.
	// +kubebuilder:validation:Optional
	TeletextDestinationSettings []TeletextDestinationSettingsParameters `json:"teletextDestinationSettings,omitempty" tf:"teletext_destination_settings,omitempty"`

	// –  TTML Destination Settings. See TTML Destination Settings for more details.
	// +kubebuilder:validation:Optional
	TtmlDestinationSettings []TtmlDestinationSettingsParameters `json:"ttmlDestinationSettings,omitempty" tf:"ttml_destination_settings,omitempty"`

	// WebVTT Destination Settings. See WebVTT Destination Settings for more details.
	// +kubebuilder:validation:Optional
	WebvttDestinationSettings []WebvttDestinationSettingsParameters `json:"webvttDestinationSettings,omitempty" tf:"webvtt_destination_settings,omitempty"`
}

type DestinationsInitParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	MediaPackageSettings []MediaPackageSettingsInitParameters `json:"mediaPackageSettings,omitempty" tf:"media_package_settings,omitempty"`

	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	MultiplexSettings []MultiplexSettingsInitParameters `json:"multiplexSettings,omitempty" tf:"multiplex_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Settings []SettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type DestinationsObservation struct {

	// User-specified id. Ths is used in an output group or an output.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	MediaPackageSettings []MediaPackageSettingsObservation `json:"mediaPackageSettings,omitempty" tf:"media_package_settings,omitempty"`

	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	MultiplexSettings []MultiplexSettingsObservation `json:"multiplexSettings,omitempty" tf:"multiplex_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Settings []SettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`
}

type DestinationsParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
	// +kubebuilder:validation:Optional
	MediaPackageSettings []MediaPackageSettingsParameters `json:"mediaPackageSettings,omitempty" tf:"media_package_settings,omitempty"`

	// Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
	// +kubebuilder:validation:Optional
	MultiplexSettings []MultiplexSettingsParameters `json:"multiplexSettings,omitempty" tf:"multiplex_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type DolbyEDecodeInitParameters struct {

	// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
	ProgramSelection *string `json:"programSelection,omitempty" tf:"program_selection,omitempty"`
}

type DolbyEDecodeObservation struct {

	// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
	ProgramSelection *string `json:"programSelection,omitempty" tf:"program_selection,omitempty"`
}

type DolbyEDecodeParameters struct {

	// Applies only to Dolby E. Enter the program ID (according to the metadata in the audio) of the Dolby E program to extract from the specified track. One program extracted per audio selector. To select multiple programs, create multiple selectors with the same Track and different Program numbers. “All channels” means to ignore the program IDs and include all the channels in this selector; useful if metadata is known to be incorrect.
	// +kubebuilder:validation:Optional
	ProgramSelection *string `json:"programSelection" tf:"program_selection,omitempty"`
}

type DolbyVision81SettingsInitParameters struct {
}

type DolbyVision81SettingsObservation struct {
}

type DolbyVision81SettingsParameters struct {
}

type DvbNitSettingsInitParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Name of the Channel.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type DvbNitSettingsObservation struct {

	// User-specified id. Ths is used in an output group or an output.
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Name of the Channel.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type DvbNitSettingsParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	NetworkID *float64 `json:"networkId" tf:"network_id,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	NetworkName *string `json:"networkName" tf:"network_name,omitempty"`

	// +kubebuilder:validation:Optional
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type DvbSdtSettingsInitParameters struct {
	OutputSdt *string `json:"outputSdt,omitempty" tf:"output_sdt,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`

	// Name of the Channel.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Name of the Channel.
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`
}

type DvbSdtSettingsObservation struct {
	OutputSdt *string `json:"outputSdt,omitempty" tf:"output_sdt,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`

	// Name of the Channel.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Name of the Channel.
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`
}

type DvbSdtSettingsParameters struct {

	// +kubebuilder:validation:Optional
	OutputSdt *string `json:"outputSdt,omitempty" tf:"output_sdt,omitempty"`

	// +kubebuilder:validation:Optional
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`
}

type DvbSubDestinationSettingsFontInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type DvbSubDestinationSettingsFontObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type DvbSubDestinationSettingsFontParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type DvbSubDestinationSettingsInitParameters struct {

	// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	Alignment *string `json:"alignment,omitempty" tf:"alignment,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundOpacity *float64 `json:"backgroundOpacity,omitempty" tf:"background_opacity,omitempty"`

	// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font []DvbSubDestinationSettingsFontInitParameters `json:"font,omitempty" tf:"font,omitempty"`

	// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity *float64 `json:"fontOpacity,omitempty" tf:"font_opacity,omitempty"`

	// in and DVB-Sub font settings must match.
	FontResolution *float64 `json:"fontResolution,omitempty" tf:"font_resolution,omitempty"`

	// in and DVB-Sub font settings must match.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor *string `json:"outlineColor,omitempty" tf:"outline_color,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize *float64 `json:"outlineSize,omitempty" tf:"outline_size,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowColor *string `json:"shadowColor,omitempty" tf:"shadow_color,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowOpacity *float64 `json:"shadowOpacity,omitempty" tf:"shadow_opacity,omitempty"`

	// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset *float64 `json:"shadowXOffset,omitempty" tf:"shadow_x_offset,omitempty"`

	// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset *float64 `json:"shadowYOffset,omitempty" tf:"shadow_y_offset,omitempty"`

	// Sub/Burn-in outputs.
	TeletextGridControl *string `json:"teletextGridControl,omitempty" tf:"teletext_grid_control,omitempty"`

	// in and DVB-Sub font settings must match.
	XPosition *float64 `json:"xPosition,omitempty" tf:"x_position,omitempty"`

	// in and DVB-Sub font settings must match.
	YPosition *float64 `json:"yPosition,omitempty" tf:"y_position,omitempty"`
}

type DvbSubDestinationSettingsObservation struct {

	// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	Alignment *string `json:"alignment,omitempty" tf:"alignment,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// in and DVB-Sub font settings must match.
	BackgroundOpacity *float64 `json:"backgroundOpacity,omitempty" tf:"background_opacity,omitempty"`

	// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	Font []DvbSubDestinationSettingsFontObservation `json:"font,omitempty" tf:"font,omitempty"`

	// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	FontOpacity *float64 `json:"fontOpacity,omitempty" tf:"font_opacity,omitempty"`

	// in and DVB-Sub font settings must match.
	FontResolution *float64 `json:"fontResolution,omitempty" tf:"font_resolution,omitempty"`

	// in and DVB-Sub font settings must match.
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineColor *string `json:"outlineColor,omitempty" tf:"outline_color,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	OutlineSize *float64 `json:"outlineSize,omitempty" tf:"outline_size,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowColor *string `json:"shadowColor,omitempty" tf:"shadow_color,omitempty"`

	// in and DVB-Sub font settings must match.
	ShadowOpacity *float64 `json:"shadowOpacity,omitempty" tf:"shadow_opacity,omitempty"`

	// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	ShadowXOffset *float64 `json:"shadowXOffset,omitempty" tf:"shadow_x_offset,omitempty"`

	// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	ShadowYOffset *float64 `json:"shadowYOffset,omitempty" tf:"shadow_y_offset,omitempty"`

	// Sub/Burn-in outputs.
	TeletextGridControl *string `json:"teletextGridControl,omitempty" tf:"teletext_grid_control,omitempty"`

	// in and DVB-Sub font settings must match.
	XPosition *float64 `json:"xPosition,omitempty" tf:"x_position,omitempty"`

	// in and DVB-Sub font settings must match.
	YPosition *float64 `json:"yPosition,omitempty" tf:"y_position,omitempty"`
}

type DvbSubDestinationSettingsParameters struct {

	// justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	Alignment *string `json:"alignment,omitempty" tf:"alignment,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	BackgroundOpacity *float64 `json:"backgroundOpacity,omitempty" tf:"background_opacity,omitempty"`

	// in. File extension must be ‘ttf’ or ‘tte’. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match. See Font for more details.
	// +kubebuilder:validation:Optional
	Font []DvbSubDestinationSettingsFontParameters `json:"font,omitempty" tf:"font,omitempty"`

	// in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontOpacity *float64 `json:"fontOpacity,omitempty" tf:"font_opacity,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontResolution *float64 `json:"fontResolution,omitempty" tf:"font_resolution,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	FontSize *string `json:"fontSize,omitempty" tf:"font_size,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	OutlineColor *string `json:"outlineColor,omitempty" tf:"outline_color,omitempty"`

	// defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	OutlineSize *float64 `json:"outlineSize,omitempty" tf:"outline_size,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowColor *string `json:"shadowColor,omitempty" tf:"shadow_color,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowOpacity *float64 `json:"shadowOpacity,omitempty" tf:"shadow_opacity,omitempty"`

	// 2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowXOffset *float64 `json:"shadowXOffset,omitempty" tf:"shadow_x_offset,omitempty"`

	// 2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	ShadowYOffset *float64 `json:"shadowYOffset,omitempty" tf:"shadow_y_offset,omitempty"`

	// Sub/Burn-in outputs.
	// +kubebuilder:validation:Optional
	TeletextGridControl *string `json:"teletextGridControl,omitempty" tf:"teletext_grid_control,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	XPosition *float64 `json:"xPosition,omitempty" tf:"x_position,omitempty"`

	// in and DVB-Sub font settings must match.
	// +kubebuilder:validation:Optional
	YPosition *float64 `json:"yPosition,omitempty" tf:"y_position,omitempty"`
}

type DvbSubSourceSettingsInitParameters struct {

	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage *string `json:"ocrLanguage,omitempty" tf:"ocr_language,omitempty"`

	// Selects a specific PID from within a source.
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type DvbSubSourceSettingsObservation struct {

	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage *string `json:"ocrLanguage,omitempty" tf:"ocr_language,omitempty"`

	// Selects a specific PID from within a source.
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type DvbSubSourceSettingsParameters struct {

	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	// +kubebuilder:validation:Optional
	OcrLanguage *string `json:"ocrLanguage,omitempty" tf:"ocr_language,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type DvbTdtSettingsInitParameters struct {
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type DvbTdtSettingsObservation struct {
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type DvbTdtSettingsParameters struct {

	// +kubebuilder:validation:Optional
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type Eac3AtmosSettingsInitParameters struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sets the dialnorm of the output.
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// Sets the Dolby dynamic range compression profile.
	DrcLine *string `json:"drcLine,omitempty" tf:"drc_line,omitempty"`

	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf *string `json:"drcRf,omitempty" tf:"drc_rf,omitempty"`

	// Height dimensional trim.
	HeightTrim *float64 `json:"heightTrim,omitempty" tf:"height_trim,omitempty"`

	// Surround dimensional trim.
	SurroundTrim *float64 `json:"surroundTrim,omitempty" tf:"surround_trim,omitempty"`
}

type Eac3AtmosSettingsObservation struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sets the dialnorm of the output.
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// Sets the Dolby dynamic range compression profile.
	DrcLine *string `json:"drcLine,omitempty" tf:"drc_line,omitempty"`

	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf *string `json:"drcRf,omitempty" tf:"drc_rf,omitempty"`

	// Height dimensional trim.
	HeightTrim *float64 `json:"heightTrim,omitempty" tf:"height_trim,omitempty"`

	// Surround dimensional trim.
	SurroundTrim *float64 `json:"surroundTrim,omitempty" tf:"surround_trim,omitempty"`
}

type Eac3AtmosSettingsParameters struct {

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sets the dialnorm of the output.
	// +kubebuilder:validation:Optional
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// Sets the Dolby dynamic range compression profile.
	// +kubebuilder:validation:Optional
	DrcLine *string `json:"drcLine,omitempty" tf:"drc_line,omitempty"`

	// Sets the profile for heavy Dolby dynamic range compression.
	// +kubebuilder:validation:Optional
	DrcRf *string `json:"drcRf,omitempty" tf:"drc_rf,omitempty"`

	// Height dimensional trim.
	// +kubebuilder:validation:Optional
	HeightTrim *float64 `json:"heightTrim,omitempty" tf:"height_trim,omitempty"`

	// Surround dimensional trim.
	// +kubebuilder:validation:Optional
	SurroundTrim *float64 `json:"surroundTrim,omitempty" tf:"surround_trim,omitempty"`
}

type Eac3SettingsInitParameters struct {

	// Sets the attenuation control.
	AttenuationControl *string `json:"attenuationControl,omitempty" tf:"attenuation_control,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode *string `json:"bitstreamMode,omitempty" tf:"bitstream_mode,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	DcFilter *string `json:"dcFilter,omitempty" tf:"dc_filter,omitempty"`

	// Sets the dialnorm of the output.
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// Sets the Dolby dynamic range compression profile.
	DrcLine *string `json:"drcLine,omitempty" tf:"drc_line,omitempty"`

	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf *string `json:"drcRf,omitempty" tf:"drc_rf,omitempty"`

	LfeControl *string `json:"lfeControl,omitempty" tf:"lfe_control,omitempty"`

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter *string `json:"lfeFilter,omitempty" tf:"lfe_filter,omitempty"`

	// H264 level.
	LoRoCenterMixLevel *float64 `json:"loRoCenterMixLevel,omitempty" tf:"lo_ro_center_mix_level,omitempty"`

	// H264 level.
	LoRoSurroundMixLevel *float64 `json:"loRoSurroundMixLevel,omitempty" tf:"lo_ro_surround_mix_level,omitempty"`

	// H264 level.
	LtRtCenterMixLevel *float64 `json:"ltRtCenterMixLevel,omitempty" tf:"lt_rt_center_mix_level,omitempty"`

	// H264 level.
	LtRtSurroundMixLevel *float64 `json:"ltRtSurroundMixLevel,omitempty" tf:"lt_rt_surround_mix_level,omitempty"`

	// Metadata control.
	MetadataControl *string `json:"metadataControl,omitempty" tf:"metadata_control,omitempty"`

	PassthroughControl *string `json:"passthroughControl,omitempty" tf:"passthrough_control,omitempty"`

	PhaseControl *string `json:"phaseControl,omitempty" tf:"phase_control,omitempty"`

	StereoDownmix *string `json:"stereoDownmix,omitempty" tf:"stereo_downmix,omitempty"`

	SurroundExMode *string `json:"surroundExMode,omitempty" tf:"surround_ex_mode,omitempty"`

	SurroundMode *string `json:"surroundMode,omitempty" tf:"surround_mode,omitempty"`
}

type Eac3SettingsObservation struct {

	// Sets the attenuation control.
	AttenuationControl *string `json:"attenuationControl,omitempty" tf:"attenuation_control,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	BitstreamMode *string `json:"bitstreamMode,omitempty" tf:"bitstream_mode,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	DcFilter *string `json:"dcFilter,omitempty" tf:"dc_filter,omitempty"`

	// Sets the dialnorm of the output.
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// Sets the Dolby dynamic range compression profile.
	DrcLine *string `json:"drcLine,omitempty" tf:"drc_line,omitempty"`

	// Sets the profile for heavy Dolby dynamic range compression.
	DrcRf *string `json:"drcRf,omitempty" tf:"drc_rf,omitempty"`

	LfeControl *string `json:"lfeControl,omitempty" tf:"lfe_control,omitempty"`

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	LfeFilter *string `json:"lfeFilter,omitempty" tf:"lfe_filter,omitempty"`

	// H264 level.
	LoRoCenterMixLevel *float64 `json:"loRoCenterMixLevel,omitempty" tf:"lo_ro_center_mix_level,omitempty"`

	// H264 level.
	LoRoSurroundMixLevel *float64 `json:"loRoSurroundMixLevel,omitempty" tf:"lo_ro_surround_mix_level,omitempty"`

	// H264 level.
	LtRtCenterMixLevel *float64 `json:"ltRtCenterMixLevel,omitempty" tf:"lt_rt_center_mix_level,omitempty"`

	// H264 level.
	LtRtSurroundMixLevel *float64 `json:"ltRtSurroundMixLevel,omitempty" tf:"lt_rt_surround_mix_level,omitempty"`

	// Metadata control.
	MetadataControl *string `json:"metadataControl,omitempty" tf:"metadata_control,omitempty"`

	PassthroughControl *string `json:"passthroughControl,omitempty" tf:"passthrough_control,omitempty"`

	PhaseControl *string `json:"phaseControl,omitempty" tf:"phase_control,omitempty"`

	StereoDownmix *string `json:"stereoDownmix,omitempty" tf:"stereo_downmix,omitempty"`

	SurroundExMode *string `json:"surroundExMode,omitempty" tf:"surround_ex_mode,omitempty"`

	SurroundMode *string `json:"surroundMode,omitempty" tf:"surround_mode,omitempty"`
}

type Eac3SettingsParameters struct {

	// Sets the attenuation control.
	// +kubebuilder:validation:Optional
	AttenuationControl *string `json:"attenuationControl,omitempty" tf:"attenuation_control,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
	// +kubebuilder:validation:Optional
	BitstreamMode *string `json:"bitstreamMode,omitempty" tf:"bitstream_mode,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// +kubebuilder:validation:Optional
	DcFilter *string `json:"dcFilter,omitempty" tf:"dc_filter,omitempty"`

	// Sets the dialnorm of the output.
	// +kubebuilder:validation:Optional
	Dialnorm *float64 `json:"dialnorm,omitempty" tf:"dialnorm,omitempty"`

	// Sets the Dolby dynamic range compression profile.
	// +kubebuilder:validation:Optional
	DrcLine *string `json:"drcLine,omitempty" tf:"drc_line,omitempty"`

	// Sets the profile for heavy Dolby dynamic range compression.
	// +kubebuilder:validation:Optional
	DrcRf *string `json:"drcRf,omitempty" tf:"drc_rf,omitempty"`

	// +kubebuilder:validation:Optional
	LfeControl *string `json:"lfeControl,omitempty" tf:"lfe_control,omitempty"`

	// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
	// +kubebuilder:validation:Optional
	LfeFilter *string `json:"lfeFilter,omitempty" tf:"lfe_filter,omitempty"`

	// H264 level.
	// +kubebuilder:validation:Optional
	LoRoCenterMixLevel *float64 `json:"loRoCenterMixLevel,omitempty" tf:"lo_ro_center_mix_level,omitempty"`

	// H264 level.
	// +kubebuilder:validation:Optional
	LoRoSurroundMixLevel *float64 `json:"loRoSurroundMixLevel,omitempty" tf:"lo_ro_surround_mix_level,omitempty"`

	// H264 level.
	// +kubebuilder:validation:Optional
	LtRtCenterMixLevel *float64 `json:"ltRtCenterMixLevel,omitempty" tf:"lt_rt_center_mix_level,omitempty"`

	// H264 level.
	// +kubebuilder:validation:Optional
	LtRtSurroundMixLevel *float64 `json:"ltRtSurroundMixLevel,omitempty" tf:"lt_rt_surround_mix_level,omitempty"`

	// Metadata control.
	// +kubebuilder:validation:Optional
	MetadataControl *string `json:"metadataControl,omitempty" tf:"metadata_control,omitempty"`

	// +kubebuilder:validation:Optional
	PassthroughControl *string `json:"passthroughControl,omitempty" tf:"passthrough_control,omitempty"`

	// +kubebuilder:validation:Optional
	PhaseControl *string `json:"phaseControl,omitempty" tf:"phase_control,omitempty"`

	// +kubebuilder:validation:Optional
	StereoDownmix *string `json:"stereoDownmix,omitempty" tf:"stereo_downmix,omitempty"`

	// +kubebuilder:validation:Optional
	SurroundExMode *string `json:"surroundExMode,omitempty" tf:"surround_ex_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SurroundMode *string `json:"surroundMode,omitempty" tf:"surround_mode,omitempty"`
}

type EbuTtDDestinationSettingsInitParameters struct {

	// –  Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
	CopyrightHolder *string `json:"copyrightHolder,omitempty" tf:"copyright_holder,omitempty"`

	// line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
	FillLineGap *string `json:"fillLineGap,omitempty" tf:"fill_line_gap,omitempty"`

	// TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
	FontFamily *string `json:"fontFamily,omitempty" tf:"font_family,omitempty"`

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type EbuTtDDestinationSettingsObservation struct {

	// –  Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
	CopyrightHolder *string `json:"copyrightHolder,omitempty" tf:"copyright_holder,omitempty"`

	// line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
	FillLineGap *string `json:"fillLineGap,omitempty" tf:"fill_line_gap,omitempty"`

	// TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
	FontFamily *string `json:"fontFamily,omitempty" tf:"font_family,omitempty"`

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type EbuTtDDestinationSettingsParameters struct {

	// –  Complete this field if you want to include the name of the copyright holder in the copyright tag in the captions metadata.
	// +kubebuilder:validation:Optional
	CopyrightHolder *string `json:"copyrightHolder,omitempty" tf:"copyright_holder,omitempty"`

	// line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
	// +kubebuilder:validation:Optional
	FillLineGap *string `json:"fillLineGap,omitempty" tf:"fill_line_gap,omitempty"`

	// TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to “monospaced”. (If styleControl is set to exclude, the font family is always set to “monospaced”.) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
	// +kubebuilder:validation:Optional
	FontFamily *string `json:"fontFamily,omitempty" tf:"font_family,omitempty"`

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	// +kubebuilder:validation:Optional
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type EmbeddedDestinationSettingsInitParameters struct {
}

type EmbeddedDestinationSettingsObservation struct {
}

type EmbeddedDestinationSettingsParameters struct {
}

type EmbeddedPlusScte20DestinationSettingsInitParameters struct {
}

type EmbeddedPlusScte20DestinationSettingsObservation struct {
}

type EmbeddedPlusScte20DestinationSettingsParameters struct {
}

type EmbeddedSourceSettingsInitParameters struct {

	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 *string `json:"convert608To708,omitempty" tf:"convert_608_to_708,omitempty"`

	// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
	Scte20Detection *string `json:"scte20Detection,omitempty" tf:"scte20_detection,omitempty"`

	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber *float64 `json:"source608ChannelNumber,omitempty" tf:"source_608_channel_number,omitempty"`
}

type EmbeddedSourceSettingsObservation struct {

	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 *string `json:"convert608To708,omitempty" tf:"convert_608_to_708,omitempty"`

	// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
	Scte20Detection *string `json:"scte20Detection,omitempty" tf:"scte20_detection,omitempty"`

	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber *float64 `json:"source608ChannelNumber,omitempty" tf:"source_608_channel_number,omitempty"`
}

type EmbeddedSourceSettingsParameters struct {

	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	// +kubebuilder:validation:Optional
	Convert608To708 *string `json:"convert608To708,omitempty" tf:"convert_608_to_708,omitempty"`

	// Set to “auto” to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
	// +kubebuilder:validation:Optional
	Scte20Detection *string `json:"scte20Detection,omitempty" tf:"scte20_detection,omitempty"`

	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	// +kubebuilder:validation:Optional
	Source608ChannelNumber *float64 `json:"source608ChannelNumber,omitempty" tf:"source_608_channel_number,omitempty"`
}

type EncoderSettingsInitParameters struct {

	// Audio descriptions for the channel. See Audio Descriptions for more details.
	AudioDescriptions []AudioDescriptionsInitParameters `json:"audioDescriptions,omitempty" tf:"audio_descriptions,omitempty"`

	// Settings for ad avail blanking. See Avail Blanking for more details.
	AvailBlanking []AvailBlankingInitParameters `json:"availBlanking,omitempty" tf:"avail_blanking,omitempty"`

	// Caption Descriptions. See Caption Descriptions for more details.
	CaptionDescriptions []CaptionDescriptionsInitParameters `json:"captionDescriptions,omitempty" tf:"caption_descriptions,omitempty"`

	// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
	GlobalConfiguration []GlobalConfigurationInitParameters `json:"globalConfiguration,omitempty" tf:"global_configuration,omitempty"`

	// Settings for motion graphics. See Motion Graphics Configuration for more details.
	MotionGraphicsConfiguration []MotionGraphicsConfigurationInitParameters `json:"motionGraphicsConfiguration,omitempty" tf:"motion_graphics_configuration,omitempty"`

	// Nielsen configuration settings. See Nielsen Configuration for more details.
	NielsenConfiguration []NielsenConfigurationInitParameters `json:"nielsenConfiguration,omitempty" tf:"nielsen_configuration,omitempty"`

	// Output groups for the channel. See Output Groups for more details.
	OutputGroups []OutputGroupsInitParameters `json:"outputGroups,omitempty" tf:"output_groups,omitempty"`

	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	TimecodeConfig []TimecodeConfigInitParameters `json:"timecodeConfig,omitempty" tf:"timecode_config,omitempty"`

	// Video Descriptions. See Video Descriptions for more details.
	VideoDescriptions []VideoDescriptionsInitParameters `json:"videoDescriptions,omitempty" tf:"video_descriptions,omitempty"`
}

type EncoderSettingsObservation struct {

	// Audio descriptions for the channel. See Audio Descriptions for more details.
	AudioDescriptions []AudioDescriptionsObservation `json:"audioDescriptions,omitempty" tf:"audio_descriptions,omitempty"`

	// Settings for ad avail blanking. See Avail Blanking for more details.
	AvailBlanking []AvailBlankingObservation `json:"availBlanking,omitempty" tf:"avail_blanking,omitempty"`

	// Caption Descriptions. See Caption Descriptions for more details.
	CaptionDescriptions []CaptionDescriptionsObservation `json:"captionDescriptions,omitempty" tf:"caption_descriptions,omitempty"`

	// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
	GlobalConfiguration []GlobalConfigurationObservation `json:"globalConfiguration,omitempty" tf:"global_configuration,omitempty"`

	// Settings for motion graphics. See Motion Graphics Configuration for more details.
	MotionGraphicsConfiguration []MotionGraphicsConfigurationObservation `json:"motionGraphicsConfiguration,omitempty" tf:"motion_graphics_configuration,omitempty"`

	// Nielsen configuration settings. See Nielsen Configuration for more details.
	NielsenConfiguration []NielsenConfigurationObservation `json:"nielsenConfiguration,omitempty" tf:"nielsen_configuration,omitempty"`

	// Output groups for the channel. See Output Groups for more details.
	OutputGroups []OutputGroupsObservation `json:"outputGroups,omitempty" tf:"output_groups,omitempty"`

	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	TimecodeConfig []TimecodeConfigObservation `json:"timecodeConfig,omitempty" tf:"timecode_config,omitempty"`

	// Video Descriptions. See Video Descriptions for more details.
	VideoDescriptions []VideoDescriptionsObservation `json:"videoDescriptions,omitempty" tf:"video_descriptions,omitempty"`
}

type EncoderSettingsParameters struct {

	// Audio descriptions for the channel. See Audio Descriptions for more details.
	// +kubebuilder:validation:Optional
	AudioDescriptions []AudioDescriptionsParameters `json:"audioDescriptions,omitempty" tf:"audio_descriptions,omitempty"`

	// Settings for ad avail blanking. See Avail Blanking for more details.
	// +kubebuilder:validation:Optional
	AvailBlanking []AvailBlankingParameters `json:"availBlanking,omitempty" tf:"avail_blanking,omitempty"`

	// Caption Descriptions. See Caption Descriptions for more details.
	// +kubebuilder:validation:Optional
	CaptionDescriptions []CaptionDescriptionsParameters `json:"captionDescriptions,omitempty" tf:"caption_descriptions,omitempty"`

	// Configuration settings that apply to the event as a whole. See Global Configuration for more details.
	// +kubebuilder:validation:Optional
	GlobalConfiguration []GlobalConfigurationParameters `json:"globalConfiguration,omitempty" tf:"global_configuration,omitempty"`

	// Settings for motion graphics. See Motion Graphics Configuration for more details.
	// +kubebuilder:validation:Optional
	MotionGraphicsConfiguration []MotionGraphicsConfigurationParameters `json:"motionGraphicsConfiguration,omitempty" tf:"motion_graphics_configuration,omitempty"`

	// Nielsen configuration settings. See Nielsen Configuration for more details.
	// +kubebuilder:validation:Optional
	NielsenConfiguration []NielsenConfigurationParameters `json:"nielsenConfiguration,omitempty" tf:"nielsen_configuration,omitempty"`

	// Output groups for the channel. See Output Groups for more details.
	// +kubebuilder:validation:Optional
	OutputGroups []OutputGroupsParameters `json:"outputGroups" tf:"output_groups,omitempty"`

	// Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
	// +kubebuilder:validation:Optional
	TimecodeConfig []TimecodeConfigParameters `json:"timecodeConfig" tf:"timecode_config,omitempty"`

	// Video Descriptions. See Video Descriptions for more details.
	// +kubebuilder:validation:Optional
	VideoDescriptions []VideoDescriptionsParameters `json:"videoDescriptions,omitempty" tf:"video_descriptions,omitempty"`
}

type FailoverConditionInitParameters struct {

	// Failover condition type-specific settings. See Failover Condition Settings for more details.
	FailoverConditionSettings []FailoverConditionSettingsInitParameters `json:"failoverConditionSettings,omitempty" tf:"failover_condition_settings,omitempty"`
}

type FailoverConditionObservation struct {

	// Failover condition type-specific settings. See Failover Condition Settings for more details.
	FailoverConditionSettings []FailoverConditionSettingsObservation `json:"failoverConditionSettings,omitempty" tf:"failover_condition_settings,omitempty"`
}

type FailoverConditionParameters struct {

	// Failover condition type-specific settings. See Failover Condition Settings for more details.
	// +kubebuilder:validation:Optional
	FailoverConditionSettings []FailoverConditionSettingsParameters `json:"failoverConditionSettings,omitempty" tf:"failover_condition_settings,omitempty"`
}

type FailoverConditionSettingsInitParameters struct {

	// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
	AudioSilenceSettings []AudioSilenceSettingsInitParameters `json:"audioSilenceSettings,omitempty" tf:"audio_silence_settings,omitempty"`

	// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
	InputLossSettings []InputLossSettingsInitParameters `json:"inputLossSettings,omitempty" tf:"input_loss_settings,omitempty"`

	// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
	VideoBlackSettings []VideoBlackSettingsInitParameters `json:"videoBlackSettings,omitempty" tf:"video_black_settings,omitempty"`
}

type FailoverConditionSettingsObservation struct {

	// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
	AudioSilenceSettings []AudioSilenceSettingsObservation `json:"audioSilenceSettings,omitempty" tf:"audio_silence_settings,omitempty"`

	// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
	InputLossSettings []InputLossSettingsObservation `json:"inputLossSettings,omitempty" tf:"input_loss_settings,omitempty"`

	// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
	VideoBlackSettings []VideoBlackSettingsObservation `json:"videoBlackSettings,omitempty" tf:"video_black_settings,omitempty"`
}

type FailoverConditionSettingsParameters struct {

	// MediaLive will perform a failover if the specified audio selector is silent for the specified period. See Audio Silence Failover Settings for more details.
	// +kubebuilder:validation:Optional
	AudioSilenceSettings []AudioSilenceSettingsParameters `json:"audioSilenceSettings,omitempty" tf:"audio_silence_settings,omitempty"`

	// MediaLive will perform a failover if content is not detected in this input for the specified period. See Input Loss Failover Settings for more details.
	// +kubebuilder:validation:Optional
	InputLossSettings []InputLossSettingsParameters `json:"inputLossSettings,omitempty" tf:"input_loss_settings,omitempty"`

	// MediaLive will perform a failover if content is considered black for the specified period. See Video Black Failover Settings for more details.
	// +kubebuilder:validation:Optional
	VideoBlackSettings []VideoBlackSettingsParameters `json:"videoBlackSettings,omitempty" tf:"video_black_settings,omitempty"`
}

type FecOutputSettingsInitParameters struct {

	// The height of the FEC protection matrix.
	ColumnDepth *float64 `json:"columnDepth,omitempty" tf:"column_depth,omitempty"`

	// Enables column only or column and row based FEC.
	IncludeFec *string `json:"includeFec,omitempty" tf:"include_fec,omitempty"`

	// The width of the FEC protection matrix.
	RowLength *float64 `json:"rowLength,omitempty" tf:"row_length,omitempty"`
}

type FecOutputSettingsObservation struct {

	// The height of the FEC protection matrix.
	ColumnDepth *float64 `json:"columnDepth,omitempty" tf:"column_depth,omitempty"`

	// Enables column only or column and row based FEC.
	IncludeFec *string `json:"includeFec,omitempty" tf:"include_fec,omitempty"`

	// The width of the FEC protection matrix.
	RowLength *float64 `json:"rowLength,omitempty" tf:"row_length,omitempty"`
}

type FecOutputSettingsParameters struct {

	// The height of the FEC protection matrix.
	// +kubebuilder:validation:Optional
	ColumnDepth *float64 `json:"columnDepth,omitempty" tf:"column_depth,omitempty"`

	// Enables column only or column and row based FEC.
	// +kubebuilder:validation:Optional
	IncludeFec *string `json:"includeFec,omitempty" tf:"include_fec,omitempty"`

	// The width of the FEC protection matrix.
	// +kubebuilder:validation:Optional
	RowLength *float64 `json:"rowLength,omitempty" tf:"row_length,omitempty"`
}

type FilterSettingsInitParameters struct {

	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings []TemporalFilterSettingsInitParameters `json:"temporalFilterSettings,omitempty" tf:"temporal_filter_settings,omitempty"`
}

type FilterSettingsObservation struct {

	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings []TemporalFilterSettingsObservation `json:"temporalFilterSettings,omitempty" tf:"temporal_filter_settings,omitempty"`
}

type FilterSettingsParameters struct {

	// Temporal filter settings. See Temporal Filter Settings
	// +kubebuilder:validation:Optional
	TemporalFilterSettings []TemporalFilterSettingsParameters `json:"temporalFilterSettings,omitempty" tf:"temporal_filter_settings,omitempty"`
}

type FilterSettingsTemporalFilterSettingsInitParameters struct {

	// Post filter sharpening.
	PostFilterSharpening *string `json:"postFilterSharpening,omitempty" tf:"post_filter_sharpening,omitempty"`

	// Filter strength.
	Strength *string `json:"strength,omitempty" tf:"strength,omitempty"`
}

type FilterSettingsTemporalFilterSettingsObservation struct {

	// Post filter sharpening.
	PostFilterSharpening *string `json:"postFilterSharpening,omitempty" tf:"post_filter_sharpening,omitempty"`

	// Filter strength.
	Strength *string `json:"strength,omitempty" tf:"strength,omitempty"`
}

type FilterSettingsTemporalFilterSettingsParameters struct {

	// Post filter sharpening.
	// +kubebuilder:validation:Optional
	PostFilterSharpening *string `json:"postFilterSharpening,omitempty" tf:"post_filter_sharpening,omitempty"`

	// Filter strength.
	// +kubebuilder:validation:Optional
	Strength *string `json:"strength,omitempty" tf:"strength,omitempty"`
}

type Fmp4HlsSettingsInitParameters struct {
	AudioRenditionSets *string `json:"audioRenditionSets,omitempty" tf:"audio_rendition_sets,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`
}

type Fmp4HlsSettingsObservation struct {
	AudioRenditionSets *string `json:"audioRenditionSets,omitempty" tf:"audio_rendition_sets,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`
}

type Fmp4HlsSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AudioRenditionSets *string `json:"audioRenditionSets,omitempty" tf:"audio_rendition_sets,omitempty"`

	// +kubebuilder:validation:Optional
	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`
}

type FontInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type FontObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type FontParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type FrameCaptureCdnSettingsInitParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureS3Settings []FrameCaptureS3SettingsInitParameters `json:"frameCaptureS3Settings,omitempty" tf:"frame_capture_s3_settings,omitempty"`
}

type FrameCaptureCdnSettingsObservation struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureS3Settings []FrameCaptureS3SettingsObservation `json:"frameCaptureS3Settings,omitempty" tf:"frame_capture_s3_settings,omitempty"`
}

type FrameCaptureCdnSettingsParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	FrameCaptureS3Settings []FrameCaptureS3SettingsParameters `json:"frameCaptureS3Settings,omitempty" tf:"frame_capture_s3_settings,omitempty"`
}

type FrameCaptureGroupSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type FrameCaptureGroupSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type FrameCaptureGroupSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type FrameCaptureGroupSettingsInitParameters struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []FrameCaptureGroupSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureCdnSettings []FrameCaptureCdnSettingsInitParameters `json:"frameCaptureCdnSettings,omitempty" tf:"frame_capture_cdn_settings,omitempty"`
}

type FrameCaptureGroupSettingsObservation struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []FrameCaptureGroupSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureCdnSettings []FrameCaptureCdnSettingsObservation `json:"frameCaptureCdnSettings,omitempty" tf:"frame_capture_cdn_settings,omitempty"`
}

type FrameCaptureGroupSettingsParameters struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []FrameCaptureGroupSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	FrameCaptureCdnSettings []FrameCaptureCdnSettingsParameters `json:"frameCaptureCdnSettings,omitempty" tf:"frame_capture_cdn_settings,omitempty"`
}

type FrameCaptureHlsSettingsInitParameters struct {
}

type FrameCaptureHlsSettingsObservation struct {
}

type FrameCaptureHlsSettingsParameters struct {
}

type FrameCaptureOutputSettingsInitParameters struct {

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type FrameCaptureOutputSettingsObservation struct {

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type FrameCaptureOutputSettingsParameters struct {

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type FrameCaptureS3SettingsInitParameters struct {

	// Specify the canned ACL to apply to each S3 request.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type FrameCaptureS3SettingsObservation struct {

	// Specify the canned ACL to apply to each S3 request.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type FrameCaptureS3SettingsParameters struct {

	// Specify the canned ACL to apply to each S3 request.
	// +kubebuilder:validation:Optional
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type FrameCaptureSettingsInitParameters struct {

	// The frequency at which to capture frames for inclusion in the output.
	CaptureInterval *float64 `json:"captureInterval,omitempty" tf:"capture_interval,omitempty"`

	// Unit for the frame capture interval.
	CaptureIntervalUnits *string `json:"captureIntervalUnits,omitempty" tf:"capture_interval_units,omitempty"`
}

type FrameCaptureSettingsObservation struct {

	// The frequency at which to capture frames for inclusion in the output.
	CaptureInterval *float64 `json:"captureInterval,omitempty" tf:"capture_interval,omitempty"`

	// Unit for the frame capture interval.
	CaptureIntervalUnits *string `json:"captureIntervalUnits,omitempty" tf:"capture_interval_units,omitempty"`
}

type FrameCaptureSettingsParameters struct {

	// The frequency at which to capture frames for inclusion in the output.
	// +kubebuilder:validation:Optional
	CaptureInterval *float64 `json:"captureInterval,omitempty" tf:"capture_interval,omitempty"`

	// Unit for the frame capture interval.
	// +kubebuilder:validation:Optional
	CaptureIntervalUnits *string `json:"captureIntervalUnits,omitempty" tf:"capture_interval_units,omitempty"`
}

type GlobalConfigurationInitParameters struct {

	// –  Value to set the initial audio gain for the Live Event.
	InitialAudioGain *float64 `json:"initialAudioGain,omitempty" tf:"initial_audio_gain,omitempty"`

	// of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
	InputEndAction *string `json:"inputEndAction,omitempty" tf:"input_end_action,omitempty"`

	// Settings for system actions when input is lost. See Input Loss Behavior for more details.
	InputLossBehavior []InputLossBehaviorInitParameters `json:"inputLossBehavior,omitempty" tf:"input_loss_behavior,omitempty"`

	// MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
	OutputLockingMode *string `json:"outputLockingMode,omitempty" tf:"output_locking_mode,omitempty"`

	// –  Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
	OutputTimingSource *string `json:"outputTimingSource,omitempty" tf:"output_timing_source,omitempty"`

	// –  Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
	SupportLowFramerateInputs *string `json:"supportLowFramerateInputs,omitempty" tf:"support_low_framerate_inputs,omitempty"`
}

type GlobalConfigurationObservation struct {

	// –  Value to set the initial audio gain for the Live Event.
	InitialAudioGain *float64 `json:"initialAudioGain,omitempty" tf:"initial_audio_gain,omitempty"`

	// of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
	InputEndAction *string `json:"inputEndAction,omitempty" tf:"input_end_action,omitempty"`

	// Settings for system actions when input is lost. See Input Loss Behavior for more details.
	InputLossBehavior []InputLossBehaviorObservation `json:"inputLossBehavior,omitempty" tf:"input_loss_behavior,omitempty"`

	// MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
	OutputLockingMode *string `json:"outputLockingMode,omitempty" tf:"output_locking_mode,omitempty"`

	// –  Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
	OutputTimingSource *string `json:"outputTimingSource,omitempty" tf:"output_timing_source,omitempty"`

	// –  Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
	SupportLowFramerateInputs *string `json:"supportLowFramerateInputs,omitempty" tf:"support_low_framerate_inputs,omitempty"`
}

type GlobalConfigurationParameters struct {

	// –  Value to set the initial audio gain for the Live Event.
	// +kubebuilder:validation:Optional
	InitialAudioGain *float64 `json:"initialAudioGain,omitempty" tf:"initial_audio_gain,omitempty"`

	// of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When “none” is configured the encoder will transcode either black, a solid color, or a user specified slate images per the “Input Loss Behavior” configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
	// +kubebuilder:validation:Optional
	InputEndAction *string `json:"inputEndAction,omitempty" tf:"input_end_action,omitempty"`

	// Settings for system actions when input is lost. See Input Loss Behavior for more details.
	// +kubebuilder:validation:Optional
	InputLossBehavior []InputLossBehaviorParameters `json:"inputLossBehavior,omitempty" tf:"input_loss_behavior,omitempty"`

	// MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
	// +kubebuilder:validation:Optional
	OutputLockingMode *string `json:"outputLockingMode,omitempty" tf:"output_locking_mode,omitempty"`

	// –  Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
	// +kubebuilder:validation:Optional
	OutputTimingSource *string `json:"outputTimingSource,omitempty" tf:"output_timing_source,omitempty"`

	// –  Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
	// +kubebuilder:validation:Optional
	SupportLowFramerateInputs *string `json:"supportLowFramerateInputs,omitempty" tf:"support_low_framerate_inputs,omitempty"`
}

type H264SettingsInitParameters struct {

	// Enables or disables adaptive quantization.
	AdaptiveQuantization *string `json:"adaptiveQuantization,omitempty" tf:"adaptive_quantization,omitempty"`

	// Indicates that AFD values will be written into the output stream.
	AfdSignaling *string `json:"afdSignaling,omitempty" tf:"afd_signaling,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	BufFillPct *float64 `json:"bufFillPct,omitempty" tf:"buf_fill_pct,omitempty"`

	// Size of buffer in bits.
	BufSize *float64 `json:"bufSize,omitempty" tf:"buf_size,omitempty"`

	// Includes color space metadata in the output.
	ColorMetadata *string `json:"colorMetadata,omitempty" tf:"color_metadata,omitempty"`

	// Entropy encoding mode.
	EntropyEncoding *string `json:"entropyEncoding,omitempty" tf:"entropy_encoding,omitempty"`

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings []FilterSettingsInitParameters `json:"filterSettings,omitempty" tf:"filter_settings,omitempty"`

	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd *string `json:"fixedAfd,omitempty" tf:"fixed_afd,omitempty"`

	FlickerAq *string `json:"flickerAq,omitempty" tf:"flicker_aq,omitempty"`

	// Controls whether coding is performed on a field basis or on a frame basis.
	ForceFieldPictures *string `json:"forceFieldPictures,omitempty" tf:"force_field_pictures,omitempty"`

	// Indicates how the output video frame rate is specified.
	FramerateControl *string `json:"framerateControl,omitempty" tf:"framerate_control,omitempty"`

	// Framerate denominator.
	FramerateDenominator *float64 `json:"framerateDenominator,omitempty" tf:"framerate_denominator,omitempty"`

	// Framerate numerator.
	FramerateNumerator *float64 `json:"framerateNumerator,omitempty" tf:"framerate_numerator,omitempty"`

	// GOP-B reference.
	GopBReference *string `json:"gopBReference,omitempty" tf:"gop_b_reference,omitempty"`

	// Frequency of closed GOPs.
	GopClosedCadence *float64 `json:"gopClosedCadence,omitempty" tf:"gop_closed_cadence,omitempty"`

	// Number of B-frames between reference frames.
	GopNumBFrames *float64 `json:"gopNumBFrames,omitempty" tf:"gop_num_b_frames,omitempty"`

	// GOP size in units of either frames of seconds per gop_size_units.
	GopSize *float64 `json:"gopSize,omitempty" tf:"gop_size,omitempty"`

	// Indicates if the gop_size is specified in frames or seconds.
	GopSizeUnits *string `json:"gopSizeUnits,omitempty" tf:"gop_size_units,omitempty"`

	// H264 level.
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amount of lookahead.
	LookAheadRateControl *string `json:"lookAheadRateControl,omitempty" tf:"look_ahead_rate_control,omitempty"`

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate *float64 `json:"maxBitrate,omitempty" tf:"max_bitrate,omitempty"`

	MinIInterval *float64 `json:"minIInterval,omitempty" tf:"min_i_interval,omitempty"`

	// Number of reference frames to use.
	NumRefFrames *float64 `json:"numRefFrames,omitempty" tf:"num_ref_frames,omitempty"`

	// Indicates how the output pixel aspect ratio is specified.
	ParControl *string `json:"parControl,omitempty" tf:"par_control,omitempty"`

	// Pixel Aspect Ratio denominator.
	ParDenominator *float64 `json:"parDenominator,omitempty" tf:"par_denominator,omitempty"`

	// Pixel Aspect Ratio numerator.
	ParNumerator *float64 `json:"parNumerator,omitempty" tf:"par_numerator,omitempty"`

	// AAC profile.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Quality level.
	QualityLevel *string `json:"qualityLevel,omitempty" tf:"quality_level,omitempty"`

	// Controls the target quality for the video encode.
	QvbrQualityLevel *float64 `json:"qvbrQualityLevel,omitempty" tf:"qvbr_quality_level,omitempty"`

	// The rate control mode.
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets the scan type of the output.
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Scene change detection.
	SceneChangeDetect *string `json:"sceneChangeDetect,omitempty" tf:"scene_change_detect,omitempty"`

	// Number of slices per picture.
	Slices *float64 `json:"slices,omitempty" tf:"slices,omitempty"`

	// Softness.
	Softness *float64 `json:"softness,omitempty" tf:"softness,omitempty"`

	// Makes adjustments within each frame based on spatial variation of content complexity.
	SpatialAq *string `json:"spatialAq,omitempty" tf:"spatial_aq,omitempty"`

	// Subgop length.
	SubgopLength *string `json:"subgopLength,omitempty" tf:"subgop_length,omitempty"`

	// Produces a bitstream compliant with SMPTE RP-2027.
	Syntax *string `json:"syntax,omitempty" tf:"syntax,omitempty"`

	// Makes adjustments within each frame based on temporal variation of content complexity.
	TemporalAq *string `json:"temporalAq,omitempty" tf:"temporal_aq,omitempty"`

	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion *string `json:"timecodeInsertion,omitempty" tf:"timecode_insertion,omitempty"`
}

type H264SettingsObservation struct {

	// Enables or disables adaptive quantization.
	AdaptiveQuantization *string `json:"adaptiveQuantization,omitempty" tf:"adaptive_quantization,omitempty"`

	// Indicates that AFD values will be written into the output stream.
	AfdSignaling *string `json:"afdSignaling,omitempty" tf:"afd_signaling,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	BufFillPct *float64 `json:"bufFillPct,omitempty" tf:"buf_fill_pct,omitempty"`

	// Size of buffer in bits.
	BufSize *float64 `json:"bufSize,omitempty" tf:"buf_size,omitempty"`

	// Includes color space metadata in the output.
	ColorMetadata *string `json:"colorMetadata,omitempty" tf:"color_metadata,omitempty"`

	// Entropy encoding mode.
	EntropyEncoding *string `json:"entropyEncoding,omitempty" tf:"entropy_encoding,omitempty"`

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings []FilterSettingsObservation `json:"filterSettings,omitempty" tf:"filter_settings,omitempty"`

	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd *string `json:"fixedAfd,omitempty" tf:"fixed_afd,omitempty"`

	FlickerAq *string `json:"flickerAq,omitempty" tf:"flicker_aq,omitempty"`

	// Controls whether coding is performed on a field basis or on a frame basis.
	ForceFieldPictures *string `json:"forceFieldPictures,omitempty" tf:"force_field_pictures,omitempty"`

	// Indicates how the output video frame rate is specified.
	FramerateControl *string `json:"framerateControl,omitempty" tf:"framerate_control,omitempty"`

	// Framerate denominator.
	FramerateDenominator *float64 `json:"framerateDenominator,omitempty" tf:"framerate_denominator,omitempty"`

	// Framerate numerator.
	FramerateNumerator *float64 `json:"framerateNumerator,omitempty" tf:"framerate_numerator,omitempty"`

	// GOP-B reference.
	GopBReference *string `json:"gopBReference,omitempty" tf:"gop_b_reference,omitempty"`

	// Frequency of closed GOPs.
	GopClosedCadence *float64 `json:"gopClosedCadence,omitempty" tf:"gop_closed_cadence,omitempty"`

	// Number of B-frames between reference frames.
	GopNumBFrames *float64 `json:"gopNumBFrames,omitempty" tf:"gop_num_b_frames,omitempty"`

	// GOP size in units of either frames of seconds per gop_size_units.
	GopSize *float64 `json:"gopSize,omitempty" tf:"gop_size,omitempty"`

	// Indicates if the gop_size is specified in frames or seconds.
	GopSizeUnits *string `json:"gopSizeUnits,omitempty" tf:"gop_size_units,omitempty"`

	// H264 level.
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amount of lookahead.
	LookAheadRateControl *string `json:"lookAheadRateControl,omitempty" tf:"look_ahead_rate_control,omitempty"`

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate *float64 `json:"maxBitrate,omitempty" tf:"max_bitrate,omitempty"`

	MinIInterval *float64 `json:"minIInterval,omitempty" tf:"min_i_interval,omitempty"`

	// Number of reference frames to use.
	NumRefFrames *float64 `json:"numRefFrames,omitempty" tf:"num_ref_frames,omitempty"`

	// Indicates how the output pixel aspect ratio is specified.
	ParControl *string `json:"parControl,omitempty" tf:"par_control,omitempty"`

	// Pixel Aspect Ratio denominator.
	ParDenominator *float64 `json:"parDenominator,omitempty" tf:"par_denominator,omitempty"`

	// Pixel Aspect Ratio numerator.
	ParNumerator *float64 `json:"parNumerator,omitempty" tf:"par_numerator,omitempty"`

	// AAC profile.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Quality level.
	QualityLevel *string `json:"qualityLevel,omitempty" tf:"quality_level,omitempty"`

	// Controls the target quality for the video encode.
	QvbrQualityLevel *float64 `json:"qvbrQualityLevel,omitempty" tf:"qvbr_quality_level,omitempty"`

	// The rate control mode.
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets the scan type of the output.
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Scene change detection.
	SceneChangeDetect *string `json:"sceneChangeDetect,omitempty" tf:"scene_change_detect,omitempty"`

	// Number of slices per picture.
	Slices *float64 `json:"slices,omitempty" tf:"slices,omitempty"`

	// Softness.
	Softness *float64 `json:"softness,omitempty" tf:"softness,omitempty"`

	// Makes adjustments within each frame based on spatial variation of content complexity.
	SpatialAq *string `json:"spatialAq,omitempty" tf:"spatial_aq,omitempty"`

	// Subgop length.
	SubgopLength *string `json:"subgopLength,omitempty" tf:"subgop_length,omitempty"`

	// Produces a bitstream compliant with SMPTE RP-2027.
	Syntax *string `json:"syntax,omitempty" tf:"syntax,omitempty"`

	// Makes adjustments within each frame based on temporal variation of content complexity.
	TemporalAq *string `json:"temporalAq,omitempty" tf:"temporal_aq,omitempty"`

	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion *string `json:"timecodeInsertion,omitempty" tf:"timecode_insertion,omitempty"`
}

type H264SettingsParameters struct {

	// Enables or disables adaptive quantization.
	// +kubebuilder:validation:Optional
	AdaptiveQuantization *string `json:"adaptiveQuantization,omitempty" tf:"adaptive_quantization,omitempty"`

	// Indicates that AFD values will be written into the output stream.
	// +kubebuilder:validation:Optional
	AfdSignaling *string `json:"afdSignaling,omitempty" tf:"afd_signaling,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	BufFillPct *float64 `json:"bufFillPct,omitempty" tf:"buf_fill_pct,omitempty"`

	// Size of buffer in bits.
	// +kubebuilder:validation:Optional
	BufSize *float64 `json:"bufSize,omitempty" tf:"buf_size,omitempty"`

	// Includes color space metadata in the output.
	// +kubebuilder:validation:Optional
	ColorMetadata *string `json:"colorMetadata,omitempty" tf:"color_metadata,omitempty"`

	// Entropy encoding mode.
	// +kubebuilder:validation:Optional
	EntropyEncoding *string `json:"entropyEncoding,omitempty" tf:"entropy_encoding,omitempty"`

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	// +kubebuilder:validation:Optional
	FilterSettings []FilterSettingsParameters `json:"filterSettings,omitempty" tf:"filter_settings,omitempty"`

	// Four bit AFD value to write on all frames of video in the output stream.
	// +kubebuilder:validation:Optional
	FixedAfd *string `json:"fixedAfd,omitempty" tf:"fixed_afd,omitempty"`

	// +kubebuilder:validation:Optional
	FlickerAq *string `json:"flickerAq,omitempty" tf:"flicker_aq,omitempty"`

	// Controls whether coding is performed on a field basis or on a frame basis.
	// +kubebuilder:validation:Optional
	ForceFieldPictures *string `json:"forceFieldPictures,omitempty" tf:"force_field_pictures,omitempty"`

	// Indicates how the output video frame rate is specified.
	// +kubebuilder:validation:Optional
	FramerateControl *string `json:"framerateControl,omitempty" tf:"framerate_control,omitempty"`

	// Framerate denominator.
	// +kubebuilder:validation:Optional
	FramerateDenominator *float64 `json:"framerateDenominator,omitempty" tf:"framerate_denominator,omitempty"`

	// Framerate numerator.
	// +kubebuilder:validation:Optional
	FramerateNumerator *float64 `json:"framerateNumerator,omitempty" tf:"framerate_numerator,omitempty"`

	// GOP-B reference.
	// +kubebuilder:validation:Optional
	GopBReference *string `json:"gopBReference,omitempty" tf:"gop_b_reference,omitempty"`

	// Frequency of closed GOPs.
	// +kubebuilder:validation:Optional
	GopClosedCadence *float64 `json:"gopClosedCadence,omitempty" tf:"gop_closed_cadence,omitempty"`

	// Number of B-frames between reference frames.
	// +kubebuilder:validation:Optional
	GopNumBFrames *float64 `json:"gopNumBFrames,omitempty" tf:"gop_num_b_frames,omitempty"`

	// GOP size in units of either frames of seconds per gop_size_units.
	// +kubebuilder:validation:Optional
	GopSize *float64 `json:"gopSize,omitempty" tf:"gop_size,omitempty"`

	// Indicates if the gop_size is specified in frames or seconds.
	// +kubebuilder:validation:Optional
	GopSizeUnits *string `json:"gopSizeUnits,omitempty" tf:"gop_size_units,omitempty"`

	// H264 level.
	// +kubebuilder:validation:Optional
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amount of lookahead.
	// +kubebuilder:validation:Optional
	LookAheadRateControl *string `json:"lookAheadRateControl,omitempty" tf:"look_ahead_rate_control,omitempty"`

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	// +kubebuilder:validation:Optional
	MaxBitrate *float64 `json:"maxBitrate,omitempty" tf:"max_bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	MinIInterval *float64 `json:"minIInterval,omitempty" tf:"min_i_interval,omitempty"`

	// Number of reference frames to use.
	// +kubebuilder:validation:Optional
	NumRefFrames *float64 `json:"numRefFrames,omitempty" tf:"num_ref_frames,omitempty"`

	// Indicates how the output pixel aspect ratio is specified.
	// +kubebuilder:validation:Optional
	ParControl *string `json:"parControl,omitempty" tf:"par_control,omitempty"`

	// Pixel Aspect Ratio denominator.
	// +kubebuilder:validation:Optional
	ParDenominator *float64 `json:"parDenominator,omitempty" tf:"par_denominator,omitempty"`

	// Pixel Aspect Ratio numerator.
	// +kubebuilder:validation:Optional
	ParNumerator *float64 `json:"parNumerator,omitempty" tf:"par_numerator,omitempty"`

	// AAC profile.
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Quality level.
	// +kubebuilder:validation:Optional
	QualityLevel *string `json:"qualityLevel,omitempty" tf:"quality_level,omitempty"`

	// Controls the target quality for the video encode.
	// +kubebuilder:validation:Optional
	QvbrQualityLevel *float64 `json:"qvbrQualityLevel,omitempty" tf:"qvbr_quality_level,omitempty"`

	// The rate control mode.
	// +kubebuilder:validation:Optional
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets the scan type of the output.
	// +kubebuilder:validation:Optional
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Scene change detection.
	// +kubebuilder:validation:Optional
	SceneChangeDetect *string `json:"sceneChangeDetect,omitempty" tf:"scene_change_detect,omitempty"`

	// Number of slices per picture.
	// +kubebuilder:validation:Optional
	Slices *float64 `json:"slices,omitempty" tf:"slices,omitempty"`

	// Softness.
	// +kubebuilder:validation:Optional
	Softness *float64 `json:"softness,omitempty" tf:"softness,omitempty"`

	// Makes adjustments within each frame based on spatial variation of content complexity.
	// +kubebuilder:validation:Optional
	SpatialAq *string `json:"spatialAq,omitempty" tf:"spatial_aq,omitempty"`

	// Subgop length.
	// +kubebuilder:validation:Optional
	SubgopLength *string `json:"subgopLength,omitempty" tf:"subgop_length,omitempty"`

	// Produces a bitstream compliant with SMPTE RP-2027.
	// +kubebuilder:validation:Optional
	Syntax *string `json:"syntax,omitempty" tf:"syntax,omitempty"`

	// Makes adjustments within each frame based on temporal variation of content complexity.
	// +kubebuilder:validation:Optional
	TemporalAq *string `json:"temporalAq,omitempty" tf:"temporal_aq,omitempty"`

	// Determines how timecodes should be inserted into the video elementary stream.
	// +kubebuilder:validation:Optional
	TimecodeInsertion *string `json:"timecodeInsertion,omitempty" tf:"timecode_insertion,omitempty"`
}

type H265SettingsFilterSettingsInitParameters struct {

	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings []FilterSettingsTemporalFilterSettingsInitParameters `json:"temporalFilterSettings,omitempty" tf:"temporal_filter_settings,omitempty"`
}

type H265SettingsFilterSettingsObservation struct {

	// Temporal filter settings. See Temporal Filter Settings
	TemporalFilterSettings []FilterSettingsTemporalFilterSettingsObservation `json:"temporalFilterSettings,omitempty" tf:"temporal_filter_settings,omitempty"`
}

type H265SettingsFilterSettingsParameters struct {

	// Temporal filter settings. See Temporal Filter Settings
	// +kubebuilder:validation:Optional
	TemporalFilterSettings []FilterSettingsTemporalFilterSettingsParameters `json:"temporalFilterSettings,omitempty" tf:"temporal_filter_settings,omitempty"`
}

type H265SettingsInitParameters struct {

	// Enables or disables adaptive quantization.
	AdaptiveQuantization *string `json:"adaptiveQuantization,omitempty" tf:"adaptive_quantization,omitempty"`

	// Indicates that AFD values will be written into the output stream.
	AfdSignaling *string `json:"afdSignaling,omitempty" tf:"afd_signaling,omitempty"`

	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	AlternativeTransferFunction *string `json:"alternativeTransferFunction,omitempty" tf:"alternative_transfer_function,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Size of buffer in bits.
	BufSize *float64 `json:"bufSize,omitempty" tf:"buf_size,omitempty"`

	// Includes color space metadata in the output.
	ColorMetadata *string `json:"colorMetadata,omitempty" tf:"color_metadata,omitempty"`

	// Define the color metadata for the output. H265 Color Space Settings for more details.
	ColorSpaceSettings []ColorSpaceSettingsInitParameters `json:"colorSpaceSettings,omitempty" tf:"color_space_settings,omitempty"`

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings []H265SettingsFilterSettingsInitParameters `json:"filterSettings,omitempty" tf:"filter_settings,omitempty"`

	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd *string `json:"fixedAfd,omitempty" tf:"fixed_afd,omitempty"`

	FlickerAq *string `json:"flickerAq,omitempty" tf:"flicker_aq,omitempty"`

	// Framerate denominator.
	FramerateDenominator *float64 `json:"framerateDenominator,omitempty" tf:"framerate_denominator,omitempty"`

	// Framerate numerator.
	FramerateNumerator *float64 `json:"framerateNumerator,omitempty" tf:"framerate_numerator,omitempty"`

	// Frequency of closed GOPs.
	GopClosedCadence *float64 `json:"gopClosedCadence,omitempty" tf:"gop_closed_cadence,omitempty"`

	// GOP size in units of either frames of seconds per gop_size_units.
	GopSize *float64 `json:"gopSize,omitempty" tf:"gop_size,omitempty"`

	// Indicates if the gop_size is specified in frames or seconds.
	GopSizeUnits *string `json:"gopSizeUnits,omitempty" tf:"gop_size_units,omitempty"`

	// H264 level.
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amount of lookahead.
	LookAheadRateControl *string `json:"lookAheadRateControl,omitempty" tf:"look_ahead_rate_control,omitempty"`

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate *float64 `json:"maxBitrate,omitempty" tf:"max_bitrate,omitempty"`

	MinIInterval *float64 `json:"minIInterval,omitempty" tf:"min_i_interval,omitempty"`

	// Pixel Aspect Ratio denominator.
	ParDenominator *float64 `json:"parDenominator,omitempty" tf:"par_denominator,omitempty"`

	// Pixel Aspect Ratio numerator.
	ParNumerator *float64 `json:"parNumerator,omitempty" tf:"par_numerator,omitempty"`

	// AAC profile.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Controls the target quality for the video encode.
	QvbrQualityLevel *float64 `json:"qvbrQualityLevel,omitempty" tf:"qvbr_quality_level,omitempty"`

	// The rate control mode.
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets the scan type of the output.
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Scene change detection.
	SceneChangeDetect *string `json:"sceneChangeDetect,omitempty" tf:"scene_change_detect,omitempty"`

	// Number of slices per picture.
	Slices *float64 `json:"slices,omitempty" tf:"slices,omitempty"`

	// Set the H265 tier in the output.
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	TimecodeBurninSettings []TimecodeBurninSettingsInitParameters `json:"timecodeBurninSettings,omitempty" tf:"timecode_burnin_settings,omitempty"`

	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion *string `json:"timecodeInsertion,omitempty" tf:"timecode_insertion,omitempty"`
}

type H265SettingsObservation struct {

	// Enables or disables adaptive quantization.
	AdaptiveQuantization *string `json:"adaptiveQuantization,omitempty" tf:"adaptive_quantization,omitempty"`

	// Indicates that AFD values will be written into the output stream.
	AfdSignaling *string `json:"afdSignaling,omitempty" tf:"afd_signaling,omitempty"`

	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	AlternativeTransferFunction *string `json:"alternativeTransferFunction,omitempty" tf:"alternative_transfer_function,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Size of buffer in bits.
	BufSize *float64 `json:"bufSize,omitempty" tf:"buf_size,omitempty"`

	// Includes color space metadata in the output.
	ColorMetadata *string `json:"colorMetadata,omitempty" tf:"color_metadata,omitempty"`

	// Define the color metadata for the output. H265 Color Space Settings for more details.
	ColorSpaceSettings []ColorSpaceSettingsObservation `json:"colorSpaceSettings,omitempty" tf:"color_space_settings,omitempty"`

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	FilterSettings []H265SettingsFilterSettingsObservation `json:"filterSettings,omitempty" tf:"filter_settings,omitempty"`

	// Four bit AFD value to write on all frames of video in the output stream.
	FixedAfd *string `json:"fixedAfd,omitempty" tf:"fixed_afd,omitempty"`

	FlickerAq *string `json:"flickerAq,omitempty" tf:"flicker_aq,omitempty"`

	// Framerate denominator.
	FramerateDenominator *float64 `json:"framerateDenominator,omitempty" tf:"framerate_denominator,omitempty"`

	// Framerate numerator.
	FramerateNumerator *float64 `json:"framerateNumerator,omitempty" tf:"framerate_numerator,omitempty"`

	// Frequency of closed GOPs.
	GopClosedCadence *float64 `json:"gopClosedCadence,omitempty" tf:"gop_closed_cadence,omitempty"`

	// GOP size in units of either frames of seconds per gop_size_units.
	GopSize *float64 `json:"gopSize,omitempty" tf:"gop_size,omitempty"`

	// Indicates if the gop_size is specified in frames or seconds.
	GopSizeUnits *string `json:"gopSizeUnits,omitempty" tf:"gop_size_units,omitempty"`

	// H264 level.
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amount of lookahead.
	LookAheadRateControl *string `json:"lookAheadRateControl,omitempty" tf:"look_ahead_rate_control,omitempty"`

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	MaxBitrate *float64 `json:"maxBitrate,omitempty" tf:"max_bitrate,omitempty"`

	MinIInterval *float64 `json:"minIInterval,omitempty" tf:"min_i_interval,omitempty"`

	// Pixel Aspect Ratio denominator.
	ParDenominator *float64 `json:"parDenominator,omitempty" tf:"par_denominator,omitempty"`

	// Pixel Aspect Ratio numerator.
	ParNumerator *float64 `json:"parNumerator,omitempty" tf:"par_numerator,omitempty"`

	// AAC profile.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Controls the target quality for the video encode.
	QvbrQualityLevel *float64 `json:"qvbrQualityLevel,omitempty" tf:"qvbr_quality_level,omitempty"`

	// The rate control mode.
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets the scan type of the output.
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Scene change detection.
	SceneChangeDetect *string `json:"sceneChangeDetect,omitempty" tf:"scene_change_detect,omitempty"`

	// Number of slices per picture.
	Slices *float64 `json:"slices,omitempty" tf:"slices,omitempty"`

	// Set the H265 tier in the output.
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	TimecodeBurninSettings []TimecodeBurninSettingsObservation `json:"timecodeBurninSettings,omitempty" tf:"timecode_burnin_settings,omitempty"`

	// Determines how timecodes should be inserted into the video elementary stream.
	TimecodeInsertion *string `json:"timecodeInsertion,omitempty" tf:"timecode_insertion,omitempty"`
}

type H265SettingsParameters struct {

	// Enables or disables adaptive quantization.
	// +kubebuilder:validation:Optional
	AdaptiveQuantization *string `json:"adaptiveQuantization,omitempty" tf:"adaptive_quantization,omitempty"`

	// Indicates that AFD values will be written into the output stream.
	// +kubebuilder:validation:Optional
	AfdSignaling *string `json:"afdSignaling,omitempty" tf:"afd_signaling,omitempty"`

	// Whether or not EML should insert an Alternative Transfer Function SEI message.
	// +kubebuilder:validation:Optional
	AlternativeTransferFunction *string `json:"alternativeTransferFunction,omitempty" tf:"alternative_transfer_function,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate" tf:"bitrate,omitempty"`

	// Size of buffer in bits.
	// +kubebuilder:validation:Optional
	BufSize *float64 `json:"bufSize,omitempty" tf:"buf_size,omitempty"`

	// Includes color space metadata in the output.
	// +kubebuilder:validation:Optional
	ColorMetadata *string `json:"colorMetadata,omitempty" tf:"color_metadata,omitempty"`

	// Define the color metadata for the output. H265 Color Space Settings for more details.
	// +kubebuilder:validation:Optional
	ColorSpaceSettings []ColorSpaceSettingsParameters `json:"colorSpaceSettings,omitempty" tf:"color_space_settings,omitempty"`

	// Filters to apply to an encode. See H264 Filter Settings for more details.
	// +kubebuilder:validation:Optional
	FilterSettings []H265SettingsFilterSettingsParameters `json:"filterSettings,omitempty" tf:"filter_settings,omitempty"`

	// Four bit AFD value to write on all frames of video in the output stream.
	// +kubebuilder:validation:Optional
	FixedAfd *string `json:"fixedAfd,omitempty" tf:"fixed_afd,omitempty"`

	// +kubebuilder:validation:Optional
	FlickerAq *string `json:"flickerAq,omitempty" tf:"flicker_aq,omitempty"`

	// Framerate denominator.
	// +kubebuilder:validation:Optional
	FramerateDenominator *float64 `json:"framerateDenominator" tf:"framerate_denominator,omitempty"`

	// Framerate numerator.
	// +kubebuilder:validation:Optional
	FramerateNumerator *float64 `json:"framerateNumerator" tf:"framerate_numerator,omitempty"`

	// Frequency of closed GOPs.
	// +kubebuilder:validation:Optional
	GopClosedCadence *float64 `json:"gopClosedCadence,omitempty" tf:"gop_closed_cadence,omitempty"`

	// GOP size in units of either frames of seconds per gop_size_units.
	// +kubebuilder:validation:Optional
	GopSize *float64 `json:"gopSize,omitempty" tf:"gop_size,omitempty"`

	// Indicates if the gop_size is specified in frames or seconds.
	// +kubebuilder:validation:Optional
	GopSizeUnits *string `json:"gopSizeUnits,omitempty" tf:"gop_size_units,omitempty"`

	// H264 level.
	// +kubebuilder:validation:Optional
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// Amount of lookahead.
	// +kubebuilder:validation:Optional
	LookAheadRateControl *string `json:"lookAheadRateControl,omitempty" tf:"look_ahead_rate_control,omitempty"`

	// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
	// +kubebuilder:validation:Optional
	MaxBitrate *float64 `json:"maxBitrate,omitempty" tf:"max_bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	MinIInterval *float64 `json:"minIInterval,omitempty" tf:"min_i_interval,omitempty"`

	// Pixel Aspect Ratio denominator.
	// +kubebuilder:validation:Optional
	ParDenominator *float64 `json:"parDenominator,omitempty" tf:"par_denominator,omitempty"`

	// Pixel Aspect Ratio numerator.
	// +kubebuilder:validation:Optional
	ParNumerator *float64 `json:"parNumerator,omitempty" tf:"par_numerator,omitempty"`

	// AAC profile.
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// Controls the target quality for the video encode.
	// +kubebuilder:validation:Optional
	QvbrQualityLevel *float64 `json:"qvbrQualityLevel,omitempty" tf:"qvbr_quality_level,omitempty"`

	// The rate control mode.
	// +kubebuilder:validation:Optional
	RateControlMode *string `json:"rateControlMode,omitempty" tf:"rate_control_mode,omitempty"`

	// Sets the scan type of the output.
	// +kubebuilder:validation:Optional
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Scene change detection.
	// +kubebuilder:validation:Optional
	SceneChangeDetect *string `json:"sceneChangeDetect,omitempty" tf:"scene_change_detect,omitempty"`

	// Number of slices per picture.
	// +kubebuilder:validation:Optional
	Slices *float64 `json:"slices,omitempty" tf:"slices,omitempty"`

	// Set the H265 tier in the output.
	// +kubebuilder:validation:Optional
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`

	// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
	// +kubebuilder:validation:Optional
	TimecodeBurninSettings []TimecodeBurninSettingsParameters `json:"timecodeBurninSettings,omitempty" tf:"timecode_burnin_settings,omitempty"`

	// Determines how timecodes should be inserted into the video elementary stream.
	// +kubebuilder:validation:Optional
	TimecodeInsertion *string `json:"timecodeInsertion,omitempty" tf:"timecode_insertion,omitempty"`
}

type HTMLMotionGraphicsSettingsInitParameters struct {
}

type HTMLMotionGraphicsSettingsObservation struct {
}

type HTMLMotionGraphicsSettingsParameters struct {
}

type Hdr10SettingsInitParameters struct {

	// Sets the MaxCLL value for HDR10.
	MaxCll *float64 `json:"maxCll,omitempty" tf:"max_cll,omitempty"`

	// Sets the MaxFALL value for HDR10.
	MaxFall *float64 `json:"maxFall,omitempty" tf:"max_fall,omitempty"`
}

type Hdr10SettingsObservation struct {

	// Sets the MaxCLL value for HDR10.
	MaxCll *float64 `json:"maxCll,omitempty" tf:"max_cll,omitempty"`

	// Sets the MaxFALL value for HDR10.
	MaxFall *float64 `json:"maxFall,omitempty" tf:"max_fall,omitempty"`
}

type Hdr10SettingsParameters struct {

	// Sets the MaxCLL value for HDR10.
	// +kubebuilder:validation:Optional
	MaxCll *float64 `json:"maxCll,omitempty" tf:"max_cll,omitempty"`

	// Sets the MaxFALL value for HDR10.
	// +kubebuilder:validation:Optional
	MaxFall *float64 `json:"maxFall,omitempty" tf:"max_fall,omitempty"`
}

type HlsAkamaiSettingsInitParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	HTTPTransferMode *string `json:"httpTransferMode,omitempty" tf:"http_transfer_mode,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`

	Salt *string `json:"salt,omitempty" tf:"salt,omitempty"`

	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type HlsAkamaiSettingsObservation struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	HTTPTransferMode *string `json:"httpTransferMode,omitempty" tf:"http_transfer_mode,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`

	Salt *string `json:"salt,omitempty" tf:"salt,omitempty"`

	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type HlsAkamaiSettingsParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// +kubebuilder:validation:Optional
	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPTransferMode *string `json:"httpTransferMode,omitempty" tf:"http_transfer_mode,omitempty"`

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`

	// +kubebuilder:validation:Optional
	Salt *string `json:"salt,omitempty" tf:"salt,omitempty"`

	// +kubebuilder:validation:Optional
	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type HlsBasicPutSettingsInitParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsBasicPutSettingsObservation struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsBasicPutSettingsParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// +kubebuilder:validation:Optional
	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsCdnSettingsInitParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsAkamaiSettings []HlsAkamaiSettingsInitParameters `json:"hlsAkamaiSettings,omitempty" tf:"hls_akamai_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsBasicPutSettings []HlsBasicPutSettingsInitParameters `json:"hlsBasicPutSettings,omitempty" tf:"hls_basic_put_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsMediaStoreSettings []HlsMediaStoreSettingsInitParameters `json:"hlsMediaStoreSettings,omitempty" tf:"hls_media_store_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsS3Settings []HlsS3SettingsInitParameters `json:"hlsS3Settings,omitempty" tf:"hls_s3_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsWebdavSettings []HlsWebdavSettingsInitParameters `json:"hlsWebdavSettings,omitempty" tf:"hls_webdav_settings,omitempty"`
}

type HlsCdnSettingsObservation struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsAkamaiSettings []HlsAkamaiSettingsObservation `json:"hlsAkamaiSettings,omitempty" tf:"hls_akamai_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsBasicPutSettings []HlsBasicPutSettingsObservation `json:"hlsBasicPutSettings,omitempty" tf:"hls_basic_put_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsMediaStoreSettings []HlsMediaStoreSettingsObservation `json:"hlsMediaStoreSettings,omitempty" tf:"hls_media_store_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsS3Settings []HlsS3SettingsObservation `json:"hlsS3Settings,omitempty" tf:"hls_s3_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsWebdavSettings []HlsWebdavSettingsObservation `json:"hlsWebdavSettings,omitempty" tf:"hls_webdav_settings,omitempty"`
}

type HlsCdnSettingsParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsAkamaiSettings []HlsAkamaiSettingsParameters `json:"hlsAkamaiSettings,omitempty" tf:"hls_akamai_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsBasicPutSettings []HlsBasicPutSettingsParameters `json:"hlsBasicPutSettings,omitempty" tf:"hls_basic_put_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsMediaStoreSettings []HlsMediaStoreSettingsParameters `json:"hlsMediaStoreSettings,omitempty" tf:"hls_media_store_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsS3Settings []HlsS3SettingsParameters `json:"hlsS3Settings,omitempty" tf:"hls_s3_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsWebdavSettings []HlsWebdavSettingsParameters `json:"hlsWebdavSettings,omitempty" tf:"hls_webdav_settings,omitempty"`
}

type HlsGroupSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type HlsGroupSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type HlsGroupSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type HlsGroupSettingsInitParameters struct {

	// The ad marker type for this output group.
	AdMarkers []*string `json:"adMarkers,omitempty" tf:"ad_markers,omitempty"`

	BaseURLContent *string `json:"baseUrlContent,omitempty" tf:"base_url_content,omitempty"`

	BaseURLContent1 *string `json:"baseUrlContent1,omitempty" tf:"base_url_content1,omitempty"`

	BaseURLManifest *string `json:"baseUrlManifest,omitempty" tf:"base_url_manifest,omitempty"`

	BaseURLManifest1 *string `json:"baseUrlManifest1,omitempty" tf:"base_url_manifest1,omitempty"`

	CaptionLanguageMappings []CaptionLanguageMappingsInitParameters `json:"captionLanguageMappings,omitempty" tf:"caption_language_mappings,omitempty"`

	CaptionLanguageSetting *string `json:"captionLanguageSetting,omitempty" tf:"caption_language_setting,omitempty"`

	ClientCache *string `json:"clientCache,omitempty" tf:"client_cache,omitempty"`

	CodecSpecification *string `json:"codecSpecification,omitempty" tf:"codec_specification,omitempty"`

	ConstantIv *string `json:"constantIv,omitempty" tf:"constant_iv,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []HlsGroupSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	DirectoryStructure *string `json:"directoryStructure,omitempty" tf:"directory_structure,omitempty"`

	// Key-value map of resource tags.
	DiscontinuityTags *string `json:"discontinuityTags,omitempty" tf:"discontinuity_tags,omitempty"`

	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsCdnSettings []HlsCdnSettingsInitParameters `json:"hlsCdnSettings,omitempty" tf:"hls_cdn_settings,omitempty"`

	HlsId3SegmentTagging *string `json:"hlsId3SegmentTagging,omitempty" tf:"hls_id3_segment_tagging,omitempty"`

	IframeOnlyPlaylists *string `json:"iframeOnlyPlaylists,omitempty" tf:"iframe_only_playlists,omitempty"`

	IncompleteSegmentBehavior *string `json:"incompleteSegmentBehavior,omitempty" tf:"incomplete_segment_behavior,omitempty"`

	IndexNSegments *float64 `json:"indexNSegments,omitempty" tf:"index_n_segments,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	IvInManifest *string `json:"ivInManifest,omitempty" tf:"iv_in_manifest,omitempty"`

	// The source for the timecode that will be associated with the events outputs.
	IvSource *string `json:"ivSource,omitempty" tf:"iv_source,omitempty"`

	KeepSegments *float64 `json:"keepSegments,omitempty" tf:"keep_segments,omitempty"`

	KeyFormat *string `json:"keyFormat,omitempty" tf:"key_format,omitempty"`

	KeyFormatVersions *string `json:"keyFormatVersions,omitempty" tf:"key_format_versions,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	KeyProviderSettings []KeyProviderSettingsInitParameters `json:"keyProviderSettings,omitempty" tf:"key_provider_settings,omitempty"`

	ManifestCompression *string `json:"manifestCompression,omitempty" tf:"manifest_compression,omitempty"`

	ManifestDurationFormat *string `json:"manifestDurationFormat,omitempty" tf:"manifest_duration_format,omitempty"`

	MinSegmentLength *float64 `json:"minSegmentLength,omitempty" tf:"min_segment_length,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	OutputSelection *string `json:"outputSelection,omitempty" tf:"output_selection,omitempty"`

	ProgramDateTime *string `json:"programDateTime,omitempty" tf:"program_date_time,omitempty"`

	ProgramDateTimeClock *string `json:"programDateTimeClock,omitempty" tf:"program_date_time_clock,omitempty"`

	ProgramDateTimePeriod *float64 `json:"programDateTimePeriod,omitempty" tf:"program_date_time_period,omitempty"`

	RedundantManifest *string `json:"redundantManifest,omitempty" tf:"redundant_manifest,omitempty"`

	SegmentLength *float64 `json:"segmentLength,omitempty" tf:"segment_length,omitempty"`

	SegmentsPerSubdirectory *float64 `json:"segmentsPerSubdirectory,omitempty" tf:"segments_per_subdirectory,omitempty"`

	// - Maximum CDI input resolution.
	StreamInfResolution *string `json:"streamInfResolution,omitempty" tf:"stream_inf_resolution,omitempty"`

	TSFileMode *string `json:"tsFileMode,omitempty" tf:"ts_file_mode,omitempty"`

	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame *string `json:"timedMetadataId3Frame,omitempty" tf:"timed_metadata_id3_frame,omitempty"`

	TimedMetadataId3Period *float64 `json:"timedMetadataId3Period,omitempty" tf:"timed_metadata_id3_period,omitempty"`

	TimestampDeltaMilliseconds *float64 `json:"timestampDeltaMilliseconds,omitempty" tf:"timestamp_delta_milliseconds,omitempty"`
}

type HlsGroupSettingsObservation struct {

	// The ad marker type for this output group.
	AdMarkers []*string `json:"adMarkers,omitempty" tf:"ad_markers,omitempty"`

	BaseURLContent *string `json:"baseUrlContent,omitempty" tf:"base_url_content,omitempty"`

	BaseURLContent1 *string `json:"baseUrlContent1,omitempty" tf:"base_url_content1,omitempty"`

	BaseURLManifest *string `json:"baseUrlManifest,omitempty" tf:"base_url_manifest,omitempty"`

	BaseURLManifest1 *string `json:"baseUrlManifest1,omitempty" tf:"base_url_manifest1,omitempty"`

	CaptionLanguageMappings []CaptionLanguageMappingsObservation `json:"captionLanguageMappings,omitempty" tf:"caption_language_mappings,omitempty"`

	CaptionLanguageSetting *string `json:"captionLanguageSetting,omitempty" tf:"caption_language_setting,omitempty"`

	ClientCache *string `json:"clientCache,omitempty" tf:"client_cache,omitempty"`

	CodecSpecification *string `json:"codecSpecification,omitempty" tf:"codec_specification,omitempty"`

	ConstantIv *string `json:"constantIv,omitempty" tf:"constant_iv,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []HlsGroupSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	DirectoryStructure *string `json:"directoryStructure,omitempty" tf:"directory_structure,omitempty"`

	// Key-value map of resource tags.
	DiscontinuityTags *string `json:"discontinuityTags,omitempty" tf:"discontinuity_tags,omitempty"`

	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsCdnSettings []HlsCdnSettingsObservation `json:"hlsCdnSettings,omitempty" tf:"hls_cdn_settings,omitempty"`

	HlsId3SegmentTagging *string `json:"hlsId3SegmentTagging,omitempty" tf:"hls_id3_segment_tagging,omitempty"`

	IframeOnlyPlaylists *string `json:"iframeOnlyPlaylists,omitempty" tf:"iframe_only_playlists,omitempty"`

	IncompleteSegmentBehavior *string `json:"incompleteSegmentBehavior,omitempty" tf:"incomplete_segment_behavior,omitempty"`

	IndexNSegments *float64 `json:"indexNSegments,omitempty" tf:"index_n_segments,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	IvInManifest *string `json:"ivInManifest,omitempty" tf:"iv_in_manifest,omitempty"`

	// The source for the timecode that will be associated with the events outputs.
	IvSource *string `json:"ivSource,omitempty" tf:"iv_source,omitempty"`

	KeepSegments *float64 `json:"keepSegments,omitempty" tf:"keep_segments,omitempty"`

	KeyFormat *string `json:"keyFormat,omitempty" tf:"key_format,omitempty"`

	KeyFormatVersions *string `json:"keyFormatVersions,omitempty" tf:"key_format_versions,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	KeyProviderSettings []KeyProviderSettingsObservation `json:"keyProviderSettings,omitempty" tf:"key_provider_settings,omitempty"`

	ManifestCompression *string `json:"manifestCompression,omitempty" tf:"manifest_compression,omitempty"`

	ManifestDurationFormat *string `json:"manifestDurationFormat,omitempty" tf:"manifest_duration_format,omitempty"`

	MinSegmentLength *float64 `json:"minSegmentLength,omitempty" tf:"min_segment_length,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	OutputSelection *string `json:"outputSelection,omitempty" tf:"output_selection,omitempty"`

	ProgramDateTime *string `json:"programDateTime,omitempty" tf:"program_date_time,omitempty"`

	ProgramDateTimeClock *string `json:"programDateTimeClock,omitempty" tf:"program_date_time_clock,omitempty"`

	ProgramDateTimePeriod *float64 `json:"programDateTimePeriod,omitempty" tf:"program_date_time_period,omitempty"`

	RedundantManifest *string `json:"redundantManifest,omitempty" tf:"redundant_manifest,omitempty"`

	SegmentLength *float64 `json:"segmentLength,omitempty" tf:"segment_length,omitempty"`

	SegmentsPerSubdirectory *float64 `json:"segmentsPerSubdirectory,omitempty" tf:"segments_per_subdirectory,omitempty"`

	// - Maximum CDI input resolution.
	StreamInfResolution *string `json:"streamInfResolution,omitempty" tf:"stream_inf_resolution,omitempty"`

	TSFileMode *string `json:"tsFileMode,omitempty" tf:"ts_file_mode,omitempty"`

	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame *string `json:"timedMetadataId3Frame,omitempty" tf:"timed_metadata_id3_frame,omitempty"`

	TimedMetadataId3Period *float64 `json:"timedMetadataId3Period,omitempty" tf:"timed_metadata_id3_period,omitempty"`

	TimestampDeltaMilliseconds *float64 `json:"timestampDeltaMilliseconds,omitempty" tf:"timestamp_delta_milliseconds,omitempty"`
}

type HlsGroupSettingsParameters struct {

	// The ad marker type for this output group.
	// +kubebuilder:validation:Optional
	AdMarkers []*string `json:"adMarkers,omitempty" tf:"ad_markers,omitempty"`

	// +kubebuilder:validation:Optional
	BaseURLContent *string `json:"baseUrlContent,omitempty" tf:"base_url_content,omitempty"`

	// +kubebuilder:validation:Optional
	BaseURLContent1 *string `json:"baseUrlContent1,omitempty" tf:"base_url_content1,omitempty"`

	// +kubebuilder:validation:Optional
	BaseURLManifest *string `json:"baseUrlManifest,omitempty" tf:"base_url_manifest,omitempty"`

	// +kubebuilder:validation:Optional
	BaseURLManifest1 *string `json:"baseUrlManifest1,omitempty" tf:"base_url_manifest1,omitempty"`

	// +kubebuilder:validation:Optional
	CaptionLanguageMappings []CaptionLanguageMappingsParameters `json:"captionLanguageMappings,omitempty" tf:"caption_language_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	CaptionLanguageSetting *string `json:"captionLanguageSetting,omitempty" tf:"caption_language_setting,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCache *string `json:"clientCache,omitempty" tf:"client_cache,omitempty"`

	// +kubebuilder:validation:Optional
	CodecSpecification *string `json:"codecSpecification,omitempty" tf:"codec_specification,omitempty"`

	// +kubebuilder:validation:Optional
	ConstantIv *string `json:"constantIv,omitempty" tf:"constant_iv,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []HlsGroupSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`

	// +kubebuilder:validation:Optional
	DirectoryStructure *string `json:"directoryStructure,omitempty" tf:"directory_structure,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	DiscontinuityTags *string `json:"discontinuityTags,omitempty" tf:"discontinuity_tags,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsCdnSettings []HlsCdnSettingsParameters `json:"hlsCdnSettings,omitempty" tf:"hls_cdn_settings,omitempty"`

	// +kubebuilder:validation:Optional
	HlsId3SegmentTagging *string `json:"hlsId3SegmentTagging,omitempty" tf:"hls_id3_segment_tagging,omitempty"`

	// +kubebuilder:validation:Optional
	IframeOnlyPlaylists *string `json:"iframeOnlyPlaylists,omitempty" tf:"iframe_only_playlists,omitempty"`

	// +kubebuilder:validation:Optional
	IncompleteSegmentBehavior *string `json:"incompleteSegmentBehavior,omitempty" tf:"incomplete_segment_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	IndexNSegments *float64 `json:"indexNSegments,omitempty" tf:"index_n_segments,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// +kubebuilder:validation:Optional
	IvInManifest *string `json:"ivInManifest,omitempty" tf:"iv_in_manifest,omitempty"`

	// The source for the timecode that will be associated with the events outputs.
	// +kubebuilder:validation:Optional
	IvSource *string `json:"ivSource,omitempty" tf:"iv_source,omitempty"`

	// +kubebuilder:validation:Optional
	KeepSegments *float64 `json:"keepSegments,omitempty" tf:"keep_segments,omitempty"`

	// +kubebuilder:validation:Optional
	KeyFormat *string `json:"keyFormat,omitempty" tf:"key_format,omitempty"`

	// +kubebuilder:validation:Optional
	KeyFormatVersions *string `json:"keyFormatVersions,omitempty" tf:"key_format_versions,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	KeyProviderSettings []KeyProviderSettingsParameters `json:"keyProviderSettings,omitempty" tf:"key_provider_settings,omitempty"`

	// +kubebuilder:validation:Optional
	ManifestCompression *string `json:"manifestCompression,omitempty" tf:"manifest_compression,omitempty"`

	// +kubebuilder:validation:Optional
	ManifestDurationFormat *string `json:"manifestDurationFormat,omitempty" tf:"manifest_duration_format,omitempty"`

	// +kubebuilder:validation:Optional
	MinSegmentLength *float64 `json:"minSegmentLength,omitempty" tf:"min_segment_length,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	OutputSelection *string `json:"outputSelection,omitempty" tf:"output_selection,omitempty"`

	// +kubebuilder:validation:Optional
	ProgramDateTime *string `json:"programDateTime,omitempty" tf:"program_date_time,omitempty"`

	// +kubebuilder:validation:Optional
	ProgramDateTimeClock *string `json:"programDateTimeClock,omitempty" tf:"program_date_time_clock,omitempty"`

	// +kubebuilder:validation:Optional
	ProgramDateTimePeriod *float64 `json:"programDateTimePeriod,omitempty" tf:"program_date_time_period,omitempty"`

	// +kubebuilder:validation:Optional
	RedundantManifest *string `json:"redundantManifest,omitempty" tf:"redundant_manifest,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentLength *float64 `json:"segmentLength,omitempty" tf:"segment_length,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentsPerSubdirectory *float64 `json:"segmentsPerSubdirectory,omitempty" tf:"segments_per_subdirectory,omitempty"`

	// - Maximum CDI input resolution.
	// +kubebuilder:validation:Optional
	StreamInfResolution *string `json:"streamInfResolution,omitempty" tf:"stream_inf_resolution,omitempty"`

	// +kubebuilder:validation:Optional
	TSFileMode *string `json:"tsFileMode,omitempty" tf:"ts_file_mode,omitempty"`

	// Indicates ID3 frame that has the timecode.
	// +kubebuilder:validation:Optional
	TimedMetadataId3Frame *string `json:"timedMetadataId3Frame,omitempty" tf:"timed_metadata_id3_frame,omitempty"`

	// +kubebuilder:validation:Optional
	TimedMetadataId3Period *float64 `json:"timedMetadataId3Period,omitempty" tf:"timed_metadata_id3_period,omitempty"`

	// +kubebuilder:validation:Optional
	TimestampDeltaMilliseconds *float64 `json:"timestampDeltaMilliseconds,omitempty" tf:"timestamp_delta_milliseconds,omitempty"`
}

type HlsInputSettingsInitParameters struct {

	// The bitrate is specified in bits per second, as in an HLS manifest.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Buffer segments.
	BufferSegments *float64 `json:"bufferSegments,omitempty" tf:"buffer_segments,omitempty"`

	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	RetryInterval *float64 `json:"retryInterval,omitempty" tf:"retry_interval,omitempty"`

	// The source for the timecode that will be associated with the events outputs.
	Scte35Source *string `json:"scte35Source,omitempty" tf:"scte35_source,omitempty"`
}

type HlsInputSettingsObservation struct {

	// The bitrate is specified in bits per second, as in an HLS manifest.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Buffer segments.
	BufferSegments *float64 `json:"bufferSegments,omitempty" tf:"buffer_segments,omitempty"`

	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	RetryInterval *float64 `json:"retryInterval,omitempty" tf:"retry_interval,omitempty"`

	// The source for the timecode that will be associated with the events outputs.
	Scte35Source *string `json:"scte35Source,omitempty" tf:"scte35_source,omitempty"`
}

type HlsInputSettingsParameters struct {

	// The bitrate is specified in bits per second, as in an HLS manifest.
	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Buffer segments.
	// +kubebuilder:validation:Optional
	BufferSegments *float64 `json:"bufferSegments,omitempty" tf:"buffer_segments,omitempty"`

	// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
	// +kubebuilder:validation:Optional
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// The number of seconds between retries when an attempt to read a manifest or segment fails.
	// +kubebuilder:validation:Optional
	RetryInterval *float64 `json:"retryInterval,omitempty" tf:"retry_interval,omitempty"`

	// The source for the timecode that will be associated with the events outputs.
	// +kubebuilder:validation:Optional
	Scte35Source *string `json:"scte35Source,omitempty" tf:"scte35_source,omitempty"`
}

type HlsMediaStoreSettingsInitParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	MediaStoreStorageClass *string `json:"mediaStoreStorageClass,omitempty" tf:"media_store_storage_class,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsMediaStoreSettingsObservation struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	MediaStoreStorageClass *string `json:"mediaStoreStorageClass,omitempty" tf:"media_store_storage_class,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsMediaStoreSettingsParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// +kubebuilder:validation:Optional
	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// +kubebuilder:validation:Optional
	MediaStoreStorageClass *string `json:"mediaStoreStorageClass,omitempty" tf:"media_store_storage_class,omitempty"`

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsOutputSettingsInitParameters struct {
	H265PackagingType *string `json:"h265PackagingType,omitempty" tf:"h265_packaging_type,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsSettings []HlsSettingsInitParameters `json:"hlsSettings,omitempty" tf:"hls_settings,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`

	SegmentModifier *string `json:"segmentModifier,omitempty" tf:"segment_modifier,omitempty"`
}

type HlsOutputSettingsObservation struct {
	H265PackagingType *string `json:"h265PackagingType,omitempty" tf:"h265_packaging_type,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsSettings []HlsSettingsObservation `json:"hlsSettings,omitempty" tf:"hls_settings,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`

	SegmentModifier *string `json:"segmentModifier,omitempty" tf:"segment_modifier,omitempty"`
}

type HlsOutputSettingsParameters struct {

	// +kubebuilder:validation:Optional
	H265PackagingType *string `json:"h265PackagingType,omitempty" tf:"h265_packaging_type,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsSettings []HlsSettingsParameters `json:"hlsSettings" tf:"hls_settings,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentModifier *string `json:"segmentModifier,omitempty" tf:"segment_modifier,omitempty"`
}

type HlsS3SettingsInitParameters struct {

	// Specify the canned ACL to apply to each S3 request.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type HlsS3SettingsObservation struct {

	// Specify the canned ACL to apply to each S3 request.
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type HlsS3SettingsParameters struct {

	// Specify the canned ACL to apply to each S3 request.
	// +kubebuilder:validation:Optional
	CannedACL *string `json:"cannedAcl,omitempty" tf:"canned_acl,omitempty"`
}

type HlsSettingsInitParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	AudioOnlyHlsSettings []AudioOnlyHlsSettingsInitParameters `json:"audioOnlyHlsSettings,omitempty" tf:"audio_only_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Fmp4HlsSettings []Fmp4HlsSettingsInitParameters `json:"fmp4HlsSettings,omitempty" tf:"fmp4_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureHlsSettings []FrameCaptureHlsSettingsInitParameters `json:"frameCaptureHlsSettings,omitempty" tf:"frame_capture_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	StandardHlsSettings []StandardHlsSettingsInitParameters `json:"standardHlsSettings,omitempty" tf:"standard_hls_settings,omitempty"`
}

type HlsSettingsObservation struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	AudioOnlyHlsSettings []AudioOnlyHlsSettingsObservation `json:"audioOnlyHlsSettings,omitempty" tf:"audio_only_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	Fmp4HlsSettings []Fmp4HlsSettingsObservation `json:"fmp4HlsSettings,omitempty" tf:"fmp4_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureHlsSettings []FrameCaptureHlsSettingsParameters `json:"frameCaptureHlsSettings,omitempty" tf:"frame_capture_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	StandardHlsSettings []StandardHlsSettingsObservation `json:"standardHlsSettings,omitempty" tf:"standard_hls_settings,omitempty"`
}

type HlsSettingsParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	AudioOnlyHlsSettings []AudioOnlyHlsSettingsParameters `json:"audioOnlyHlsSettings,omitempty" tf:"audio_only_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	Fmp4HlsSettings []Fmp4HlsSettingsParameters `json:"fmp4HlsSettings,omitempty" tf:"fmp4_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	FrameCaptureHlsSettings []FrameCaptureHlsSettingsParameters `json:"frameCaptureHlsSettings,omitempty" tf:"frame_capture_hls_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	StandardHlsSettings []StandardHlsSettingsParameters `json:"standardHlsSettings,omitempty" tf:"standard_hls_settings,omitempty"`
}

type HlsWebdavSettingsInitParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	HTTPTransferMode *string `json:"httpTransferMode,omitempty" tf:"http_transfer_mode,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsWebdavSettingsObservation struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	HTTPTransferMode *string `json:"httpTransferMode,omitempty" tf:"http_transfer_mode,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type HlsWebdavSettingsParameters struct {

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// +kubebuilder:validation:Optional
	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPTransferMode *string `json:"httpTransferMode,omitempty" tf:"http_transfer_mode,omitempty"`

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type InputAttachmentsInitParameters struct {

	// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
	AutomaticInputFailoverSettings []AutomaticInputFailoverSettingsInitParameters `json:"automaticInputFailoverSettings,omitempty" tf:"automatic_input_failover_settings,omitempty"`

	// User-specified name for the attachment.
	InputAttachmentName *string `json:"inputAttachmentName,omitempty" tf:"input_attachment_name,omitempty"`

	// The ID of the input.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/medialive/v1beta1.Input
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	InputID *string `json:"inputId,omitempty" tf:"input_id,omitempty"`

	// Reference to a Input in medialive to populate inputId.
	// +kubebuilder:validation:Optional
	InputIDRef *v1.Reference `json:"inputIdRef,omitempty" tf:"-"`

	// Selector for a Input in medialive to populate inputId.
	// +kubebuilder:validation:Optional
	InputIDSelector *v1.Selector `json:"inputIdSelector,omitempty" tf:"-"`

	// Settings of an input. See Input Settings for more details.
	InputSettings []InputSettingsInitParameters `json:"inputSettings,omitempty" tf:"input_settings,omitempty"`
}

type InputAttachmentsObservation struct {

	// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
	AutomaticInputFailoverSettings []AutomaticInputFailoverSettingsObservation `json:"automaticInputFailoverSettings,omitempty" tf:"automatic_input_failover_settings,omitempty"`

	// User-specified name for the attachment.
	InputAttachmentName *string `json:"inputAttachmentName,omitempty" tf:"input_attachment_name,omitempty"`

	// The ID of the input.
	InputID *string `json:"inputId,omitempty" tf:"input_id,omitempty"`

	// Settings of an input. See Input Settings for more details.
	InputSettings []InputSettingsObservation `json:"inputSettings,omitempty" tf:"input_settings,omitempty"`
}

type InputAttachmentsParameters struct {

	// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input. See Automatic Input Failover Settings for more details.
	// +kubebuilder:validation:Optional
	AutomaticInputFailoverSettings []AutomaticInputFailoverSettingsParameters `json:"automaticInputFailoverSettings,omitempty" tf:"automatic_input_failover_settings,omitempty"`

	// User-specified name for the attachment.
	// +kubebuilder:validation:Optional
	InputAttachmentName *string `json:"inputAttachmentName" tf:"input_attachment_name,omitempty"`

	// The ID of the input.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/medialive/v1beta1.Input
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	InputID *string `json:"inputId,omitempty" tf:"input_id,omitempty"`

	// Reference to a Input in medialive to populate inputId.
	// +kubebuilder:validation:Optional
	InputIDRef *v1.Reference `json:"inputIdRef,omitempty" tf:"-"`

	// Selector for a Input in medialive to populate inputId.
	// +kubebuilder:validation:Optional
	InputIDSelector *v1.Selector `json:"inputIdSelector,omitempty" tf:"-"`

	// Settings of an input. See Input Settings for more details.
	// +kubebuilder:validation:Optional
	InputSettings []InputSettingsParameters `json:"inputSettings,omitempty" tf:"input_settings,omitempty"`
}

type InputChannelLevelsInitParameters struct {
	Gain *float64 `json:"gain,omitempty" tf:"gain,omitempty"`

	InputChannel *float64 `json:"inputChannel,omitempty" tf:"input_channel,omitempty"`
}

type InputChannelLevelsObservation struct {
	Gain *float64 `json:"gain,omitempty" tf:"gain,omitempty"`

	InputChannel *float64 `json:"inputChannel,omitempty" tf:"input_channel,omitempty"`
}

type InputChannelLevelsParameters struct {

	// +kubebuilder:validation:Optional
	Gain *float64 `json:"gain" tf:"gain,omitempty"`

	// +kubebuilder:validation:Optional
	InputChannel *float64 `json:"inputChannel" tf:"input_channel,omitempty"`
}

type InputLossBehaviorInitParameters struct {
	BlackFrameMsec *float64 `json:"blackFrameMsec,omitempty" tf:"black_frame_msec,omitempty"`

	InputLossImageColor *string `json:"inputLossImageColor,omitempty" tf:"input_loss_image_color,omitempty"`

	InputLossImageSlate []InputLossImageSlateInitParameters `json:"inputLossImageSlate,omitempty" tf:"input_loss_image_slate,omitempty"`

	InputLossImageType *string `json:"inputLossImageType,omitempty" tf:"input_loss_image_type,omitempty"`

	RepeatFrameMsec *float64 `json:"repeatFrameMsec,omitempty" tf:"repeat_frame_msec,omitempty"`
}

type InputLossBehaviorObservation struct {
	BlackFrameMsec *float64 `json:"blackFrameMsec,omitempty" tf:"black_frame_msec,omitempty"`

	InputLossImageColor *string `json:"inputLossImageColor,omitempty" tf:"input_loss_image_color,omitempty"`

	InputLossImageSlate []InputLossImageSlateObservation `json:"inputLossImageSlate,omitempty" tf:"input_loss_image_slate,omitempty"`

	InputLossImageType *string `json:"inputLossImageType,omitempty" tf:"input_loss_image_type,omitempty"`

	RepeatFrameMsec *float64 `json:"repeatFrameMsec,omitempty" tf:"repeat_frame_msec,omitempty"`
}

type InputLossBehaviorParameters struct {

	// +kubebuilder:validation:Optional
	BlackFrameMsec *float64 `json:"blackFrameMsec,omitempty" tf:"black_frame_msec,omitempty"`

	// +kubebuilder:validation:Optional
	InputLossImageColor *string `json:"inputLossImageColor,omitempty" tf:"input_loss_image_color,omitempty"`

	// +kubebuilder:validation:Optional
	InputLossImageSlate []InputLossImageSlateParameters `json:"inputLossImageSlate,omitempty" tf:"input_loss_image_slate,omitempty"`

	// +kubebuilder:validation:Optional
	InputLossImageType *string `json:"inputLossImageType,omitempty" tf:"input_loss_image_type,omitempty"`

	// +kubebuilder:validation:Optional
	RepeatFrameMsec *float64 `json:"repeatFrameMsec,omitempty" tf:"repeat_frame_msec,omitempty"`
}

type InputLossImageSlateInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InputLossImageSlateObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InputLossImageSlateParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InputLossSettingsInitParameters struct {

	// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
	InputLossThresholdMsec *float64 `json:"inputLossThresholdMsec,omitempty" tf:"input_loss_threshold_msec,omitempty"`
}

type InputLossSettingsObservation struct {

	// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
	InputLossThresholdMsec *float64 `json:"inputLossThresholdMsec,omitempty" tf:"input_loss_threshold_msec,omitempty"`
}

type InputLossSettingsParameters struct {

	// The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
	// +kubebuilder:validation:Optional
	InputLossThresholdMsec *float64 `json:"inputLossThresholdMsec,omitempty" tf:"input_loss_threshold_msec,omitempty"`
}

type InputSettingsInitParameters struct {
	AudioSelector []AudioSelectorInitParameters `json:"audioSelector,omitempty" tf:"audio_selector,omitempty"`

	CaptionSelector []CaptionSelectorInitParameters `json:"captionSelector,omitempty" tf:"caption_selector,omitempty"`

	// Enable or disable the deblock filter when filtering.
	DeblockFilter *string `json:"deblockFilter,omitempty" tf:"deblock_filter,omitempty"`

	// Enable or disable the denoise filter when filtering.
	DenoiseFilter *string `json:"denoiseFilter,omitempty" tf:"denoise_filter,omitempty"`

	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	FilterStrength *float64 `json:"filterStrength,omitempty" tf:"filter_strength,omitempty"`

	// Turns on the filter for the input.
	InputFilter *string `json:"inputFilter,omitempty" tf:"input_filter,omitempty"`

	// Input settings. See Network Input Settings for more details.
	NetworkInputSettings []NetworkInputSettingsInitParameters `json:"networkInputSettings,omitempty" tf:"network_input_settings,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *float64 `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	Smpte2038DataPreference *string `json:"smpte2038DataPreference,omitempty" tf:"smpte2038_data_preference,omitempty"`

	// Loop input if it is a file.
	SourceEndBehavior *string `json:"sourceEndBehavior,omitempty" tf:"source_end_behavior,omitempty"`

	VideoSelector []VideoSelectorInitParameters `json:"videoSelector,omitempty" tf:"video_selector,omitempty"`
}

type InputSettingsObservation struct {
	AudioSelector []AudioSelectorObservation `json:"audioSelector,omitempty" tf:"audio_selector,omitempty"`

	CaptionSelector []CaptionSelectorObservation `json:"captionSelector,omitempty" tf:"caption_selector,omitempty"`

	// Enable or disable the deblock filter when filtering.
	DeblockFilter *string `json:"deblockFilter,omitempty" tf:"deblock_filter,omitempty"`

	// Enable or disable the denoise filter when filtering.
	DenoiseFilter *string `json:"denoiseFilter,omitempty" tf:"denoise_filter,omitempty"`

	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	FilterStrength *float64 `json:"filterStrength,omitempty" tf:"filter_strength,omitempty"`

	// Turns on the filter for the input.
	InputFilter *string `json:"inputFilter,omitempty" tf:"input_filter,omitempty"`

	// Input settings. See Network Input Settings for more details.
	NetworkInputSettings []NetworkInputSettingsObservation `json:"networkInputSettings,omitempty" tf:"network_input_settings,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *float64 `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	Smpte2038DataPreference *string `json:"smpte2038DataPreference,omitempty" tf:"smpte2038_data_preference,omitempty"`

	// Loop input if it is a file.
	SourceEndBehavior *string `json:"sourceEndBehavior,omitempty" tf:"source_end_behavior,omitempty"`

	VideoSelector []VideoSelectorObservation `json:"videoSelector,omitempty" tf:"video_selector,omitempty"`
}

type InputSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AudioSelector []AudioSelectorParameters `json:"audioSelector,omitempty" tf:"audio_selector,omitempty"`

	// +kubebuilder:validation:Optional
	CaptionSelector []CaptionSelectorParameters `json:"captionSelector,omitempty" tf:"caption_selector,omitempty"`

	// Enable or disable the deblock filter when filtering.
	// +kubebuilder:validation:Optional
	DeblockFilter *string `json:"deblockFilter,omitempty" tf:"deblock_filter,omitempty"`

	// Enable or disable the denoise filter when filtering.
	// +kubebuilder:validation:Optional
	DenoiseFilter *string `json:"denoiseFilter,omitempty" tf:"denoise_filter,omitempty"`

	// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
	// +kubebuilder:validation:Optional
	FilterStrength *float64 `json:"filterStrength,omitempty" tf:"filter_strength,omitempty"`

	// Turns on the filter for the input.
	// +kubebuilder:validation:Optional
	InputFilter *string `json:"inputFilter,omitempty" tf:"input_filter,omitempty"`

	// Input settings. See Network Input Settings for more details.
	// +kubebuilder:validation:Optional
	NetworkInputSettings []NetworkInputSettingsParameters `json:"networkInputSettings,omitempty" tf:"network_input_settings,omitempty"`

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	Scte35Pid *float64 `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	// Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
	// +kubebuilder:validation:Optional
	Smpte2038DataPreference *string `json:"smpte2038DataPreference,omitempty" tf:"smpte2038_data_preference,omitempty"`

	// Loop input if it is a file.
	// +kubebuilder:validation:Optional
	SourceEndBehavior *string `json:"sourceEndBehavior,omitempty" tf:"source_end_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	VideoSelector []VideoSelectorParameters `json:"videoSelector,omitempty" tf:"video_selector,omitempty"`
}

type InputSpecificationInitParameters struct {
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// - Maximum CDI input resolution.
	InputResolution *string `json:"inputResolution,omitempty" tf:"input_resolution,omitempty"`

	// Average bitrate in bits/second.
	MaximumBitrate *string `json:"maximumBitrate,omitempty" tf:"maximum_bitrate,omitempty"`
}

type InputSpecificationObservation struct {
	Codec *string `json:"codec,omitempty" tf:"codec,omitempty"`

	// - Maximum CDI input resolution.
	InputResolution *string `json:"inputResolution,omitempty" tf:"input_resolution,omitempty"`

	// Average bitrate in bits/second.
	MaximumBitrate *string `json:"maximumBitrate,omitempty" tf:"maximum_bitrate,omitempty"`
}

type InputSpecificationParameters struct {

	// +kubebuilder:validation:Optional
	Codec *string `json:"codec" tf:"codec,omitempty"`

	// - Maximum CDI input resolution.
	// +kubebuilder:validation:Optional
	InputResolution *string `json:"inputResolution" tf:"input_resolution,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	MaximumBitrate *string `json:"maximumBitrate" tf:"maximum_bitrate,omitempty"`
}

type KeyProviderServerInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type KeyProviderServerObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type KeyProviderServerParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// –  Path to a file accessible to the live stream.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri" tf:"uri,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type KeyProviderSettingsInitParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	StaticKeySettings []StaticKeySettingsInitParameters `json:"staticKeySettings,omitempty" tf:"static_key_settings,omitempty"`
}

type KeyProviderSettingsObservation struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	StaticKeySettings []StaticKeySettingsObservation `json:"staticKeySettings,omitempty" tf:"static_key_settings,omitempty"`
}

type KeyProviderSettingsParameters struct {

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	StaticKeySettings []StaticKeySettingsParameters `json:"staticKeySettings,omitempty" tf:"static_key_settings,omitempty"`
}

type M2TsSettingsDvbNitSettingsInitParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Name of the Channel.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type M2TsSettingsDvbNitSettingsObservation struct {

	// User-specified id. Ths is used in an output group or an output.
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Name of the Channel.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type M2TsSettingsDvbNitSettingsParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	NetworkID *float64 `json:"networkId" tf:"network_id,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	NetworkName *string `json:"networkName" tf:"network_name,omitempty"`

	// +kubebuilder:validation:Optional
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type M2TsSettingsDvbSdtSettingsInitParameters struct {
	OutputSdt *string `json:"outputSdt,omitempty" tf:"output_sdt,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`

	// Name of the Channel.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Name of the Channel.
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`
}

type M2TsSettingsDvbSdtSettingsObservation struct {
	OutputSdt *string `json:"outputSdt,omitempty" tf:"output_sdt,omitempty"`

	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`

	// Name of the Channel.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Name of the Channel.
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`
}

type M2TsSettingsDvbSdtSettingsParameters struct {

	// +kubebuilder:validation:Optional
	OutputSdt *string `json:"outputSdt,omitempty" tf:"output_sdt,omitempty"`

	// +kubebuilder:validation:Optional
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`
}

type M2TsSettingsDvbTdtSettingsInitParameters struct {
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type M2TsSettingsDvbTdtSettingsObservation struct {
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type M2TsSettingsDvbTdtSettingsParameters struct {

	// +kubebuilder:validation:Optional
	RepInterval *float64 `json:"repInterval,omitempty" tf:"rep_interval,omitempty"`
}

type M2TsSettingsInitParameters struct {
	AbsentInputAudioBehavior *string `json:"absentInputAudioBehavior,omitempty" tf:"absent_input_audio_behavior,omitempty"`

	Arib *string `json:"arib,omitempty" tf:"arib,omitempty"`

	// Selects a specific PID from within a source.
	AribCaptionsPid *string `json:"aribCaptionsPid,omitempty" tf:"arib_captions_pid,omitempty"`

	AribCaptionsPidControl *string `json:"aribCaptionsPidControl,omitempty" tf:"arib_captions_pid_control,omitempty"`

	AudioBufferModel *string `json:"audioBufferModel,omitempty" tf:"audio_buffer_model,omitempty"`

	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	AudioStreamType *string `json:"audioStreamType,omitempty" tf:"audio_stream_type,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	BufferModel *string `json:"bufferModel,omitempty" tf:"buffer_model,omitempty"`

	CcDescriptor *string `json:"ccDescriptor,omitempty" tf:"cc_descriptor,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbNitSettings []DvbNitSettingsInitParameters `json:"dvbNitSettings,omitempty" tf:"dvb_nit_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbSdtSettings []DvbSdtSettingsInitParameters `json:"dvbSdtSettings,omitempty" tf:"dvb_sdt_settings,omitempty"`

	DvbSubPids *string `json:"dvbSubPids,omitempty" tf:"dvb_sub_pids,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbTdtSettings []DvbTdtSettingsInitParameters `json:"dvbTdtSettings,omitempty" tf:"dvb_tdt_settings,omitempty"`

	// Selects a specific PID from within a source.
	DvbTeletextPid *string `json:"dvbTeletextPid,omitempty" tf:"dvb_teletext_pid,omitempty"`

	Ebif *string `json:"ebif,omitempty" tf:"ebif,omitempty"`

	EbpAudioInterval *string `json:"ebpAudioInterval,omitempty" tf:"ebp_audio_interval,omitempty"`

	EbpLookaheadMs *float64 `json:"ebpLookaheadMs,omitempty" tf:"ebp_lookahead_ms,omitempty"`

	EbpPlacement *string `json:"ebpPlacement,omitempty" tf:"ebp_placement,omitempty"`

	// Selects a specific PID from within a source.
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	EsRateInPes *string `json:"esRateInPes,omitempty" tf:"es_rate_in_pes,omitempty"`

	// Selects a specific PID from within a source.
	EtvPlatformPid *string `json:"etvPlatformPid,omitempty" tf:"etv_platform_pid,omitempty"`

	// Selects a specific PID from within a source.
	EtvSignalPid *string `json:"etvSignalPid,omitempty" tf:"etv_signal_pid,omitempty"`

	FragmentTime *float64 `json:"fragmentTime,omitempty" tf:"fragment_time,omitempty"`

	Klv *string `json:"klv,omitempty" tf:"klv,omitempty"`

	KlvDataPids *string `json:"klvDataPids,omitempty" tf:"klv_data_pids,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// Average bitrate in bits/second.
	NullPacketBitrate *float64 `json:"nullPacketBitrate,omitempty" tf:"null_packet_bitrate,omitempty"`

	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	RateMode *string `json:"rateMode,omitempty" tf:"rate_mode,omitempty"`

	Scte27Pids *string `json:"scte27Pids,omitempty" tf:"scte27_pids,omitempty"`

	Scte35Control *string `json:"scte35Control,omitempty" tf:"scte35_control,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	SegmentationMarkers *string `json:"segmentationMarkers,omitempty" tf:"segmentation_markers,omitempty"`

	SegmentationStyle *string `json:"segmentationStyle,omitempty" tf:"segmentation_style,omitempty"`

	SegmentationTime *float64 `json:"segmentationTime,omitempty" tf:"segmentation_time,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type M2TsSettingsObservation struct {
	AbsentInputAudioBehavior *string `json:"absentInputAudioBehavior,omitempty" tf:"absent_input_audio_behavior,omitempty"`

	Arib *string `json:"arib,omitempty" tf:"arib,omitempty"`

	// Selects a specific PID from within a source.
	AribCaptionsPid *string `json:"aribCaptionsPid,omitempty" tf:"arib_captions_pid,omitempty"`

	AribCaptionsPidControl *string `json:"aribCaptionsPidControl,omitempty" tf:"arib_captions_pid_control,omitempty"`

	AudioBufferModel *string `json:"audioBufferModel,omitempty" tf:"audio_buffer_model,omitempty"`

	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	AudioStreamType *string `json:"audioStreamType,omitempty" tf:"audio_stream_type,omitempty"`

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	BufferModel *string `json:"bufferModel,omitempty" tf:"buffer_model,omitempty"`

	CcDescriptor *string `json:"ccDescriptor,omitempty" tf:"cc_descriptor,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbNitSettings []DvbNitSettingsObservation `json:"dvbNitSettings,omitempty" tf:"dvb_nit_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbSdtSettings []DvbSdtSettingsObservation `json:"dvbSdtSettings,omitempty" tf:"dvb_sdt_settings,omitempty"`

	DvbSubPids *string `json:"dvbSubPids,omitempty" tf:"dvb_sub_pids,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	DvbTdtSettings []DvbTdtSettingsObservation `json:"dvbTdtSettings,omitempty" tf:"dvb_tdt_settings,omitempty"`

	// Selects a specific PID from within a source.
	DvbTeletextPid *string `json:"dvbTeletextPid,omitempty" tf:"dvb_teletext_pid,omitempty"`

	Ebif *string `json:"ebif,omitempty" tf:"ebif,omitempty"`

	EbpAudioInterval *string `json:"ebpAudioInterval,omitempty" tf:"ebp_audio_interval,omitempty"`

	EbpLookaheadMs *float64 `json:"ebpLookaheadMs,omitempty" tf:"ebp_lookahead_ms,omitempty"`

	EbpPlacement *string `json:"ebpPlacement,omitempty" tf:"ebp_placement,omitempty"`

	// Selects a specific PID from within a source.
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	EsRateInPes *string `json:"esRateInPes,omitempty" tf:"es_rate_in_pes,omitempty"`

	// Selects a specific PID from within a source.
	EtvPlatformPid *string `json:"etvPlatformPid,omitempty" tf:"etv_platform_pid,omitempty"`

	// Selects a specific PID from within a source.
	EtvSignalPid *string `json:"etvSignalPid,omitempty" tf:"etv_signal_pid,omitempty"`

	FragmentTime *float64 `json:"fragmentTime,omitempty" tf:"fragment_time,omitempty"`

	Klv *string `json:"klv,omitempty" tf:"klv,omitempty"`

	KlvDataPids *string `json:"klvDataPids,omitempty" tf:"klv_data_pids,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// Average bitrate in bits/second.
	NullPacketBitrate *float64 `json:"nullPacketBitrate,omitempty" tf:"null_packet_bitrate,omitempty"`

	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	RateMode *string `json:"rateMode,omitempty" tf:"rate_mode,omitempty"`

	Scte27Pids *string `json:"scte27Pids,omitempty" tf:"scte27_pids,omitempty"`

	Scte35Control *string `json:"scte35Control,omitempty" tf:"scte35_control,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	SegmentationMarkers *string `json:"segmentationMarkers,omitempty" tf:"segmentation_markers,omitempty"`

	SegmentationStyle *string `json:"segmentationStyle,omitempty" tf:"segmentation_style,omitempty"`

	SegmentationTime *float64 `json:"segmentationTime,omitempty" tf:"segmentation_time,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type M2TsSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AbsentInputAudioBehavior *string `json:"absentInputAudioBehavior,omitempty" tf:"absent_input_audio_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	Arib *string `json:"arib,omitempty" tf:"arib,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	AribCaptionsPid *string `json:"aribCaptionsPid,omitempty" tf:"arib_captions_pid,omitempty"`

	// +kubebuilder:validation:Optional
	AribCaptionsPidControl *string `json:"aribCaptionsPidControl,omitempty" tf:"arib_captions_pid_control,omitempty"`

	// +kubebuilder:validation:Optional
	AudioBufferModel *string `json:"audioBufferModel,omitempty" tf:"audio_buffer_model,omitempty"`

	// +kubebuilder:validation:Optional
	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	// +kubebuilder:validation:Optional
	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	// +kubebuilder:validation:Optional
	AudioStreamType *string `json:"audioStreamType,omitempty" tf:"audio_stream_type,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	BufferModel *string `json:"bufferModel,omitempty" tf:"buffer_model,omitempty"`

	// +kubebuilder:validation:Optional
	CcDescriptor *string `json:"ccDescriptor,omitempty" tf:"cc_descriptor,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	DvbNitSettings []DvbNitSettingsParameters `json:"dvbNitSettings,omitempty" tf:"dvb_nit_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	DvbSdtSettings []DvbSdtSettingsParameters `json:"dvbSdtSettings,omitempty" tf:"dvb_sdt_settings,omitempty"`

	// +kubebuilder:validation:Optional
	DvbSubPids *string `json:"dvbSubPids,omitempty" tf:"dvb_sub_pids,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	DvbTdtSettings []DvbTdtSettingsParameters `json:"dvbTdtSettings,omitempty" tf:"dvb_tdt_settings,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	DvbTeletextPid *string `json:"dvbTeletextPid,omitempty" tf:"dvb_teletext_pid,omitempty"`

	// +kubebuilder:validation:Optional
	Ebif *string `json:"ebif,omitempty" tf:"ebif,omitempty"`

	// +kubebuilder:validation:Optional
	EbpAudioInterval *string `json:"ebpAudioInterval,omitempty" tf:"ebp_audio_interval,omitempty"`

	// +kubebuilder:validation:Optional
	EbpLookaheadMs *float64 `json:"ebpLookaheadMs,omitempty" tf:"ebp_lookahead_ms,omitempty"`

	// +kubebuilder:validation:Optional
	EbpPlacement *string `json:"ebpPlacement,omitempty" tf:"ebp_placement,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	// +kubebuilder:validation:Optional
	EsRateInPes *string `json:"esRateInPes,omitempty" tf:"es_rate_in_pes,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EtvPlatformPid *string `json:"etvPlatformPid,omitempty" tf:"etv_platform_pid,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EtvSignalPid *string `json:"etvSignalPid,omitempty" tf:"etv_signal_pid,omitempty"`

	// +kubebuilder:validation:Optional
	FragmentTime *float64 `json:"fragmentTime,omitempty" tf:"fragment_time,omitempty"`

	// +kubebuilder:validation:Optional
	Klv *string `json:"klv,omitempty" tf:"klv,omitempty"`

	// +kubebuilder:validation:Optional
	KlvDataPids *string `json:"klvDataPids,omitempty" tf:"klv_data_pids,omitempty"`

	// +kubebuilder:validation:Optional
	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	NullPacketBitrate *float64 `json:"nullPacketBitrate,omitempty" tf:"null_packet_bitrate,omitempty"`

	// +kubebuilder:validation:Optional
	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	// +kubebuilder:validation:Optional
	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	// +kubebuilder:validation:Optional
	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	// +kubebuilder:validation:Optional
	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	// +kubebuilder:validation:Optional
	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	// +kubebuilder:validation:Optional
	RateMode *string `json:"rateMode,omitempty" tf:"rate_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Scte27Pids *string `json:"scte27Pids,omitempty" tf:"scte27_pids,omitempty"`

	// +kubebuilder:validation:Optional
	Scte35Control *string `json:"scte35Control,omitempty" tf:"scte35_control,omitempty"`

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationMarkers *string `json:"segmentationMarkers,omitempty" tf:"segmentation_markers,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationStyle *string `json:"segmentationStyle,omitempty" tf:"segmentation_style,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationTime *float64 `json:"segmentationTime,omitempty" tf:"segmentation_time,omitempty"`

	// +kubebuilder:validation:Optional
	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type M3U8SettingsInitParameters struct {
	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	// Selects a specific PID from within a source.
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	Scte35Behavior *string `json:"scte35Behavior,omitempty" tf:"scte35_behavior,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type M3U8SettingsObservation struct {
	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	// Selects a specific PID from within a source.
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	Scte35Behavior *string `json:"scte35Behavior,omitempty" tf:"scte35_behavior,omitempty"`

	// PID from which to read SCTE-35 messages.
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type M3U8SettingsParameters struct {

	// +kubebuilder:validation:Optional
	AudioFramesPerPes *float64 `json:"audioFramesPerPes,omitempty" tf:"audio_frames_per_pes,omitempty"`

	// +kubebuilder:validation:Optional
	AudioPids *string `json:"audioPids,omitempty" tf:"audio_pids,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	EcmPid *string `json:"ecmPid,omitempty" tf:"ecm_pid,omitempty"`

	// +kubebuilder:validation:Optional
	NielsenId3Behavior *string `json:"nielsenId3Behavior,omitempty" tf:"nielsen_id3_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	PatInterval *float64 `json:"patInterval,omitempty" tf:"pat_interval,omitempty"`

	// +kubebuilder:validation:Optional
	PcrControl *string `json:"pcrControl,omitempty" tf:"pcr_control,omitempty"`

	// +kubebuilder:validation:Optional
	PcrPeriod *float64 `json:"pcrPeriod,omitempty" tf:"pcr_period,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	PcrPid *string `json:"pcrPid,omitempty" tf:"pcr_pid,omitempty"`

	// +kubebuilder:validation:Optional
	PmtInterval *float64 `json:"pmtInterval,omitempty" tf:"pmt_interval,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	PmtPid *string `json:"pmtPid,omitempty" tf:"pmt_pid,omitempty"`

	// +kubebuilder:validation:Optional
	ProgramNum *float64 `json:"programNum,omitempty" tf:"program_num,omitempty"`

	// +kubebuilder:validation:Optional
	Scte35Behavior *string `json:"scte35Behavior,omitempty" tf:"scte35_behavior,omitempty"`

	// PID from which to read SCTE-35 messages.
	// +kubebuilder:validation:Optional
	Scte35Pid *string `json:"scte35Pid,omitempty" tf:"scte35_pid,omitempty"`

	// +kubebuilder:validation:Optional
	TimedMetadataBehavior *string `json:"timedMetadataBehavior,omitempty" tf:"timed_metadata_behavior,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	TimedMetadataPid *string `json:"timedMetadataPid,omitempty" tf:"timed_metadata_pid,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	TransportStreamID *float64 `json:"transportStreamId,omitempty" tf:"transport_stream_id,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	VideoPid *string `json:"videoPid,omitempty" tf:"video_pid,omitempty"`
}

type MaintenanceInitParameters struct {

	// The day of the week to use for maintenance.
	MaintenanceDay *string `json:"maintenanceDay,omitempty" tf:"maintenance_day,omitempty"`

	// The hour maintenance will start.
	MaintenanceStartTime *string `json:"maintenanceStartTime,omitempty" tf:"maintenance_start_time,omitempty"`
}

type MaintenanceObservation struct {

	// The day of the week to use for maintenance.
	MaintenanceDay *string `json:"maintenanceDay,omitempty" tf:"maintenance_day,omitempty"`

	// The hour maintenance will start.
	MaintenanceStartTime *string `json:"maintenanceStartTime,omitempty" tf:"maintenance_start_time,omitempty"`
}

type MaintenanceParameters struct {

	// The day of the week to use for maintenance.
	// +kubebuilder:validation:Optional
	MaintenanceDay *string `json:"maintenanceDay" tf:"maintenance_day,omitempty"`

	// The hour maintenance will start.
	// +kubebuilder:validation:Optional
	MaintenanceStartTime *string `json:"maintenanceStartTime" tf:"maintenance_start_time,omitempty"`
}

type MediaPackageGroupSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type MediaPackageGroupSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type MediaPackageGroupSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type MediaPackageGroupSettingsInitParameters struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []MediaPackageGroupSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`
}

type MediaPackageGroupSettingsObservation struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []MediaPackageGroupSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`
}

type MediaPackageGroupSettingsParameters struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []MediaPackageGroupSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`
}

type MediaPackageOutputSettingsInitParameters struct {
}

type MediaPackageOutputSettingsObservation struct {
}

type MediaPackageOutputSettingsParameters struct {
}

type MediaPackageSettingsInitParameters struct {

	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`
}

type MediaPackageSettingsObservation struct {

	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`
}

type MediaPackageSettingsParameters struct {

	// ID of the channel in MediaPackage that is the destination for this output group.
	// +kubebuilder:validation:Optional
	ChannelID *string `json:"channelId" tf:"channel_id,omitempty"`
}

type MotionGraphicsConfigurationInitParameters struct {

	// –  Motion Graphics Insertion.
	MotionGraphicsInsertion *string `json:"motionGraphicsInsertion,omitempty" tf:"motion_graphics_insertion,omitempty"`

	// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
	MotionGraphicsSettings []MotionGraphicsSettingsInitParameters `json:"motionGraphicsSettings,omitempty" tf:"motion_graphics_settings,omitempty"`
}

type MotionGraphicsConfigurationObservation struct {

	// –  Motion Graphics Insertion.
	MotionGraphicsInsertion *string `json:"motionGraphicsInsertion,omitempty" tf:"motion_graphics_insertion,omitempty"`

	// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
	MotionGraphicsSettings []MotionGraphicsSettingsObservation `json:"motionGraphicsSettings,omitempty" tf:"motion_graphics_settings,omitempty"`
}

type MotionGraphicsConfigurationParameters struct {

	// –  Motion Graphics Insertion.
	// +kubebuilder:validation:Optional
	MotionGraphicsInsertion *string `json:"motionGraphicsInsertion,omitempty" tf:"motion_graphics_insertion,omitempty"`

	// –  Motion Graphics Settings. See Motion Graphics Settings for more details.
	// +kubebuilder:validation:Optional
	MotionGraphicsSettings []MotionGraphicsSettingsParameters `json:"motionGraphicsSettings" tf:"motion_graphics_settings,omitempty"`
}

type MotionGraphicsSettingsInitParameters struct {

	// –  Html Motion Graphics Settings.
	HTMLMotionGraphicsSettings []HTMLMotionGraphicsSettingsInitParameters `json:"htmlMotionGraphicsSettings,omitempty" tf:"html_motion_graphics_settings,omitempty"`
}

type MotionGraphicsSettingsObservation struct {

	// –  Html Motion Graphics Settings.
	HTMLMotionGraphicsSettings []HTMLMotionGraphicsSettingsParameters `json:"htmlMotionGraphicsSettings,omitempty" tf:"html_motion_graphics_settings,omitempty"`
}

type MotionGraphicsSettingsParameters struct {

	// –  Html Motion Graphics Settings.
	// +kubebuilder:validation:Optional
	HTMLMotionGraphicsSettings []HTMLMotionGraphicsSettingsParameters `json:"htmlMotionGraphicsSettings,omitempty" tf:"html_motion_graphics_settings,omitempty"`
}

type Mp2SettingsInitParameters struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sample rate in Hz.
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type Mp2SettingsObservation struct {

	// Average bitrate in bits/second.
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sample rate in Hz.
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type Mp2SettingsParameters struct {

	// Average bitrate in bits/second.
	// +kubebuilder:validation:Optional
	Bitrate *float64 `json:"bitrate,omitempty" tf:"bitrate,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sample rate in Hz.
	// +kubebuilder:validation:Optional
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type MsSmoothGroupSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type MsSmoothGroupSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type MsSmoothGroupSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type MsSmoothGroupSettingsInitParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	AcquisitionPointID *string `json:"acquisitionPointId,omitempty" tf:"acquisition_point_id,omitempty"`

	AudioOnlyTimecodeControl *string `json:"audioOnlyTimecodeControl,omitempty" tf:"audio_only_timecode_control,omitempty"`

	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode *string `json:"certificateMode,omitempty" tf:"certificate_mode,omitempty"`

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []MsSmoothGroupSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	EventID *string `json:"eventId,omitempty" tf:"event_id,omitempty"`

	EventIDMode *string `json:"eventIdMode,omitempty" tf:"event_id_mode,omitempty"`

	EventStopBehavior *string `json:"eventStopBehavior,omitempty" tf:"event_stop_behavior,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	FragmentLength *float64 `json:"fragmentLength,omitempty" tf:"fragment_length,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`

	SegmentationMode *string `json:"segmentationMode,omitempty" tf:"segmentation_mode,omitempty"`

	SendDelayMs *float64 `json:"sendDelayMs,omitempty" tf:"send_delay_ms,omitempty"`

	SparseTrackType *string `json:"sparseTrackType,omitempty" tf:"sparse_track_type,omitempty"`

	StreamManifestBehavior *string `json:"streamManifestBehavior,omitempty" tf:"stream_manifest_behavior,omitempty"`

	TimestampOffset *string `json:"timestampOffset,omitempty" tf:"timestamp_offset,omitempty"`

	TimestampOffsetMode *string `json:"timestampOffsetMode,omitempty" tf:"timestamp_offset_mode,omitempty"`
}

type MsSmoothGroupSettingsObservation struct {

	// User-specified id. Ths is used in an output group or an output.
	AcquisitionPointID *string `json:"acquisitionPointId,omitempty" tf:"acquisition_point_id,omitempty"`

	AudioOnlyTimecodeControl *string `json:"audioOnlyTimecodeControl,omitempty" tf:"audio_only_timecode_control,omitempty"`

	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode *string `json:"certificateMode,omitempty" tf:"certificate_mode,omitempty"`

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []MsSmoothGroupSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	EventID *string `json:"eventId,omitempty" tf:"event_id,omitempty"`

	EventIDMode *string `json:"eventIdMode,omitempty" tf:"event_id_mode,omitempty"`

	EventStopBehavior *string `json:"eventStopBehavior,omitempty" tf:"event_stop_behavior,omitempty"`

	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	FragmentLength *float64 `json:"fragmentLength,omitempty" tf:"fragment_length,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`

	SegmentationMode *string `json:"segmentationMode,omitempty" tf:"segmentation_mode,omitempty"`

	SendDelayMs *float64 `json:"sendDelayMs,omitempty" tf:"send_delay_ms,omitempty"`

	SparseTrackType *string `json:"sparseTrackType,omitempty" tf:"sparse_track_type,omitempty"`

	StreamManifestBehavior *string `json:"streamManifestBehavior,omitempty" tf:"stream_manifest_behavior,omitempty"`

	TimestampOffset *string `json:"timestampOffset,omitempty" tf:"timestamp_offset,omitempty"`

	TimestampOffsetMode *string `json:"timestampOffsetMode,omitempty" tf:"timestamp_offset_mode,omitempty"`
}

type MsSmoothGroupSettingsParameters struct {

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	AcquisitionPointID *string `json:"acquisitionPointId,omitempty" tf:"acquisition_point_id,omitempty"`

	// +kubebuilder:validation:Optional
	AudioOnlyTimecodeControl *string `json:"audioOnlyTimecodeControl,omitempty" tf:"audio_only_timecode_control,omitempty"`

	// Setting to allow self signed or verified RTMP certificates.
	// +kubebuilder:validation:Optional
	CertificateMode *string `json:"certificateMode,omitempty" tf:"certificate_mode,omitempty"`

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []MsSmoothGroupSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`

	// User-specified id. Ths is used in an output group or an output.
	// +kubebuilder:validation:Optional
	EventID *string `json:"eventId,omitempty" tf:"event_id,omitempty"`

	// +kubebuilder:validation:Optional
	EventIDMode *string `json:"eventIdMode,omitempty" tf:"event_id_mode,omitempty"`

	// +kubebuilder:validation:Optional
	EventStopBehavior *string `json:"eventStopBehavior,omitempty" tf:"event_stop_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	FilecacheDuration *float64 `json:"filecacheDuration,omitempty" tf:"filecache_duration,omitempty"`

	// +kubebuilder:validation:Optional
	FragmentLength *float64 `json:"fragmentLength,omitempty" tf:"fragment_length,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentationMode *string `json:"segmentationMode,omitempty" tf:"segmentation_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SendDelayMs *float64 `json:"sendDelayMs,omitempty" tf:"send_delay_ms,omitempty"`

	// +kubebuilder:validation:Optional
	SparseTrackType *string `json:"sparseTrackType,omitempty" tf:"sparse_track_type,omitempty"`

	// +kubebuilder:validation:Optional
	StreamManifestBehavior *string `json:"streamManifestBehavior,omitempty" tf:"stream_manifest_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	TimestampOffset *string `json:"timestampOffset,omitempty" tf:"timestamp_offset,omitempty"`

	// +kubebuilder:validation:Optional
	TimestampOffsetMode *string `json:"timestampOffsetMode,omitempty" tf:"timestamp_offset_mode,omitempty"`
}

type MsSmoothOutputSettingsInitParameters struct {
	H265PackagingType *string `json:"h265PackagingType,omitempty" tf:"h265_packaging_type,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type MsSmoothOutputSettingsObservation struct {
	H265PackagingType *string `json:"h265PackagingType,omitempty" tf:"h265_packaging_type,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type MsSmoothOutputSettingsParameters struct {

	// +kubebuilder:validation:Optional
	H265PackagingType *string `json:"h265PackagingType,omitempty" tf:"h265_packaging_type,omitempty"`

	// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
	// +kubebuilder:validation:Optional
	NameModifier *string `json:"nameModifier,omitempty" tf:"name_modifier,omitempty"`
}

type MultiplexGroupSettingsInitParameters struct {
}

type MultiplexGroupSettingsObservation struct {
}

type MultiplexGroupSettingsParameters struct {
}

type MultiplexOutputSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type MultiplexOutputSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type MultiplexOutputSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type MultiplexOutputSettingsInitParameters struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []MultiplexOutputSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`
}

type MultiplexOutputSettingsObservation struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []MultiplexOutputSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`
}

type MultiplexOutputSettingsParameters struct {

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []MultiplexOutputSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`
}

type MultiplexSettingsInitParameters struct {

	// The ID of the Multiplex that the encoder is providing output to.
	MultiplexID *string `json:"multiplexId,omitempty" tf:"multiplex_id,omitempty"`

	// The program name of the Multiplex program that the encoder is providing output to.
	ProgramName *string `json:"programName,omitempty" tf:"program_name,omitempty"`
}

type MultiplexSettingsObservation struct {

	// The ID of the Multiplex that the encoder is providing output to.
	MultiplexID *string `json:"multiplexId,omitempty" tf:"multiplex_id,omitempty"`

	// The program name of the Multiplex program that the encoder is providing output to.
	ProgramName *string `json:"programName,omitempty" tf:"program_name,omitempty"`
}

type MultiplexSettingsParameters struct {

	// The ID of the Multiplex that the encoder is providing output to.
	// +kubebuilder:validation:Optional
	MultiplexID *string `json:"multiplexId" tf:"multiplex_id,omitempty"`

	// The program name of the Multiplex program that the encoder is providing output to.
	// +kubebuilder:validation:Optional
	ProgramName *string `json:"programName" tf:"program_name,omitempty"`
}

type NetworkInputSettingsInitParameters struct {

	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	HlsInputSettings []HlsInputSettingsInitParameters `json:"hlsInputSettings,omitempty" tf:"hls_input_settings,omitempty"`

	// Check HTTPS server certificates.
	ServerValidation *string `json:"serverValidation,omitempty" tf:"server_validation,omitempty"`
}

type NetworkInputSettingsObservation struct {

	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	HlsInputSettings []HlsInputSettingsObservation `json:"hlsInputSettings,omitempty" tf:"hls_input_settings,omitempty"`

	// Check HTTPS server certificates.
	ServerValidation *string `json:"serverValidation,omitempty" tf:"server_validation,omitempty"`
}

type NetworkInputSettingsParameters struct {

	// Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
	// +kubebuilder:validation:Optional
	HlsInputSettings []HlsInputSettingsParameters `json:"hlsInputSettings,omitempty" tf:"hls_input_settings,omitempty"`

	// Check HTTPS server certificates.
	// +kubebuilder:validation:Optional
	ServerValidation *string `json:"serverValidation,omitempty" tf:"server_validation,omitempty"`
}

type NielsenCbetSettingsInitParameters struct {
	CbetCheckDigitString *string `json:"cbetCheckDigitString,omitempty" tf:"cbet_check_digit_string,omitempty"`

	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	CbetStepaside *string `json:"cbetStepaside,omitempty" tf:"cbet_stepaside,omitempty"`

	// CBET source ID to use in the watermark.
	Csid *string `json:"csid,omitempty" tf:"csid,omitempty"`
}

type NielsenCbetSettingsObservation struct {
	CbetCheckDigitString *string `json:"cbetCheckDigitString,omitempty" tf:"cbet_check_digit_string,omitempty"`

	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	CbetStepaside *string `json:"cbetStepaside,omitempty" tf:"cbet_stepaside,omitempty"`

	// CBET source ID to use in the watermark.
	Csid *string `json:"csid,omitempty" tf:"csid,omitempty"`
}

type NielsenCbetSettingsParameters struct {

	// +kubebuilder:validation:Optional
	CbetCheckDigitString *string `json:"cbetCheckDigitString" tf:"cbet_check_digit_string,omitempty"`

	// Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
	// +kubebuilder:validation:Optional
	CbetStepaside *string `json:"cbetStepaside" tf:"cbet_stepaside,omitempty"`

	// CBET source ID to use in the watermark.
	// +kubebuilder:validation:Optional
	Csid *string `json:"csid" tf:"csid,omitempty"`
}

type NielsenConfigurationInitParameters struct {

	// –  Enter the Distributor ID assigned to your organization by Nielsen.
	DistributorID *string `json:"distributorId,omitempty" tf:"distributor_id,omitempty"`

	// –  Enables Nielsen PCM to ID3 tagging.
	NielsenPcmToId3Tagging *string `json:"nielsenPcmToId3Tagging,omitempty" tf:"nielsen_pcm_to_id3_tagging,omitempty"`
}

type NielsenConfigurationObservation struct {

	// –  Enter the Distributor ID assigned to your organization by Nielsen.
	DistributorID *string `json:"distributorId,omitempty" tf:"distributor_id,omitempty"`

	// –  Enables Nielsen PCM to ID3 tagging.
	NielsenPcmToId3Tagging *string `json:"nielsenPcmToId3Tagging,omitempty" tf:"nielsen_pcm_to_id3_tagging,omitempty"`
}

type NielsenConfigurationParameters struct {

	// –  Enter the Distributor ID assigned to your organization by Nielsen.
	// +kubebuilder:validation:Optional
	DistributorID *string `json:"distributorId,omitempty" tf:"distributor_id,omitempty"`

	// –  Enables Nielsen PCM to ID3 tagging.
	// +kubebuilder:validation:Optional
	NielsenPcmToId3Tagging *string `json:"nielsenPcmToId3Tagging,omitempty" tf:"nielsen_pcm_to_id3_tagging,omitempty"`
}

type NielsenNaesIiNwSettingsInitParameters struct {
	CheckDigitString *string `json:"checkDigitString,omitempty" tf:"check_digit_string,omitempty"`

	// The Nielsen Source ID to include in the watermark.
	Sid *float64 `json:"sid,omitempty" tf:"sid,omitempty"`
}

type NielsenNaesIiNwSettingsObservation struct {
	CheckDigitString *string `json:"checkDigitString,omitempty" tf:"check_digit_string,omitempty"`

	// The Nielsen Source ID to include in the watermark.
	Sid *float64 `json:"sid,omitempty" tf:"sid,omitempty"`
}

type NielsenNaesIiNwSettingsParameters struct {

	// +kubebuilder:validation:Optional
	CheckDigitString *string `json:"checkDigitString" tf:"check_digit_string,omitempty"`

	// The Nielsen Source ID to include in the watermark.
	// +kubebuilder:validation:Optional
	Sid *float64 `json:"sid" tf:"sid,omitempty"`
}

type NielsenWatermarksSettingsInitParameters struct {

	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	NielsenCbetSettings []NielsenCbetSettingsInitParameters `json:"nielsenCbetSettings,omitempty" tf:"nielsen_cbet_settings,omitempty"`

	// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
	NielsenDistributionType *string `json:"nielsenDistributionType,omitempty" tf:"nielsen_distribution_type,omitempty"`

	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	NielsenNaesIiNwSettings []NielsenNaesIiNwSettingsInitParameters `json:"nielsenNaesIiNwSettings,omitempty" tf:"nielsen_naes_ii_nw_settings,omitempty"`
}

type NielsenWatermarksSettingsObservation struct {

	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	NielsenCbetSettings []NielsenCbetSettingsObservation `json:"nielsenCbetSettings,omitempty" tf:"nielsen_cbet_settings,omitempty"`

	// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
	NielsenDistributionType *string `json:"nielsenDistributionType,omitempty" tf:"nielsen_distribution_type,omitempty"`

	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	NielsenNaesIiNwSettings []NielsenNaesIiNwSettingsObservation `json:"nielsenNaesIiNwSettings,omitempty" tf:"nielsen_naes_ii_nw_settings,omitempty"`
}

type NielsenWatermarksSettingsParameters struct {

	// Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
	// +kubebuilder:validation:Optional
	NielsenCbetSettings []NielsenCbetSettingsParameters `json:"nielsenCbetSettings,omitempty" tf:"nielsen_cbet_settings,omitempty"`

	// Distribution types to assign to the watermarks. Options are PROGRAM_CONTENT and FINAL_DISTRIBUTOR.
	// +kubebuilder:validation:Optional
	NielsenDistributionType *string `json:"nielsenDistributionType,omitempty" tf:"nielsen_distribution_type,omitempty"`

	// Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
	// +kubebuilder:validation:Optional
	NielsenNaesIiNwSettings []NielsenNaesIiNwSettingsParameters `json:"nielsenNaesIiNwSettings,omitempty" tf:"nielsen_naes_ii_nw_settings,omitempty"`
}

type OutputGroupSettingsInitParameters struct {

	// Archive group settings. See Archive Group Settings for more details.
	ArchiveGroupSettings []ArchiveGroupSettingsInitParameters `json:"archiveGroupSettings,omitempty" tf:"archive_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureGroupSettings []FrameCaptureGroupSettingsInitParameters `json:"frameCaptureGroupSettings,omitempty" tf:"frame_capture_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsGroupSettings []HlsGroupSettingsInitParameters `json:"hlsGroupSettings,omitempty" tf:"hls_group_settings,omitempty"`

	// Media package group settings. See Media Package Group Settings for more details.
	MediaPackageGroupSettings []MediaPackageGroupSettingsInitParameters `json:"mediaPackageGroupSettings,omitempty" tf:"media_package_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	MsSmoothGroupSettings []MsSmoothGroupSettingsInitParameters `json:"msSmoothGroupSettings,omitempty" tf:"ms_smooth_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	MultiplexGroupSettings []MultiplexGroupSettingsInitParameters `json:"multiplexGroupSettings,omitempty" tf:"multiplex_group_settings,omitempty"`

	// RTMP group settings. See RTMP Group Settings for more details.
	RtmpGroupSettings []RtmpGroupSettingsInitParameters `json:"rtmpGroupSettings,omitempty" tf:"rtmp_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	UDPGroupSettings []UDPGroupSettingsInitParameters `json:"udpGroupSettings,omitempty" tf:"udp_group_settings,omitempty"`
}

type OutputGroupSettingsObservation struct {

	// Archive group settings. See Archive Group Settings for more details.
	ArchiveGroupSettings []ArchiveGroupSettingsObservation `json:"archiveGroupSettings,omitempty" tf:"archive_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	FrameCaptureGroupSettings []FrameCaptureGroupSettingsObservation `json:"frameCaptureGroupSettings,omitempty" tf:"frame_capture_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	HlsGroupSettings []HlsGroupSettingsObservation `json:"hlsGroupSettings,omitempty" tf:"hls_group_settings,omitempty"`

	// Media package group settings. See Media Package Group Settings for more details.
	MediaPackageGroupSettings []MediaPackageGroupSettingsObservation `json:"mediaPackageGroupSettings,omitempty" tf:"media_package_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	MsSmoothGroupSettings []MsSmoothGroupSettingsObservation `json:"msSmoothGroupSettings,omitempty" tf:"ms_smooth_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	MultiplexGroupSettings []MultiplexGroupSettingsParameters `json:"multiplexGroupSettings,omitempty" tf:"multiplex_group_settings,omitempty"`

	// RTMP group settings. See RTMP Group Settings for more details.
	RtmpGroupSettings []RtmpGroupSettingsObservation `json:"rtmpGroupSettings,omitempty" tf:"rtmp_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	UDPGroupSettings []UDPGroupSettingsObservation `json:"udpGroupSettings,omitempty" tf:"udp_group_settings,omitempty"`
}

type OutputGroupSettingsParameters struct {

	// Archive group settings. See Archive Group Settings for more details.
	// +kubebuilder:validation:Optional
	ArchiveGroupSettings []ArchiveGroupSettingsParameters `json:"archiveGroupSettings,omitempty" tf:"archive_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	FrameCaptureGroupSettings []FrameCaptureGroupSettingsParameters `json:"frameCaptureGroupSettings,omitempty" tf:"frame_capture_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	HlsGroupSettings []HlsGroupSettingsParameters `json:"hlsGroupSettings,omitempty" tf:"hls_group_settings,omitempty"`

	// Media package group settings. See Media Package Group Settings for more details.
	// +kubebuilder:validation:Optional
	MediaPackageGroupSettings []MediaPackageGroupSettingsParameters `json:"mediaPackageGroupSettings,omitempty" tf:"media_package_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	MsSmoothGroupSettings []MsSmoothGroupSettingsParameters `json:"msSmoothGroupSettings,omitempty" tf:"ms_smooth_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	MultiplexGroupSettings []MultiplexGroupSettingsParameters `json:"multiplexGroupSettings,omitempty" tf:"multiplex_group_settings,omitempty"`

	// RTMP group settings. See RTMP Group Settings for more details.
	// +kubebuilder:validation:Optional
	RtmpGroupSettings []RtmpGroupSettingsParameters `json:"rtmpGroupSettings,omitempty" tf:"rtmp_group_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	UDPGroupSettings []UDPGroupSettingsParameters `json:"udpGroupSettings,omitempty" tf:"udp_group_settings,omitempty"`
}

type OutputGroupsInitParameters struct {

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings associated with the output group. See Output Group Settings for more details.
	OutputGroupSettings []OutputGroupSettingsInitParameters `json:"outputGroupSettings,omitempty" tf:"output_group_settings,omitempty"`

	// List of outputs. See Outputs for more details.
	Outputs []OutputsInitParameters `json:"outputs,omitempty" tf:"outputs,omitempty"`
}

type OutputGroupsObservation struct {

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings associated with the output group. See Output Group Settings for more details.
	OutputGroupSettings []OutputGroupSettingsObservation `json:"outputGroupSettings,omitempty" tf:"output_group_settings,omitempty"`

	// List of outputs. See Outputs for more details.
	Outputs []OutputsObservation `json:"outputs,omitempty" tf:"outputs,omitempty"`
}

type OutputGroupsParameters struct {

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings associated with the output group. See Output Group Settings for more details.
	// +kubebuilder:validation:Optional
	OutputGroupSettings []OutputGroupSettingsParameters `json:"outputGroupSettings" tf:"output_group_settings,omitempty"`

	// List of outputs. See Outputs for more details.
	// +kubebuilder:validation:Optional
	Outputs []OutputsParameters `json:"outputs" tf:"outputs,omitempty"`
}

type OutputRectangleInitParameters struct {

	// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
	LeftOffset *float64 `json:"leftOffset,omitempty" tf:"left_offset,omitempty"`

	// See the description in left_offset. For top_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
	TopOffset *float64 `json:"topOffset,omitempty" tf:"top_offset,omitempty"`

	// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type OutputRectangleObservation struct {

	// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
	LeftOffset *float64 `json:"leftOffset,omitempty" tf:"left_offset,omitempty"`

	// See the description in left_offset. For top_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
	TopOffset *float64 `json:"topOffset,omitempty" tf:"top_offset,omitempty"`

	// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type OutputRectangleParameters struct {

	// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height" tf:"height,omitempty"`

	// Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don’t have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, "10" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
	// +kubebuilder:validation:Optional
	LeftOffset *float64 `json:"leftOffset" tf:"left_offset,omitempty"`

	// See the description in left_offset. For top_offset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, "10" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
	// +kubebuilder:validation:Optional
	TopOffset *float64 `json:"topOffset" tf:"top_offset,omitempty"`

	// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width" tf:"width,omitempty"`
}

type OutputSettingsInitParameters struct {

	// Archive output settings. See Archive Output Settings for more details.
	ArchiveOutputSettings []ArchiveOutputSettingsInitParameters `json:"archiveOutputSettings,omitempty" tf:"archive_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	FrameCaptureOutputSettings []FrameCaptureOutputSettingsInitParameters `json:"frameCaptureOutputSettings,omitempty" tf:"frame_capture_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	HlsOutputSettings []HlsOutputSettingsInitParameters `json:"hlsOutputSettings,omitempty" tf:"hls_output_settings,omitempty"`

	// Media package output settings. This can be set as an empty block.
	MediaPackageOutputSettings []MediaPackageOutputSettingsInitParameters `json:"mediaPackageOutputSettings,omitempty" tf:"media_package_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	MsSmoothOutputSettings []MsSmoothOutputSettingsInitParameters `json:"msSmoothOutputSettings,omitempty" tf:"ms_smooth_output_settings,omitempty"`

	// Multiplex output settings. See Multiplex Output Settings for more details.
	MultiplexOutputSettings []MultiplexOutputSettingsInitParameters `json:"multiplexOutputSettings,omitempty" tf:"multiplex_output_settings,omitempty"`

	// RTMP output settings. See RTMP Output Settings for more details.
	RtmpOutputSettings []RtmpOutputSettingsInitParameters `json:"rtmpOutputSettings,omitempty" tf:"rtmp_output_settings,omitempty"`

	// UDP output settings. See UDP Output Settings for more details.
	UDPOutputSettings []UDPOutputSettingsInitParameters `json:"udpOutputSettings,omitempty" tf:"udp_output_settings,omitempty"`
}

type OutputSettingsObservation struct {

	// Archive output settings. See Archive Output Settings for more details.
	ArchiveOutputSettings []ArchiveOutputSettingsObservation `json:"archiveOutputSettings,omitempty" tf:"archive_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	FrameCaptureOutputSettings []FrameCaptureOutputSettingsObservation `json:"frameCaptureOutputSettings,omitempty" tf:"frame_capture_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	HlsOutputSettings []HlsOutputSettingsObservation `json:"hlsOutputSettings,omitempty" tf:"hls_output_settings,omitempty"`

	// Media package output settings. This can be set as an empty block.
	MediaPackageOutputSettings []MediaPackageOutputSettingsParameters `json:"mediaPackageOutputSettings,omitempty" tf:"media_package_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	MsSmoothOutputSettings []MsSmoothOutputSettingsObservation `json:"msSmoothOutputSettings,omitempty" tf:"ms_smooth_output_settings,omitempty"`

	// Multiplex output settings. See Multiplex Output Settings for more details.
	MultiplexOutputSettings []MultiplexOutputSettingsObservation `json:"multiplexOutputSettings,omitempty" tf:"multiplex_output_settings,omitempty"`

	// RTMP output settings. See RTMP Output Settings for more details.
	RtmpOutputSettings []RtmpOutputSettingsObservation `json:"rtmpOutputSettings,omitempty" tf:"rtmp_output_settings,omitempty"`

	// UDP output settings. See UDP Output Settings for more details.
	UDPOutputSettings []UDPOutputSettingsObservation `json:"udpOutputSettings,omitempty" tf:"udp_output_settings,omitempty"`
}

type OutputSettingsParameters struct {

	// Archive output settings. See Archive Output Settings for more details.
	// +kubebuilder:validation:Optional
	ArchiveOutputSettings []ArchiveOutputSettingsParameters `json:"archiveOutputSettings,omitempty" tf:"archive_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	FrameCaptureOutputSettings []FrameCaptureOutputSettingsParameters `json:"frameCaptureOutputSettings,omitempty" tf:"frame_capture_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	HlsOutputSettings []HlsOutputSettingsParameters `json:"hlsOutputSettings,omitempty" tf:"hls_output_settings,omitempty"`

	// Media package output settings. This can be set as an empty block.
	// +kubebuilder:validation:Optional
	MediaPackageOutputSettings []MediaPackageOutputSettingsParameters `json:"mediaPackageOutputSettings,omitempty" tf:"media_package_output_settings,omitempty"`

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	MsSmoothOutputSettings []MsSmoothOutputSettingsParameters `json:"msSmoothOutputSettings,omitempty" tf:"ms_smooth_output_settings,omitempty"`

	// Multiplex output settings. See Multiplex Output Settings for more details.
	// +kubebuilder:validation:Optional
	MultiplexOutputSettings []MultiplexOutputSettingsParameters `json:"multiplexOutputSettings,omitempty" tf:"multiplex_output_settings,omitempty"`

	// RTMP output settings. See RTMP Output Settings for more details.
	// +kubebuilder:validation:Optional
	RtmpOutputSettings []RtmpOutputSettingsParameters `json:"rtmpOutputSettings,omitempty" tf:"rtmp_output_settings,omitempty"`

	// UDP output settings. See UDP Output Settings for more details.
	// +kubebuilder:validation:Optional
	UDPOutputSettings []UDPOutputSettingsParameters `json:"udpOutputSettings,omitempty" tf:"udp_output_settings,omitempty"`
}

type OutputsInitParameters struct {

	// The names of the audio descriptions used as audio sources for the output.
	// +listType=set
	AudioDescriptionNames []*string `json:"audioDescriptionNames,omitempty" tf:"audio_description_names,omitempty"`

	// The names of the caption descriptions used as caption sources for the output.
	// +listType=set
	CaptionDescriptionNames []*string `json:"captionDescriptionNames,omitempty" tf:"caption_description_names,omitempty"`

	// The name used to identify an output.
	OutputName *string `json:"outputName,omitempty" tf:"output_name,omitempty"`

	// Settings for output. See Output Settings for more details.
	OutputSettings []OutputSettingsInitParameters `json:"outputSettings,omitempty" tf:"output_settings,omitempty"`

	// The name of the video description used as video source for the output.
	VideoDescriptionName *string `json:"videoDescriptionName,omitempty" tf:"video_description_name,omitempty"`
}

type OutputsObservation struct {

	// The names of the audio descriptions used as audio sources for the output.
	// +listType=set
	AudioDescriptionNames []*string `json:"audioDescriptionNames,omitempty" tf:"audio_description_names,omitempty"`

	// The names of the caption descriptions used as caption sources for the output.
	// +listType=set
	CaptionDescriptionNames []*string `json:"captionDescriptionNames,omitempty" tf:"caption_description_names,omitempty"`

	// The name used to identify an output.
	OutputName *string `json:"outputName,omitempty" tf:"output_name,omitempty"`

	// Settings for output. See Output Settings for more details.
	OutputSettings []OutputSettingsObservation `json:"outputSettings,omitempty" tf:"output_settings,omitempty"`

	// The name of the video description used as video source for the output.
	VideoDescriptionName *string `json:"videoDescriptionName,omitempty" tf:"video_description_name,omitempty"`
}

type OutputsParameters struct {

	// The names of the audio descriptions used as audio sources for the output.
	// +kubebuilder:validation:Optional
	// +listType=set
	AudioDescriptionNames []*string `json:"audioDescriptionNames,omitempty" tf:"audio_description_names,omitempty"`

	// The names of the caption descriptions used as caption sources for the output.
	// +kubebuilder:validation:Optional
	// +listType=set
	CaptionDescriptionNames []*string `json:"captionDescriptionNames,omitempty" tf:"caption_description_names,omitempty"`

	// The name used to identify an output.
	// +kubebuilder:validation:Optional
	OutputName *string `json:"outputName,omitempty" tf:"output_name,omitempty"`

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	OutputSettings []OutputSettingsParameters `json:"outputSettings" tf:"output_settings,omitempty"`

	// The name of the video description used as video source for the output.
	// +kubebuilder:validation:Optional
	VideoDescriptionName *string `json:"videoDescriptionName,omitempty" tf:"video_description_name,omitempty"`
}

type PassThroughSettingsInitParameters struct {
}

type PassThroughSettingsObservation struct {
}

type PassThroughSettingsParameters struct {
}

type RawSettingsInitParameters struct {
}

type RawSettingsObservation struct {
}

type RawSettingsParameters struct {
}

type Rec601SettingsInitParameters struct {
}

type Rec601SettingsObservation struct {
}

type Rec601SettingsParameters struct {
}

type Rec709SettingsInitParameters struct {
}

type Rec709SettingsObservation struct {
}

type Rec709SettingsParameters struct {
}

type RemixSettingsInitParameters struct {
	ChannelMappings []ChannelMappingsInitParameters `json:"channelMappings,omitempty" tf:"channel_mappings,omitempty"`

	ChannelsIn *float64 `json:"channelsIn,omitempty" tf:"channels_in,omitempty"`

	ChannelsOut *float64 `json:"channelsOut,omitempty" tf:"channels_out,omitempty"`
}

type RemixSettingsObservation struct {
	ChannelMappings []ChannelMappingsObservation `json:"channelMappings,omitempty" tf:"channel_mappings,omitempty"`

	ChannelsIn *float64 `json:"channelsIn,omitempty" tf:"channels_in,omitempty"`

	ChannelsOut *float64 `json:"channelsOut,omitempty" tf:"channels_out,omitempty"`
}

type RemixSettingsParameters struct {

	// +kubebuilder:validation:Optional
	ChannelMappings []ChannelMappingsParameters `json:"channelMappings" tf:"channel_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelsIn *float64 `json:"channelsIn,omitempty" tf:"channels_in,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelsOut *float64 `json:"channelsOut,omitempty" tf:"channels_out,omitempty"`
}

type RtmpCaptionInfoDestinationSettingsInitParameters struct {
}

type RtmpCaptionInfoDestinationSettingsObservation struct {
}

type RtmpCaptionInfoDestinationSettingsParameters struct {
}

type RtmpGroupSettingsInitParameters struct {

	// The ad marker type for this output group.
	AdMarkers []*string `json:"adMarkers,omitempty" tf:"ad_markers,omitempty"`

	// Authentication scheme to use when connecting with CDN.
	AuthenticationScheme *string `json:"authenticationScheme,omitempty" tf:"authentication_scheme,omitempty"`

	// Controls behavior when content cache fills up.
	CacheFullBehavior *string `json:"cacheFullBehavior,omitempty" tf:"cache_full_behavior,omitempty"`

	// Cache length in seconds, is used to calculate buffer size.
	CacheLength *float64 `json:"cacheLength,omitempty" tf:"cache_length,omitempty"`

	// Controls the types of data that passes to onCaptionInfo outputs.
	CaptionData *string `json:"captionData,omitempty" tf:"caption_data,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type RtmpGroupSettingsObservation struct {

	// The ad marker type for this output group.
	AdMarkers []*string `json:"adMarkers,omitempty" tf:"ad_markers,omitempty"`

	// Authentication scheme to use when connecting with CDN.
	AuthenticationScheme *string `json:"authenticationScheme,omitempty" tf:"authentication_scheme,omitempty"`

	// Controls behavior when content cache fills up.
	CacheFullBehavior *string `json:"cacheFullBehavior,omitempty" tf:"cache_full_behavior,omitempty"`

	// Cache length in seconds, is used to calculate buffer size.
	CacheLength *float64 `json:"cacheLength,omitempty" tf:"cache_length,omitempty"`

	// Controls the types of data that passes to onCaptionInfo outputs.
	CaptionData *string `json:"captionData,omitempty" tf:"caption_data,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type RtmpGroupSettingsParameters struct {

	// The ad marker type for this output group.
	// +kubebuilder:validation:Optional
	AdMarkers []*string `json:"adMarkers,omitempty" tf:"ad_markers,omitempty"`

	// Authentication scheme to use when connecting with CDN.
	// +kubebuilder:validation:Optional
	AuthenticationScheme *string `json:"authenticationScheme,omitempty" tf:"authentication_scheme,omitempty"`

	// Controls behavior when content cache fills up.
	// +kubebuilder:validation:Optional
	CacheFullBehavior *string `json:"cacheFullBehavior,omitempty" tf:"cache_full_behavior,omitempty"`

	// Cache length in seconds, is used to calculate buffer size.
	// +kubebuilder:validation:Optional
	CacheLength *float64 `json:"cacheLength,omitempty" tf:"cache_length,omitempty"`

	// Controls the types of data that passes to onCaptionInfo outputs.
	// +kubebuilder:validation:Optional
	CaptionData *string `json:"captionData,omitempty" tf:"caption_data,omitempty"`

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Number of seconds to wait until a restart is initiated.
	// +kubebuilder:validation:Optional
	RestartDelay *float64 `json:"restartDelay,omitempty" tf:"restart_delay,omitempty"`
}

type RtmpOutputSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type RtmpOutputSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type RtmpOutputSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type RtmpOutputSettingsInitParameters struct {

	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode *string `json:"certificateMode,omitempty" tf:"certificate_mode,omitempty"`

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []RtmpOutputSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`
}

type RtmpOutputSettingsObservation struct {

	// Setting to allow self signed or verified RTMP certificates.
	CertificateMode *string `json:"certificateMode,omitempty" tf:"certificate_mode,omitempty"`

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []RtmpOutputSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// Number of retry attempts.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`
}

type RtmpOutputSettingsParameters struct {

	// Setting to allow self signed or verified RTMP certificates.
	// +kubebuilder:validation:Optional
	CertificateMode *string `json:"certificateMode,omitempty" tf:"certificate_mode,omitempty"`

	// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
	// +kubebuilder:validation:Optional
	ConnectionRetryInterval *float64 `json:"connectionRetryInterval,omitempty" tf:"connection_retry_interval,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []RtmpOutputSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`

	// Number of retry attempts.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`
}

type Scte20PlusEmbeddedDestinationSettingsInitParameters struct {
}

type Scte20PlusEmbeddedDestinationSettingsObservation struct {
}

type Scte20PlusEmbeddedDestinationSettingsParameters struct {
}

type Scte20SourceSettingsInitParameters struct {

	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 *string `json:"convert608To708,omitempty" tf:"convert_608_to_708,omitempty"`

	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber *float64 `json:"source608ChannelNumber,omitempty" tf:"source_608_channel_number,omitempty"`
}

type Scte20SourceSettingsObservation struct {

	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	Convert608To708 *string `json:"convert608To708,omitempty" tf:"convert_608_to_708,omitempty"`

	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	Source608ChannelNumber *float64 `json:"source608ChannelNumber,omitempty" tf:"source_608_channel_number,omitempty"`
}

type Scte20SourceSettingsParameters struct {

	// If upconvert, 608 data is both passed through via the “608 compatibility bytes” fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
	// +kubebuilder:validation:Optional
	Convert608To708 *string `json:"convert608To708,omitempty" tf:"convert_608_to_708,omitempty"`

	// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
	// +kubebuilder:validation:Optional
	Source608ChannelNumber *float64 `json:"source608ChannelNumber,omitempty" tf:"source_608_channel_number,omitempty"`
}

type Scte27DestinationSettingsInitParameters struct {
}

type Scte27DestinationSettingsObservation struct {
}

type Scte27DestinationSettingsParameters struct {
}

type Scte27SourceSettingsInitParameters struct {

	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage *string `json:"ocrLanguage,omitempty" tf:"ocr_language,omitempty"`

	// Selects a specific PID from within a source.
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type Scte27SourceSettingsObservation struct {

	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	OcrLanguage *string `json:"ocrLanguage,omitempty" tf:"ocr_language,omitempty"`

	// Selects a specific PID from within a source.
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type Scte27SourceSettingsParameters struct {

	// If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
	// +kubebuilder:validation:Optional
	OcrLanguage *string `json:"ocrLanguage,omitempty" tf:"ocr_language,omitempty"`

	// Selects a specific PID from within a source.
	// +kubebuilder:validation:Optional
	Pid *float64 `json:"pid,omitempty" tf:"pid,omitempty"`
}

type SelectorSettingsInitParameters struct {

	// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
	AudioHlsRenditionSelection []AudioHlsRenditionSelectionInitParameters `json:"audioHlsRenditionSelection,omitempty" tf:"audio_hls_rendition_selection,omitempty"`

	// Audio Language Selection. See Audio Language Selection for more details.
	AudioLanguageSelection []AudioLanguageSelectionInitParameters `json:"audioLanguageSelection,omitempty" tf:"audio_language_selection,omitempty"`

	// Audio Pid Selection. See Audio PID Selection for more details.
	AudioPidSelection []AudioPidSelectionInitParameters `json:"audioPidSelection,omitempty" tf:"audio_pid_selection,omitempty"`

	// Audio Track Selection. See Audio Track Selection for more details.
	AudioTrackSelection []AudioTrackSelectionInitParameters `json:"audioTrackSelection,omitempty" tf:"audio_track_selection,omitempty"`
}

type SelectorSettingsObservation struct {

	// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
	AudioHlsRenditionSelection []AudioHlsRenditionSelectionObservation `json:"audioHlsRenditionSelection,omitempty" tf:"audio_hls_rendition_selection,omitempty"`

	// Audio Language Selection. See Audio Language Selection for more details.
	AudioLanguageSelection []AudioLanguageSelectionObservation `json:"audioLanguageSelection,omitempty" tf:"audio_language_selection,omitempty"`

	// Audio Pid Selection. See Audio PID Selection for more details.
	AudioPidSelection []AudioPidSelectionObservation `json:"audioPidSelection,omitempty" tf:"audio_pid_selection,omitempty"`

	// Audio Track Selection. See Audio Track Selection for more details.
	AudioTrackSelection []AudioTrackSelectionObservation `json:"audioTrackSelection,omitempty" tf:"audio_track_selection,omitempty"`
}

type SelectorSettingsParameters struct {

	// Audio HLS Rendition Selection. See Audio HLS Rendition Selection for more details.
	// +kubebuilder:validation:Optional
	AudioHlsRenditionSelection []AudioHlsRenditionSelectionParameters `json:"audioHlsRenditionSelection,omitempty" tf:"audio_hls_rendition_selection,omitempty"`

	// Audio Language Selection. See Audio Language Selection for more details.
	// +kubebuilder:validation:Optional
	AudioLanguageSelection []AudioLanguageSelectionParameters `json:"audioLanguageSelection,omitempty" tf:"audio_language_selection,omitempty"`

	// Audio Pid Selection. See Audio PID Selection for more details.
	// +kubebuilder:validation:Optional
	AudioPidSelection []AudioPidSelectionParameters `json:"audioPidSelection,omitempty" tf:"audio_pid_selection,omitempty"`

	// Audio Track Selection. See Audio Track Selection for more details.
	// +kubebuilder:validation:Optional
	AudioTrackSelection []AudioTrackSelectionParameters `json:"audioTrackSelection,omitempty" tf:"audio_track_selection,omitempty"`
}

type SettingsInitParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// A URL specifying a destination.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SettingsObservation struct {

	// Key used to extract the password from EC2 Parameter store.
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// Stream name RTMP destinations (URLs of type rtmp://)
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// A URL specifying a destination.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Username for destination.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SettingsParameters struct {

	// Key used to extract the password from EC2 Parameter store.
	// +kubebuilder:validation:Optional
	PasswordParam *string `json:"passwordParam,omitempty" tf:"password_param,omitempty"`

	// Stream name RTMP destinations (URLs of type rtmp://)
	// +kubebuilder:validation:Optional
	StreamName *string `json:"streamName,omitempty" tf:"stream_name,omitempty"`

	// A URL specifying a destination.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Username for destination.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SmpteTtDestinationSettingsInitParameters struct {
}

type SmpteTtDestinationSettingsObservation struct {
}

type SmpteTtDestinationSettingsParameters struct {
}

type StandardHlsSettingsInitParameters struct {
	AudioRenditionSets *string `json:"audioRenditionSets,omitempty" tf:"audio_rendition_sets,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	M3U8Settings []M3U8SettingsInitParameters `json:"m3u8Settings,omitempty" tf:"m3u8_settings,omitempty"`
}

type StandardHlsSettingsObservation struct {
	AudioRenditionSets *string `json:"audioRenditionSets,omitempty" tf:"audio_rendition_sets,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	M3U8Settings []M3U8SettingsObservation `json:"m3u8Settings,omitempty" tf:"m3u8_settings,omitempty"`
}

type StandardHlsSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AudioRenditionSets *string `json:"audioRenditionSets,omitempty" tf:"audio_rendition_sets,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	M3U8Settings []M3U8SettingsParameters `json:"m3u8Settings" tf:"m3u8_settings,omitempty"`
}

type StaticKeySettingsInitParameters struct {
	KeyProviderServer []KeyProviderServerInitParameters `json:"keyProviderServer,omitempty" tf:"key_provider_server,omitempty"`

	StaticKeyValue *string `json:"staticKeyValue,omitempty" tf:"static_key_value,omitempty"`
}

type StaticKeySettingsObservation struct {
	KeyProviderServer []KeyProviderServerObservation `json:"keyProviderServer,omitempty" tf:"key_provider_server,omitempty"`

	StaticKeyValue *string `json:"staticKeyValue,omitempty" tf:"static_key_value,omitempty"`
}

type StaticKeySettingsParameters struct {

	// +kubebuilder:validation:Optional
	KeyProviderServer []KeyProviderServerParameters `json:"keyProviderServer,omitempty" tf:"key_provider_server,omitempty"`

	// +kubebuilder:validation:Optional
	StaticKeyValue *string `json:"staticKeyValue" tf:"static_key_value,omitempty"`
}

type TeletextDestinationSettingsInitParameters struct {
}

type TeletextDestinationSettingsObservation struct {
}

type TeletextDestinationSettingsParameters struct {
}

type TeletextSourceSettingsInitParameters struct {

	// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
	OutputRectangle []OutputRectangleInitParameters `json:"outputRectangle,omitempty" tf:"output_rectangle,omitempty"`

	// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
	PageNumber *string `json:"pageNumber,omitempty" tf:"page_number,omitempty"`
}

type TeletextSourceSettingsObservation struct {

	// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
	OutputRectangle []OutputRectangleObservation `json:"outputRectangle,omitempty" tf:"output_rectangle,omitempty"`

	// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
	PageNumber *string `json:"pageNumber,omitempty" tf:"page_number,omitempty"`
}

type TeletextSourceSettingsParameters struct {

	// Optionally defines a region where TTML style captions will be displayed. See Caption Rectangle for more details.
	// +kubebuilder:validation:Optional
	OutputRectangle []OutputRectangleParameters `json:"outputRectangle,omitempty" tf:"output_rectangle,omitempty"`

	// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no “0x” prefix.
	// +kubebuilder:validation:Optional
	PageNumber *string `json:"pageNumber,omitempty" tf:"page_number,omitempty"`
}

type TemporalFilterSettingsInitParameters struct {

	// Post filter sharpening.
	PostFilterSharpening *string `json:"postFilterSharpening,omitempty" tf:"post_filter_sharpening,omitempty"`

	// Filter strength.
	Strength *string `json:"strength,omitempty" tf:"strength,omitempty"`
}

type TemporalFilterSettingsObservation struct {

	// Post filter sharpening.
	PostFilterSharpening *string `json:"postFilterSharpening,omitempty" tf:"post_filter_sharpening,omitempty"`

	// Filter strength.
	Strength *string `json:"strength,omitempty" tf:"strength,omitempty"`
}

type TemporalFilterSettingsParameters struct {

	// Post filter sharpening.
	// +kubebuilder:validation:Optional
	PostFilterSharpening *string `json:"postFilterSharpening,omitempty" tf:"post_filter_sharpening,omitempty"`

	// Filter strength.
	// +kubebuilder:validation:Optional
	Strength *string `json:"strength,omitempty" tf:"strength,omitempty"`
}

type TimecodeBurninSettingsInitParameters struct {

	// Set a prefix on the burned in timecode.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Sets the size of the burned in timecode.
	TimecodeBurninFontSize *string `json:"timecodeBurninFontSize,omitempty" tf:"timecode_burnin_font_size,omitempty"`

	// Sets the position of the burned in timecode.
	TimecodeBurninPosition *string `json:"timecodeBurninPosition,omitempty" tf:"timecode_burnin_position,omitempty"`
}

type TimecodeBurninSettingsObservation struct {

	// Set a prefix on the burned in timecode.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Sets the size of the burned in timecode.
	TimecodeBurninFontSize *string `json:"timecodeBurninFontSize,omitempty" tf:"timecode_burnin_font_size,omitempty"`

	// Sets the position of the burned in timecode.
	TimecodeBurninPosition *string `json:"timecodeBurninPosition,omitempty" tf:"timecode_burnin_position,omitempty"`
}

type TimecodeBurninSettingsParameters struct {

	// Set a prefix on the burned in timecode.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Sets the size of the burned in timecode.
	// +kubebuilder:validation:Optional
	TimecodeBurninFontSize *string `json:"timecodeBurninFontSize,omitempty" tf:"timecode_burnin_font_size,omitempty"`

	// Sets the position of the burned in timecode.
	// +kubebuilder:validation:Optional
	TimecodeBurninPosition *string `json:"timecodeBurninPosition,omitempty" tf:"timecode_burnin_position,omitempty"`
}

type TimecodeConfigInitParameters struct {

	// The source for the timecode that will be associated with the events outputs.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	SyncThreshold *float64 `json:"syncThreshold,omitempty" tf:"sync_threshold,omitempty"`
}

type TimecodeConfigObservation struct {

	// The source for the timecode that will be associated with the events outputs.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	SyncThreshold *float64 `json:"syncThreshold,omitempty" tf:"sync_threshold,omitempty"`
}

type TimecodeConfigParameters struct {

	// The source for the timecode that will be associated with the events outputs.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// Threshold in frames beyond which output timecode is resynchronized to the input timecode.
	// +kubebuilder:validation:Optional
	SyncThreshold *float64 `json:"syncThreshold,omitempty" tf:"sync_threshold,omitempty"`
}

type TracksInitParameters struct {

	// 1-based integer value that maps to a specific audio track.
	Track *float64 `json:"track,omitempty" tf:"track,omitempty"`
}

type TracksObservation struct {

	// 1-based integer value that maps to a specific audio track.
	Track *float64 `json:"track,omitempty" tf:"track,omitempty"`
}

type TracksParameters struct {

	// 1-based integer value that maps to a specific audio track.
	// +kubebuilder:validation:Optional
	Track *float64 `json:"track" tf:"track,omitempty"`
}

type TtmlDestinationSettingsInitParameters struct {

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type TtmlDestinationSettingsObservation struct {

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type TtmlDestinationSettingsParameters struct {

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	// +kubebuilder:validation:Optional
	StyleControl *string `json:"styleControl" tf:"style_control,omitempty"`
}

type UDPGroupSettingsInitParameters struct {

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame *string `json:"timedMetadataId3Frame,omitempty" tf:"timed_metadata_id3_frame,omitempty"`

	TimedMetadataId3Period *float64 `json:"timedMetadataId3Period,omitempty" tf:"timed_metadata_id3_period,omitempty"`
}

type UDPGroupSettingsObservation struct {

	// Controls the behavior of the RTMP group if input becomes unavailable.
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Indicates ID3 frame that has the timecode.
	TimedMetadataId3Frame *string `json:"timedMetadataId3Frame,omitempty" tf:"timed_metadata_id3_frame,omitempty"`

	TimedMetadataId3Period *float64 `json:"timedMetadataId3Period,omitempty" tf:"timed_metadata_id3_period,omitempty"`
}

type UDPGroupSettingsParameters struct {

	// Controls the behavior of the RTMP group if input becomes unavailable.
	// +kubebuilder:validation:Optional
	InputLossAction *string `json:"inputLossAction,omitempty" tf:"input_loss_action,omitempty"`

	// Indicates ID3 frame that has the timecode.
	// +kubebuilder:validation:Optional
	TimedMetadataId3Frame *string `json:"timedMetadataId3Frame,omitempty" tf:"timed_metadata_id3_frame,omitempty"`

	// +kubebuilder:validation:Optional
	TimedMetadataId3Period *float64 `json:"timedMetadataId3Period,omitempty" tf:"timed_metadata_id3_period,omitempty"`
}

type UDPOutputSettingsContainerSettingsInitParameters struct {

	// M2TS Settings. See M2TS Settings for more details.
	M2TsSettings []ContainerSettingsM2TsSettingsInitParameters `json:"m2tsSettings,omitempty" tf:"m2ts_settings,omitempty"`
}

type UDPOutputSettingsContainerSettingsObservation struct {

	// M2TS Settings. See M2TS Settings for more details.
	M2TsSettings []ContainerSettingsM2TsSettingsObservation `json:"m2tsSettings,omitempty" tf:"m2ts_settings,omitempty"`
}

type UDPOutputSettingsContainerSettingsParameters struct {

	// M2TS Settings. See M2TS Settings for more details.
	// +kubebuilder:validation:Optional
	M2TsSettings []ContainerSettingsM2TsSettingsParameters `json:"m2tsSettings,omitempty" tf:"m2ts_settings,omitempty"`
}

type UDPOutputSettingsDestinationInitParameters struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type UDPOutputSettingsDestinationObservation struct {

	// Reference ID for the destination.
	DestinationRefID *string `json:"destinationRefId,omitempty" tf:"destination_ref_id,omitempty"`
}

type UDPOutputSettingsDestinationParameters struct {

	// Reference ID for the destination.
	// +kubebuilder:validation:Optional
	DestinationRefID *string `json:"destinationRefId" tf:"destination_ref_id,omitempty"`
}

type UDPOutputSettingsInitParameters struct {

	// UDP output buffering in milliseconds.
	BufferMsec *float64 `json:"bufferMsec,omitempty" tf:"buffer_msec,omitempty"`

	// Settings specific to the container type of the file. See Container Settings for more details.
	ContainerSettings []UDPOutputSettingsContainerSettingsInitParameters `json:"containerSettings,omitempty" tf:"container_settings,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []UDPOutputSettingsDestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Settings for output. See Output Settings for more details.
	FecOutputSettings []FecOutputSettingsInitParameters `json:"fecOutputSettings,omitempty" tf:"fec_output_settings,omitempty"`
}

type UDPOutputSettingsObservation struct {

	// UDP output buffering in milliseconds.
	BufferMsec *float64 `json:"bufferMsec,omitempty" tf:"buffer_msec,omitempty"`

	// Settings specific to the container type of the file. See Container Settings for more details.
	ContainerSettings []UDPOutputSettingsContainerSettingsObservation `json:"containerSettings,omitempty" tf:"container_settings,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	Destination []UDPOutputSettingsDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// Settings for output. See Output Settings for more details.
	FecOutputSettings []FecOutputSettingsObservation `json:"fecOutputSettings,omitempty" tf:"fec_output_settings,omitempty"`
}

type UDPOutputSettingsParameters struct {

	// UDP output buffering in milliseconds.
	// +kubebuilder:validation:Optional
	BufferMsec *float64 `json:"bufferMsec,omitempty" tf:"buffer_msec,omitempty"`

	// Settings specific to the container type of the file. See Container Settings for more details.
	// +kubebuilder:validation:Optional
	ContainerSettings []UDPOutputSettingsContainerSettingsParameters `json:"containerSettings" tf:"container_settings,omitempty"`

	// A director and base filename where archive files should be written. See Destination for more details.
	// +kubebuilder:validation:Optional
	Destination []UDPOutputSettingsDestinationParameters `json:"destination" tf:"destination,omitempty"`

	// Settings for output. See Output Settings for more details.
	// +kubebuilder:validation:Optional
	FecOutputSettings []FecOutputSettingsParameters `json:"fecOutputSettings,omitempty" tf:"fec_output_settings,omitempty"`
}

type VPCInitParameters struct {

	// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
	PublicAddressAllocationIds []*string `json:"publicAddressAllocationIds,omitempty" tf:"public_address_allocation_ids,omitempty"`

	// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type VPCObservation struct {

	// +listType=set
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// +listType=set
	NetworkInterfaceIds []*string `json:"networkInterfaceIds,omitempty" tf:"network_interface_ids,omitempty"`

	// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
	PublicAddressAllocationIds []*string `json:"publicAddressAllocationIds,omitempty" tf:"public_address_allocation_ids,omitempty"`

	// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type VPCParameters struct {

	// List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels.
	// +kubebuilder:validation:Optional
	PublicAddressAllocationIds []*string `json:"publicAddressAllocationIds" tf:"public_address_allocation_ids,omitempty"`

	// A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ).
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`
}

type VideoBlackSettingsInitParameters struct {

	// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
	BlackDetectThreshold *float64 `json:"blackDetectThreshold,omitempty" tf:"black_detect_threshold,omitempty"`

	// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
	VideoBlackThresholdMsec *float64 `json:"videoBlackThresholdMsec,omitempty" tf:"video_black_threshold_msec,omitempty"`
}

type VideoBlackSettingsObservation struct {

	// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
	BlackDetectThreshold *float64 `json:"blackDetectThreshold,omitempty" tf:"black_detect_threshold,omitempty"`

	// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
	VideoBlackThresholdMsec *float64 `json:"videoBlackThresholdMsec,omitempty" tf:"video_black_threshold_msec,omitempty"`
}

type VideoBlackSettingsParameters struct {

	// A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
	// +kubebuilder:validation:Optional
	BlackDetectThreshold *float64 `json:"blackDetectThreshold,omitempty" tf:"black_detect_threshold,omitempty"`

	// The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
	// +kubebuilder:validation:Optional
	VideoBlackThresholdMsec *float64 `json:"videoBlackThresholdMsec,omitempty" tf:"video_black_threshold_msec,omitempty"`
}

type VideoDescriptionsCodecSettingsInitParameters struct {

	// Frame capture settings. See Frame Capture Settings for more details.
	FrameCaptureSettings []FrameCaptureSettingsInitParameters `json:"frameCaptureSettings,omitempty" tf:"frame_capture_settings,omitempty"`

	// H264 settings. See H264 Settings for more details.
	H264Settings []H264SettingsInitParameters `json:"h264Settings,omitempty" tf:"h264_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	H265Settings []H265SettingsInitParameters `json:"h265Settings,omitempty" tf:"h265_settings,omitempty"`
}

type VideoDescriptionsCodecSettingsObservation struct {

	// Frame capture settings. See Frame Capture Settings for more details.
	FrameCaptureSettings []FrameCaptureSettingsObservation `json:"frameCaptureSettings,omitempty" tf:"frame_capture_settings,omitempty"`

	// H264 settings. See H264 Settings for more details.
	H264Settings []H264SettingsObservation `json:"h264Settings,omitempty" tf:"h264_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	H265Settings []H265SettingsObservation `json:"h265Settings,omitempty" tf:"h265_settings,omitempty"`
}

type VideoDescriptionsCodecSettingsParameters struct {

	// Frame capture settings. See Frame Capture Settings for more details.
	// +kubebuilder:validation:Optional
	FrameCaptureSettings []FrameCaptureSettingsParameters `json:"frameCaptureSettings,omitempty" tf:"frame_capture_settings,omitempty"`

	// H264 settings. See H264 Settings for more details.
	// +kubebuilder:validation:Optional
	H264Settings []H264SettingsParameters `json:"h264Settings,omitempty" tf:"h264_settings,omitempty"`

	// Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
	// +kubebuilder:validation:Optional
	H265Settings []H265SettingsParameters `json:"h265Settings,omitempty" tf:"h265_settings,omitempty"`
}

type VideoDescriptionsInitParameters struct {

	// Audio codec settings. See Audio Codec Settings for more details.
	CodecSettings []VideoDescriptionsCodecSettingsInitParameters `json:"codecSettings,omitempty" tf:"codec_settings,omitempty"`

	// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicate how to respond to the AFD values that might be in the input video.
	RespondToAfd *string `json:"respondToAfd,omitempty" tf:"respond_to_afd,omitempty"`

	// Behavior on how to scale.
	ScalingBehavior *string `json:"scalingBehavior,omitempty" tf:"scaling_behavior,omitempty"`

	// Changes the strength of the anti-alias filter used for scaling.
	Sharpness *float64 `json:"sharpness,omitempty" tf:"sharpness,omitempty"`

	// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type VideoDescriptionsObservation struct {

	// Audio codec settings. See Audio Codec Settings for more details.
	CodecSettings []VideoDescriptionsCodecSettingsObservation `json:"codecSettings,omitempty" tf:"codec_settings,omitempty"`

	// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Name of the Channel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicate how to respond to the AFD values that might be in the input video.
	RespondToAfd *string `json:"respondToAfd,omitempty" tf:"respond_to_afd,omitempty"`

	// Behavior on how to scale.
	ScalingBehavior *string `json:"scalingBehavior,omitempty" tf:"scaling_behavior,omitempty"`

	// Changes the strength of the anti-alias filter used for scaling.
	Sharpness *float64 `json:"sharpness,omitempty" tf:"sharpness,omitempty"`

	// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type VideoDescriptionsParameters struct {

	// Audio codec settings. See Audio Codec Settings for more details.
	// +kubebuilder:validation:Optional
	CodecSettings []VideoDescriptionsCodecSettingsParameters `json:"codecSettings,omitempty" tf:"codec_settings,omitempty"`

	// See the description in left_offset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, "80" means the rectangle height is 80% of the underlying frame height. The top_offset and rectangle_height must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Name of the Channel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Indicate how to respond to the AFD values that might be in the input video.
	// +kubebuilder:validation:Optional
	RespondToAfd *string `json:"respondToAfd,omitempty" tf:"respond_to_afd,omitempty"`

	// Behavior on how to scale.
	// +kubebuilder:validation:Optional
	ScalingBehavior *string `json:"scalingBehavior,omitempty" tf:"scaling_behavior,omitempty"`

	// Changes the strength of the anti-alias filter used for scaling.
	// +kubebuilder:validation:Optional
	Sharpness *float64 `json:"sharpness,omitempty" tf:"sharpness,omitempty"`

	// See the description in left_offset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, "80" means the rectangle width is 80% of the underlying frame width. The left_offset and rectangle_width must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type VideoSelectorInitParameters struct {
	ColorSpace *string `json:"colorSpace,omitempty" tf:"color_space,omitempty"`

	ColorSpaceUsage *string `json:"colorSpaceUsage,omitempty" tf:"color_space_usage,omitempty"`
}

type VideoSelectorObservation struct {
	ColorSpace *string `json:"colorSpace,omitempty" tf:"color_space,omitempty"`

	ColorSpaceUsage *string `json:"colorSpaceUsage,omitempty" tf:"color_space_usage,omitempty"`
}

type VideoSelectorParameters struct {

	// +kubebuilder:validation:Optional
	ColorSpace *string `json:"colorSpace,omitempty" tf:"color_space,omitempty"`

	// +kubebuilder:validation:Optional
	ColorSpaceUsage *string `json:"colorSpaceUsage,omitempty" tf:"color_space_usage,omitempty"`
}

type WavSettingsInitParameters struct {
	BitDepth *float64 `json:"bitDepth,omitempty" tf:"bit_depth,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sample rate in Hz.
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type WavSettingsObservation struct {
	BitDepth *float64 `json:"bitDepth,omitempty" tf:"bit_depth,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sample rate in Hz.
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type WavSettingsParameters struct {

	// +kubebuilder:validation:Optional
	BitDepth *float64 `json:"bitDepth,omitempty" tf:"bit_depth,omitempty"`

	// Mono, Stereo, or 5.1 channel layout.
	// +kubebuilder:validation:Optional
	CodingMode *string `json:"codingMode,omitempty" tf:"coding_mode,omitempty"`

	// Sample rate in Hz.
	// +kubebuilder:validation:Optional
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

type WebvttDestinationSettingsInitParameters struct {

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type WebvttDestinationSettingsObservation struct {

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	StyleControl *string `json:"styleControl,omitempty" tf:"style_control,omitempty"`
}

type WebvttDestinationSettingsParameters struct {

	// TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to “monospaced”. Do not include any other style information.
	// +kubebuilder:validation:Optional
	StyleControl *string `json:"styleControl" tf:"style_control,omitempty"`
}

// ChannelSpec defines the desired state of Channel
type ChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ChannelInitParameters `json:"initProvider,omitempty"`
}

// ChannelStatus defines the observed state of Channel.
type ChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Channel is the Schema for the Channels API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Channel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.channelClass) || (has(self.initProvider) && has(self.initProvider.channelClass))",message="spec.forProvider.channelClass is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinations) || (has(self.initProvider) && has(self.initProvider.destinations))",message="spec.forProvider.destinations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.encoderSettings) || (has(self.initProvider) && has(self.initProvider.encoderSettings))",message="spec.forProvider.encoderSettings is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.inputAttachments) || (has(self.initProvider) && has(self.initProvider.inputAttachments))",message="spec.forProvider.inputAttachments is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.inputSpecification) || (has(self.initProvider) && has(self.initProvider.inputSpecification))",message="spec.forProvider.inputSpecification is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ChannelSpec   `json:"spec"`
	Status ChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelList contains a list of Channels
type ChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Channel `json:"items"`
}

// Repository type metadata.
var (
	Channel_Kind             = "Channel"
	Channel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Channel_Kind}.String()
	Channel_KindAPIVersion   = Channel_Kind + "." + CRDGroupVersion.String()
	Channel_GroupVersionKind = CRDGroupVersion.WithKind(Channel_Kind)
)

func init() {
	SchemeBuilder.Register(&Channel{}, &ChannelList{})
}
