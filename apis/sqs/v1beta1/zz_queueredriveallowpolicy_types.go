/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueueRedriveAllowPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The URL of the SQS Queue to which to attach the policy
	QueueURL *string `json:"queueUrl,omitempty" tf:"queue_url,omitempty"`

	// The JSON redrive allow policy for the SQS queue. Learn more in the Amazon SQS dead-letter queues documentation.
	RedriveAllowPolicy *string `json:"redriveAllowPolicy,omitempty" tf:"redrive_allow_policy,omitempty"`
}

type QueueRedriveAllowPolicyParameters struct {

	// The URL of the SQS Queue to which to attach the policy
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	QueueURL *string `json:"queueUrl,omitempty" tf:"queue_url,omitempty"`

	// Reference to a Queue in sqs to populate queueUrl.
	// +kubebuilder:validation:Optional
	QueueURLRef *v1.Reference `json:"queueUrlRef,omitempty" tf:"-"`

	// Selector for a Queue in sqs to populate queueUrl.
	// +kubebuilder:validation:Optional
	QueueURLSelector *v1.Selector `json:"queueUrlSelector,omitempty" tf:"-"`

	// The JSON redrive allow policy for the SQS queue. Learn more in the Amazon SQS dead-letter queues documentation.
	// +kubebuilder:validation:Optional
	RedriveAllowPolicy *string `json:"redriveAllowPolicy,omitempty" tf:"redrive_allow_policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// QueueRedriveAllowPolicySpec defines the desired state of QueueRedriveAllowPolicy
type QueueRedriveAllowPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueRedriveAllowPolicyParameters `json:"forProvider"`
}

// QueueRedriveAllowPolicyStatus defines the observed state of QueueRedriveAllowPolicy.
type QueueRedriveAllowPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueRedriveAllowPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QueueRedriveAllowPolicy is the Schema for the QueueRedriveAllowPolicys API. Provides a SQS Queue Redrive Allow Policy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type QueueRedriveAllowPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.redriveAllowPolicy)",message="redriveAllowPolicy is a required parameter"
	Spec   QueueRedriveAllowPolicySpec   `json:"spec"`
	Status QueueRedriveAllowPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueRedriveAllowPolicyList contains a list of QueueRedriveAllowPolicys
type QueueRedriveAllowPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueueRedriveAllowPolicy `json:"items"`
}

// Repository type metadata.
var (
	QueueRedriveAllowPolicy_Kind             = "QueueRedriveAllowPolicy"
	QueueRedriveAllowPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueueRedriveAllowPolicy_Kind}.String()
	QueueRedriveAllowPolicy_KindAPIVersion   = QueueRedriveAllowPolicy_Kind + "." + CRDGroupVersion.String()
	QueueRedriveAllowPolicy_GroupVersionKind = CRDGroupVersion.WithKind(QueueRedriveAllowPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&QueueRedriveAllowPolicy{}, &QueueRedriveAllowPolicyList{})
}
