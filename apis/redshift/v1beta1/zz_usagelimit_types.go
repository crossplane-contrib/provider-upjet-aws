/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UsageLimitObservation struct {

	// Amazon Resource Name (ARN) of the Redshift Usage Limit.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The Redshift Usage Limit ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type UsageLimitParameters struct {

	// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
	// +kubebuilder:validation:Required
	Amount *float64 `json:"amount" tf:"amount,omitempty"`

	// The action that Amazon Redshift takes when the limit is reached. The default is log. Valid values are log, emit-metric, and disable.
	// +kubebuilder:validation:Optional
	BreachAction *string `json:"breachAction,omitempty" tf:"breach_action,omitempty"`

	// The identifier of the cluster that you want to limit usage.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/redshift/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ClusterIdentifier *string `json:"clusterIdentifier,omitempty" tf:"cluster_identifier,omitempty"`

	// Reference to a Cluster in redshift to populate clusterIdentifier.
	// +kubebuilder:validation:Optional
	ClusterIdentifierRef *v1.Reference `json:"clusterIdentifierRef,omitempty" tf:"-"`

	// Selector for a Cluster in redshift to populate clusterIdentifier.
	// +kubebuilder:validation:Optional
	ClusterIdentifierSelector *v1.Selector `json:"clusterIdentifierSelector,omitempty" tf:"-"`

	// The Amazon Redshift feature that you want to limit. Valid values are spectrum, concurrency-scaling, and cross-region-datasharing.
	// +kubebuilder:validation:Required
	FeatureType *string `json:"featureType" tf:"feature_type,omitempty"`

	// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned. Valid values are data-scanned, and time.
	// +kubebuilder:validation:Required
	LimitType *string `json:"limitType" tf:"limit_type,omitempty"`

	// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly. Valid values are daily, weekly, and monthly.
	// +kubebuilder:validation:Optional
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// UsageLimitSpec defines the desired state of UsageLimit
type UsageLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UsageLimitParameters `json:"forProvider"`
}

// UsageLimitStatus defines the observed state of UsageLimit.
type UsageLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UsageLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UsageLimit is the Schema for the UsageLimits API. Provides a Redshift Usage Limit resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type UsageLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UsageLimitSpec   `json:"spec"`
	Status            UsageLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UsageLimitList contains a list of UsageLimits
type UsageLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UsageLimit `json:"items"`
}

// Repository type metadata.
var (
	UsageLimit_Kind             = "UsageLimit"
	UsageLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UsageLimit_Kind}.String()
	UsageLimit_KindAPIVersion   = UsageLimit_Kind + "." + CRDGroupVersion.String()
	UsageLimit_GroupVersionKind = CRDGroupVersion.WithKind(UsageLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&UsageLimit{}, &UsageLimitList{})
}
