/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HSMConfigurationObservation struct {

	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type HSMConfigurationParameters struct {

	// A text description of the HSM configuration to be created.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	// +kubebuilder:validation:Required
	HSMIPAddress *string `json:"hsmIpAddress" tf:"hsm_ip_address,omitempty"`

	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	// +kubebuilder:validation:Required
	HSMPartitionName *string `json:"hsmPartitionName" tf:"hsm_partition_name,omitempty"`

	// The password required to access the HSM partition.
	// +kubebuilder:validation:Required
	HSMPartitionPasswordSecretRef v1.SecretKeySelector `json:"hsmPartitionPasswordSecretRef" tf:"-"`

	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	// +kubebuilder:validation:Required
	HSMServerPublicCertificate *string `json:"hsmServerPublicCertificate" tf:"hsm_server_public_certificate,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// HSMConfigurationSpec defines the desired state of HSMConfiguration
type HSMConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HSMConfigurationParameters `json:"forProvider"`
}

// HSMConfigurationStatus defines the observed state of HSMConfiguration.
type HSMConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HSMConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HSMConfiguration is the Schema for the HSMConfigurations API. Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type HSMConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HSMConfigurationSpec   `json:"spec"`
	Status            HSMConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HSMConfigurationList contains a list of HSMConfigurations
type HSMConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HSMConfiguration `json:"items"`
}

// Repository type metadata.
var (
	HSMConfiguration_Kind             = "HSMConfiguration"
	HSMConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HSMConfiguration_Kind}.String()
	HSMConfiguration_KindAPIVersion   = HSMConfiguration_Kind + "." + CRDGroupVersion.String()
	HSMConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(HSMConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&HSMConfiguration{}, &HSMConfigurationList{})
}
