// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CollectionInitParameters struct {

	// Description of the collection.
	// Description of the collection.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the collection.
	// Name of the collection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates whether standby replicas should be used for a collection. One of ENABLED or DISABLED. Defaults to ENABLED.
	// Indicates whether standby replicas should be used for a collection. One of `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	StandbyReplicas *string `json:"standbyReplicas,omitempty" tf:"standby_replicas,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Type of collection. One of SEARCH, TIMESERIES, or VECTORSEARCH. Defaults to TIMESERIES.
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CollectionObservation struct {

	// Amazon Resource Name (ARN) of the collection.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
	// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
	CollectionEndpoint *string `json:"collectionEndpoint,omitempty" tf:"collection_endpoint,omitempty"`

	// Collection-specific endpoint used to access OpenSearch Dashboards.
	// Collection-specific endpoint used to access OpenSearch Dashboards.
	DashboardEndpoint *string `json:"dashboardEndpoint,omitempty" tf:"dashboard_endpoint,omitempty"`

	// Description of the collection.
	// Description of the collection.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Unique identifier for the collection.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
	// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
	KMSKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`

	// Name of the collection.
	// Name of the collection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether standby replicas should be used for a collection. One of ENABLED or DISABLED. Defaults to ENABLED.
	// Indicates whether standby replicas should be used for a collection. One of `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	StandbyReplicas *string `json:"standbyReplicas,omitempty" tf:"standby_replicas,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +mapType=granular
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	// Type of collection. One of SEARCH, TIMESERIES, or VECTORSEARCH. Defaults to TIMESERIES.
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CollectionParameters struct {

	// Description of the collection.
	// Description of the collection.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the collection.
	// Name of the collection.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region where this resource will be managed. Defaults to the Region set in the provider configuration.
	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Indicates whether standby replicas should be used for a collection. One of ENABLED or DISABLED. Defaults to ENABLED.
	// Indicates whether standby replicas should be used for a collection. One of `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	// +kubebuilder:validation:Optional
	StandbyReplicas *string `json:"standbyReplicas,omitempty" tf:"standby_replicas,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Type of collection. One of SEARCH, TIMESERIES, or VECTORSEARCH. Defaults to TIMESERIES.
	// Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CollectionSpec defines the desired state of Collection
type CollectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CollectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CollectionInitParameters `json:"initProvider,omitempty"`
}

// CollectionStatus defines the observed state of Collection.
type CollectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CollectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Collection is the Schema for the Collections API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Collection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CollectionSpec   `json:"spec"`
	Status CollectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CollectionList contains a list of Collections
type CollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Collection `json:"items"`
}

// Repository type metadata.
var (
	Collection_Kind             = "Collection"
	Collection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Collection_Kind}.String()
	Collection_KindAPIVersion   = Collection_Kind + "." + CRDGroupVersion.String()
	Collection_GroupVersionKind = CRDGroupVersion.WithKind(Collection_Kind)
)

func init() {
	SchemeBuilder.Register(&Collection{}, &CollectionList{})
}
