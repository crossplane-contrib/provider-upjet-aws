/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExcludeFilterObservation struct {
}

type ExcludeFilterParameters struct {

	// Name of the metric namespace in the filter.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type IncludeFilterObservation struct {
}

type IncludeFilterParameters struct {

	// Name of the metric namespace in the filter.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type IncludeMetricObservation struct {
}

type IncludeMetricParameters struct {

	// The name of the metric.
	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// The namespace of the metric.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type MetricStreamObservation struct {

	// ARN of the metric stream.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Date and time in RFC3339 format that the metric stream was created.
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Date and time in RFC3339 format that the metric stream was last updated.
	LastUpdateDate *string `json:"lastUpdateDate,omitempty" tf:"last_update_date,omitempty"`

	// State of the metric stream. Possible values are running and stopped.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type MetricStreamParameters struct {

	// List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. Conflicts with include_filter.
	// +kubebuilder:validation:Optional
	ExcludeFilter []ExcludeFilterParameters `json:"excludeFilter,omitempty" tf:"exclude_filter,omitempty"`

	// ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",false)
	// +kubebuilder:validation:Optional
	FirehoseArn *string `json:"firehoseArn,omitempty" tf:"firehose_arn,omitempty"`

	// Reference to a DeliveryStream in firehose to populate firehoseArn.
	// +kubebuilder:validation:Optional
	FirehoseArnRef *v1.Reference `json:"firehoseArnRef,omitempty" tf:"-"`

	// Selector for a DeliveryStream in firehose to populate firehoseArn.
	// +kubebuilder:validation:Optional
	FirehoseArnSelector *v1.Selector `json:"firehoseArnSelector,omitempty" tf:"-"`

	// List of inclusive metric filters. If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. Conflicts with exclude_filter.
	// +kubebuilder:validation:Optional
	IncludeFilter []IncludeFilterParameters `json:"includeFilter,omitempty" tf:"include_filter,omitempty"`

	// Friendly name of the metric stream. Conflicts with name_prefix.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Output format for the stream. Possible values are json and opentelemetry0.7. For more information about output formats, see Metric streams output formats.
	// +kubebuilder:validation:Required
	OutputFormat *string `json:"outputFormat" tf:"output_format,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see Trust between CloudWatch and Kinesis Data Firehose.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's output_format. If the OutputFormat is json, you can stream any additional statistic that is supported by CloudWatch, listed in CloudWatch statistics definitions. If the OutputFormat is opentelemetry0.7, you can stream percentile statistics (p99 etc.). See details below.
	// +kubebuilder:validation:Optional
	StatisticsConfiguration []StatisticsConfigurationParameters `json:"statisticsConfiguration,omitempty" tf:"statistics_configuration,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type StatisticsConfigurationObservation struct {
}

type StatisticsConfigurationParameters struct {

	// The additional statistics to stream for the metrics listed in include_metrics.
	// +kubebuilder:validation:Required
	AdditionalStatistics []*string `json:"additionalStatistics" tf:"additional_statistics,omitempty"`

	// An array that defines the metrics that are to have additional statistics streamed. See details below.
	// +kubebuilder:validation:Required
	IncludeMetric []IncludeMetricParameters `json:"includeMetric" tf:"include_metric,omitempty"`
}

// MetricStreamSpec defines the desired state of MetricStream
type MetricStreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetricStreamParameters `json:"forProvider"`
}

// MetricStreamStatus defines the observed state of MetricStream.
type MetricStreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetricStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MetricStream is the Schema for the MetricStreams API. Provides a CloudWatch Metric Stream resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type MetricStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetricStreamSpec   `json:"spec"`
	Status            MetricStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetricStreamList contains a list of MetricStreams
type MetricStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetricStream `json:"items"`
}

// Repository type metadata.
var (
	MetricStream_Kind             = "MetricStream"
	MetricStream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MetricStream_Kind}.String()
	MetricStream_KindAPIVersion   = MetricStream_Kind + "." + CRDGroupVersion.String()
	MetricStream_GroupVersionKind = CRDGroupVersion.WithKind(MetricStream_Kind)
)

func init() {
	SchemeBuilder.Register(&MetricStream{}, &MetricStreamList{})
}
