//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActiveDirectoryConfigurationObservation) DeepCopyInto(out *ActiveDirectoryConfigurationObservation) {
	*out = *in
	if in.NetbiosName != nil {
		in, out := &in.NetbiosName, &out.NetbiosName
		*out = new(string)
		**out = **in
	}
	if in.SelfManagedActiveDirectoryConfiguration != nil {
		in, out := &in.SelfManagedActiveDirectoryConfiguration, &out.SelfManagedActiveDirectoryConfiguration
		*out = make([]SelfManagedActiveDirectoryConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActiveDirectoryConfigurationObservation.
func (in *ActiveDirectoryConfigurationObservation) DeepCopy() *ActiveDirectoryConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(ActiveDirectoryConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActiveDirectoryConfigurationParameters) DeepCopyInto(out *ActiveDirectoryConfigurationParameters) {
	*out = *in
	if in.NetbiosName != nil {
		in, out := &in.NetbiosName, &out.NetbiosName
		*out = new(string)
		**out = **in
	}
	if in.SelfManagedActiveDirectoryConfiguration != nil {
		in, out := &in.SelfManagedActiveDirectoryConfiguration, &out.SelfManagedActiveDirectoryConfiguration
		*out = make([]SelfManagedActiveDirectoryConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActiveDirectoryConfigurationParameters.
func (in *ActiveDirectoryConfigurationParameters) DeepCopy() *ActiveDirectoryConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(ActiveDirectoryConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogConfigurationObservation) DeepCopyInto(out *AuditLogConfigurationObservation) {
	*out = *in
	if in.AuditLogDestination != nil {
		in, out := &in.AuditLogDestination, &out.AuditLogDestination
		*out = new(string)
		**out = **in
	}
	if in.FileAccessAuditLogLevel != nil {
		in, out := &in.FileAccessAuditLogLevel, &out.FileAccessAuditLogLevel
		*out = new(string)
		**out = **in
	}
	if in.FileShareAccessAuditLogLevel != nil {
		in, out := &in.FileShareAccessAuditLogLevel, &out.FileShareAccessAuditLogLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogConfigurationObservation.
func (in *AuditLogConfigurationObservation) DeepCopy() *AuditLogConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(AuditLogConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogConfigurationParameters) DeepCopyInto(out *AuditLogConfigurationParameters) {
	*out = *in
	if in.AuditLogDestination != nil {
		in, out := &in.AuditLogDestination, &out.AuditLogDestination
		*out = new(string)
		**out = **in
	}
	if in.FileAccessAuditLogLevel != nil {
		in, out := &in.FileAccessAuditLogLevel, &out.FileAccessAuditLogLevel
		*out = new(string)
		**out = **in
	}
	if in.FileShareAccessAuditLogLevel != nil {
		in, out := &in.FileShareAccessAuditLogLevel, &out.FileShareAccessAuditLogLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogConfigurationParameters.
func (in *AuditLogConfigurationParameters) DeepCopy() *AuditLogConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(AuditLogConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoExportPolicyObservation) DeepCopyInto(out *AutoExportPolicyObservation) {
	*out = *in
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoExportPolicyObservation.
func (in *AutoExportPolicyObservation) DeepCopy() *AutoExportPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(AutoExportPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoExportPolicyParameters) DeepCopyInto(out *AutoExportPolicyParameters) {
	*out = *in
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoExportPolicyParameters.
func (in *AutoExportPolicyParameters) DeepCopy() *AutoExportPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(AutoExportPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoImportPolicyObservation) DeepCopyInto(out *AutoImportPolicyObservation) {
	*out = *in
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoImportPolicyObservation.
func (in *AutoImportPolicyObservation) DeepCopy() *AutoImportPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(AutoImportPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoImportPolicyParameters) DeepCopyInto(out *AutoImportPolicyParameters) {
	*out = *in
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoImportPolicyParameters.
func (in *AutoImportPolicyParameters) DeepCopy() *AutoImportPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(AutoImportPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Backup) DeepCopyInto(out *Backup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Backup.
func (in *Backup) DeepCopy() *Backup {
	if in == nil {
		return nil
	}
	out := new(Backup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Backup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupList) DeepCopyInto(out *BackupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Backup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupList.
func (in *BackupList) DeepCopy() *BackupList {
	if in == nil {
		return nil
	}
	out := new(BackupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BackupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupObservation) DeepCopyInto(out *BackupObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.FileSystemID != nil {
		in, out := &in.FileSystemID, &out.FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.OwnerID != nil {
		in, out := &in.OwnerID, &out.OwnerID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupObservation.
func (in *BackupObservation) DeepCopy() *BackupObservation {
	if in == nil {
		return nil
	}
	out := new(BackupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupParameters) DeepCopyInto(out *BackupParameters) {
	*out = *in
	if in.FileSystemID != nil {
		in, out := &in.FileSystemID, &out.FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.FileSystemIDRef != nil {
		in, out := &in.FileSystemIDRef, &out.FileSystemIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FileSystemIDSelector != nil {
		in, out := &in.FileSystemIDSelector, &out.FileSystemIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupParameters.
func (in *BackupParameters) DeepCopy() *BackupParameters {
	if in == nil {
		return nil
	}
	out := new(BackupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupSpec) DeepCopyInto(out *BackupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupSpec.
func (in *BackupSpec) DeepCopy() *BackupSpec {
	if in == nil {
		return nil
	}
	out := new(BackupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupStatus) DeepCopyInto(out *BackupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupStatus.
func (in *BackupStatus) DeepCopy() *BackupStatus {
	if in == nil {
		return nil
	}
	out := new(BackupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataRepositoryAssociation) DeepCopyInto(out *DataRepositoryAssociation) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataRepositoryAssociation.
func (in *DataRepositoryAssociation) DeepCopy() *DataRepositoryAssociation {
	if in == nil {
		return nil
	}
	out := new(DataRepositoryAssociation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DataRepositoryAssociation) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataRepositoryAssociationList) DeepCopyInto(out *DataRepositoryAssociationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DataRepositoryAssociation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataRepositoryAssociationList.
func (in *DataRepositoryAssociationList) DeepCopy() *DataRepositoryAssociationList {
	if in == nil {
		return nil
	}
	out := new(DataRepositoryAssociationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DataRepositoryAssociationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataRepositoryAssociationObservation) DeepCopyInto(out *DataRepositoryAssociationObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.AssociationID != nil {
		in, out := &in.AssociationID, &out.AssociationID
		*out = new(string)
		**out = **in
	}
	if in.BatchImportMetaDataOnCreate != nil {
		in, out := &in.BatchImportMetaDataOnCreate, &out.BatchImportMetaDataOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.DataRepositoryPath != nil {
		in, out := &in.DataRepositoryPath, &out.DataRepositoryPath
		*out = new(string)
		**out = **in
	}
	if in.DeleteDataInFilesystem != nil {
		in, out := &in.DeleteDataInFilesystem, &out.DeleteDataInFilesystem
		*out = new(bool)
		**out = **in
	}
	if in.FileSystemID != nil {
		in, out := &in.FileSystemID, &out.FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.FileSystemPath != nil {
		in, out := &in.FileSystemPath, &out.FileSystemPath
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImportedFileChunkSize != nil {
		in, out := &in.ImportedFileChunkSize, &out.ImportedFileChunkSize
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.S3 != nil {
		in, out := &in.S3, &out.S3
		*out = make([]S3Observation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataRepositoryAssociationObservation.
func (in *DataRepositoryAssociationObservation) DeepCopy() *DataRepositoryAssociationObservation {
	if in == nil {
		return nil
	}
	out := new(DataRepositoryAssociationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataRepositoryAssociationParameters) DeepCopyInto(out *DataRepositoryAssociationParameters) {
	*out = *in
	if in.BatchImportMetaDataOnCreate != nil {
		in, out := &in.BatchImportMetaDataOnCreate, &out.BatchImportMetaDataOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.DataRepositoryPath != nil {
		in, out := &in.DataRepositoryPath, &out.DataRepositoryPath
		*out = new(string)
		**out = **in
	}
	if in.DeleteDataInFilesystem != nil {
		in, out := &in.DeleteDataInFilesystem, &out.DeleteDataInFilesystem
		*out = new(bool)
		**out = **in
	}
	if in.FileSystemID != nil {
		in, out := &in.FileSystemID, &out.FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.FileSystemIDRef != nil {
		in, out := &in.FileSystemIDRef, &out.FileSystemIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FileSystemIDSelector != nil {
		in, out := &in.FileSystemIDSelector, &out.FileSystemIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FileSystemPath != nil {
		in, out := &in.FileSystemPath, &out.FileSystemPath
		*out = new(string)
		**out = **in
	}
	if in.ImportedFileChunkSize != nil {
		in, out := &in.ImportedFileChunkSize, &out.ImportedFileChunkSize
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.S3 != nil {
		in, out := &in.S3, &out.S3
		*out = make([]S3Parameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataRepositoryAssociationParameters.
func (in *DataRepositoryAssociationParameters) DeepCopy() *DataRepositoryAssociationParameters {
	if in == nil {
		return nil
	}
	out := new(DataRepositoryAssociationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataRepositoryAssociationSpec) DeepCopyInto(out *DataRepositoryAssociationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataRepositoryAssociationSpec.
func (in *DataRepositoryAssociationSpec) DeepCopy() *DataRepositoryAssociationSpec {
	if in == nil {
		return nil
	}
	out := new(DataRepositoryAssociationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataRepositoryAssociationStatus) DeepCopyInto(out *DataRepositoryAssociationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataRepositoryAssociationStatus.
func (in *DataRepositoryAssociationStatus) DeepCopy() *DataRepositoryAssociationStatus {
	if in == nil {
		return nil
	}
	out := new(DataRepositoryAssociationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskIopsConfigurationObservation) DeepCopyInto(out *DiskIopsConfigurationObservation) {
	*out = *in
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskIopsConfigurationObservation.
func (in *DiskIopsConfigurationObservation) DeepCopy() *DiskIopsConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(DiskIopsConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskIopsConfigurationParameters) DeepCopyInto(out *DiskIopsConfigurationParameters) {
	*out = *in
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskIopsConfigurationParameters.
func (in *DiskIopsConfigurationParameters) DeepCopy() *DiskIopsConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(DiskIopsConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointsManagementObservation) DeepCopyInto(out *EndpointsManagementObservation) {
	*out = *in
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.IPAddresses != nil {
		in, out := &in.IPAddresses, &out.IPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointsManagementObservation.
func (in *EndpointsManagementObservation) DeepCopy() *EndpointsManagementObservation {
	if in == nil {
		return nil
	}
	out := new(EndpointsManagementObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointsManagementParameters) DeepCopyInto(out *EndpointsManagementParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointsManagementParameters.
func (in *EndpointsManagementParameters) DeepCopy() *EndpointsManagementParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointsManagementParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointsObservation) DeepCopyInto(out *EndpointsObservation) {
	*out = *in
	if in.Intercluster != nil {
		in, out := &in.Intercluster, &out.Intercluster
		*out = make([]InterclusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = make([]ManagementObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointsObservation.
func (in *EndpointsObservation) DeepCopy() *EndpointsObservation {
	if in == nil {
		return nil
	}
	out := new(EndpointsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointsParameters) DeepCopyInto(out *EndpointsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointsParameters.
func (in *EndpointsParameters) DeepCopy() *EndpointsParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ISCSIObservation) DeepCopyInto(out *ISCSIObservation) {
	*out = *in
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.IPAddresses != nil {
		in, out := &in.IPAddresses, &out.IPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ISCSIObservation.
func (in *ISCSIObservation) DeepCopy() *ISCSIObservation {
	if in == nil {
		return nil
	}
	out := new(ISCSIObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ISCSIParameters) DeepCopyInto(out *ISCSIParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ISCSIParameters.
func (in *ISCSIParameters) DeepCopy() *ISCSIParameters {
	if in == nil {
		return nil
	}
	out := new(ISCSIParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterclusterObservation) DeepCopyInto(out *InterclusterObservation) {
	*out = *in
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.IPAddresses != nil {
		in, out := &in.IPAddresses, &out.IPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterclusterObservation.
func (in *InterclusterObservation) DeepCopy() *InterclusterObservation {
	if in == nil {
		return nil
	}
	out := new(InterclusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterclusterParameters) DeepCopyInto(out *InterclusterParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterclusterParameters.
func (in *InterclusterParameters) DeepCopy() *InterclusterParameters {
	if in == nil {
		return nil
	}
	out := new(InterclusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigurationObservation) DeepCopyInto(out *LogConfigurationObservation) {
	*out = *in
	if in.Destination != nil {
		in, out := &in.Destination, &out.Destination
		*out = new(string)
		**out = **in
	}
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigurationObservation.
func (in *LogConfigurationObservation) DeepCopy() *LogConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(LogConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigurationParameters) DeepCopyInto(out *LogConfigurationParameters) {
	*out = *in
	if in.Destination != nil {
		in, out := &in.Destination, &out.Destination
		*out = new(string)
		**out = **in
	}
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigurationParameters.
func (in *LogConfigurationParameters) DeepCopy() *LogConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(LogConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LustreFileSystem) DeepCopyInto(out *LustreFileSystem) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LustreFileSystem.
func (in *LustreFileSystem) DeepCopy() *LustreFileSystem {
	if in == nil {
		return nil
	}
	out := new(LustreFileSystem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LustreFileSystem) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LustreFileSystemList) DeepCopyInto(out *LustreFileSystemList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LustreFileSystem, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LustreFileSystemList.
func (in *LustreFileSystemList) DeepCopy() *LustreFileSystemList {
	if in == nil {
		return nil
	}
	out := new(LustreFileSystemList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LustreFileSystemList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LustreFileSystemObservation) DeepCopyInto(out *LustreFileSystemObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.AutoImportPolicy != nil {
		in, out := &in.AutoImportPolicy, &out.AutoImportPolicy
		*out = new(string)
		**out = **in
	}
	if in.AutomaticBackupRetentionDays != nil {
		in, out := &in.AutomaticBackupRetentionDays, &out.AutomaticBackupRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToBackups != nil {
		in, out := &in.CopyTagsToBackups, &out.CopyTagsToBackups
		*out = new(bool)
		**out = **in
	}
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.DailyAutomaticBackupStartTime != nil {
		in, out := &in.DailyAutomaticBackupStartTime, &out.DailyAutomaticBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.DataCompressionType != nil {
		in, out := &in.DataCompressionType, &out.DataCompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeploymentType != nil {
		in, out := &in.DeploymentType, &out.DeploymentType
		*out = new(string)
		**out = **in
	}
	if in.DriveCacheType != nil {
		in, out := &in.DriveCacheType, &out.DriveCacheType
		*out = new(string)
		**out = **in
	}
	if in.ExportPath != nil {
		in, out := &in.ExportPath, &out.ExportPath
		*out = new(string)
		**out = **in
	}
	if in.FileSystemTypeVersion != nil {
		in, out := &in.FileSystemTypeVersion, &out.FileSystemTypeVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImportPath != nil {
		in, out := &in.ImportPath, &out.ImportPath
		*out = new(string)
		**out = **in
	}
	if in.ImportedFileChunkSize != nil {
		in, out := &in.ImportedFileChunkSize, &out.ImportedFileChunkSize
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.LogConfiguration != nil {
		in, out := &in.LogConfiguration, &out.LogConfiguration
		*out = make([]LogConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountName != nil {
		in, out := &in.MountName, &out.MountName
		*out = new(string)
		**out = **in
	}
	if in.NetworkInterfaceIds != nil {
		in, out := &in.NetworkInterfaceIds, &out.NetworkInterfaceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OwnerID != nil {
		in, out := &in.OwnerID, &out.OwnerID
		*out = new(string)
		**out = **in
	}
	if in.PerUnitStorageThroughput != nil {
		in, out := &in.PerUnitStorageThroughput, &out.PerUnitStorageThroughput
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.StorageCapacity != nil {
		in, out := &in.StorageCapacity, &out.StorageCapacity
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WeeklyMaintenanceStartTime != nil {
		in, out := &in.WeeklyMaintenanceStartTime, &out.WeeklyMaintenanceStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LustreFileSystemObservation.
func (in *LustreFileSystemObservation) DeepCopy() *LustreFileSystemObservation {
	if in == nil {
		return nil
	}
	out := new(LustreFileSystemObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LustreFileSystemParameters) DeepCopyInto(out *LustreFileSystemParameters) {
	*out = *in
	if in.AutoImportPolicy != nil {
		in, out := &in.AutoImportPolicy, &out.AutoImportPolicy
		*out = new(string)
		**out = **in
	}
	if in.AutomaticBackupRetentionDays != nil {
		in, out := &in.AutomaticBackupRetentionDays, &out.AutomaticBackupRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToBackups != nil {
		in, out := &in.CopyTagsToBackups, &out.CopyTagsToBackups
		*out = new(bool)
		**out = **in
	}
	if in.DailyAutomaticBackupStartTime != nil {
		in, out := &in.DailyAutomaticBackupStartTime, &out.DailyAutomaticBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.DataCompressionType != nil {
		in, out := &in.DataCompressionType, &out.DataCompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeploymentType != nil {
		in, out := &in.DeploymentType, &out.DeploymentType
		*out = new(string)
		**out = **in
	}
	if in.DriveCacheType != nil {
		in, out := &in.DriveCacheType, &out.DriveCacheType
		*out = new(string)
		**out = **in
	}
	if in.ExportPath != nil {
		in, out := &in.ExportPath, &out.ExportPath
		*out = new(string)
		**out = **in
	}
	if in.FileSystemTypeVersion != nil {
		in, out := &in.FileSystemTypeVersion, &out.FileSystemTypeVersion
		*out = new(string)
		**out = **in
	}
	if in.ImportPath != nil {
		in, out := &in.ImportPath, &out.ImportPath
		*out = new(string)
		**out = **in
	}
	if in.ImportedFileChunkSize != nil {
		in, out := &in.ImportedFileChunkSize, &out.ImportedFileChunkSize
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyIDRef != nil {
		in, out := &in.KMSKeyIDRef, &out.KMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyIDSelector != nil {
		in, out := &in.KMSKeyIDSelector, &out.KMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LogConfiguration != nil {
		in, out := &in.LogConfiguration, &out.LogConfiguration
		*out = make([]LogConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerUnitStorageThroughput != nil {
		in, out := &in.PerUnitStorageThroughput, &out.PerUnitStorageThroughput
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.StorageCapacity != nil {
		in, out := &in.StorageCapacity, &out.StorageCapacity
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRefs != nil {
		in, out := &in.SubnetIDRefs, &out.SubnetIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.WeeklyMaintenanceStartTime != nil {
		in, out := &in.WeeklyMaintenanceStartTime, &out.WeeklyMaintenanceStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LustreFileSystemParameters.
func (in *LustreFileSystemParameters) DeepCopy() *LustreFileSystemParameters {
	if in == nil {
		return nil
	}
	out := new(LustreFileSystemParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LustreFileSystemSpec) DeepCopyInto(out *LustreFileSystemSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LustreFileSystemSpec.
func (in *LustreFileSystemSpec) DeepCopy() *LustreFileSystemSpec {
	if in == nil {
		return nil
	}
	out := new(LustreFileSystemSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LustreFileSystemStatus) DeepCopyInto(out *LustreFileSystemStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LustreFileSystemStatus.
func (in *LustreFileSystemStatus) DeepCopy() *LustreFileSystemStatus {
	if in == nil {
		return nil
	}
	out := new(LustreFileSystemStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementObservation) DeepCopyInto(out *ManagementObservation) {
	*out = *in
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.IPAddresses != nil {
		in, out := &in.IPAddresses, &out.IPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementObservation.
func (in *ManagementObservation) DeepCopy() *ManagementObservation {
	if in == nil {
		return nil
	}
	out := new(ManagementObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementParameters) DeepCopyInto(out *ManagementParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementParameters.
func (in *ManagementParameters) DeepCopy() *ManagementParameters {
	if in == nil {
		return nil
	}
	out := new(ManagementParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NFSObservation) DeepCopyInto(out *NFSObservation) {
	*out = *in
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.IPAddresses != nil {
		in, out := &in.IPAddresses, &out.IPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NFSObservation.
func (in *NFSObservation) DeepCopy() *NFSObservation {
	if in == nil {
		return nil
	}
	out := new(NFSObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NFSParameters) DeepCopyInto(out *NFSParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NFSParameters.
func (in *NFSParameters) DeepCopy() *NFSParameters {
	if in == nil {
		return nil
	}
	out := new(NFSParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapFileSystem) DeepCopyInto(out *OntapFileSystem) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapFileSystem.
func (in *OntapFileSystem) DeepCopy() *OntapFileSystem {
	if in == nil {
		return nil
	}
	out := new(OntapFileSystem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OntapFileSystem) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapFileSystemList) DeepCopyInto(out *OntapFileSystemList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OntapFileSystem, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapFileSystemList.
func (in *OntapFileSystemList) DeepCopy() *OntapFileSystemList {
	if in == nil {
		return nil
	}
	out := new(OntapFileSystemList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OntapFileSystemList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapFileSystemObservation) DeepCopyInto(out *OntapFileSystemObservation) {
	*out = *in
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.AutomaticBackupRetentionDays != nil {
		in, out := &in.AutomaticBackupRetentionDays, &out.AutomaticBackupRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.DailyAutomaticBackupStartTime != nil {
		in, out := &in.DailyAutomaticBackupStartTime, &out.DailyAutomaticBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.DeploymentType != nil {
		in, out := &in.DeploymentType, &out.DeploymentType
		*out = new(string)
		**out = **in
	}
	if in.DiskIopsConfiguration != nil {
		in, out := &in.DiskIopsConfiguration, &out.DiskIopsConfiguration
		*out = make([]DiskIopsConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EndpointIPAddressRange != nil {
		in, out := &in.EndpointIPAddressRange, &out.EndpointIPAddressRange
		*out = new(string)
		**out = **in
	}
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make([]EndpointsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FSXAdminPasswordSecretRef != nil {
		in, out := &in.FSXAdminPasswordSecretRef, &out.FSXAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.NetworkInterfaceIds != nil {
		in, out := &in.NetworkInterfaceIds, &out.NetworkInterfaceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OwnerID != nil {
		in, out := &in.OwnerID, &out.OwnerID
		*out = new(string)
		**out = **in
	}
	if in.PreferredSubnetID != nil {
		in, out := &in.PreferredSubnetID, &out.PreferredSubnetID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RouteTableIds != nil {
		in, out := &in.RouteTableIds, &out.RouteTableIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.StorageCapacity != nil {
		in, out := &in.StorageCapacity, &out.StorageCapacity
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputCapacity != nil {
		in, out := &in.ThroughputCapacity, &out.ThroughputCapacity
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WeeklyMaintenanceStartTime != nil {
		in, out := &in.WeeklyMaintenanceStartTime, &out.WeeklyMaintenanceStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapFileSystemObservation.
func (in *OntapFileSystemObservation) DeepCopy() *OntapFileSystemObservation {
	if in == nil {
		return nil
	}
	out := new(OntapFileSystemObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapFileSystemParameters) DeepCopyInto(out *OntapFileSystemParameters) {
	*out = *in
	if in.AutomaticBackupRetentionDays != nil {
		in, out := &in.AutomaticBackupRetentionDays, &out.AutomaticBackupRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.DailyAutomaticBackupStartTime != nil {
		in, out := &in.DailyAutomaticBackupStartTime, &out.DailyAutomaticBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.DeploymentType != nil {
		in, out := &in.DeploymentType, &out.DeploymentType
		*out = new(string)
		**out = **in
	}
	if in.DiskIopsConfiguration != nil {
		in, out := &in.DiskIopsConfiguration, &out.DiskIopsConfiguration
		*out = make([]DiskIopsConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EndpointIPAddressRange != nil {
		in, out := &in.EndpointIPAddressRange, &out.EndpointIPAddressRange
		*out = new(string)
		**out = **in
	}
	if in.FSXAdminPasswordSecretRef != nil {
		in, out := &in.FSXAdminPasswordSecretRef, &out.FSXAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyIDRef != nil {
		in, out := &in.KMSKeyIDRef, &out.KMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyIDSelector != nil {
		in, out := &in.KMSKeyIDSelector, &out.KMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PreferredSubnetID != nil {
		in, out := &in.PreferredSubnetID, &out.PreferredSubnetID
		*out = new(string)
		**out = **in
	}
	if in.PreferredSubnetIDRef != nil {
		in, out := &in.PreferredSubnetIDRef, &out.PreferredSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PreferredSubnetIDSelector != nil {
		in, out := &in.PreferredSubnetIDSelector, &out.PreferredSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RouteTableIds != nil {
		in, out := &in.RouteTableIds, &out.RouteTableIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.StorageCapacity != nil {
		in, out := &in.StorageCapacity, &out.StorageCapacity
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRefs != nil {
		in, out := &in.SubnetIDRefs, &out.SubnetIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputCapacity != nil {
		in, out := &in.ThroughputCapacity, &out.ThroughputCapacity
		*out = new(float64)
		**out = **in
	}
	if in.WeeklyMaintenanceStartTime != nil {
		in, out := &in.WeeklyMaintenanceStartTime, &out.WeeklyMaintenanceStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapFileSystemParameters.
func (in *OntapFileSystemParameters) DeepCopy() *OntapFileSystemParameters {
	if in == nil {
		return nil
	}
	out := new(OntapFileSystemParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapFileSystemSpec) DeepCopyInto(out *OntapFileSystemSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapFileSystemSpec.
func (in *OntapFileSystemSpec) DeepCopy() *OntapFileSystemSpec {
	if in == nil {
		return nil
	}
	out := new(OntapFileSystemSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapFileSystemStatus) DeepCopyInto(out *OntapFileSystemStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapFileSystemStatus.
func (in *OntapFileSystemStatus) DeepCopy() *OntapFileSystemStatus {
	if in == nil {
		return nil
	}
	out := new(OntapFileSystemStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachine) DeepCopyInto(out *OntapStorageVirtualMachine) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachine.
func (in *OntapStorageVirtualMachine) DeepCopy() *OntapStorageVirtualMachine {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachine)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OntapStorageVirtualMachine) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineEndpointsObservation) DeepCopyInto(out *OntapStorageVirtualMachineEndpointsObservation) {
	*out = *in
	if in.ISCSI != nil {
		in, out := &in.ISCSI, &out.ISCSI
		*out = make([]ISCSIObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = make([]EndpointsManagementObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NFS != nil {
		in, out := &in.NFS, &out.NFS
		*out = make([]NFSObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SMB != nil {
		in, out := &in.SMB, &out.SMB
		*out = make([]SMBObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineEndpointsObservation.
func (in *OntapStorageVirtualMachineEndpointsObservation) DeepCopy() *OntapStorageVirtualMachineEndpointsObservation {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineEndpointsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineEndpointsParameters) DeepCopyInto(out *OntapStorageVirtualMachineEndpointsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineEndpointsParameters.
func (in *OntapStorageVirtualMachineEndpointsParameters) DeepCopy() *OntapStorageVirtualMachineEndpointsParameters {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineEndpointsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineList) DeepCopyInto(out *OntapStorageVirtualMachineList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OntapStorageVirtualMachine, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineList.
func (in *OntapStorageVirtualMachineList) DeepCopy() *OntapStorageVirtualMachineList {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OntapStorageVirtualMachineList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineObservation) DeepCopyInto(out *OntapStorageVirtualMachineObservation) {
	*out = *in
	if in.ActiveDirectoryConfiguration != nil {
		in, out := &in.ActiveDirectoryConfiguration, &out.ActiveDirectoryConfiguration
		*out = make([]ActiveDirectoryConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make([]OntapStorageVirtualMachineEndpointsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FileSystemID != nil {
		in, out := &in.FileSystemID, &out.FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolumeSecurityStyle != nil {
		in, out := &in.RootVolumeSecurityStyle, &out.RootVolumeSecurityStyle
		*out = new(string)
		**out = **in
	}
	if in.Subtype != nil {
		in, out := &in.Subtype, &out.Subtype
		*out = new(string)
		**out = **in
	}
	if in.SvmAdminPasswordSecretRef != nil {
		in, out := &in.SvmAdminPasswordSecretRef, &out.SvmAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineObservation.
func (in *OntapStorageVirtualMachineObservation) DeepCopy() *OntapStorageVirtualMachineObservation {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineParameters) DeepCopyInto(out *OntapStorageVirtualMachineParameters) {
	*out = *in
	if in.ActiveDirectoryConfiguration != nil {
		in, out := &in.ActiveDirectoryConfiguration, &out.ActiveDirectoryConfiguration
		*out = make([]ActiveDirectoryConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FileSystemID != nil {
		in, out := &in.FileSystemID, &out.FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.FileSystemIDRef != nil {
		in, out := &in.FileSystemIDRef, &out.FileSystemIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FileSystemIDSelector != nil {
		in, out := &in.FileSystemIDSelector, &out.FileSystemIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RootVolumeSecurityStyle != nil {
		in, out := &in.RootVolumeSecurityStyle, &out.RootVolumeSecurityStyle
		*out = new(string)
		**out = **in
	}
	if in.SvmAdminPasswordSecretRef != nil {
		in, out := &in.SvmAdminPasswordSecretRef, &out.SvmAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineParameters.
func (in *OntapStorageVirtualMachineParameters) DeepCopy() *OntapStorageVirtualMachineParameters {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineSpec) DeepCopyInto(out *OntapStorageVirtualMachineSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineSpec.
func (in *OntapStorageVirtualMachineSpec) DeepCopy() *OntapStorageVirtualMachineSpec {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OntapStorageVirtualMachineStatus) DeepCopyInto(out *OntapStorageVirtualMachineStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OntapStorageVirtualMachineStatus.
func (in *OntapStorageVirtualMachineStatus) DeepCopy() *OntapStorageVirtualMachineStatus {
	if in == nil {
		return nil
	}
	out := new(OntapStorageVirtualMachineStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3Observation) DeepCopyInto(out *S3Observation) {
	*out = *in
	if in.AutoExportPolicy != nil {
		in, out := &in.AutoExportPolicy, &out.AutoExportPolicy
		*out = make([]AutoExportPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoImportPolicy != nil {
		in, out := &in.AutoImportPolicy, &out.AutoImportPolicy
		*out = make([]AutoImportPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3Observation.
func (in *S3Observation) DeepCopy() *S3Observation {
	if in == nil {
		return nil
	}
	out := new(S3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3Parameters) DeepCopyInto(out *S3Parameters) {
	*out = *in
	if in.AutoExportPolicy != nil {
		in, out := &in.AutoExportPolicy, &out.AutoExportPolicy
		*out = make([]AutoExportPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoImportPolicy != nil {
		in, out := &in.AutoImportPolicy, &out.AutoImportPolicy
		*out = make([]AutoImportPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3Parameters.
func (in *S3Parameters) DeepCopy() *S3Parameters {
	if in == nil {
		return nil
	}
	out := new(S3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMBObservation) DeepCopyInto(out *SMBObservation) {
	*out = *in
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.IPAddresses != nil {
		in, out := &in.IPAddresses, &out.IPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMBObservation.
func (in *SMBObservation) DeepCopy() *SMBObservation {
	if in == nil {
		return nil
	}
	out := new(SMBObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMBParameters) DeepCopyInto(out *SMBParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMBParameters.
func (in *SMBParameters) DeepCopy() *SMBParameters {
	if in == nil {
		return nil
	}
	out := new(SMBParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelfManagedActiveDirectoryConfigurationObservation) DeepCopyInto(out *SelfManagedActiveDirectoryConfigurationObservation) {
	*out = *in
	if in.DNSIps != nil {
		in, out := &in.DNSIps, &out.DNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainName != nil {
		in, out := &in.DomainName, &out.DomainName
		*out = new(string)
		**out = **in
	}
	if in.FileSystemAdministratorsGroup != nil {
		in, out := &in.FileSystemAdministratorsGroup, &out.FileSystemAdministratorsGroup
		*out = new(string)
		**out = **in
	}
	if in.OrganizationalUnitDistinguishedName != nil {
		in, out := &in.OrganizationalUnitDistinguishedName, &out.OrganizationalUnitDistinguishedName
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelfManagedActiveDirectoryConfigurationObservation.
func (in *SelfManagedActiveDirectoryConfigurationObservation) DeepCopy() *SelfManagedActiveDirectoryConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(SelfManagedActiveDirectoryConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelfManagedActiveDirectoryConfigurationParameters) DeepCopyInto(out *SelfManagedActiveDirectoryConfigurationParameters) {
	*out = *in
	if in.DNSIps != nil {
		in, out := &in.DNSIps, &out.DNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainName != nil {
		in, out := &in.DomainName, &out.DomainName
		*out = new(string)
		**out = **in
	}
	if in.FileSystemAdministratorsGroup != nil {
		in, out := &in.FileSystemAdministratorsGroup, &out.FileSystemAdministratorsGroup
		*out = new(string)
		**out = **in
	}
	if in.OrganizationalUnitDistinguishedName != nil {
		in, out := &in.OrganizationalUnitDistinguishedName, &out.OrganizationalUnitDistinguishedName
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelfManagedActiveDirectoryConfigurationParameters.
func (in *SelfManagedActiveDirectoryConfigurationParameters) DeepCopy() *SelfManagedActiveDirectoryConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(SelfManagedActiveDirectoryConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelfManagedActiveDirectoryObservation) DeepCopyInto(out *SelfManagedActiveDirectoryObservation) {
	*out = *in
	if in.DNSIps != nil {
		in, out := &in.DNSIps, &out.DNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainName != nil {
		in, out := &in.DomainName, &out.DomainName
		*out = new(string)
		**out = **in
	}
	if in.FileSystemAdministratorsGroup != nil {
		in, out := &in.FileSystemAdministratorsGroup, &out.FileSystemAdministratorsGroup
		*out = new(string)
		**out = **in
	}
	if in.OrganizationalUnitDistinguishedName != nil {
		in, out := &in.OrganizationalUnitDistinguishedName, &out.OrganizationalUnitDistinguishedName
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelfManagedActiveDirectoryObservation.
func (in *SelfManagedActiveDirectoryObservation) DeepCopy() *SelfManagedActiveDirectoryObservation {
	if in == nil {
		return nil
	}
	out := new(SelfManagedActiveDirectoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SelfManagedActiveDirectoryParameters) DeepCopyInto(out *SelfManagedActiveDirectoryParameters) {
	*out = *in
	if in.DNSIps != nil {
		in, out := &in.DNSIps, &out.DNSIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DomainName != nil {
		in, out := &in.DomainName, &out.DomainName
		*out = new(string)
		**out = **in
	}
	if in.FileSystemAdministratorsGroup != nil {
		in, out := &in.FileSystemAdministratorsGroup, &out.FileSystemAdministratorsGroup
		*out = new(string)
		**out = **in
	}
	if in.OrganizationalUnitDistinguishedName != nil {
		in, out := &in.OrganizationalUnitDistinguishedName, &out.OrganizationalUnitDistinguishedName
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SelfManagedActiveDirectoryParameters.
func (in *SelfManagedActiveDirectoryParameters) DeepCopy() *SelfManagedActiveDirectoryParameters {
	if in == nil {
		return nil
	}
	out := new(SelfManagedActiveDirectoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsFileSystem) DeepCopyInto(out *WindowsFileSystem) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsFileSystem.
func (in *WindowsFileSystem) DeepCopy() *WindowsFileSystem {
	if in == nil {
		return nil
	}
	out := new(WindowsFileSystem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WindowsFileSystem) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsFileSystemList) DeepCopyInto(out *WindowsFileSystemList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]WindowsFileSystem, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsFileSystemList.
func (in *WindowsFileSystemList) DeepCopy() *WindowsFileSystemList {
	if in == nil {
		return nil
	}
	out := new(WindowsFileSystemList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WindowsFileSystemList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsFileSystemObservation) DeepCopyInto(out *WindowsFileSystemObservation) {
	*out = *in
	if in.ActiveDirectoryID != nil {
		in, out := &in.ActiveDirectoryID, &out.ActiveDirectoryID
		*out = new(string)
		**out = **in
	}
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Arn != nil {
		in, out := &in.Arn, &out.Arn
		*out = new(string)
		**out = **in
	}
	if in.AuditLogConfiguration != nil {
		in, out := &in.AuditLogConfiguration, &out.AuditLogConfiguration
		*out = make([]AuditLogConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutomaticBackupRetentionDays != nil {
		in, out := &in.AutomaticBackupRetentionDays, &out.AutomaticBackupRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToBackups != nil {
		in, out := &in.CopyTagsToBackups, &out.CopyTagsToBackups
		*out = new(bool)
		**out = **in
	}
	if in.DNSName != nil {
		in, out := &in.DNSName, &out.DNSName
		*out = new(string)
		**out = **in
	}
	if in.DailyAutomaticBackupStartTime != nil {
		in, out := &in.DailyAutomaticBackupStartTime, &out.DailyAutomaticBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.DeploymentType != nil {
		in, out := &in.DeploymentType, &out.DeploymentType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.NetworkInterfaceIds != nil {
		in, out := &in.NetworkInterfaceIds, &out.NetworkInterfaceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OwnerID != nil {
		in, out := &in.OwnerID, &out.OwnerID
		*out = new(string)
		**out = **in
	}
	if in.PreferredFileServerIP != nil {
		in, out := &in.PreferredFileServerIP, &out.PreferredFileServerIP
		*out = new(string)
		**out = **in
	}
	if in.PreferredSubnetID != nil {
		in, out := &in.PreferredSubnetID, &out.PreferredSubnetID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RemoteAdministrationEndpoint != nil {
		in, out := &in.RemoteAdministrationEndpoint, &out.RemoteAdministrationEndpoint
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SelfManagedActiveDirectory != nil {
		in, out := &in.SelfManagedActiveDirectory, &out.SelfManagedActiveDirectory
		*out = make([]SelfManagedActiveDirectoryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SkipFinalBackup != nil {
		in, out := &in.SkipFinalBackup, &out.SkipFinalBackup
		*out = new(bool)
		**out = **in
	}
	if in.StorageCapacity != nil {
		in, out := &in.StorageCapacity, &out.StorageCapacity
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagsAll != nil {
		in, out := &in.TagsAll, &out.TagsAll
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputCapacity != nil {
		in, out := &in.ThroughputCapacity, &out.ThroughputCapacity
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WeeklyMaintenanceStartTime != nil {
		in, out := &in.WeeklyMaintenanceStartTime, &out.WeeklyMaintenanceStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsFileSystemObservation.
func (in *WindowsFileSystemObservation) DeepCopy() *WindowsFileSystemObservation {
	if in == nil {
		return nil
	}
	out := new(WindowsFileSystemObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsFileSystemParameters) DeepCopyInto(out *WindowsFileSystemParameters) {
	*out = *in
	if in.ActiveDirectoryID != nil {
		in, out := &in.ActiveDirectoryID, &out.ActiveDirectoryID
		*out = new(string)
		**out = **in
	}
	if in.ActiveDirectoryIDRef != nil {
		in, out := &in.ActiveDirectoryIDRef, &out.ActiveDirectoryIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ActiveDirectoryIDSelector != nil {
		in, out := &in.ActiveDirectoryIDSelector, &out.ActiveDirectoryIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AuditLogConfiguration != nil {
		in, out := &in.AuditLogConfiguration, &out.AuditLogConfiguration
		*out = make([]AuditLogConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutomaticBackupRetentionDays != nil {
		in, out := &in.AutomaticBackupRetentionDays, &out.AutomaticBackupRetentionDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.CopyTagsToBackups != nil {
		in, out := &in.CopyTagsToBackups, &out.CopyTagsToBackups
		*out = new(bool)
		**out = **in
	}
	if in.DailyAutomaticBackupStartTime != nil {
		in, out := &in.DailyAutomaticBackupStartTime, &out.DailyAutomaticBackupStartTime
		*out = new(string)
		**out = **in
	}
	if in.DeploymentType != nil {
		in, out := &in.DeploymentType, &out.DeploymentType
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyIDRef != nil {
		in, out := &in.KMSKeyIDRef, &out.KMSKeyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSKeyIDSelector != nil {
		in, out := &in.KMSKeyIDSelector, &out.KMSKeyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PreferredSubnetID != nil {
		in, out := &in.PreferredSubnetID, &out.PreferredSubnetID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SelfManagedActiveDirectory != nil {
		in, out := &in.SelfManagedActiveDirectory, &out.SelfManagedActiveDirectory
		*out = make([]SelfManagedActiveDirectoryParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SkipFinalBackup != nil {
		in, out := &in.SkipFinalBackup, &out.SkipFinalBackup
		*out = new(bool)
		**out = **in
	}
	if in.StorageCapacity != nil {
		in, out := &in.StorageCapacity, &out.StorageCapacity
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRefs != nil {
		in, out := &in.SubnetIDRefs, &out.SubnetIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputCapacity != nil {
		in, out := &in.ThroughputCapacity, &out.ThroughputCapacity
		*out = new(float64)
		**out = **in
	}
	if in.WeeklyMaintenanceStartTime != nil {
		in, out := &in.WeeklyMaintenanceStartTime, &out.WeeklyMaintenanceStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsFileSystemParameters.
func (in *WindowsFileSystemParameters) DeepCopy() *WindowsFileSystemParameters {
	if in == nil {
		return nil
	}
	out := new(WindowsFileSystemParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsFileSystemSpec) DeepCopyInto(out *WindowsFileSystemSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsFileSystemSpec.
func (in *WindowsFileSystemSpec) DeepCopy() *WindowsFileSystemSpec {
	if in == nil {
		return nil
	}
	out := new(WindowsFileSystemSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsFileSystemStatus) DeepCopyInto(out *WindowsFileSystemStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsFileSystemStatus.
func (in *WindowsFileSystemStatus) DeepCopy() *WindowsFileSystemStatus {
	if in == nil {
		return nil
	}
	out := new(WindowsFileSystemStatus)
	in.DeepCopyInto(out)
	return out
}
