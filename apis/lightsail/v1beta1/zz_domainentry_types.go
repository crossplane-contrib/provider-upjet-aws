/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainEntryObservation struct {

	// A combination of attributes to create a unique id: name_domain_name_type_target
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DomainEntryParameters struct {

	// The name of the Lightsail domain in which to create the entry
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lightsail/v1beta1.Domain
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("domain_name",false)
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Reference to a Domain in lightsail to populate domainName.
	// +kubebuilder:validation:Optional
	DomainNameRef *v1.Reference `json:"domainNameRef,omitempty" tf:"-"`

	// Selector for a Domain in lightsail to populate domainName.
	// +kubebuilder:validation:Optional
	DomainNameSelector *v1.Selector `json:"domainNameSelector,omitempty" tf:"-"`

	// If the entry should be an alias Defaults to false
	// +kubebuilder:validation:Optional
	IsAlias *bool `json:"isAlias,omitempty" tf:"is_alias,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Target of the domain entry
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// Type of record
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// DomainEntrySpec defines the desired state of DomainEntry
type DomainEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainEntryParameters `json:"forProvider"`
}

// DomainEntryStatus defines the observed state of DomainEntry.
type DomainEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainEntry is the Schema for the DomainEntrys API. Provides an Lightsail Domain Entry
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DomainEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainEntrySpec   `json:"spec"`
	Status            DomainEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainEntryList contains a list of DomainEntrys
type DomainEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainEntry `json:"items"`
}

// Repository type metadata.
var (
	DomainEntry_Kind             = "DomainEntry"
	DomainEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainEntry_Kind}.String()
	DomainEntry_KindAPIVersion   = DomainEntry_Kind + "." + CRDGroupVersion.String()
	DomainEntry_GroupVersionKind = CRDGroupVersion.WithKind(DomainEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainEntry{}, &DomainEntryList{})
}
