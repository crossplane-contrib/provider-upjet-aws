/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-aws/apis/firehose/v1beta1"
	v1beta1 "github.com/upbound/provider-aws/apis/iam/v1beta1"
	v1beta12 "github.com/upbound/provider-aws/apis/sns/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DomainMailFrom.
func (mg *DomainMailFrom) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Domain),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DomainRef,
		Selector:     mg.Spec.ForProvider.DomainSelector,
		To: reference.To{
			List:    &DomainIdentityList{},
			Managed: &DomainIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Domain")
	}
	mg.Spec.ForProvider.Domain = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DomainRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Domain),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DomainRef,
		Selector:     mg.Spec.InitProvider.DomainSelector,
		To: reference.To{
			List:    &DomainIdentityList{},
			Managed: &DomainIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Domain")
	}
	mg.Spec.InitProvider.Domain = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DomainRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EventDestination.
func (mg *EventDestination) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConfigurationSetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConfigurationSetNameRef,
		Selector:     mg.Spec.ForProvider.ConfigurationSetNameSelector,
		To: reference.To{
			List:    &ConfigurationSetList{},
			Managed: &ConfigurationSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConfigurationSetName")
	}
	mg.Spec.ForProvider.ConfigurationSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConfigurationSetNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KinesisDestination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KinesisDestination[i3].RoleArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.KinesisDestination[i3].RoleArnRef,
			Selector:     mg.Spec.ForProvider.KinesisDestination[i3].RoleArnSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KinesisDestination[i3].RoleArn")
		}
		mg.Spec.ForProvider.KinesisDestination[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KinesisDestination[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.KinesisDestination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KinesisDestination[i3].StreamArn),
			Extract:      resource.ExtractParamPath("arn", false),
			Reference:    mg.Spec.ForProvider.KinesisDestination[i3].StreamArnRef,
			Selector:     mg.Spec.ForProvider.KinesisDestination[i3].StreamArnSelector,
			To: reference.To{
				List:    &v1beta11.DeliveryStreamList{},
				Managed: &v1beta11.DeliveryStream{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KinesisDestination[i3].StreamArn")
		}
		mg.Spec.ForProvider.KinesisDestination[i3].StreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KinesisDestination[i3].StreamArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.SnsDestination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnsDestination[i3].TopicArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.ForProvider.SnsDestination[i3].TopicArnRef,
			Selector:     mg.Spec.ForProvider.SnsDestination[i3].TopicArnSelector,
			To: reference.To{
				List:    &v1beta12.TopicList{},
				Managed: &v1beta12.Topic{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SnsDestination[i3].TopicArn")
		}
		mg.Spec.ForProvider.SnsDestination[i3].TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SnsDestination[i3].TopicArnRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConfigurationSetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ConfigurationSetNameRef,
		Selector:     mg.Spec.InitProvider.ConfigurationSetNameSelector,
		To: reference.To{
			List:    &ConfigurationSetList{},
			Managed: &ConfigurationSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConfigurationSetName")
	}
	mg.Spec.InitProvider.ConfigurationSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConfigurationSetNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.KinesisDestination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KinesisDestination[i3].RoleArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.KinesisDestination[i3].RoleArnRef,
			Selector:     mg.Spec.InitProvider.KinesisDestination[i3].RoleArnSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KinesisDestination[i3].RoleArn")
		}
		mg.Spec.InitProvider.KinesisDestination[i3].RoleArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KinesisDestination[i3].RoleArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.KinesisDestination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KinesisDestination[i3].StreamArn),
			Extract:      resource.ExtractParamPath("arn", false),
			Reference:    mg.Spec.InitProvider.KinesisDestination[i3].StreamArnRef,
			Selector:     mg.Spec.InitProvider.KinesisDestination[i3].StreamArnSelector,
			To: reference.To{
				List:    &v1beta11.DeliveryStreamList{},
				Managed: &v1beta11.DeliveryStream{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KinesisDestination[i3].StreamArn")
		}
		mg.Spec.InitProvider.KinesisDestination[i3].StreamArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KinesisDestination[i3].StreamArnRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.SnsDestination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnsDestination[i3].TopicArn),
			Extract:      resource.ExtractParamPath("arn", true),
			Reference:    mg.Spec.InitProvider.SnsDestination[i3].TopicArnRef,
			Selector:     mg.Spec.InitProvider.SnsDestination[i3].TopicArnSelector,
			To: reference.To{
				List:    &v1beta12.TopicList{},
				Managed: &v1beta12.Topic{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SnsDestination[i3].TopicArn")
		}
		mg.Spec.InitProvider.SnsDestination[i3].TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SnsDestination[i3].TopicArnRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IdentityNotificationTopic.
func (mg *IdentityNotificationTopic) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Identity),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IdentityRef,
		Selector:     mg.Spec.ForProvider.IdentitySelector,
		To: reference.To{
			List:    &DomainIdentityList{},
			Managed: &DomainIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Identity")
	}
	mg.Spec.ForProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IdentityRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.TopicArnRef,
		Selector:     mg.Spec.ForProvider.TopicArnSelector,
		To: reference.To{
			List:    &v1beta12.TopicList{},
			Managed: &v1beta12.Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicArn")
	}
	mg.Spec.ForProvider.TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicArnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Identity),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.IdentityRef,
		Selector:     mg.Spec.InitProvider.IdentitySelector,
		To: reference.To{
			List:    &DomainIdentityList{},
			Managed: &DomainIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Identity")
	}
	mg.Spec.InitProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IdentityRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.InitProvider.TopicArnRef,
		Selector:     mg.Spec.InitProvider.TopicArnSelector,
		To: reference.To{
			List:    &v1beta12.TopicList{},
			Managed: &v1beta12.Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicArn")
	}
	mg.Spec.InitProvider.TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityPolicy.
func (mg *IdentityPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Identity),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.IdentityRef,
		Selector:     mg.Spec.ForProvider.IdentitySelector,
		To: reference.To{
			List:    &DomainIdentityList{},
			Managed: &DomainIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Identity")
	}
	mg.Spec.ForProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IdentityRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Identity),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.InitProvider.IdentityRef,
		Selector:     mg.Spec.InitProvider.IdentitySelector,
		To: reference.To{
			List:    &DomainIdentityList{},
			Managed: &DomainIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Identity")
	}
	mg.Spec.InitProvider.Identity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IdentityRef = rsp.ResolvedReference

	return nil
}
