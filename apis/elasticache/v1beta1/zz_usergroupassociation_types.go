// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserGroupAssociationInitParameters struct {

	// The ID of the user group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elasticache/v1beta1.UserGroup
	UserGroupID *string `json:"userGroupId,omitempty" tf:"user_group_id,omitempty"`

	// Reference to a UserGroup in elasticache to populate userGroupId.
	// +kubebuilder:validation:Optional
	UserGroupIDRef *v1.Reference `json:"userGroupIdRef,omitempty" tf:"-"`

	// Selector for a UserGroup in elasticache to populate userGroupId.
	// +kubebuilder:validation:Optional
	UserGroupIDSelector *v1.Selector `json:"userGroupIdSelector,omitempty" tf:"-"`

	// ID of the user to associated with the user group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elasticache/v1beta2.User
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in elasticache to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in elasticache to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

type UserGroupAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the user group.
	UserGroupID *string `json:"userGroupId,omitempty" tf:"user_group_id,omitempty"`

	// ID of the user to associated with the user group.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type UserGroupAssociationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The ID of the user group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elasticache/v1beta1.UserGroup
	// +kubebuilder:validation:Optional
	UserGroupID *string `json:"userGroupId,omitempty" tf:"user_group_id,omitempty"`

	// Reference to a UserGroup in elasticache to populate userGroupId.
	// +kubebuilder:validation:Optional
	UserGroupIDRef *v1.Reference `json:"userGroupIdRef,omitempty" tf:"-"`

	// Selector for a UserGroup in elasticache to populate userGroupId.
	// +kubebuilder:validation:Optional
	UserGroupIDSelector *v1.Selector `json:"userGroupIdSelector,omitempty" tf:"-"`

	// ID of the user to associated with the user group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elasticache/v1beta2.User
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in elasticache to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in elasticache to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

// UserGroupAssociationSpec defines the desired state of UserGroupAssociation
type UserGroupAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserGroupAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserGroupAssociationInitParameters `json:"initProvider,omitempty"`
}

// UserGroupAssociationStatus defines the observed state of UserGroupAssociation.
type UserGroupAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserGroupAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserGroupAssociation is the Schema for the UserGroupAssociations API. Associate an ElastiCache user and user group.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type UserGroupAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserGroupAssociationSpec   `json:"spec"`
	Status            UserGroupAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserGroupAssociationList contains a list of UserGroupAssociations
type UserGroupAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserGroupAssociation `json:"items"`
}

// Repository type metadata.
var (
	UserGroupAssociation_Kind             = "UserGroupAssociation"
	UserGroupAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserGroupAssociation_Kind}.String()
	UserGroupAssociation_KindAPIVersion   = UserGroupAssociation_Kind + "." + CRDGroupVersion.String()
	UserGroupAssociation_GroupVersionKind = CRDGroupVersion.WithKind(UserGroupAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&UserGroupAssociation{}, &UserGroupAssociationList{})
}
